
build/debug/CawDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080061b8  080061b8  000071b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006238  08006238  00007238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006240  08006240  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006244  08006244  00007244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006248  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046d4  20000060  080062a8  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004734  080062a8  00008734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029df5  00000000  00000000  000080c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005faf  00000000  00000000  00031ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00013689  00000000  00000000  00037e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c70  00000000  00000000  0004b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000166e  00000000  00000000  0004d168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022e84  00000000  00000000  0004e7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008c1c  00000000  00000000  0007165a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c80  00000000  00000000  0007a278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000017f  00000000  00000000  0007eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b80c 	b.w	8000200 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f005 fe5a 	bl	8005ea8 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__aeabi_idiv0>:
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c05      	ldr	r4, [pc, #20]	@ (800021c <__do_global_dtors_aux+0x18>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b933      	cbnz	r3, 800021a <__do_global_dtors_aux+0x16>
 800020c:	4b04      	ldr	r3, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x1c>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x12>
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000060 	.word	0x20000060
 8000220:	00000000 	.word	0x00000000
 8000224:	080061a0 	.word	0x080061a0

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <frame_dummy+0x10>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4903      	ldr	r1, [pc, #12]	@ (800023c <frame_dummy+0x14>)
 8000230:	4803      	ldr	r0, [pc, #12]	@ (8000240 <frame_dummy+0x18>)
 8000232:	f3af 8000 	nop.w
 8000236:	bd08      	pop	{r3, pc}
 8000238:	00000000 	.word	0x00000000
 800023c:	20000064 	.word	0x20000064
 8000240:	080061a0 	.word	0x080061a0

08000244 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000248:	2400      	movs	r4, #0
 800024a:	9408      	str	r4, [sp, #32]
 800024c:	9409      	str	r4, [sp, #36]	@ 0x24
 800024e:	940a      	str	r4, [sp, #40]	@ 0x28
 8000250:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000252:	2220      	movs	r2, #32
 8000254:	4621      	mov	r1, r4
 8000256:	4668      	mov	r0, sp
 8000258:	f005 fcb5 	bl	8005bc6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800025c:	4820      	ldr	r0, [pc, #128]	@ (80002e0 <MX_ADC1_Init+0x9c>)
 800025e:	4b21      	ldr	r3, [pc, #132]	@ (80002e4 <MX_ADC1_Init+0xa0>)
 8000260:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000266:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000268:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800026a:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026c:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800026e:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000272:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000274:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <MX_ADC1_Init+0xa4>)
 8000276:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000278:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800027a:	2301      	movs	r3, #1
 800027c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800027e:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000282:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000284:	f001 fb8c 	bl	80019a0 <HAL_ADC_Init>
 8000288:	bb00      	cbnz	r0, 80002cc <MX_ADC1_Init+0x88>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800028a:	230a      	movs	r3, #10
 800028c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 800028e:	2301      	movs	r3, #1
 8000290:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000292:	2300      	movs	r3, #0
 8000294:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000296:	a908      	add	r1, sp, #32
 8000298:	4811      	ldr	r0, [pc, #68]	@ (80002e0 <MX_ADC1_Init+0x9c>)
 800029a:	f001 fd53 	bl	8001d44 <HAL_ADC_ConfigChannel>
 800029e:	b9c0      	cbnz	r0, 80002d2 <MX_ADC1_Init+0x8e>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 80002a4:	2201      	movs	r2, #1
 80002a6:	9201      	str	r2, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80002a8:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80002aa:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80002ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80002b0:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80002b2:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80002b4:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80002b8:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 80002bc:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002be:	4669      	mov	r1, sp
 80002c0:	4807      	ldr	r0, [pc, #28]	@ (80002e0 <MX_ADC1_Init+0x9c>)
 80002c2:	f001 fe9b 	bl	8001ffc <HAL_ADCEx_InjectedConfigChannel>
 80002c6:	b938      	cbnz	r0, 80002d8 <MX_ADC1_Init+0x94>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c8:	b00c      	add	sp, #48	@ 0x30
 80002ca:	bd10      	pop	{r4, pc}
    Error_Handler();
 80002cc:	f000 ff92 	bl	80011f4 <Error_Handler>
 80002d0:	e7db      	b.n	800028a <MX_ADC1_Init+0x46>
    Error_Handler();
 80002d2:	f000 ff8f 	bl	80011f4 <Error_Handler>
 80002d6:	e7e3      	b.n	80002a0 <MX_ADC1_Init+0x5c>
    Error_Handler();
 80002d8:	f000 ff8c 	bl	80011f4 <Error_Handler>
}
 80002dc:	e7f4      	b.n	80002c8 <MX_ADC1_Init+0x84>
 80002de:	bf00      	nop
 80002e0:	2000010c 	.word	0x2000010c
 80002e4:	40012000 	.word	0x40012000
 80002e8:	0f000001 	.word	0x0f000001

080002ec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002ec:	b510      	push	{r4, lr}
 80002ee:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f0:	2400      	movs	r4, #0
 80002f2:	9408      	str	r4, [sp, #32]
 80002f4:	9409      	str	r4, [sp, #36]	@ 0x24
 80002f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80002f8:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80002fa:	2220      	movs	r2, #32
 80002fc:	4621      	mov	r1, r4
 80002fe:	4668      	mov	r0, sp
 8000300:	f005 fc61 	bl	8005bc6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000304:	4820      	ldr	r0, [pc, #128]	@ (8000388 <MX_ADC2_Init+0x9c>)
 8000306:	4b21      	ldr	r3, [pc, #132]	@ (800038c <MX_ADC2_Init+0xa0>)
 8000308:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800030a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030e:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000310:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000312:	6104      	str	r4, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000314:	7604      	strb	r4, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000316:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800031a:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031c:	4b1c      	ldr	r3, [pc, #112]	@ (8000390 <MX_ADC2_Init+0xa4>)
 800031e:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000320:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000322:	2301      	movs	r3, #1
 8000324:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000326:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032a:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800032c:	f001 fb38 	bl	80019a0 <HAL_ADC_Init>
 8000330:	bb00      	cbnz	r0, 8000374 <MX_ADC2_Init+0x88>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000332:	2309      	movs	r3, #9
 8000334:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000336:	2301      	movs	r3, #1
 8000338:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800033a:	2300      	movs	r3, #0
 800033c:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800033e:	a908      	add	r1, sp, #32
 8000340:	4811      	ldr	r0, [pc, #68]	@ (8000388 <MX_ADC2_Init+0x9c>)
 8000342:	f001 fcff 	bl	8001d44 <HAL_ADC_ConfigChannel>
 8000346:	b9c0      	cbnz	r0, 800037a <MX_ADC2_Init+0x8e>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000348:	2301      	movs	r3, #1
 800034a:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 800034c:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800034e:	9304      	str	r3, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000350:	2300      	movs	r3, #0
 8000352:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000354:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000358:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800035a:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800035c:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000360:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000364:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000366:	4669      	mov	r1, sp
 8000368:	4807      	ldr	r0, [pc, #28]	@ (8000388 <MX_ADC2_Init+0x9c>)
 800036a:	f001 fe47 	bl	8001ffc <HAL_ADCEx_InjectedConfigChannel>
 800036e:	b938      	cbnz	r0, 8000380 <MX_ADC2_Init+0x94>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000370:	b00c      	add	sp, #48	@ 0x30
 8000372:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000374:	f000 ff3e 	bl	80011f4 <Error_Handler>
 8000378:	e7db      	b.n	8000332 <MX_ADC2_Init+0x46>
    Error_Handler();
 800037a:	f000 ff3b 	bl	80011f4 <Error_Handler>
 800037e:	e7e3      	b.n	8000348 <MX_ADC2_Init+0x5c>
    Error_Handler();
 8000380:	f000 ff38 	bl	80011f4 <Error_Handler>
}
 8000384:	e7f4      	b.n	8000370 <MX_ADC2_Init+0x84>
 8000386:	bf00      	nop
 8000388:	200000c4 	.word	0x200000c4
 800038c:	40012100 	.word	0x40012100
 8000390:	0f000001 	.word	0x0f000001

08000394 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000394:	b510      	push	{r4, lr}
 8000396:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000398:	2400      	movs	r4, #0
 800039a:	9408      	str	r4, [sp, #32]
 800039c:	9409      	str	r4, [sp, #36]	@ 0x24
 800039e:	940a      	str	r4, [sp, #40]	@ 0x28
 80003a0:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80003a2:	2220      	movs	r2, #32
 80003a4:	4621      	mov	r1, r4
 80003a6:	4668      	mov	r0, sp
 80003a8:	f005 fc0d 	bl	8005bc6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80003ac:	4820      	ldr	r0, [pc, #128]	@ (8000430 <MX_ADC3_Init+0x9c>)
 80003ae:	4b21      	ldr	r3, [pc, #132]	@ (8000434 <MX_ADC3_Init+0xa0>)
 80003b0:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b6:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80003b8:	6084      	str	r4, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80003ba:	6104      	str	r4, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80003bc:	7604      	strb	r4, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80003be:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003c2:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000438 <MX_ADC3_Init+0xa4>)
 80003c6:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c8:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	61c3      	str	r3, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80003ce:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003d2:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80003d4:	f001 fae4 	bl	80019a0 <HAL_ADC_Init>
 80003d8:	bb08      	cbnz	r0, 800041e <MX_ADC3_Init+0x8a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003da:	2303      	movs	r3, #3
 80003dc:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 80003de:	2301      	movs	r3, #1
 80003e0:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80003e2:	2300      	movs	r3, #0
 80003e4:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80003e6:	a908      	add	r1, sp, #32
 80003e8:	4811      	ldr	r0, [pc, #68]	@ (8000430 <MX_ADC3_Init+0x9c>)
 80003ea:	f001 fcab 	bl	8001d44 <HAL_ADC_ConfigChannel>
 80003ee:	b9c8      	cbnz	r0, 8000424 <MX_ADC3_Init+0x90>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80003f0:	2302      	movs	r3, #2
 80003f2:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80003f8:	9304      	str	r3, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80003fa:	2300      	movs	r3, #0
 80003fc:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80003fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000402:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000404:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000406:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800040a:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 800040e:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000410:	4669      	mov	r1, sp
 8000412:	4807      	ldr	r0, [pc, #28]	@ (8000430 <MX_ADC3_Init+0x9c>)
 8000414:	f001 fdf2 	bl	8001ffc <HAL_ADCEx_InjectedConfigChannel>
 8000418:	b938      	cbnz	r0, 800042a <MX_ADC3_Init+0x96>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800041a:	b00c      	add	sp, #48	@ 0x30
 800041c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800041e:	f000 fee9 	bl	80011f4 <Error_Handler>
 8000422:	e7da      	b.n	80003da <MX_ADC3_Init+0x46>
    Error_Handler();
 8000424:	f000 fee6 	bl	80011f4 <Error_Handler>
 8000428:	e7e2      	b.n	80003f0 <MX_ADC3_Init+0x5c>
    Error_Handler();
 800042a:	f000 fee3 	bl	80011f4 <Error_Handler>
}
 800042e:	e7f4      	b.n	800041a <MX_ADC3_Init+0x86>
 8000430:	2000007c 	.word	0x2000007c
 8000434:	40012200 	.word	0x40012200
 8000438:	0f000001 	.word	0x0f000001

0800043c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800043c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043e:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	2300      	movs	r3, #0
 8000442:	9309      	str	r3, [sp, #36]	@ 0x24
 8000444:	930a      	str	r3, [sp, #40]	@ 0x28
 8000446:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000448:	930c      	str	r3, [sp, #48]	@ 0x30
 800044a:	930d      	str	r3, [sp, #52]	@ 0x34
  if(adcHandle->Instance==ADC1)
 800044c:	6803      	ldr	r3, [r0, #0]
 800044e:	4a52      	ldr	r2, [pc, #328]	@ (8000598 <HAL_ADC_MspInit+0x15c>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d007      	beq.n	8000464 <HAL_ADC_MspInit+0x28>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000454:	4a51      	ldr	r2, [pc, #324]	@ (800059c <HAL_ADC_MspInit+0x160>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d03d      	beq.n	80004d6 <HAL_ADC_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 800045a:	4a51      	ldr	r2, [pc, #324]	@ (80005a0 <HAL_ADC_MspInit+0x164>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d073      	beq.n	8000548 <HAL_ADC_MspInit+0x10c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000460:	b00f      	add	sp, #60	@ 0x3c
 8000462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000464:	2400      	movs	r4, #0
 8000466:	9401      	str	r4, [sp, #4]
 8000468:	4b4e      	ldr	r3, [pc, #312]	@ (80005a4 <HAL_ADC_MspInit+0x168>)
 800046a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800046c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000470:	645a      	str	r2, [r3, #68]	@ 0x44
 8000472:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000474:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000478:	9201      	str	r2, [sp, #4]
 800047a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800047c:	9402      	str	r4, [sp, #8]
 800047e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000480:	f042 0204 	orr.w	r2, r2, #4
 8000484:	631a      	str	r2, [r3, #48]	@ 0x30
 8000486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000488:	f002 0204 	and.w	r2, r2, #4
 800048c:	9202      	str	r2, [sp, #8]
 800048e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	9403      	str	r4, [sp, #12]
 8000492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000494:	f042 0201 	orr.w	r2, r2, #1
 8000498:	631a      	str	r2, [r3, #48]	@ 0x30
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	9303      	str	r3, [sp, #12]
 80004a2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a4:	2701      	movs	r7, #1
 80004a6:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a8:	2603      	movs	r6, #3
 80004aa:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ac:	ad09      	add	r5, sp, #36	@ 0x24
 80004ae:	4629      	mov	r1, r5
 80004b0:	483d      	ldr	r0, [pc, #244]	@ (80005a8 <HAL_ADC_MspInit+0x16c>)
 80004b2:	f002 fa15 	bl	80028e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004b6:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b8:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	4629      	mov	r1, r5
 80004be:	483b      	ldr	r0, [pc, #236]	@ (80005ac <HAL_ADC_MspInit+0x170>)
 80004c0:	f002 fa0e 	bl	80028e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80004c4:	4622      	mov	r2, r4
 80004c6:	2105      	movs	r1, #5
 80004c8:	2012      	movs	r0, #18
 80004ca:	f001 ff95 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80004ce:	2012      	movs	r0, #18
 80004d0:	f001 ffa2 	bl	8002418 <HAL_NVIC_EnableIRQ>
 80004d4:	e7c4      	b.n	8000460 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80004d6:	2400      	movs	r4, #0
 80004d8:	9404      	str	r4, [sp, #16]
 80004da:	4b32      	ldr	r3, [pc, #200]	@ (80005a4 <HAL_ADC_MspInit+0x168>)
 80004dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80004e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80004e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004e6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80004ea:	9204      	str	r2, [sp, #16]
 80004ec:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	9405      	str	r4, [sp, #20]
 80004f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004f2:	f042 0201 	orr.w	r2, r2, #1
 80004f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80004f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004fa:	f002 0201 	and.w	r2, r2, #1
 80004fe:	9205      	str	r2, [sp, #20]
 8000500:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	9406      	str	r4, [sp, #24]
 8000504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000506:	f042 0202 	orr.w	r2, r2, #2
 800050a:	631a      	str	r2, [r3, #48]	@ 0x30
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	9306      	str	r3, [sp, #24]
 8000514:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000516:	2702      	movs	r7, #2
 8000518:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051a:	2603      	movs	r6, #3
 800051c:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	ad09      	add	r5, sp, #36	@ 0x24
 8000520:	4629      	mov	r1, r5
 8000522:	4822      	ldr	r0, [pc, #136]	@ (80005ac <HAL_ADC_MspInit+0x170>)
 8000524:	f002 f9dc 	bl	80028e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000528:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052a:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	4629      	mov	r1, r5
 8000530:	481f      	ldr	r0, [pc, #124]	@ (80005b0 <HAL_ADC_MspInit+0x174>)
 8000532:	f002 f9d5 	bl	80028e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000536:	4622      	mov	r2, r4
 8000538:	2105      	movs	r1, #5
 800053a:	2012      	movs	r0, #18
 800053c:	f001 ff5c 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000540:	2012      	movs	r0, #18
 8000542:	f001 ff69 	bl	8002418 <HAL_NVIC_EnableIRQ>
 8000546:	e78b      	b.n	8000460 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000548:	2400      	movs	r4, #0
 800054a:	9407      	str	r4, [sp, #28]
 800054c:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <HAL_ADC_MspInit+0x168>)
 800054e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000554:	645a      	str	r2, [r3, #68]	@ 0x44
 8000556:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000558:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800055c:	9207      	str	r2, [sp, #28]
 800055e:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	9408      	str	r4, [sp, #32]
 8000562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000564:	f042 0201 	orr.w	r2, r2, #1
 8000568:	631a      	str	r2, [r3, #48]	@ 0x30
 800056a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	9308      	str	r3, [sp, #32]
 8000572:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000574:	230c      	movs	r3, #12
 8000576:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000578:	2303      	movs	r3, #3
 800057a:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	a909      	add	r1, sp, #36	@ 0x24
 800057e:	480b      	ldr	r0, [pc, #44]	@ (80005ac <HAL_ADC_MspInit+0x170>)
 8000580:	f002 f9ae 	bl	80028e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000584:	4622      	mov	r2, r4
 8000586:	2105      	movs	r1, #5
 8000588:	2012      	movs	r0, #18
 800058a:	f001 ff35 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800058e:	2012      	movs	r0, #18
 8000590:	f001 ff42 	bl	8002418 <HAL_NVIC_EnableIRQ>
}
 8000594:	e764      	b.n	8000460 <HAL_ADC_MspInit+0x24>
 8000596:	bf00      	nop
 8000598:	40012000 	.word	0x40012000
 800059c:	40012100 	.word	0x40012100
 80005a0:	40012200 	.word	0x40012200
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020800 	.word	0x40020800
 80005ac:	40020000 	.word	0x40020000
 80005b0:	40020400 	.word	0x40020400

080005b4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005b4:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005b6:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <MX_CAN1_Init+0x30>)
 80005b8:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <MX_CAN1_Init+0x34>)
 80005ba:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 80005bc:	2310      	movs	r3, #16
 80005be:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c4:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005c6:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005c8:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005ca:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005cc:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005ce:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005d0:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005d2:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005d4:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005d6:	f001 fe15 	bl	8002204 <HAL_CAN_Init>
 80005da:	b900      	cbnz	r0, 80005de <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005de:	f000 fe09 	bl	80011f4 <Error_Handler>
}
 80005e2:	e7fb      	b.n	80005dc <MX_CAN1_Init+0x28>
 80005e4:	20000154 	.word	0x20000154
 80005e8:	40006400 	.word	0x40006400

080005ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ec:	b500      	push	{lr}
 80005ee:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	2300      	movs	r3, #0
 80005f2:	9303      	str	r3, [sp, #12]
 80005f4:	9304      	str	r3, [sp, #16]
 80005f6:	9305      	str	r3, [sp, #20]
 80005f8:	9306      	str	r3, [sp, #24]
 80005fa:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 80005fc:	6802      	ldr	r2, [r0, #0]
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <HAL_CAN_MspInit+0x68>)
 8000600:	429a      	cmp	r2, r3
 8000602:	d002      	beq.n	800060a <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000604:	b009      	add	sp, #36	@ 0x24
 8000606:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800060a:	2100      	movs	r1, #0
 800060c:	9101      	str	r1, [sp, #4]
 800060e:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 8000612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000614:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000618:	641a      	str	r2, [r3, #64]	@ 0x40
 800061a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800061c:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000620:	9201      	str	r2, [sp, #4]
 8000622:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000628:	f042 0202 	orr.w	r2, r2, #2
 800062c:	631a      	str	r2, [r3, #48]	@ 0x30
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000638:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800063c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000642:	2303      	movs	r3, #3
 8000644:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000646:	2309      	movs	r3, #9
 8000648:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	a903      	add	r1, sp, #12
 800064c:	4802      	ldr	r0, [pc, #8]	@ (8000658 <HAL_CAN_MspInit+0x6c>)
 800064e:	f002 f947 	bl	80028e0 <HAL_GPIO_Init>
}
 8000652:	e7d7      	b.n	8000604 <HAL_CAN_MspInit+0x18>
 8000654:	40006400 	.word	0x40006400
 8000658:	40020400 	.word	0x40020400

0800065c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800065c:	2884      	cmp	r0, #132	@ 0x84
 800065e:	d001      	beq.n	8000664 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8000660:	3003      	adds	r0, #3
 8000662:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000664:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8000666:	4770      	bx	lr

08000668 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000668:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800066a:	f004 fe29 	bl	80052c0 <vTaskStartScheduler>
  
  return osOK;
}
 800066e:	2000      	movs	r0, #0
 8000670:	bd08      	pop	{r3, pc}

08000672 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000676:	b087      	sub	sp, #28
 8000678:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800067a:	6944      	ldr	r4, [r0, #20]
 800067c:	b1c4      	cbz	r4, 80006b0 <osThreadCreate+0x3e>
 800067e:	6985      	ldr	r5, [r0, #24]
 8000680:	b1b5      	cbz	r5, 80006b0 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000682:	6847      	ldr	r7, [r0, #4]
 8000684:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8000688:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800068c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8000690:	f7ff ffe4 	bl	800065c <makeFreeRtosPriority>
 8000694:	9502      	str	r5, [sp, #8]
 8000696:	9401      	str	r4, [sp, #4]
 8000698:	9000      	str	r0, [sp, #0]
 800069a:	4633      	mov	r3, r6
 800069c:	464a      	mov	r2, r9
 800069e:	4641      	mov	r1, r8
 80006a0:	4638      	mov	r0, r7
 80006a2:	f004 fd9f 	bl	80051e4 <xTaskCreateStatic>
 80006a6:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80006a8:	9805      	ldr	r0, [sp, #20]
}
 80006aa:	b007      	add	sp, #28
 80006ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80006b0:	6844      	ldr	r4, [r0, #4]
 80006b2:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80006b4:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80006b6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80006ba:	f7ff ffcf 	bl	800065c <makeFreeRtosPriority>
 80006be:	ab05      	add	r3, sp, #20
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	9000      	str	r0, [sp, #0]
 80006c4:	4633      	mov	r3, r6
 80006c6:	b2ba      	uxth	r2, r7
 80006c8:	4629      	mov	r1, r5
 80006ca:	4620      	mov	r0, r4
 80006cc:	f004 fdc5 	bl	800525a <xTaskCreate>
 80006d0:	2801      	cmp	r0, #1
 80006d2:	d0e9      	beq.n	80006a8 <osThreadCreate+0x36>
      return NULL;
 80006d4:	2000      	movs	r0, #0
 80006d6:	e7e8      	b.n	80006aa <osThreadCreate+0x38>

080006d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80006d8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80006da:	b900      	cbnz	r0, 80006de <osDelay+0x6>
 80006dc:	2001      	movs	r0, #1
 80006de:	f004 ff39 	bl	8005554 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80006e2:	2000      	movs	r0, #0
 80006e4:	bd08      	pop	{r3, pc}
	...

080006e8 <controller_init>:
#include "./vbus.h"

drv8323_t g_driver;
static uint8_t g_tmp[8] = {0, 0, 0, 0, 0, 0, 0x80, 0x7f};

void controller_init(void) {
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	b087      	sub	sp, #28
  /// 初始化串口
  dev_usart_init();
 80006ec:	f000 f972 	bl	80009d4 <dev_usart_init>

  /// 配置DRV8323

  // 使用PWM_MODE_3X控制时将互补引脚拉低
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80006f0:	4c34      	ldr	r4, [pc, #208]	@ (80007c4 <controller_init+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f8:	4620      	mov	r0, r4
 80006fa:	f002 f9e1 	bl	8002ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000704:	4620      	mov	r0, r4
 8000706:	f002 f9db 	bl	8002ac0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000710:	4620      	mov	r0, r4
 8000712:	f002 f9d5 	bl	8002ac0 <HAL_GPIO_WritePin>

  drv8323_init(&g_driver, &hspi3);
 8000716:	4e2c      	ldr	r6, [pc, #176]	@ (80007c8 <controller_init+0xe0>)
 8000718:	492c      	ldr	r1, [pc, #176]	@ (80007cc <controller_init+0xe4>)
 800071a:	4630      	mov	r0, r6
 800071c:	f000 f9f2 	bl	8000b04 <drv8323_init>
  drv8323_calibrate(&g_driver);
 8000720:	4630      	mov	r0, r6
 8000722:	f000 fa9b 	bl	8000c5c <drv8323_calibrate>
  HAL_Delay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f001 f88c 	bl	8001844 <HAL_Delay>
  drv8323_write_dcr(&g_driver, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0,
 800072c:	2501      	movs	r5, #1
 800072e:	9505      	str	r5, [sp, #20]
 8000730:	2400      	movs	r4, #0
 8000732:	9404      	str	r4, [sp, #16]
 8000734:	9403      	str	r4, [sp, #12]
 8000736:	9402      	str	r4, [sp, #8]
 8000738:	9401      	str	r4, [sp, #4]
 800073a:	9500      	str	r5, [sp, #0]
 800073c:	4623      	mov	r3, r4
 800073e:	462a      	mov	r2, r5
 8000740:	4621      	mov	r1, r4
 8000742:	4630      	mov	r0, r6
 8000744:	f000 fa10 	bl	8000b68 <drv8323_write_dcr>
                    0x0, 0x0, 0x1);
  HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 f87b 	bl	8001844 <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1,
 800074e:	2703      	movs	r7, #3
 8000750:	9705      	str	r7, [sp, #20]
 8000752:	9504      	str	r5, [sp, #16]
 8000754:	9503      	str	r5, [sp, #12]
 8000756:	9502      	str	r5, [sp, #8]
 8000758:	9401      	str	r4, [sp, #4]
 800075a:	9700      	str	r7, [sp, #0]
 800075c:	4623      	mov	r3, r4
 800075e:	462a      	mov	r2, r5
 8000760:	4621      	mov	r1, r4
 8000762:	4630      	mov	r0, r6
 8000764:	f000 fa42 	bl	8000bec <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f001 f86b 	bl	8001844 <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0,
 800076e:	9705      	str	r7, [sp, #20]
 8000770:	9404      	str	r4, [sp, #16]
 8000772:	9403      	str	r4, [sp, #12]
 8000774:	9402      	str	r4, [sp, #8]
 8000776:	9501      	str	r5, [sp, #4]
 8000778:	9700      	str	r7, [sp, #0]
 800077a:	4623      	mov	r3, r4
 800077c:	462a      	mov	r2, r5
 800077e:	4621      	mov	r1, r4
 8000780:	4630      	mov	r0, r6
 8000782:	f000 fa33 	bl	8000bec <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 8000786:	200a      	movs	r0, #10
 8000788:	f001 f85c 	bl	8001844 <HAL_Delay>
  drv8323_write_ocpcr(&g_driver, TRETRY_50US, DEADTIME_50NS, OCP_NONE,
 800078c:	230f      	movs	r3, #15
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	9700      	str	r7, [sp, #0]
 8000792:	463b      	mov	r3, r7
 8000794:	4622      	mov	r2, r4
 8000796:	4629      	mov	r1, r5
 8000798:	4630      	mov	r0, r6
 800079a:	f000 fa10 	bl	8000bbe <drv8323_write_ocpcr>
                      OCP_DEG_8US, VDS_LVL_1_88);
  drv8323_enable_gd(&g_driver);
 800079e:	4630      	mov	r0, r6
 80007a0:	f000 fa4f 	bl	8000c42 <drv8323_enable_gd>
  HAL_Delay(10);
 80007a4:	200a      	movs	r0, #10
 80007a6:	f001 f84d 	bl	8001844 <HAL_Delay>
  current_init();
 80007aa:	f000 f8fb 	bl	80009a4 <current_init>
  vbus_init();
 80007ae:	f005 f9d9 	bl	8005b64 <vbus_init>
  pwm_init();
 80007b2:	f000 ff2d 	bl	8001610 <pwm_init>
  hall_init();
 80007b6:	f000 fb41 	bl	8000e3c <hall_init>

  state_set(STATE_IDLE);
 80007ba:	4628      	mov	r0, r5
 80007bc:	f000 ff92 	bl	80016e4 <state_set>
}
 80007c0:	b007      	add	sp, #28
 80007c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c4:	40020400 	.word	0x40020400
 80007c8:	2000017c 	.word	0x2000017c
 80007cc:	2000428c 	.word	0x2000428c

080007d0 <controller_step>:

void controller_step(void) {
 80007d0:	b508      	push	{r3, lr}
  float temp = temp_get();
 80007d2:	f004 ff31 	bl	8005638 <temp_get>
  // memcpy(g_tmp, &temp, sizeof(temp));
  // dev_usart_write(g_tmp, sizeof(g_tmp));
 80007d6:	bd08      	pop	{r3, pc}

080007d8 <HAL_ADCEx_InjectedConvCpltCallback>:
static float g_current[3] = {0.0f, 0.0f, 0.0f};

static uint8_t g_tmp[16] = {0, 0, 0, 0, 0, 0, 0,    0,
                            0, 0, 0, 0, 0, 0, 0x80, 0x7f};

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80007d8:	b508      	push	{r3, lr}
  static int16_t adc1_cnt = 0;
  static int16_t adc2_cnt = 0;
  static int16_t adc3_cnd = 0;

  if (ADC1 == hadc->Instance) {
 80007da:	6803      	ldr	r3, [r0, #0]
 80007dc:	4a5b      	ldr	r2, [pc, #364]	@ (800094c <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d013      	beq.n	800080a <HAL_ADCEx_InjectedConvCpltCallback+0x32>
        g_adc1_state = 1;
      }
    } else {
      g_ia = (adc1_in0 - g_ia_offset) * g_gain;
    }
  } else if (ADC2 == hadc->Instance) {
 80007e2:	4a5b      	ldr	r2, [pc, #364]	@ (8000950 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d040      	beq.n	800086a <HAL_ADCEx_InjectedConvCpltCallback+0x92>
        g_adc2_state = 1;
      }
    } else {
      g_ib = (adc2_in1 - g_ib_offset) * g_gain;
    }
  } else if (ADC3 == hadc->Instance) {
 80007e8:	4a5a      	ldr	r2, [pc, #360]	@ (8000954 <HAL_ADCEx_InjectedConvCpltCallback+0x17c>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d06d      	beq.n	80008ca <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
    } else {
      g_ic = (adc3_in2 - g_ic_offset) * g_gain;
    }
  }

  if (!g_adc1_state || !g_adc2_state || !g_adc3_state) {
 80007ee:	4a5a      	ldr	r2, [pc, #360]	@ (8000958 <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	b14a      	cbz	r2, 8000808 <HAL_ADCEx_InjectedConvCpltCallback+0x30>
 80007f4:	4a59      	ldr	r2, [pc, #356]	@ (800095c <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	b132      	cbz	r2, 8000808 <HAL_ADCEx_InjectedConvCpltCallback+0x30>
 80007fa:	4a59      	ldr	r2, [pc, #356]	@ (8000960 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	b11a      	cbz	r2, 8000808 <HAL_ADCEx_InjectedConvCpltCallback+0x30>
    return;
  }

  if (ADC1 == hadc->Instance) {
 8000800:	4a52      	ldr	r2, [pc, #328]	@ (800094c <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 8000802:	4293      	cmp	r3, r2
 8000804:	f000 8092 	beq.w	800092c <HAL_ADCEx_InjectedConvCpltCallback+0x154>
    g_current[2] = g_ic;

    // memcpy(g_tmp, g_current, sizeof(g_current));
    // dev_usart_write(g_tmp, sizeof(g_tmp));
  }
}
 8000808:	bd08      	pop	{r3, pc}
    float adc1_in0 = hadc1.Instance->JDR1;
 800080a:	4a56      	ldr	r2, [pc, #344]	@ (8000964 <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8000812:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (0 == g_adc1_state) {
 8000816:	4a50      	ldr	r2, [pc, #320]	@ (8000958 <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	b9c2      	cbnz	r2, 800084e <HAL_ADCEx_InjectedConvCpltCallback+0x76>
      g_ia_offset += adc1_in0;
 800081c:	4a52      	ldr	r2, [pc, #328]	@ (8000968 <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 800081e:	ed92 7a00 	vldr	s14, [r2]
 8000822:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000826:	edc2 7a00 	vstr	s15, [r2]
      if (100 == ++adc1_cnt) {
 800082a:	4950      	ldr	r1, [pc, #320]	@ (800096c <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 800082c:	880a      	ldrh	r2, [r1, #0]
 800082e:	3201      	adds	r2, #1
 8000830:	b212      	sxth	r2, r2
 8000832:	800a      	strh	r2, [r1, #0]
 8000834:	2a64      	cmp	r2, #100	@ 0x64
 8000836:	d1da      	bne.n	80007ee <HAL_ADCEx_InjectedConvCpltCallback+0x16>
        g_ia_offset /= 100.0f;
 8000838:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8000970 <HAL_ADCEx_InjectedConvCpltCallback+0x198>
 800083c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000840:	4a49      	ldr	r2, [pc, #292]	@ (8000968 <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 8000842:	ed82 7a00 	vstr	s14, [r2]
        g_adc1_state = 1;
 8000846:	4a44      	ldr	r2, [pc, #272]	@ (8000958 <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 8000848:	2101      	movs	r1, #1
 800084a:	7011      	strb	r1, [r2, #0]
 800084c:	e7cf      	b.n	80007ee <HAL_ADCEx_InjectedConvCpltCallback+0x16>
      g_ia = (adc1_in0 - g_ia_offset) * g_gain;
 800084e:	4a46      	ldr	r2, [pc, #280]	@ (8000968 <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 8000850:	ed92 7a00 	vldr	s14, [r2]
 8000854:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000858:	4a46      	ldr	r2, [pc, #280]	@ (8000974 <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 800085a:	ed92 7a00 	vldr	s14, [r2]
 800085e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000862:	4a45      	ldr	r2, [pc, #276]	@ (8000978 <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 8000864:	edc2 7a00 	vstr	s15, [r2]
 8000868:	e7c1      	b.n	80007ee <HAL_ADCEx_InjectedConvCpltCallback+0x16>
    float adc2_in1 = hadc2.Instance->JDR1;
 800086a:	4a44      	ldr	r2, [pc, #272]	@ (800097c <HAL_ADCEx_InjectedConvCpltCallback+0x1a4>)
 800086c:	6812      	ldr	r2, [r2, #0]
 800086e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8000872:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (0 == g_adc2_state) {
 8000876:	4a39      	ldr	r2, [pc, #228]	@ (800095c <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	b9c2      	cbnz	r2, 80008ae <HAL_ADCEx_InjectedConvCpltCallback+0xd6>
      g_ib_offset += adc2_in1;
 800087c:	4a40      	ldr	r2, [pc, #256]	@ (8000980 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 800087e:	ed92 7a00 	vldr	s14, [r2]
 8000882:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000886:	edc2 7a00 	vstr	s15, [r2]
      if (100 == ++adc2_cnt) {
 800088a:	493e      	ldr	r1, [pc, #248]	@ (8000984 <HAL_ADCEx_InjectedConvCpltCallback+0x1ac>)
 800088c:	880a      	ldrh	r2, [r1, #0]
 800088e:	3201      	adds	r2, #1
 8000890:	b212      	sxth	r2, r2
 8000892:	800a      	strh	r2, [r1, #0]
 8000894:	2a64      	cmp	r2, #100	@ 0x64
 8000896:	d1aa      	bne.n	80007ee <HAL_ADCEx_InjectedConvCpltCallback+0x16>
        g_ib_offset /= 100.0f;
 8000898:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8000970 <HAL_ADCEx_InjectedConvCpltCallback+0x198>
 800089c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008a0:	4a37      	ldr	r2, [pc, #220]	@ (8000980 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 80008a2:	ed82 7a00 	vstr	s14, [r2]
        g_adc2_state = 1;
 80008a6:	4a2d      	ldr	r2, [pc, #180]	@ (800095c <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	7011      	strb	r1, [r2, #0]
 80008ac:	e79f      	b.n	80007ee <HAL_ADCEx_InjectedConvCpltCallback+0x16>
      g_ib = (adc2_in1 - g_ib_offset) * g_gain;
 80008ae:	4a34      	ldr	r2, [pc, #208]	@ (8000980 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 80008b0:	ed92 7a00 	vldr	s14, [r2]
 80008b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000974 <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 80008ba:	ed92 7a00 	vldr	s14, [r2]
 80008be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008c2:	4a31      	ldr	r2, [pc, #196]	@ (8000988 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 80008c4:	edc2 7a00 	vstr	s15, [r2]
 80008c8:	e791      	b.n	80007ee <HAL_ADCEx_InjectedConvCpltCallback+0x16>
    float adc3_in2 = hadc3.Instance->JDR1;
 80008ca:	4a30      	ldr	r2, [pc, #192]	@ (800098c <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 80008cc:	6812      	ldr	r2, [r2, #0]
 80008ce:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80008d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (0 == g_adc3_state) {
 80008d6:	4a22      	ldr	r2, [pc, #136]	@ (8000960 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	b9ca      	cbnz	r2, 8000910 <HAL_ADCEx_InjectedConvCpltCallback+0x138>
      g_ic_offset += adc3_in2;
 80008dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000990 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80008de:	ed92 7a00 	vldr	s14, [r2]
 80008e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008e6:	edc2 7a00 	vstr	s15, [r2]
      if (100 == ++adc3_cnd) {
 80008ea:	492a      	ldr	r1, [pc, #168]	@ (8000994 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 80008ec:	880a      	ldrh	r2, [r1, #0]
 80008ee:	3201      	adds	r2, #1
 80008f0:	b212      	sxth	r2, r2
 80008f2:	800a      	strh	r2, [r1, #0]
 80008f4:	2a64      	cmp	r2, #100	@ 0x64
 80008f6:	f47f af7a 	bne.w	80007ee <HAL_ADCEx_InjectedConvCpltCallback+0x16>
        g_ic_offset /= 100.0f;
 80008fa:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000970 <HAL_ADCEx_InjectedConvCpltCallback+0x198>
 80008fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000902:	4a23      	ldr	r2, [pc, #140]	@ (8000990 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8000904:	ed82 7a00 	vstr	s14, [r2]
        g_adc3_state = 1;
 8000908:	4a15      	ldr	r2, [pc, #84]	@ (8000960 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 800090a:	2101      	movs	r1, #1
 800090c:	7011      	strb	r1, [r2, #0]
 800090e:	e76e      	b.n	80007ee <HAL_ADCEx_InjectedConvCpltCallback+0x16>
      g_ic = (adc3_in2 - g_ic_offset) * g_gain;
 8000910:	4a1f      	ldr	r2, [pc, #124]	@ (8000990 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8000912:	ed92 7a00 	vldr	s14, [r2]
 8000916:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800091a:	4a16      	ldr	r2, [pc, #88]	@ (8000974 <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 800091c:	ed92 7a00 	vldr	s14, [r2]
 8000920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000924:	4a1c      	ldr	r2, [pc, #112]	@ (8000998 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 8000926:	edc2 7a00 	vstr	s15, [r2]
 800092a:	e760      	b.n	80007ee <HAL_ADCEx_InjectedConvCpltCallback+0x16>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800092c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000930:	481a      	ldr	r0, [pc, #104]	@ (800099c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8000932:	f002 f8cb 	bl	8002acc <HAL_GPIO_TogglePin>
    g_current[0] = g_ia;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 8000938:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 800093a:	6812      	ldr	r2, [r2, #0]
 800093c:	601a      	str	r2, [r3, #0]
    g_current[1] = g_ib;
 800093e:	4a12      	ldr	r2, [pc, #72]	@ (8000988 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 8000940:	6812      	ldr	r2, [r2, #0]
 8000942:	605a      	str	r2, [r3, #4]
    g_current[2] = g_ic;
 8000944:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	e75d      	b.n	8000808 <HAL_ADCEx_InjectedConvCpltCallback+0x30>
 800094c:	40012000 	.word	0x40012000
 8000950:	40012100 	.word	0x40012100
 8000954:	40012200 	.word	0x40012200
 8000958:	20000196 	.word	0x20000196
 800095c:	20000195 	.word	0x20000195
 8000960:	20000194 	.word	0x20000194
 8000964:	2000010c 	.word	0x2000010c
 8000968:	200001b0 	.word	0x200001b0
 800096c:	20000184 	.word	0x20000184
 8000970:	42c80000 	.word	0x42c80000
 8000974:	200001a4 	.word	0x200001a4
 8000978:	200001a0 	.word	0x200001a0
 800097c:	200000c4 	.word	0x200000c4
 8000980:	200001ac 	.word	0x200001ac
 8000984:	20000182 	.word	0x20000182
 8000988:	2000019c 	.word	0x2000019c
 800098c:	2000007c 	.word	0x2000007c
 8000990:	200001a8 	.word	0x200001a8
 8000994:	20000180 	.word	0x20000180
 8000998:	20000198 	.word	0x20000198
 800099c:	40020800 	.word	0x40020800
 80009a0:	20000188 	.word	0x20000188

080009a4 <current_init>:

void current_init(void) {
 80009a4:	b508      	push	{r3, lr}
  // 计算增益(计算出电压值 除以 采样电阻值 除以 放大倍数)
  g_gain = (ADC_VOLTAGE_REF / ADC_RESOLUTION) / (SHUNT_RESISTANCE * AMP_GAIN);
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <current_init+0x1c>)
 80009a8:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <current_init+0x20>)
 80009aa:	601a      	str	r2, [r3, #0]

  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80009ac:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <current_init+0x24>)
 80009ae:	f001 fa9f 	bl	8001ef0 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc2);
 80009b2:	4806      	ldr	r0, [pc, #24]	@ (80009cc <current_init+0x28>)
 80009b4:	f001 fa9c 	bl	8001ef0 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc3);
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <current_init+0x2c>)
 80009ba:	f001 fa99 	bl	8001ef0 <HAL_ADCEx_InjectedStart_IT>
}
 80009be:	bd08      	pop	{r3, pc}
 80009c0:	200001a4 	.word	0x200001a4
 80009c4:	3b840000 	.word	0x3b840000
 80009c8:	2000010c 	.word	0x2000010c
 80009cc:	200000c4 	.word	0x200000c4
 80009d0:	2000007c 	.word	0x2000007c

080009d4 <dev_usart_init>:
extern DMA_HandleTypeDef hdma_usart3_rx;

uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t rx_buffer[RX_BUFFER_SIZE];

int dev_usart_init(void) {
 80009d4:	b508      	push	{r3, lr}
  HAL_UART_Receive_DMA(&huart3, rx_buffer, RX_BUFFER_SIZE);
 80009d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009da:	4902      	ldr	r1, [pc, #8]	@ (80009e4 <dev_usart_init+0x10>)
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <dev_usart_init+0x14>)
 80009de:	f004 f9cd 	bl	8004d7c <HAL_UART_Receive_DMA>
}
 80009e2:	bd08      	pop	{r3, pc}
 80009e4:	200001b4 	.word	0x200001b4
 80009e8:	200045b0 	.word	0x200045b0

080009ec <dev_usart_write>:

int dev_usart_write(const uint8_t* buf, uint16_t size) {
  if (size > TX_BUFFER_SIZE) {
 80009ec:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80009f0:	d80d      	bhi.n	8000a0e <dev_usart_write+0x22>
int dev_usart_write(const uint8_t* buf, uint16_t size) {
 80009f2:	b538      	push	{r3, r4, r5, lr}
 80009f4:	460c      	mov	r4, r1
    return -1;  // 错误：数据长度超过缓冲区限制
  }
  memcpy(tx_buffer, buf, size);
 80009f6:	4d07      	ldr	r5, [pc, #28]	@ (8000a14 <dev_usart_write+0x28>)
 80009f8:	460a      	mov	r2, r1
 80009fa:	4601      	mov	r1, r0
 80009fc:	4628      	mov	r0, r5
 80009fe:	f005 f915 	bl	8005c2c <memcpy>
  return HAL_UART_Transmit_DMA(&huart3, tx_buffer, size);
 8000a02:	4622      	mov	r2, r4
 8000a04:	4629      	mov	r1, r5
 8000a06:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <dev_usart_write+0x2c>)
 8000a08:	f003 fea8 	bl	800475c <HAL_UART_Transmit_DMA>
}
 8000a0c:	bd38      	pop	{r3, r4, r5, pc}
    return -1;  // 错误：数据长度超过缓冲区限制
 8000a0e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000a12:	4770      	bx	lr
 8000a14:	200002b4 	.word	0x200002b4
 8000a18:	200045b0 	.word	0x200045b0

08000a1c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t size) {
  if (huart->Instance == USART3) {
  }
}
 8000a1c:	4770      	bx	lr
	...

08000a20 <HAL_UART_ErrorCallback>:

/// 下面错误处理函数中把奇偶校验错误以及数据溢出错误标志清除
/// 可以直接在调试时打断点查看huart->ErrorCode的值
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
  if (huart->Instance == USART3) {
 8000a20:	6803      	ldr	r3, [r0, #0]
 8000a22:	4a12      	ldr	r2, [pc, #72]	@ (8000a6c <HAL_UART_ErrorCallback+0x4c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d000      	beq.n	8000a2a <HAL_UART_ErrorCallback+0xa>
 8000a28:	4770      	bx	lr
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 8000a2a:	b500      	push	{lr}
 8000a2c:	b083      	sub	sp, #12
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	6819      	ldr	r1, [r3, #0]
 8000a34:	9100      	str	r1, [sp, #0]
 8000a36:	6859      	ldr	r1, [r3, #4]
 8000a38:	9100      	str	r1, [sp, #0]
 8000a3a:	9900      	ldr	r1, [sp, #0]
    __HAL_UART_CLEAR_PEFLAG(huart);
 8000a3c:	9201      	str	r2, [sp, #4]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	9201      	str	r2, [sp, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	9b01      	ldr	r3, [sp, #4]
    huart->RxState = HAL_UART_STATE_READY;
 8000a48:	2320      	movs	r3, #32
 8000a4a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buffer, RX_BUFFER_SIZE);
 8000a4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a52:	4907      	ldr	r1, [pc, #28]	@ (8000a70 <HAL_UART_ErrorCallback+0x50>)
 8000a54:	f004 f9a4 	bl	8004da0 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_UART_ErrorCallback+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	6813      	ldr	r3, [r2, #0]
 8000a5e:	f023 0308 	bic.w	r3, r3, #8
 8000a62:	6013      	str	r3, [r2, #0]
  }
 8000a64:	b003      	add	sp, #12
 8000a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a6a:	bf00      	nop
 8000a6c:	40004800 	.word	0x40004800
 8000a70:	200001b4 	.word	0x200001b4
 8000a74:	200044f0 	.word	0x200044f0

08000a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	9401      	str	r4, [sp, #4]
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <MX_DMA_Init+0x40>)
 8000a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a84:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000a88:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a94:	4622      	mov	r2, r4
 8000a96:	2105      	movs	r1, #5
 8000a98:	200c      	movs	r0, #12
 8000a9a:	f001 fcad 	bl	80023f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a9e:	200c      	movs	r0, #12
 8000aa0:	f001 fcba 	bl	8002418 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000aa4:	4622      	mov	r2, r4
 8000aa6:	2105      	movs	r1, #5
 8000aa8:	200e      	movs	r0, #14
 8000aaa:	f001 fca5 	bl	80023f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000aae:	200e      	movs	r0, #14
 8000ab0:	f001 fcb2 	bl	8002418 <HAL_NVIC_EnableIRQ>

}
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd10      	pop	{r4, pc}
 8000ab8:	40023800 	.word	0x40023800

08000abc <_SPI_WRITE>:
#define _CAL(x) HAL_GPIO_WritePin(DRV_CAL_GPIO_Port, DRV_CAL_Pin, x)

// SPI通讯NSS
#define _NSS(x) HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, x)

uint16_t _SPI_WRITE(drv8323_t* self, uint16_t data) {
 8000abc:	b530      	push	{r4, r5, lr}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	f8ad 100e 	strh.w	r1, [sp, #14]
  uint16_t ret;
  _NSS(0);
 8000ac6:	4d0e      	ldr	r5, [pc, #56]	@ (8000b00 <_SPI_WRITE+0x44>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2104      	movs	r1, #4
 8000acc:	4628      	mov	r0, r5
 8000ace:	f001 fff7 	bl	8002ac0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000ad2:	200a      	movs	r0, #10
 8000ad4:	f000 feb6 	bl	8001844 <HAL_Delay>
  HAL_StatusTypeDef sta = HAL_SPI_TransmitReceive(
 8000ad8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f10d 0216 	add.w	r2, sp, #22
 8000ae4:	f10d 010e 	add.w	r1, sp, #14
 8000ae8:	6820      	ldr	r0, [r4, #0]
 8000aea:	f002 fdd4 	bl	8003696 <HAL_SPI_TransmitReceive>
      self->hspi, (uint8_t*)&data, (uint8_t*)&ret, 1, DRV8323_SPI_TIMEOUT);
  if (HAL_OK != sta) {
    // warn("_SPI_WRITE FAILED: %d", sta);
  }
  _NSS(1);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2104      	movs	r1, #4
 8000af2:	4628      	mov	r0, r5
 8000af4:	f001 ffe4 	bl	8002ac0 <HAL_GPIO_WritePin>
  return ret;
}
 8000af8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8000afc:	b007      	add	sp, #28
 8000afe:	bd30      	pop	{r4, r5, pc}
 8000b00:	40020c00 	.word	0x40020c00

08000b04 <drv8323_init>:

int drv8323_init(drv8323_t* self, SPI_HandleTypeDef* spi) {
 8000b04:	b510      	push	{r4, lr}
  self->hspi = spi;
 8000b06:	6001      	str	r1, [r0, #0]
  _ENABLE(0);
 8000b08:	4c0e      	ldr	r4, [pc, #56]	@ (8000b44 <drv8323_init+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b10:	4620      	mov	r0, r4
 8000b12:	f001 ffd5 	bl	8002ac0 <HAL_GPIO_WritePin>
  _CAL(1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2180      	movs	r1, #128	@ 0x80
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f001 ffd0 	bl	8002ac0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b20:	200a      	movs	r0, #10
 8000b22:	f000 fe8f 	bl	8001844 <HAL_Delay>
  _ENABLE(1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f001 ffc7 	bl	8002ac0 <HAL_GPIO_WritePin>
  _CAL(0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2180      	movs	r1, #128	@ 0x80
 8000b36:	4620      	mov	r0, r4
 8000b38:	f001 ffc2 	bl	8002ac0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b3c:	200a      	movs	r0, #10
 8000b3e:	f000 fe81 	bl	8001844 <HAL_Delay>
}
 8000b42:	bd10      	pop	{r4, pc}
 8000b44:	40020800 	.word	0x40020800

08000b48 <drv8323_read_register>:
uint16_t drv8323_read_fsr2(drv8323_t* self) {
  uint16_t val = (1 << 15) | (FSR2 << 11);
  return _SPI_WRITE(self, val);
}

uint16_t drv8323_read_register(drv8323_t* self, uint16_t reg) {
 8000b48:	b508      	push	{r3, lr}
  uint16_t ret = _SPI_WRITE(self, (1 << 15) | (reg << 11));
 8000b4a:	ea6f 7101 	mvn.w	r1, r1, lsl #28
 8000b4e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000b52:	b289      	uxth	r1, r1
 8000b54:	f7ff ffb2 	bl	8000abc <_SPI_WRITE>
  return ret;
}
 8000b58:	bd08      	pop	{r3, pc}

08000b5a <drv8323_write_register>:

void drv8323_write_register(drv8323_t* self, uint16_t reg, uint16_t val) {
 8000b5a:	b508      	push	{r3, lr}
  _SPI_WRITE(self, (reg << 11) | val);
 8000b5c:	ea42 21c1 	orr.w	r1, r2, r1, lsl #11
 8000b60:	b289      	uxth	r1, r1
 8000b62:	f7ff ffab 	bl	8000abc <_SPI_WRITE>
}
 8000b66:	bd08      	pop	{r3, pc}

08000b68 <drv8323_write_dcr>:

void drv8323_write_dcr(drv8323_t* self, uint16_t dis_cpuv, uint16_t dis_gdf,
                       uint16_t otw_rep, uint16_t pwm_mode, uint16_t pwm_com,
                       uint16_t pwm_dir, uint16_t coast, uint16_t brake,
                       uint16_t clr_flt) {
 8000b68:	b508      	push	{r3, lr}
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 8000b6a:	0249      	lsls	r1, r1, #9
 8000b6c:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8000b70:	b209      	sxth	r1, r1
 8000b72:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b76:	b209      	sxth	r1, r1
 8000b78:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 8000b7c:	b21b      	sxth	r3, r3
                 (otw_rep << 7) | (pwm_mode << 5) | (pwm_com << 4) |
 8000b7e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8000b82:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000b8c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8000b96:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b9a:	b21b      	sxth	r3, r3
                 (pwm_dir << 3) | (coast << 2) | (brake << 1) | clr_flt;
 8000b9c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8000ba0:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8000baa:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8000bae:	b21b      	sxth	r3, r3
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 8000bb0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8000bb4:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 8000bb6:	b289      	uxth	r1, r1
 8000bb8:	f7ff ff80 	bl	8000abc <_SPI_WRITE>
}
 8000bbc:	bd08      	pop	{r3, pc}

08000bbe <drv8323_write_ocpcr>:
  _SPI_WRITE(self, val);
}

void drv8323_write_ocpcr(drv8323_t* self, uint16_t tretry, uint16_t dead_time,
                         uint16_t ocp_mode, uint16_t ocp_deg,
                         uint16_t vds_lvl) {
 8000bbe:	b508      	push	{r3, lr}
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 8000bc0:	0289      	lsls	r1, r1, #10
 8000bc2:	f441 5120 	orr.w	r1, r1, #10240	@ 0x2800
 8000bc6:	b209      	sxth	r1, r1
 8000bc8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000bcc:	b209      	sxth	r1, r1
 8000bce:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 8000bd2:	b21b      	sxth	r3, r3
                 (ocp_mode << 6) | (ocp_deg << 4) | vds_lvl;
 8000bd4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8000bd8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000bdc:	b21b      	sxth	r3, r3
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 8000bde:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000be2:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 8000be4:	b289      	uxth	r1, r1
 8000be6:	f7ff ff69 	bl	8000abc <_SPI_WRITE>
}
 8000bea:	bd08      	pop	{r3, pc}

08000bec <drv8323_write_csacr>:

void drv8323_write_csacr(drv8323_t* self, uint16_t csa_fet, uint16_t vref_div,
                         uint16_t ls_ref, uint16_t csa_gain, uint16_t dis_sen,
                         uint16_t csa_cal_a, uint16_t csa_cal_b,
                         uint16_t csa_cal_c, uint16_t sen_lvl) {
 8000bec:	b508      	push	{r3, lr}
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 8000bee:	0289      	lsls	r1, r1, #10
 8000bf0:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 8000bf4:	b209      	sxth	r1, r1
 8000bf6:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8000bfa:	b209      	sxth	r1, r1
 8000bfc:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8000c00:	b21b      	sxth	r3, r3
                 (ls_ref << 8) | (csa_gain << 6) | (dis_sen << 5) |
 8000c02:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8000c06:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000c10:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8000c1a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c1e:	b21b      	sxth	r3, r3
                 (csa_cal_a << 4) | (csa_cal_b << 3) | (csa_cal_c << 2) |
 8000c20:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8000c24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8000c2e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8000c32:	b21b      	sxth	r3, r3
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 8000c34:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8000c38:	4319      	orrs	r1, r3
                 sen_lvl;
  _SPI_WRITE(self, val);
 8000c3a:	b289      	uxth	r1, r1
 8000c3c:	f7ff ff3e 	bl	8000abc <_SPI_WRITE>
}
 8000c40:	bd08      	pop	{r3, pc}

08000c42 <drv8323_enable_gd>:

void drv8323_enable_gd(drv8323_t* self) {
 8000c42:	b510      	push	{r4, lr}
 8000c44:	4604      	mov	r4, r0
  uint16_t val = (drv8323_read_register(self, DCR)) & (~(0x1 << 2));
 8000c46:	2102      	movs	r1, #2
 8000c48:	f7ff ff7e 	bl	8000b48 <drv8323_read_register>
 8000c4c:	f020 0204 	bic.w	r2, r0, #4
 8000c50:	b292      	uxth	r2, r2
  drv8323_write_register(self, DCR, val);
 8000c52:	2102      	movs	r1, #2
 8000c54:	4620      	mov	r0, r4
 8000c56:	f7ff ff80 	bl	8000b5a <drv8323_write_register>
}
 8000c5a:	bd10      	pop	{r4, pc}

08000c5c <drv8323_calibrate>:
void drv8323_disable_gd(drv8323_t* self) {
  uint16_t val = (drv8323_read_register(self, DCR)) | (0x1 << 2);
  drv8323_write_register(self, DCR, val);
}

void drv8323_calibrate(drv8323_t* self) {
 8000c5c:	b508      	push	{r3, lr}
  uint16_t val = 0x1 << 4 + 0x1 << 3 + 0x1 << 2;
  drv8323_write_register(self, CSACR, val);
 8000c5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c62:	2106      	movs	r1, #6
 8000c64:	f7ff ff79 	bl	8000b5a <drv8323_write_register>
}
 8000c68:	bd08      	pop	{r3, pc}

08000c6a <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c6a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;) {
    controller_step();
 8000c6c:	f7ff fdb0 	bl	80007d0 <controller_step>
    osDelay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f7ff fd31 	bl	80006d8 <osDelay>
  for (;;) {
 8000c76:	e7f9      	b.n	8000c6c <StartDefaultTask+0x2>

08000c78 <StartStateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateTask */
void StartStateTask(void const * argument)
{
 8000c78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartStateTask */
  /* Infinite loop */
  for (;;) {
    state_step();
 8000c7a:	f000 fd69 	bl	8001750 <state_step>
    osDelay(100);
 8000c7e:	2064      	movs	r0, #100	@ 0x64
 8000c80:	f7ff fd2a 	bl	80006d8 <osDelay>
  for (;;) {
 8000c84:	e7f9      	b.n	8000c7a <StartStateTask+0x2>
	...

08000c88 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <vApplicationGetIdleTaskMemory+0x10>)
 8000c8a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <vApplicationGetIdleTaskMemory+0x14>)
 8000c8e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c90:	2380      	movs	r3, #128	@ 0x80
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	200005b4 	.word	0x200005b4
 8000c9c:	200003b4 	.word	0x200003b4

08000ca0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000ca0:	b510      	push	{r4, lr}
 8000ca2:	b08e      	sub	sp, #56	@ 0x38
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ca4:	4c12      	ldr	r4, [pc, #72]	@ (8000cf0 <MX_FREERTOS_Init+0x50>)
 8000ca6:	f10d 0c1c 	add.w	ip, sp, #28
 8000caa:	46a6      	mov	lr, r4
 8000cac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000cb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000cb4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000cb8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	a807      	add	r0, sp, #28
 8000cc0:	f7ff fcd7 	bl	8000672 <osThreadCreate>
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_FREERTOS_Init+0x54>)
 8000cc6:	6018      	str	r0, [r3, #0]
  osThreadDef(stateTask, StartStateTask, osPriorityNormal, 0, 128);
 8000cc8:	46ee      	mov	lr, sp
 8000cca:	f104 0c1c 	add.w	ip, r4, #28
 8000cce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000cd2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000cd6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8000cda:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  stateTaskHandle = osThreadCreate(osThread(stateTask), NULL);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4668      	mov	r0, sp
 8000ce2:	f7ff fcc6 	bl	8000672 <osThreadCreate>
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <MX_FREERTOS_Init+0x58>)
 8000ce8:	6018      	str	r0, [r3, #0]
}
 8000cea:	b00e      	add	sp, #56	@ 0x38
 8000cec:	bd10      	pop	{r4, pc}
 8000cee:	bf00      	nop
 8000cf0:	080061b8 	.word	0x080061b8
 8000cf4:	2000060c 	.word	0x2000060c
 8000cf8:	20000608 	.word	0x20000608

08000cfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d00:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	ad05      	add	r5, sp, #20
 8000d04:	2400      	movs	r4, #0
 8000d06:	9405      	str	r4, [sp, #20]
 8000d08:	9406      	str	r4, [sp, #24]
 8000d0a:	9407      	str	r4, [sp, #28]
 8000d0c:	9408      	str	r4, [sp, #32]
 8000d0e:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	9400      	str	r4, [sp, #0]
 8000d12:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d16:	f042 0204 	orr.w	r2, r2, #4
 8000d1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d1e:	f002 0204 	and.w	r2, r2, #4
 8000d22:	9200      	str	r2, [sp, #0]
 8000d24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	9401      	str	r4, [sp, #4]
 8000d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d32:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000d36:	9201      	str	r2, [sp, #4]
 8000d38:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	9402      	str	r4, [sp, #8]
 8000d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d3e:	f042 0201 	orr.w	r2, r2, #1
 8000d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d46:	f002 0201 	and.w	r2, r2, #1
 8000d4a:	9202      	str	r2, [sp, #8]
 8000d4c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	9403      	str	r4, [sp, #12]
 8000d50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d52:	f042 0202 	orr.w	r2, r2, #2
 8000d56:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d5a:	f002 0202 	and.w	r2, r2, #2
 8000d5e:	9203      	str	r2, [sp, #12]
 8000d60:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	9404      	str	r4, [sp, #16]
 8000d64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d66:	f042 0208 	orr.w	r2, r2, #8
 8000d6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	9304      	str	r3, [sp, #16]
 8000d74:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 8000d76:	4f2d      	ldr	r7, [pc, #180]	@ (8000e2c <MX_GPIO_Init+0x130>)
 8000d78:	4622      	mov	r2, r4
 8000d7a:	f242 11ce 	movw	r1, #8654	@ 0x21ce
 8000d7e:	4638      	mov	r0, r7
 8000d80:	f001 fe9e 	bl	8002ac0 <HAL_GPIO_WritePin>
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|ENCODER_CAL_Pin, GPIO_PIN_RESET);
 8000d84:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8000e30 <MX_GPIO_Init+0x134>
 8000d88:	4622      	mov	r2, r4
 8000d8a:	f248 0120 	movw	r1, #32800	@ 0x8020
 8000d8e:	4650      	mov	r0, sl
 8000d90:	f001 fe96 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|CAN_STB_Pin, GPIO_PIN_RESET);
 8000d94:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8000e34 <MX_GPIO_Init+0x138>
 8000d98:	4622      	mov	r2, r4
 8000d9a:	f24e 0120 	movw	r1, #57376	@ 0xe020
 8000d9e:	4640      	mov	r0, r8
 8000da0:	f001 fe8e 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_SET);
 8000da4:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000e38 <MX_GPIO_Init+0x13c>
 8000da8:	2201      	movs	r2, #1
 8000daa:	2104      	movs	r1, #4
 8000dac:	4648      	mov	r0, r9
 8000dae:	f001 fe87 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_SPI_NSS_GPIO_Port, ENCODER_SPI_NSS_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2108      	movs	r1, #8
 8000db6:	4640      	mov	r0, r8
 8000db8:	f001 fe82 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 LED_3_Pin LED_2_Pin LED_1_Pin
                           TIM1_BREAK_Pin DRV_CAL_Pin DRV_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 8000dbc:	f242 13ce 	movw	r3, #8654	@ 0x21ce
 8000dc0:	9305      	str	r3, [sp, #20]
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2601      	movs	r6, #1
 8000dc4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	4629      	mov	r1, r5
 8000dcc:	4638      	mov	r0, r7
 8000dce:	f001 fd87 	bl	80028e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 ENCODER_CAL_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|ENCODER_CAL_Pin;
 8000dd2:	f248 0320 	movw	r3, #32800	@ 0x8020
 8000dd6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	4629      	mov	r1, r5
 8000de0:	4650      	mov	r0, sl
 8000de2:	f001 fd7d 	bl	80028e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 ENCODER_SPI_NSS_Pin
                           CAN_STB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|ENCODER_SPI_NSS_Pin
 8000de6:	f24e 0328 	movw	r3, #57384	@ 0xe028
 8000dea:	9305      	str	r3, [sp, #20]
                          |CAN_STB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	4629      	mov	r1, r5
 8000df4:	4640      	mov	r0, r8
 8000df6:	f001 fd73 	bl	80028e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 8000dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e04:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000e08:	4629      	mov	r1, r5
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	f001 fd68 	bl	80028e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = DRV_SPI_NSS_Pin;
 8000e10:	2304      	movs	r3, #4
 8000e12:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DRV_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	4648      	mov	r0, r9
 8000e1e:	f001 fd5f 	bl	80028e0 <HAL_GPIO_Init>

}
 8000e22:	b00a      	add	sp, #40	@ 0x28
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020400 	.word	0x40020400
 8000e38:	40020c00 	.word	0x40020c00

08000e3c <hall_init>:
#include "./hall.h"

#include "dev_usart.h"
#include "tim.h"

void hall_init(void) { HAL_TIMEx_HallSensor_Start_IT(&htim3); }
 8000e3c:	b508      	push	{r3, lr}
 8000e3e:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <hall_init+0xc>)
 8000e40:	f003 fa3c 	bl	80042bc <HAL_TIMEx_HallSensor_Start_IT>
 8000e44:	bd08      	pop	{r3, pc}
 8000e46:	bf00      	nop
 8000e48:	20004460 	.word	0x20004460

08000e4c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000e4c:	b508      	push	{r3, lr}
  dev_usart_write("hello\r\n", 8);
 8000e4e:	2108      	movs	r1, #8
 8000e50:	4801      	ldr	r0, [pc, #4]	@ (8000e58 <HAL_TIM_IC_CaptureCallback+0xc>)
 8000e52:	f7ff fdcb 	bl	80009ec <dev_usart_write>
 8000e56:	bd08      	pop	{r3, pc}
 8000e58:	08006208 	.word	0x08006208

08000e5c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000e5c:	4a12      	ldr	r2, [pc, #72]	@ (8000ea8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000e5e:	f012 0f07 	tst.w	r2, #7
 8000e62:	d01e      	beq.n	8000ea2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000e64:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e66:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000e6a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8000e6e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e70:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000e72:	480e      	ldr	r0, [pc, #56]	@ (8000eac <prvHeapInit+0x50>)
 8000e74:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000e76:	2100      	movs	r1, #0
 8000e78:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000e7a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000e7c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e7e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8000e82:	480b      	ldr	r0, [pc, #44]	@ (8000eb0 <prvHeapInit+0x54>)
 8000e84:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8000e86:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000e88:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000e8a:	1a99      	subs	r1, r3, r2
 8000e8c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000e8e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <prvHeapInit+0x58>)
 8000e92:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <prvHeapInit+0x5c>)
 8000e96:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <prvHeapInit+0x60>)
 8000e9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000ea2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000ea6:	e7e4      	b.n	8000e72 <prvHeapInit+0x16>
 8000ea8:	20000630 	.word	0x20000630
 8000eac:	20000628 	.word	0x20000628
 8000eb0:	20000624 	.word	0x20000624
 8000eb4:	2000061c 	.word	0x2000061c
 8000eb8:	20000620 	.word	0x20000620
 8000ebc:	20000610 	.word	0x20000610

08000ec0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <prvInsertBlockIntoFreeList+0x5c>)
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4283      	cmp	r3, r0
 8000ec8:	d3fb      	bcc.n	8000ec2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000eca:	6851      	ldr	r1, [r2, #4]
 8000ecc:	eb02 0c01 	add.w	ip, r2, r1
 8000ed0:	4584      	cmp	ip, r0
 8000ed2:	d009      	beq.n	8000ee8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ed4:	6841      	ldr	r1, [r0, #4]
 8000ed6:	eb00 0c01 	add.w	ip, r0, r1
 8000eda:	4563      	cmp	r3, ip
 8000edc:	d009      	beq.n	8000ef2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ede:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	d019      	beq.n	8000f18 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ee4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8000ee6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ee8:	6840      	ldr	r0, [r0, #4]
 8000eea:	4401      	add	r1, r0
 8000eec:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8000eee:	4610      	mov	r0, r2
 8000ef0:	e7f0      	b.n	8000ed4 <prvInsertBlockIntoFreeList+0x14>
{
 8000ef2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f20 <prvInsertBlockIntoFreeList+0x60>)
 8000ef6:	6824      	ldr	r4, [r4, #0]
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d00b      	beq.n	8000f14 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	4419      	add	r1, r3
 8000f00:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000f02:	6813      	ldr	r3, [r2, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8000f08:	4290      	cmp	r0, r2
 8000f0a:	d000      	beq.n	8000f0e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f0c:	6010      	str	r0, [r2, #0]
	}
}
 8000f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f12:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000f14:	6004      	str	r4, [r0, #0]
 8000f16:	e7f7      	b.n	8000f08 <prvInsertBlockIntoFreeList+0x48>
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000628 	.word	0x20000628
 8000f20:	20000624 	.word	0x20000624

08000f24 <pvPortMalloc>:
{
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8000f28:	f004 fa04 	bl	8005334 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8000f2c:	4b38      	ldr	r3, [pc, #224]	@ (8001010 <pvPortMalloc+0xec>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	b1b3      	cbz	r3, 8000f60 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f32:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <pvPortMalloc+0xf0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	421c      	tst	r4, r3
 8000f38:	d150      	bne.n	8000fdc <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8000f3a:	2c00      	cmp	r4, #0
 8000f3c:	d050      	beq.n	8000fe0 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8000f3e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f42:	f014 0f07 	tst.w	r4, #7
 8000f46:	d002      	beq.n	8000f4e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f48:	f022 0207 	bic.w	r2, r2, #7
 8000f4c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f4e:	2a00      	cmp	r2, #0
 8000f50:	d055      	beq.n	8000ffe <pvPortMalloc+0xda>
 8000f52:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <pvPortMalloc+0xf4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d353      	bcc.n	8001002 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8000f5a:	4930      	ldr	r1, [pc, #192]	@ (800101c <pvPortMalloc+0xf8>)
 8000f5c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f5e:	e004      	b.n	8000f6a <pvPortMalloc+0x46>
			prvHeapInit();
 8000f60:	f7ff ff7c 	bl	8000e5c <prvHeapInit>
 8000f64:	e7e5      	b.n	8000f32 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000f66:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000f68:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f6a:	6863      	ldr	r3, [r4, #4]
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d202      	bcs.n	8000f76 <pvPortMalloc+0x52>
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f7      	bne.n	8000f66 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <pvPortMalloc+0xec>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	42a3      	cmp	r3, r4
 8000f7c:	d043      	beq.n	8001006 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000f7e:	680d      	ldr	r5, [r1, #0]
 8000f80:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000f86:	6863      	ldr	r3, [r4, #4]
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	2b10      	cmp	r3, #16
 8000f8c:	d910      	bls.n	8000fb0 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000f8e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f90:	f010 0f07 	tst.w	r0, #7
 8000f94:	d008      	beq.n	8000fa8 <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f9a:	f383 8811 	msr	BASEPRI, r3
 8000f9e:	f3bf 8f6f 	isb	sy
 8000fa2:	f3bf 8f4f 	dsb	sy
 8000fa6:	e7fe      	b.n	8000fa6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000fa8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000faa:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000fac:	f7ff ff88 	bl	8000ec0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000fb0:	6862      	ldr	r2, [r4, #4]
 8000fb2:	4919      	ldr	r1, [pc, #100]	@ (8001018 <pvPortMalloc+0xf4>)
 8000fb4:	680b      	ldr	r3, [r1, #0]
 8000fb6:	1a9b      	subs	r3, r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000fba:	4919      	ldr	r1, [pc, #100]	@ (8001020 <pvPortMalloc+0xfc>)
 8000fbc:	6809      	ldr	r1, [r1, #0]
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	d201      	bcs.n	8000fc6 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000fc2:	4917      	ldr	r1, [pc, #92]	@ (8001020 <pvPortMalloc+0xfc>)
 8000fc4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <pvPortMalloc+0xf0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8000fd2:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <pvPortMalloc+0x100>)
 8000fd4:	6813      	ldr	r3, [r2, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e002      	b.n	8000fe2 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8000fdc:	2500      	movs	r5, #0
 8000fde:	e000      	b.n	8000fe2 <pvPortMalloc+0xbe>
 8000fe0:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8000fe2:	f004 fa3b 	bl	800545c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fe6:	f015 0f07 	tst.w	r5, #7
 8000fea:	d00e      	beq.n	800100a <pvPortMalloc+0xe6>
 8000fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff0:	f383 8811 	msr	BASEPRI, r3
 8000ff4:	f3bf 8f6f 	isb	sy
 8000ff8:	f3bf 8f4f 	dsb	sy
 8000ffc:	e7fe      	b.n	8000ffc <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8000ffe:	2500      	movs	r5, #0
 8001000:	e7ef      	b.n	8000fe2 <pvPortMalloc+0xbe>
 8001002:	2500      	movs	r5, #0
 8001004:	e7ed      	b.n	8000fe2 <pvPortMalloc+0xbe>
 8001006:	2500      	movs	r5, #0
 8001008:	e7eb      	b.n	8000fe2 <pvPortMalloc+0xbe>
}
 800100a:	4628      	mov	r0, r5
 800100c:	bd38      	pop	{r3, r4, r5, pc}
 800100e:	bf00      	nop
 8001010:	20000624 	.word	0x20000624
 8001014:	20000610 	.word	0x20000610
 8001018:	20000620 	.word	0x20000620
 800101c:	20000628 	.word	0x20000628
 8001020:	2000061c 	.word	0x2000061c
 8001024:	20000618 	.word	0x20000618

08001028 <vPortFree>:
	if( pv != NULL )
 8001028:	2800      	cmp	r0, #0
 800102a:	d034      	beq.n	8001096 <vPortFree+0x6e>
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8001030:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001034:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <vPortFree+0x70>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	4213      	tst	r3, r2
 800103e:	d108      	bne.n	8001052 <vPortFree+0x2a>
 8001040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001044:	f383 8811 	msr	BASEPRI, r3
 8001048:	f3bf 8f6f 	isb	sy
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	e7fe      	b.n	8001050 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001052:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001056:	b141      	cbz	r1, 800106a <vPortFree+0x42>
 8001058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800105c:	f383 8811 	msr	BASEPRI, r3
 8001060:	f3bf 8f6f 	isb	sy
 8001064:	f3bf 8f4f 	dsb	sy
 8001068:	e7fe      	b.n	8001068 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800106a:	ea23 0302 	bic.w	r3, r3, r2
 800106e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001072:	f004 f95f 	bl	8005334 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001076:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <vPortFree+0x74>)
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	440b      	add	r3, r1
 8001080:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001082:	4628      	mov	r0, r5
 8001084:	f7ff ff1c 	bl	8000ec0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001088:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <vPortFree+0x78>)
 800108a:	6813      	ldr	r3, [r2, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8001090:	f004 f9e4 	bl	800545c <xTaskResumeAll>
}
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	4770      	bx	lr
 8001098:	20000610 	.word	0x20000610
 800109c:	20000620 	.word	0x20000620
 80010a0:	20000614 	.word	0x20000614

080010a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010a4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a6:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <MX_I2C1_Init+0x30>)
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_I2C1_Init+0x34>)
 80010aa:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <MX_I2C1_Init+0x38>)
 80010ae:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b0:	2300      	movs	r3, #0
 80010b2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010ba:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010be:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c4:	f001 fd0c 	bl	8002ae0 <HAL_I2C_Init>
 80010c8:	b900      	cbnz	r0, 80010cc <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ca:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010cc:	f000 f892 	bl	80011f4 <Error_Handler>
}
 80010d0:	e7fb      	b.n	80010ca <MX_I2C1_Init+0x26>
 80010d2:	bf00      	nop
 80010d4:	20004230 	.word	0x20004230
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	2300      	movs	r3, #0
 80010e6:	9303      	str	r3, [sp, #12]
 80010e8:	9304      	str	r3, [sp, #16]
 80010ea:	9305      	str	r3, [sp, #20]
 80010ec:	9306      	str	r3, [sp, #24]
 80010ee:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80010f0:	6802      	ldr	r2, [r0, #0]
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <HAL_I2C_MspInit+0x64>)
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010f8:	b009      	add	sp, #36	@ 0x24
 80010fa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	2500      	movs	r5, #0
 80010fe:	9501      	str	r5, [sp, #4]
 8001100:	4c11      	ldr	r4, [pc, #68]	@ (8001148 <HAL_I2C_MspInit+0x68>)
 8001102:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6323      	str	r3, [r4, #48]	@ 0x30
 800110a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001114:	23c0      	movs	r3, #192	@ 0xc0
 8001116:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001118:	2312      	movs	r3, #18
 800111a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001120:	2304      	movs	r3, #4
 8001122:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	a903      	add	r1, sp, #12
 8001126:	4809      	ldr	r0, [pc, #36]	@ (800114c <HAL_I2C_MspInit+0x6c>)
 8001128:	f001 fbda 	bl	80028e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112c:	9502      	str	r5, [sp, #8]
 800112e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001130:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001134:	6423      	str	r3, [r4, #64]	@ 0x40
 8001136:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	9b02      	ldr	r3, [sp, #8]
}
 8001140:	e7da      	b.n	80010f8 <HAL_I2C_MspInit+0x18>
 8001142:	bf00      	nop
 8001144:	40005400 	.word	0x40005400
 8001148:	40023800 	.word	0x40023800
 800114c:	40020400 	.word	0x40020400

08001150 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001150:	f100 0308 	add.w	r3, r0, #8
 8001154:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001156:	f04f 32ff 	mov.w	r2, #4294967295
 800115a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800115c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800115e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001164:	4770      	bx	lr

08001166 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001166:	2300      	movs	r3, #0
 8001168:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800116a:	4770      	bx	lr

0800116c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800116c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800116e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001174:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001176:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001178:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800117a:	6803      	ldr	r3, [r0, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	6003      	str	r3, [r0, #0]
}
 8001180:	4770      	bx	lr

08001182 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001182:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001184:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001186:	f1b5 3fff 	cmp.w	r5, #4294967295
 800118a:	d011      	beq.n	80011b0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800118c:	f100 0308 	add.w	r3, r0, #8
 8001190:	461c      	mov	r4, r3
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	42aa      	cmp	r2, r5
 8001198:	d9fa      	bls.n	8001190 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800119a:	6863      	ldr	r3, [r4, #4]
 800119c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800119e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80011a0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80011a2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80011a4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80011a6:	6803      	ldr	r3, [r0, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	6003      	str	r3, [r0, #0]
}
 80011ac:	bc30      	pop	{r4, r5}
 80011ae:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80011b0:	6904      	ldr	r4, [r0, #16]
 80011b2:	e7f2      	b.n	800119a <vListInsert+0x18>

080011b4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80011b4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80011b6:	6841      	ldr	r1, [r0, #4]
 80011b8:	6882      	ldr	r2, [r0, #8]
 80011ba:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80011bc:	6841      	ldr	r1, [r0, #4]
 80011be:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4282      	cmp	r2, r0
 80011c4:	d006      	beq.n	80011d4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80011c6:	2200      	movs	r2, #0
 80011c8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	3a01      	subs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80011d0:	6818      	ldr	r0, [r3, #0]
}
 80011d2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80011d4:	6882      	ldr	r2, [r0, #8]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	e7f5      	b.n	80011c6 <uxListRemove+0x12>
	...

080011dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80011de:	6802      	ldr	r2, [r0, #0]
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d000      	beq.n	80011e8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011e6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80011e8:	f000 fb1a 	bl	8001820 <HAL_IncTick>
}
 80011ec:	e7fb      	b.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80011ee:	bf00      	nop
 80011f0:	40001000 	.word	0x40001000

080011f4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80011f6:	e7fe      	b.n	80011f6 <Error_Handler+0x2>

080011f8 <SystemClock_Config>:
{
 80011f8:	b510      	push	{r4, lr}
 80011fa:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fc:	ac07      	add	r4, sp, #28
 80011fe:	2234      	movs	r2, #52	@ 0x34
 8001200:	2100      	movs	r1, #0
 8001202:	4620      	mov	r0, r4
 8001204:	f004 fcdf 	bl	8005bc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	2300      	movs	r3, #0
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	9303      	str	r3, [sp, #12]
 800120e:	9304      	str	r3, [sp, #16]
 8001210:	9305      	str	r3, [sp, #20]
 8001212:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	4a20      	ldr	r2, [pc, #128]	@ (8001298 <SystemClock_Config+0xa0>)
 8001218:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800121a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800121e:	6411      	str	r1, [r2, #64]	@ 0x40
 8001220:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001222:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001226:	9200      	str	r2, [sp, #0]
 8001228:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <SystemClock_Config+0xa4>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001240:	2301      	movs	r3, #1
 8001242:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001244:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001248:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124a:	2302      	movs	r3, #2
 800124c:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001252:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001254:	2208      	movs	r2, #8
 8001256:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001258:	22a0      	movs	r2, #160	@ 0xa0
 800125a:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800125e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001260:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	4620      	mov	r0, r4
 8001264:	f001 fef2 	bl	800304c <HAL_RCC_OscConfig>
 8001268:	b990      	cbnz	r0, 8001290 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2302      	movs	r3, #2
 8001270:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001276:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800127a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001280:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001282:	2105      	movs	r1, #5
 8001284:	a802      	add	r0, sp, #8
 8001286:	f001 fd2b 	bl	8002ce0 <HAL_RCC_ClockConfig>
 800128a:	b918      	cbnz	r0, 8001294 <SystemClock_Config+0x9c>
}
 800128c:	b014      	add	sp, #80	@ 0x50
 800128e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001290:	f7ff ffb0 	bl	80011f4 <Error_Handler>
    Error_Handler();
 8001294:	f7ff ffae 	bl	80011f4 <Error_Handler>
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <main>:
{
 80012a0:	b508      	push	{r3, lr}
  HAL_Init();
 80012a2:	f000 faa3 	bl	80017ec <HAL_Init>
  SystemClock_Config();
 80012a6:	f7ff ffa7 	bl	80011f8 <SystemClock_Config>
  MX_GPIO_Init();
 80012aa:	f7ff fd27 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 80012ae:	f7ff fbe3 	bl	8000a78 <MX_DMA_Init>
  MX_CAN1_Init();
 80012b2:	f7ff f97f 	bl	80005b4 <MX_CAN1_Init>
  MX_TIM1_Init();
 80012b6:	f004 fb03 	bl	80058c0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80012ba:	f7fe ffc3 	bl	8000244 <MX_ADC1_Init>
  MX_ADC2_Init();
 80012be:	f7ff f815 	bl	80002ec <MX_ADC2_Init>
  MX_ADC3_Init();
 80012c2:	f7ff f867 	bl	8000394 <MX_ADC3_Init>
  MX_I2C1_Init();
 80012c6:	f7ff feed 	bl	80010a4 <MX_I2C1_Init>
  MX_SPI3_Init();
 80012ca:	f000 f9b3 	bl	8001634 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80012ce:	f004 fb93 	bl	80059f8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80012d2:	f004 f9f5 	bl	80056c0 <MX_TIM3_Init>
  HAL_Delay(100);
 80012d6:	2064      	movs	r0, #100	@ 0x64
 80012d8:	f000 fab4 	bl	8001844 <HAL_Delay>
  controller_init();
 80012dc:	f7ff fa04 	bl	80006e8 <controller_init>
  MX_FREERTOS_Init();
 80012e0:	f7ff fcde 	bl	8000ca0 <MX_FREERTOS_Init>
  osKernelStart();
 80012e4:	f7ff f9c0 	bl	8000668 <osKernelStart>
  while (1) {
 80012e8:	e7fe      	b.n	80012e8 <main+0x48>
	...

080012ec <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80012ec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <prvTaskExitError+0x3c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fa:	d008      	beq.n	800130e <prvTaskExitError+0x22>
 80012fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001300:	f383 8811 	msr	BASEPRI, r3
 8001304:	f3bf 8f6f 	isb	sy
 8001308:	f3bf 8f4f 	dsb	sy
 800130c:	e7fe      	b.n	800130c <prvTaskExitError+0x20>
 800130e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001312:	f383 8811 	msr	BASEPRI, r3
 8001316:	f3bf 8f6f 	isb	sy
 800131a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800131e:	9b01      	ldr	r3, [sp, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0fc      	beq.n	800131e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001324:	b002      	add	sp, #8
 8001326:	4770      	bx	lr
 8001328:	20000000 	.word	0x20000000

0800132c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <prvPortStartFirstTask+0x24>)
 800132e:	6800      	ldr	r0, [r0, #0]
 8001330:	6800      	ldr	r0, [r0, #0]
 8001332:	f380 8808 	msr	MSP, r0
 8001336:	f04f 0000 	mov.w	r0, #0
 800133a:	f380 8814 	msr	CONTROL, r0
 800133e:	b662      	cpsie	i
 8001340:	b661      	cpsie	f
 8001342:	f3bf 8f4f 	dsb	sy
 8001346:	f3bf 8f6f 	isb	sy
 800134a:	df00      	svc	0
 800134c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800134e:	0000      	.short	0x0000
 8001350:	e000ed08 	.word	0xe000ed08

08001354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001354:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001364 <vPortEnableVFP+0x10>
 8001358:	6801      	ldr	r1, [r0, #0]
 800135a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800135e:	6001      	str	r1, [r0, #0]
 8001360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001362:	0000      	.short	0x0000
 8001364:	e000ed88 	.word	0xe000ed88

08001368 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001368:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800136c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001370:	f021 0101 	bic.w	r1, r1, #1
 8001374:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <pxPortInitialiseStack+0x28>)
 800137a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800137e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001382:	f06f 0302 	mvn.w	r3, #2
 8001386:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800138a:	3844      	subs	r0, #68	@ 0x44
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	080012ed 	.word	0x080012ed
	...

080013a0 <SVC_Handler>:
	__asm volatile (
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <pxCurrentTCBConst2>)
 80013a2:	6819      	ldr	r1, [r3, #0]
 80013a4:	6808      	ldr	r0, [r1, #0]
 80013a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013aa:	f380 8809 	msr	PSP, r0
 80013ae:	f3bf 8f6f 	isb	sy
 80013b2:	f04f 0000 	mov.w	r0, #0
 80013b6:	f380 8811 	msr	BASEPRI, r0
 80013ba:	4770      	bx	lr
 80013bc:	f3af 8000 	nop.w

080013c0 <pxCurrentTCBConst2>:
 80013c0:	2000445c 	.word	0x2000445c

080013c4 <vPortEnterCritical>:
 80013c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013c8:	f383 8811 	msr	BASEPRI, r3
 80013cc:	f3bf 8f6f 	isb	sy
 80013d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80013d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <vPortEnterCritical+0x40>)
 80013d6:	6813      	ldr	r3, [r2, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d000      	beq.n	80013e2 <vPortEnterCritical+0x1e>
}
 80013e0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80013e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80013e6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80013ea:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80013ee:	d0f7      	beq.n	80013e0 <vPortEnterCritical+0x1c>
 80013f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013f4:	f383 8811 	msr	BASEPRI, r3
 80013f8:	f3bf 8f6f 	isb	sy
 80013fc:	f3bf 8f4f 	dsb	sy
 8001400:	e7fe      	b.n	8001400 <vPortEnterCritical+0x3c>
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000

08001408 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <vPortExitCritical+0x28>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b943      	cbnz	r3, 8001420 <vPortExitCritical+0x18>
 800140e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001412:	f383 8811 	msr	BASEPRI, r3
 8001416:	f3bf 8f6f 	isb	sy
 800141a:	f3bf 8f4f 	dsb	sy
 800141e:	e7fe      	b.n	800141e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001420:	3b01      	subs	r3, #1
 8001422:	4a03      	ldr	r2, [pc, #12]	@ (8001430 <vPortExitCritical+0x28>)
 8001424:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001426:	b90b      	cbnz	r3, 800142c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001428:	f383 8811 	msr	BASEPRI, r3
}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000000 	.word	0x20000000
	...

08001440 <PendSV_Handler>:
	__asm volatile
 8001440:	f3ef 8009 	mrs	r0, PSP
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <pxCurrentTCBConst>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	f01e 0f10 	tst.w	lr, #16
 8001450:	bf08      	it	eq
 8001452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145a:	6010      	str	r0, [r2, #0]
 800145c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001464:	f380 8811 	msr	BASEPRI, r0
 8001468:	f3bf 8f4f 	dsb	sy
 800146c:	f3bf 8f6f 	isb	sy
 8001470:	f004 f896 	bl	80055a0 <vTaskSwitchContext>
 8001474:	f04f 0000 	mov.w	r0, #0
 8001478:	f380 8811 	msr	BASEPRI, r0
 800147c:	bc09      	pop	{r0, r3}
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	6808      	ldr	r0, [r1, #0]
 8001482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001486:	f01e 0f10 	tst.w	lr, #16
 800148a:	bf08      	it	eq
 800148c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001490:	f380 8809 	msr	PSP, r0
 8001494:	f3bf 8f6f 	isb	sy
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	f3af 8000 	nop.w

080014a0 <pxCurrentTCBConst>:
 80014a0:	2000445c 	.word	0x2000445c

080014a4 <SysTick_Handler>:
{
 80014a4:	b508      	push	{r3, lr}
	__asm volatile
 80014a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014aa:	f383 8811 	msr	BASEPRI, r3
 80014ae:	f3bf 8f6f 	isb	sy
 80014b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80014b6:	f003 ff45 	bl	8005344 <xTaskIncrementTick>
 80014ba:	b128      	cbz	r0, 80014c8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80014bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80014c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80014c8:	2300      	movs	r3, #0
 80014ca:	f383 8811 	msr	BASEPRI, r3
}
 80014ce:	bd08      	pop	{r3, pc}

080014d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80014d0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80014d4:	2300      	movs	r3, #0
 80014d6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80014d8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <vPortSetupTimerInterrupt+0x20>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4905      	ldr	r1, [pc, #20]	@ (80014f4 <vPortSetupTimerInterrupt+0x24>)
 80014e0:	fba1 1303 	umull	r1, r3, r1, r3
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80014ea:	2307      	movs	r3, #7
 80014ec:	6113      	str	r3, [r2, #16]
}
 80014ee:	4770      	bx	lr
 80014f0:	2000000c 	.word	0x2000000c
 80014f4:	10624dd3 	.word	0x10624dd3

080014f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80014f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80014fc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001500:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <xPortStartScheduler+0x100>)
 8001502:	429a      	cmp	r2, r3
 8001504:	d01c      	beq.n	8001540 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001506:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800150a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800150e:	4b3b      	ldr	r3, [pc, #236]	@ (80015fc <xPortStartScheduler+0x104>)
 8001510:	429a      	cmp	r2, r3
 8001512:	d01e      	beq.n	8001552 <xPortStartScheduler+0x5a>
{
 8001514:	b530      	push	{r4, r5, lr}
 8001516:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001518:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <xPortStartScheduler+0x108>)
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001520:	22ff      	movs	r2, #255	@ 0xff
 8001522:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800152c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001530:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001534:	4a33      	ldr	r2, [pc, #204]	@ (8001604 <xPortStartScheduler+0x10c>)
 8001536:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001538:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <xPortStartScheduler+0x110>)
 800153a:	2207      	movs	r2, #7
 800153c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800153e:	e01b      	b.n	8001578 <xPortStartScheduler+0x80>
	__asm volatile
 8001540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001544:	f383 8811 	msr	BASEPRI, r3
 8001548:	f3bf 8f6f 	isb	sy
 800154c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001550:	e7fe      	b.n	8001550 <xPortStartScheduler+0x58>
 8001552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001562:	e7fe      	b.n	8001562 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8001564:	4a28      	ldr	r2, [pc, #160]	@ (8001608 <xPortStartScheduler+0x110>)
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800156c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001578:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800157c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001580:	d1f0      	bne.n	8001564 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <xPortStartScheduler+0x110>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b03      	cmp	r3, #3
 8001588:	d008      	beq.n	800159c <xPortStartScheduler+0xa4>
 800158a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800158e:	f383 8811 	msr	BASEPRI, r3
 8001592:	f3bf 8f6f 	isb	sy
 8001596:	f3bf 8f4f 	dsb	sy
 800159a:	e7fe      	b.n	800159a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	4a1a      	ldr	r2, [pc, #104]	@ (8001608 <xPortStartScheduler+0x110>)
 80015a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80015a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80015a6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80015a8:	9b01      	ldr	r3, [sp, #4]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <xPortStartScheduler+0x108>)
 80015ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80015b0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80015b4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015bc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80015c0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80015c4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80015c8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80015cc:	f7ff ff80 	bl	80014d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80015d0:	2500      	movs	r5, #0
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <xPortStartScheduler+0x114>)
 80015d4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80015d6:	f7ff febd 	bl	8001354 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80015da:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80015de:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80015e2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80015e6:	f7ff fea1 	bl	800132c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80015ea:	f003 ffd9 	bl	80055a0 <vTaskSwitchContext>
	prvTaskExitError();
 80015ee:	f7ff fe7d 	bl	80012ec <prvTaskExitError>
}
 80015f2:	4628      	mov	r0, r5
 80015f4:	b003      	add	sp, #12
 80015f6:	bd30      	pop	{r4, r5, pc}
 80015f8:	410fc271 	.word	0x410fc271
 80015fc:	410fc270 	.word	0x410fc270
 8001600:	e000e400 	.word	0xe000e400
 8001604:	20004288 	.word	0x20004288
 8001608:	20004284 	.word	0x20004284
 800160c:	20000000 	.word	0x20000000

08001610 <pwm_init>:
#include "./pwm.h"

void pwm_init(void) {
 8001610:	b508      	push	{r3, lr}
  TIM1->ARR = 8000 - 1;
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <pwm_init+0x1c>)
 8001614:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001618:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 800161a:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 800161e:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001620:	210c      	movs	r1, #12
 8001622:	4803      	ldr	r0, [pc, #12]	@ (8001630 <pwm_init+0x20>)
 8001624:	f002 fd62 	bl	80040ec <HAL_TIM_PWM_Start>
}
 8001628:	bd08      	pop	{r3, pc}
 800162a:	bf00      	nop
 800162c:	40010000 	.word	0x40010000
 8001630:	200044a8 	.word	0x200044a8

08001634 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001634:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001636:	480d      	ldr	r0, [pc, #52]	@ (800166c <MX_SPI3_Init+0x38>)
 8001638:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <MX_SPI3_Init+0x3c>)
 800163a:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800163c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001640:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001642:	2300      	movs	r3, #0
 8001644:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001646:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001648:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164a:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800164c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001650:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001652:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001654:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001656:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001658:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800165a:	230a      	movs	r3, #10
 800165c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800165e:	f001 ffbb 	bl	80035d8 <HAL_SPI_Init>
 8001662:	b900      	cbnz	r0, 8001666 <MX_SPI3_Init+0x32>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001664:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001666:	f7ff fdc5 	bl	80011f4 <Error_Handler>
}
 800166a:	e7fb      	b.n	8001664 <MX_SPI3_Init+0x30>
 800166c:	2000428c 	.word	0x2000428c
 8001670:	40003c00 	.word	0x40003c00

08001674 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001674:	b500      	push	{lr}
 8001676:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	2300      	movs	r3, #0
 800167a:	9303      	str	r3, [sp, #12]
 800167c:	9304      	str	r3, [sp, #16]
 800167e:	9305      	str	r3, [sp, #20]
 8001680:	9306      	str	r3, [sp, #24]
 8001682:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 8001684:	6802      	ldr	r2, [r0, #0]
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_SPI_MspInit+0x68>)
 8001688:	429a      	cmp	r2, r3
 800168a:	d002      	beq.n	8001692 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800168c:	b009      	add	sp, #36	@ 0x24
 800168e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001692:	2100      	movs	r1, #0
 8001694:	9101      	str	r1, [sp, #4]
 8001696:	f503 33fe 	add.w	r3, r3, #130048	@ 0x1fc00
 800169a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800169c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80016a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016a4:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	9102      	str	r1, [sp, #8]
 80016ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016b0:	f042 0204 	orr.w	r2, r2, #4
 80016b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80016c0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016ce:	2306      	movs	r3, #6
 80016d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	a903      	add	r1, sp, #12
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <HAL_SPI_MspInit+0x6c>)
 80016d6:	f001 f903 	bl	80028e0 <HAL_GPIO_Init>
}
 80016da:	e7d7      	b.n	800168c <HAL_SPI_MspInit+0x18>
 80016dc:	40003c00 	.word	0x40003c00
 80016e0:	40020800 	.word	0x40020800

080016e4 <state_set>:
#include "gpio.h"

static state_e g_state = STATE_INIT;
static uint8_t g_led_state = 0x01;

void state_set(state_e state) { g_state = state; }
 80016e4:	4b01      	ldr	r3, [pc, #4]	@ (80016ec <state_set+0x8>)
 80016e6:	7018      	strb	r0, [r3, #0]
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200042e5 	.word	0x200042e5

080016f0 <led_ctl>:

void led_ctl(uint8_t led_state) {
 80016f0:	b510      	push	{r4, lr}
 80016f2:	4604      	mov	r4, r0
  if (led_state & 0x01) {
 80016f4:	f010 0f01 	tst.w	r0, #1
 80016f8:	d015      	beq.n	8001726 <led_ctl+0x36>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2108      	movs	r1, #8
 80016fe:	4813      	ldr	r0, [pc, #76]	@ (800174c <led_ctl+0x5c>)
 8001700:	f001 f9de 	bl	8002ac0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x02) {
 8001704:	f014 0f02 	tst.w	r4, #2
 8001708:	d013      	beq.n	8001732 <led_ctl+0x42>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2104      	movs	r1, #4
 800170e:	480f      	ldr	r0, [pc, #60]	@ (800174c <led_ctl+0x5c>)
 8001710:	f001 f9d6 	bl	8002ac0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x04) {
 8001714:	f014 0f04 	tst.w	r4, #4
 8001718:	d011      	beq.n	800173e <led_ctl+0x4e>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2102      	movs	r1, #2
 800171e:	480b      	ldr	r0, [pc, #44]	@ (800174c <led_ctl+0x5c>)
 8001720:	f001 f9ce 	bl	8002ac0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
  }
}
 8001724:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	2108      	movs	r1, #8
 800172a:	4808      	ldr	r0, [pc, #32]	@ (800174c <led_ctl+0x5c>)
 800172c:	f001 f9c8 	bl	8002ac0 <HAL_GPIO_WritePin>
 8001730:	e7e8      	b.n	8001704 <led_ctl+0x14>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	2104      	movs	r1, #4
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <led_ctl+0x5c>)
 8001738:	f001 f9c2 	bl	8002ac0 <HAL_GPIO_WritePin>
 800173c:	e7ea      	b.n	8001714 <led_ctl+0x24>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	2102      	movs	r1, #2
 8001742:	4802      	ldr	r0, [pc, #8]	@ (800174c <led_ctl+0x5c>)
 8001744:	f001 f9bc 	bl	8002ac0 <HAL_GPIO_WritePin>
}
 8001748:	e7ec      	b.n	8001724 <led_ctl+0x34>
 800174a:	bf00      	nop
 800174c:	40020800 	.word	0x40020800

08001750 <state_step>:

void state_step(void) {
 8001750:	b508      	push	{r3, lr}
  if (STATE_INIT == g_state) {
 8001752:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <state_step+0x90>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b04      	cmp	r3, #4
 8001758:	d809      	bhi.n	800176e <state_step+0x1e>
 800175a:	e8df f003 	tbb	[pc, r3]
 800175e:	2503      	.short	0x2503
 8001760:	092b      	.short	0x092b
 8001762:	3b          	.byte	0x3b
 8001763:	00          	.byte	0x00
    g_led_state = 0x07;
 8001764:	2007      	movs	r0, #7
 8001766:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <state_step+0x94>)
 8001768:	7018      	strb	r0, [r3, #0]
    led_ctl(g_led_state);
 800176a:	f7ff ffc1 	bl	80016f0 <led_ctl>

  else if (STATE_ERROR == g_state) {
    g_led_state = 0x02;
    led_ctl(g_led_state);
  }
 800176e:	bd08      	pop	{r3, pc}
    led_ctl(g_led_state);
 8001770:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <state_step+0x94>)
 8001772:	7818      	ldrb	r0, [r3, #0]
 8001774:	f7ff ffbc 	bl	80016f0 <led_ctl>
    if (0 == dir) {
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <state_step+0x98>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b953      	cbnz	r3, 8001794 <state_step+0x44>
      g_led_state = g_led_state << 1;
 800177e:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <state_step+0x94>)
 8001780:	7813      	ldrb	r3, [r2, #0]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	7013      	strb	r3, [r2, #0]
      if (0x04 == g_led_state) {
 8001788:	2b04      	cmp	r3, #4
 800178a:	d1f0      	bne.n	800176e <state_step+0x1e>
        dir = 1;
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <state_step+0x98>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e7ec      	b.n	800176e <state_step+0x1e>
      g_led_state = g_led_state >> 1;
 8001794:	4a13      	ldr	r2, [pc, #76]	@ (80017e4 <state_step+0x94>)
 8001796:	7813      	ldrb	r3, [r2, #0]
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	7013      	strb	r3, [r2, #0]
      if (0x01 == g_led_state) {
 800179c:	2b01      	cmp	r3, #1
 800179e:	d1e6      	bne.n	800176e <state_step+0x1e>
        dir = 0;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <state_step+0x98>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	e7e2      	b.n	800176e <state_step+0x1e>
    g_led_state = 0x04;
 80017a8:	2004      	movs	r0, #4
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <state_step+0x94>)
 80017ac:	7018      	strb	r0, [r3, #0]
    led_ctl(g_led_state);
 80017ae:	f7ff ff9f 	bl	80016f0 <led_ctl>
 80017b2:	e7dc      	b.n	800176e <state_step+0x1e>
    if (0x01 != g_led_state) {
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <state_step+0x94>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d007      	beq.n	80017cc <state_step+0x7c>
      g_led_state = 0x01;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <state_step+0x94>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
    led_ctl(g_led_state);
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <state_step+0x94>)
 80017c4:	7818      	ldrb	r0, [r3, #0]
 80017c6:	f7ff ff93 	bl	80016f0 <led_ctl>
 80017ca:	e7d0      	b.n	800176e <state_step+0x1e>
      g_led_state = 0x00;
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <state_step+0x94>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e7f6      	b.n	80017c2 <state_step+0x72>
    g_led_state = 0x02;
 80017d4:	2002      	movs	r0, #2
 80017d6:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <state_step+0x94>)
 80017d8:	7018      	strb	r0, [r3, #0]
    led_ctl(g_led_state);
 80017da:	f7ff ff89 	bl	80016f0 <led_ctl>
 80017de:	e7c6      	b.n	800176e <state_step+0x1e>
 80017e0:	200042e5 	.word	0x200042e5
 80017e4:	20000004 	.word	0x20000004
 80017e8:	200042e4 	.word	0x200042e4

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_Init+0x30>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017f6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017fe:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001806:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 fde3 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	200f      	movs	r0, #15
 8001810:	f002 fe2c 	bl	800446c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f001 fa42 	bl	8002c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001818:	2000      	movs	r0, #0
 800181a:	bd08      	pop	{r3, pc}
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001820:	4a03      	ldr	r2, [pc, #12]	@ (8001830 <HAL_IncTick+0x10>)
 8001822:	6811      	ldr	r1, [r2, #0]
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_IncTick+0x14>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	440b      	add	r3, r1
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	200042e8 	.word	0x200042e8
 8001834:	20000005 	.word	0x20000005

08001838 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001838:	4b01      	ldr	r3, [pc, #4]	@ (8001840 <HAL_GetTick+0x8>)
 800183a:	6818      	ldr	r0, [r3, #0]
}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	200042e8 	.word	0x200042e8

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b538      	push	{r3, r4, r5, lr}
 8001846:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff fff6 	bl	8001838 <HAL_GetTick>
 800184c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001852:	d002      	beq.n	800185a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <HAL_Delay+0x24>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185a:	f7ff ffed 	bl	8001838 <HAL_GetTick>
 800185e:	1b40      	subs	r0, r0, r5
 8001860:	42a0      	cmp	r0, r4
 8001862:	d3fa      	bcc.n	800185a <HAL_Delay+0x16>
  {
  }
}
 8001864:	bd38      	pop	{r3, r4, r5, pc}
 8001866:	bf00      	nop
 8001868:	20000005 	.word	0x20000005

0800186c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800186c:	4b4a      	ldr	r3, [pc, #296]	@ (8001998 <ADC_Init+0x12c>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001874:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	6841      	ldr	r1, [r0, #4]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800187e:	6802      	ldr	r2, [r0, #0]
 8001880:	6853      	ldr	r3, [r2, #4]
 8001882:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001886:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001888:	6802      	ldr	r2, [r0, #0]
 800188a:	6853      	ldr	r3, [r2, #4]
 800188c:	6901      	ldr	r1, [r0, #16]
 800188e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001892:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001894:	6802      	ldr	r2, [r0, #0]
 8001896:	6853      	ldr	r3, [r2, #4]
 8001898:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800189c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800189e:	6802      	ldr	r2, [r0, #0]
 80018a0:	6853      	ldr	r3, [r2, #4]
 80018a2:	6881      	ldr	r1, [r0, #8]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018a8:	6802      	ldr	r2, [r0, #0]
 80018aa:	6893      	ldr	r3, [r2, #8]
 80018ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80018b0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018b2:	6802      	ldr	r2, [r0, #0]
 80018b4:	6893      	ldr	r3, [r2, #8]
 80018b6:	68c1      	ldr	r1, [r0, #12]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018bc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80018be:	4b37      	ldr	r3, [pc, #220]	@ (800199c <ADC_Init+0x130>)
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d057      	beq.n	8001974 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c4:	6802      	ldr	r2, [r0, #0]
 80018c6:	6893      	ldr	r3, [r2, #8]
 80018c8:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80018cc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018ce:	6802      	ldr	r2, [r0, #0]
 80018d0:	6893      	ldr	r3, [r2, #8]
 80018d2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d8:	6802      	ldr	r2, [r0, #0]
 80018da:	6893      	ldr	r3, [r2, #8]
 80018dc:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80018e0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018e2:	6802      	ldr	r2, [r0, #0]
 80018e4:	6893      	ldr	r3, [r2, #8]
 80018e6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ec:	6802      	ldr	r2, [r0, #0]
 80018ee:	6893      	ldr	r3, [r2, #8]
 80018f0:	f023 0302 	bic.w	r3, r3, #2
 80018f4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018f6:	6802      	ldr	r2, [r0, #0]
 80018f8:	6893      	ldr	r3, [r2, #8]
 80018fa:	7e01      	ldrb	r1, [r0, #24]
 80018fc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001900:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001902:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03f      	beq.n	800198a <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800190a:	6802      	ldr	r2, [r0, #0]
 800190c:	6853      	ldr	r3, [r2, #4]
 800190e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001912:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001914:	6802      	ldr	r2, [r0, #0]
 8001916:	6853      	ldr	r3, [r2, #4]
 8001918:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800191c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800191e:	6801      	ldr	r1, [r0, #0]
 8001920:	684b      	ldr	r3, [r1, #4]
 8001922:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001924:	3a01      	subs	r2, #1
 8001926:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800192a:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800192c:	6802      	ldr	r2, [r0, #0]
 800192e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001930:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001934:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001936:	6801      	ldr	r1, [r0, #0]
 8001938:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800193a:	69c2      	ldr	r2, [r0, #28]
 800193c:	3a01      	subs	r2, #1
 800193e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001942:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001944:	6802      	ldr	r2, [r0, #0]
 8001946:	6893      	ldr	r3, [r2, #8]
 8001948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800194c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800194e:	6802      	ldr	r2, [r0, #0]
 8001950:	6893      	ldr	r3, [r2, #8]
 8001952:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001956:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800195a:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800195c:	6802      	ldr	r2, [r0, #0]
 800195e:	6893      	ldr	r3, [r2, #8]
 8001960:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001964:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001966:	6802      	ldr	r2, [r0, #0]
 8001968:	6893      	ldr	r3, [r2, #8]
 800196a:	6941      	ldr	r1, [r0, #20]
 800196c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001970:	6093      	str	r3, [r2, #8]
}
 8001972:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001974:	6802      	ldr	r2, [r0, #0]
 8001976:	6893      	ldr	r3, [r2, #8]
 8001978:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800197c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800197e:	6802      	ldr	r2, [r0, #0]
 8001980:	6893      	ldr	r3, [r2, #8]
 8001982:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001986:	6093      	str	r3, [r2, #8]
 8001988:	e7b0      	b.n	80018ec <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800198a:	6802      	ldr	r2, [r0, #0]
 800198c:	6853      	ldr	r3, [r2, #4]
 800198e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001992:	6053      	str	r3, [r2, #4]
 8001994:	e7ca      	b.n	800192c <ADC_Init+0xc0>
 8001996:	bf00      	nop
 8001998:	40012300 	.word	0x40012300
 800199c:	0f000001 	.word	0x0f000001

080019a0 <HAL_ADC_Init>:
  if (hadc == NULL)
 80019a0:	b338      	cbz	r0, 80019f2 <HAL_ADC_Init+0x52>
{
 80019a2:	b510      	push	{r4, lr}
 80019a4:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80019a8:	b143      	cbz	r3, 80019bc <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019ac:	f013 0f10 	tst.w	r3, #16
 80019b0:	d00b      	beq.n	80019ca <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80019b2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80019b4:	2300      	movs	r3, #0
 80019b6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80019ba:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80019bc:	f7fe fd3e 	bl	800043c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80019c0:	2300      	movs	r3, #0
 80019c2:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 80019c4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 80019c8:	e7ef      	b.n	80019aa <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80019ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019d0:	f023 0302 	bic.w	r3, r3, #2
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 80019da:	4620      	mov	r0, r4
 80019dc:	f7ff ff46 	bl	800186c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80019e0:	2000      	movs	r0, #0
 80019e2:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80019e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019e6:	f023 0303 	bic.w	r3, r3, #3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6423      	str	r3, [r4, #64]	@ 0x40
 80019f0:	e7e0      	b.n	80019b4 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80019f2:	2001      	movs	r0, #1
}
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_ADC_Start>:
{
 80019f8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80019fe:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f000 8089 	beq.w	8001b1a <HAL_ADC_Start+0x122>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a0e:	6803      	ldr	r3, [r0, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	f012 0f01 	tst.w	r2, #1
 8001a16:	d113      	bne.n	8001a40 <HAL_ADC_Start+0x48>
    __HAL_ADC_ENABLE(hadc);
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a20:	4b41      	ldr	r3, [pc, #260]	@ (8001b28 <HAL_ADC_Start+0x130>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a41      	ldr	r2, [pc, #260]	@ (8001b2c <HAL_ADC_Start+0x134>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	0c9b      	lsrs	r3, r3, #18
 8001a2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a30:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001a32:	e002      	b.n	8001a3a <HAL_ADC_Start+0x42>
      counter--;
 8001a34:	9b01      	ldr	r3, [sp, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f9      	bne.n	8001a34 <HAL_ADC_Start+0x3c>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a40:	6802      	ldr	r2, [r0, #0]
 8001a42:	6893      	ldr	r3, [r2, #8]
 8001a44:	f013 0f01 	tst.w	r3, #1
 8001a48:	d05c      	beq.n	8001b04 <HAL_ADC_Start+0x10c>
    ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001a4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a58:	6403      	str	r3, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a5a:	6853      	ldr	r3, [r2, #4]
 8001a5c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001a60:	d005      	beq.n	8001a6e <HAL_ADC_Start+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a62:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001a64:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a6c:	6403      	str	r3, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001a70:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001a74:	d01b      	beq.n	8001aae <HAL_ADC_Start+0xb6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a76:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001a78:	f023 0306 	bic.w	r3, r3, #6
 8001a7c:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a84:	f06f 0322 	mvn.w	r3, #34	@ 0x22
 8001a88:	6013      	str	r3, [r2, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a8a:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <HAL_ADC_Start+0x138>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f013 0f1f 	tst.w	r3, #31
 8001a92:	d127      	bne.n	8001ae4 <HAL_ADC_Start+0xec>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a94:	6803      	ldr	r3, [r0, #0]
 8001a96:	4a27      	ldr	r2, [pc, #156]	@ (8001b34 <HAL_ADC_Start+0x13c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d011      	beq.n	8001ac0 <HAL_ADC_Start+0xc8>
 8001a9c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d007      	beq.n	8001ab4 <HAL_ADC_Start+0xbc>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001aa4:	4a24      	ldr	r2, [pc, #144]	@ (8001b38 <HAL_ADC_Start+0x140>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d014      	beq.n	8001ad4 <HAL_ADC_Start+0xdc>
  return HAL_OK;
 8001aaa:	2000      	movs	r0, #0
 8001aac:	e033      	b.n	8001b16 <HAL_ADC_Start+0x11e>
      ADC_CLEAR_ERRORCODE(hadc);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	6443      	str	r3, [r0, #68]	@ 0x44
 8001ab2:	e7e4      	b.n	8001a7e <HAL_ADC_Start+0x86>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ab4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8001ab8:	6852      	ldr	r2, [r2, #4]
 8001aba:	f012 0f1f 	tst.w	r2, #31
 8001abe:	d1f1      	bne.n	8001aa4 <HAL_ADC_Start+0xac>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001ac6:	d12a      	bne.n	8001b1e <HAL_ADC_Start+0x126>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	e020      	b.n	8001b16 <HAL_ADC_Start+0x11e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ad4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001ad8:	6852      	ldr	r2, [r2, #4]
 8001ada:	f012 0f10 	tst.w	r2, #16
 8001ade:	d0ef      	beq.n	8001ac0 <HAL_ADC_Start+0xc8>
  return HAL_OK;
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	e018      	b.n	8001b16 <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ae4:	6803      	ldr	r3, [r0, #0]
 8001ae6:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <HAL_ADC_Start+0x13c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d001      	beq.n	8001af0 <HAL_ADC_Start+0xf8>
  return HAL_OK;
 8001aec:	2000      	movs	r0, #0
 8001aee:	e012      	b.n	8001b16 <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001af6:	d114      	bne.n	8001b22 <HAL_ADC_Start+0x12a>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001afe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001b00:	2000      	movs	r0, #0
 8001b02:	e008      	b.n	8001b16 <HAL_ADC_Start+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b04:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 8001b14:	2000      	movs	r0, #0
}
 8001b16:	b002      	add	sp, #8
 8001b18:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	e7fb      	b.n	8001b16 <HAL_ADC_Start+0x11e>
  return HAL_OK;
 8001b1e:	2000      	movs	r0, #0
 8001b20:	e7f9      	b.n	8001b16 <HAL_ADC_Start+0x11e>
 8001b22:	2000      	movs	r0, #0
 8001b24:	e7f7      	b.n	8001b16 <HAL_ADC_Start+0x11e>
 8001b26:	bf00      	nop
 8001b28:	2000000c 	.word	0x2000000c
 8001b2c:	431bde83 	.word	0x431bde83
 8001b30:	40012300 	.word	0x40012300
 8001b34:	40012000 	.word	0x40012000
 8001b38:	40012200 	.word	0x40012200

08001b3c <HAL_ADC_PollForConversion>:
{
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	4604      	mov	r4, r0
 8001b40:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b42:	6803      	ldr	r3, [r0, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001b4a:	d003      	beq.n	8001b54 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b4c:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b4e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b52:	d119      	bne.n	8001b88 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 8001b54:	f7ff fe70 	bl	8001838 <HAL_GetTick>
 8001b58:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f012 0f02 	tst.w	r2, #2
 8001b62:	d120      	bne.n	8001ba6 <HAL_ADC_PollForConversion+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001b64:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b68:	d0f7      	beq.n	8001b5a <HAL_ADC_PollForConversion+0x1e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b6a:	b9b5      	cbnz	r5, 8001b9a <HAL_ADC_PollForConversion+0x5e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f013 0f02 	tst.w	r3, #2
 8001b74:	d1f1      	bne.n	8001b5a <HAL_ADC_PollForConversion+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8001b84:	2003      	movs	r0, #3
 8001b86:	e032      	b.n	8001bee <HAL_ADC_PollForConversion+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b88:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b8a:	f043 0320 	orr.w	r3, r3, #32
 8001b8e:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 8001b90:	2300      	movs	r3, #0
 8001b92:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001b96:	2001      	movs	r0, #1
 8001b98:	e029      	b.n	8001bee <HAL_ADC_PollForConversion+0xb2>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b9a:	f7ff fe4d 	bl	8001838 <HAL_GetTick>
 8001b9e:	1b80      	subs	r0, r0, r6
 8001ba0:	42a8      	cmp	r0, r5
 8001ba2:	d9da      	bls.n	8001b5a <HAL_ADC_PollForConversion+0x1e>
 8001ba4:	e7e2      	b.n	8001b6c <HAL_ADC_PollForConversion+0x30>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ba6:	f06f 0212 	mvn.w	r2, #18
 8001baa:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb2:	6423      	str	r3, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001bbc:	d116      	bne.n	8001bec <HAL_ADC_PollForConversion+0xb0>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bbe:	7e20      	ldrb	r0, [r4, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bc0:	b9b0      	cbnz	r0, 8001bf0 <HAL_ADC_PollForConversion+0xb4>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bc4:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001bc8:	d003      	beq.n	8001bd2 <HAL_ADC_PollForConversion+0x96>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001bca:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bcc:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001bd0:	d10d      	bne.n	8001bee <HAL_ADC_PollForConversion+0xb2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bd8:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bdc:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001be0:	d105      	bne.n	8001bee <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001be2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6423      	str	r3, [r4, #64]	@ 0x40
 8001bea:	e000      	b.n	8001bee <HAL_ADC_PollForConversion+0xb2>
  return HAL_OK;
 8001bec:	2000      	movs	r0, #0
}
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	e7fc      	b.n	8001bee <HAL_ADC_PollForConversion+0xb2>

08001bf4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001bf4:	6803      	ldr	r3, [r0, #0]
 8001bf6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8001bf8:	4770      	bx	lr

08001bfa <HAL_ADC_ConvCpltCallback>:
}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ADC_LevelOutOfWindowCallback>:
}
 8001bfc:	4770      	bx	lr

08001bfe <HAL_ADC_ErrorCallback>:
}
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ADC_IRQHandler>:
{
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 8001c04:	6803      	ldr	r3, [r0, #0]
 8001c06:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c08:	685d      	ldr	r5, [r3, #4]
  if (tmp1 && tmp2)
 8001c0a:	f016 0f02 	tst.w	r6, #2
 8001c0e:	d02f      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x70>
 8001c10:	f005 0220 	and.w	r2, r5, #32
 8001c14:	b362      	cbz	r2, 8001c70 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c16:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001c18:	f012 0f10 	tst.w	r2, #16
 8001c1c:	d103      	bne.n	8001c26 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c1e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c24:	6402      	str	r2, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001c2c:	d119      	bne.n	8001c62 <HAL_ADC_IRQHandler+0x62>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c2e:	7e22      	ldrb	r2, [r4, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c30:	b9ba      	cbnz	r2, 8001c62 <HAL_ADC_IRQHandler+0x62>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c34:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001c38:	d003      	beq.n	8001c42 <HAL_ADC_IRQHandler+0x42>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c3a:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c3c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001c40:	d10f      	bne.n	8001c62 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	f022 0220 	bic.w	r2, r2, #32
 8001c48:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c50:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c54:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001c58:	d103      	bne.n	8001c62 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff ffc9 	bl	8001bfa <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	f06f 0212 	mvn.w	r2, #18
 8001c6e:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c70:	f005 0380 	and.w	r3, r5, #128	@ 0x80
  if (tmp1 && tmp2)
 8001c74:	f016 0f04 	tst.w	r6, #4
 8001c78:	d037      	beq.n	8001cea <HAL_ADC_IRQHandler+0xea>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d035      	beq.n	8001cea <HAL_ADC_IRQHandler+0xea>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c80:	f013 0f10 	tst.w	r3, #16
 8001c84:	d103      	bne.n	8001c8e <HAL_ADC_IRQHandler+0x8e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c8c:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 8001c96:	d121      	bne.n	8001cdc <HAL_ADC_IRQHandler+0xdc>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c9a:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 8001c9e:	d003      	beq.n	8001ca8 <HAL_ADC_IRQHandler+0xa8>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ca0:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ca2:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001ca6:	d119      	bne.n	8001cdc <HAL_ADC_IRQHandler+0xdc>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ca8:	685a      	ldr	r2, [r3, #4]
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001caa:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001cae:	d115      	bne.n	8001cdc <HAL_ADC_IRQHandler+0xdc>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cb0:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cb2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001cb6:	d111      	bne.n	8001cdc <HAL_ADC_IRQHandler+0xdc>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001cb8:	7e22      	ldrb	r2, [r4, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cba:	b97a      	cbnz	r2, 8001cdc <HAL_ADC_IRQHandler+0xdc>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cca:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cce:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001cd2:	d103      	bne.n	8001cdc <HAL_ADC_IRQHandler+0xdc>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7fe fd7b 	bl	80007d8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	f06f 020c 	mvn.w	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001cea:	f005 0340 	and.w	r3, r5, #64	@ 0x40
  if (tmp1 && tmp2)
 8001cee:	f016 0f01 	tst.w	r6, #1
 8001cf2:	d005      	beq.n	8001d00 <HAL_ADC_IRQHandler+0x100>
 8001cf4:	b123      	cbz	r3, 8001d00 <HAL_ADC_IRQHandler+0x100>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f013 0f01 	tst.w	r3, #1
 8001cfe:	d106      	bne.n	8001d0e <HAL_ADC_IRQHandler+0x10e>
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d00:	f005 6580 	and.w	r5, r5, #67108864	@ 0x4000000
  if (tmp1 && tmp2)
 8001d04:	f016 0f20 	tst.w	r6, #32
 8001d08:	d000      	beq.n	8001d0c <HAL_ADC_IRQHandler+0x10c>
 8001d0a:	b965      	cbnz	r5, 8001d26 <HAL_ADC_IRQHandler+0x126>
}
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d14:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d16:	4620      	mov	r0, r4
 8001d18:	f7ff ff70 	bl	8001bfc <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	f06f 0201 	mvn.w	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e7ec      	b.n	8001d00 <HAL_ADC_IRQHandler+0x100>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d26:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	f06f 0520 	mvn.w	r5, #32
 8001d34:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ff61 	bl	8001bfe <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	601d      	str	r5, [r3, #0]
}
 8001d40:	e7e4      	b.n	8001d0c <HAL_ADC_IRQHandler+0x10c>
	...

08001d44 <HAL_ADC_ConfigChannel>:
{
 8001d44:	b430      	push	{r4, r5}
 8001d46:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001d48:	2200      	movs	r2, #0
 8001d4a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001d4c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001d50:	2a01      	cmp	r2, #1
 8001d52:	f000 80c0 	beq.w	8001ed6 <HAL_ADC_ConfigChannel+0x192>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d5e:	680a      	ldr	r2, [r1, #0]
 8001d60:	2a09      	cmp	r2, #9
 8001d62:	d940      	bls.n	8001de6 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d64:	6804      	ldr	r4, [r0, #0]
 8001d66:	68e0      	ldr	r0, [r4, #12]
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d6e:	3a1e      	subs	r2, #30
 8001d70:	f04f 0c07 	mov.w	ip, #7
 8001d74:	fa0c f202 	lsl.w	r2, ip, r2
 8001d78:	ea20 0202 	bic.w	r2, r0, r2
 8001d7c:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d7e:	681c      	ldr	r4, [r3, #0]
 8001d80:	68e0      	ldr	r0, [r4, #12]
 8001d82:	880a      	ldrh	r2, [r1, #0]
 8001d84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d88:	3a1e      	subs	r2, #30
 8001d8a:	688d      	ldr	r5, [r1, #8]
 8001d8c:	fa05 f202 	lsl.w	r2, r5, r2
 8001d90:	4302      	orrs	r2, r0
 8001d92:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001d94:	684a      	ldr	r2, [r1, #4]
 8001d96:	2a06      	cmp	r2, #6
 8001d98:	d83c      	bhi.n	8001e14 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d9a:	681c      	ldr	r4, [r3, #0]
 8001d9c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001d9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001da2:	3a05      	subs	r2, #5
 8001da4:	f04f 0c1f 	mov.w	ip, #31
 8001da8:	fa0c f202 	lsl.w	r2, ip, r2
 8001dac:	ea20 0202 	bic.w	r2, r0, r2
 8001db0:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001db2:	681c      	ldr	r4, [r3, #0]
 8001db4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001db6:	684a      	ldr	r2, [r1, #4]
 8001db8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001dbc:	3a05      	subs	r2, #5
 8001dbe:	f8b1 c000 	ldrh.w	ip, [r1]
 8001dc2:	fa0c f202 	lsl.w	r2, ip, r2
 8001dc6:	4302      	orrs	r2, r0
 8001dc8:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	4a43      	ldr	r2, [pc, #268]	@ (8001edc <HAL_ADC_ConfigChannel+0x198>)
 8001dce:	4290      	cmp	r0, r2
 8001dd0:	d050      	beq.n	8001e74 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	4a41      	ldr	r2, [pc, #260]	@ (8001edc <HAL_ADC_ConfigChannel+0x198>)
 8001dd6:	4290      	cmp	r0, r2
 8001dd8:	d059      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001de0:	b002      	add	sp, #8
 8001de2:	bc30      	pop	{r4, r5}
 8001de4:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001de6:	6804      	ldr	r4, [r0, #0]
 8001de8:	6920      	ldr	r0, [r4, #16]
 8001dea:	b292      	uxth	r2, r2
 8001dec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001df0:	f04f 0c07 	mov.w	ip, #7
 8001df4:	fa0c f202 	lsl.w	r2, ip, r2
 8001df8:	ea20 0202 	bic.w	r2, r0, r2
 8001dfc:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dfe:	681c      	ldr	r4, [r3, #0]
 8001e00:	6920      	ldr	r0, [r4, #16]
 8001e02:	880a      	ldrh	r2, [r1, #0]
 8001e04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e08:	688d      	ldr	r5, [r1, #8]
 8001e0a:	fa05 f202 	lsl.w	r2, r5, r2
 8001e0e:	4302      	orrs	r2, r0
 8001e10:	6122      	str	r2, [r4, #16]
 8001e12:	e7bf      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001e14:	2a0c      	cmp	r2, #12
 8001e16:	d816      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e18:	681d      	ldr	r5, [r3, #0]
 8001e1a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001e1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e20:	3a23      	subs	r2, #35	@ 0x23
 8001e22:	241f      	movs	r4, #31
 8001e24:	fa04 f202 	lsl.w	r2, r4, r2
 8001e28:	ea20 0202 	bic.w	r2, r0, r2
 8001e2c:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e2e:	681d      	ldr	r5, [r3, #0]
 8001e30:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001e32:	684a      	ldr	r2, [r1, #4]
 8001e34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e38:	3a23      	subs	r2, #35	@ 0x23
 8001e3a:	880c      	ldrh	r4, [r1, #0]
 8001e3c:	fa04 f202 	lsl.w	r2, r4, r2
 8001e40:	4302      	orrs	r2, r0
 8001e42:	632a      	str	r2, [r5, #48]	@ 0x30
 8001e44:	e7c1      	b.n	8001dca <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e46:	681d      	ldr	r5, [r3, #0]
 8001e48:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001e4a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e4e:	3a41      	subs	r2, #65	@ 0x41
 8001e50:	241f      	movs	r4, #31
 8001e52:	fa04 f202 	lsl.w	r2, r4, r2
 8001e56:	ea20 0202 	bic.w	r2, r0, r2
 8001e5a:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e5c:	681d      	ldr	r5, [r3, #0]
 8001e5e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001e60:	684a      	ldr	r2, [r1, #4]
 8001e62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e66:	3a41      	subs	r2, #65	@ 0x41
 8001e68:	880c      	ldrh	r4, [r1, #0]
 8001e6a:	fa04 f202 	lsl.w	r2, r4, r2
 8001e6e:	4302      	orrs	r2, r0
 8001e70:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001e72:	e7aa      	b.n	8001dca <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e74:	680a      	ldr	r2, [r1, #0]
 8001e76:	2a12      	cmp	r2, #18
 8001e78:	d1ab      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e7a:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x19c>)
 8001e7c:	6850      	ldr	r0, [r2, #4]
 8001e7e:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8001e82:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e84:	6850      	ldr	r0, [r2, #4]
 8001e86:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001e8a:	6050      	str	r0, [r2, #4]
 8001e8c:	e7a1      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e8e:	680a      	ldr	r2, [r1, #0]
 8001e90:	4814      	ldr	r0, [pc, #80]	@ (8001ee4 <HAL_ADC_ConfigChannel+0x1a0>)
 8001e92:	4282      	cmp	r2, r0
 8001e94:	d001      	beq.n	8001e9a <HAL_ADC_ConfigChannel+0x156>
 8001e96:	2a11      	cmp	r2, #17
 8001e98:	d19f      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x19c>)
 8001e9c:	6850      	ldr	r0, [r2, #4]
 8001e9e:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001ea2:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ea4:	6850      	ldr	r0, [r2, #4]
 8001ea6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001eaa:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eac:	6809      	ldr	r1, [r1, #0]
 8001eae:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee4 <HAL_ADC_ConfigChannel+0x1a0>)
 8001eb0:	4291      	cmp	r1, r2
 8001eb2:	d192      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <HAL_ADC_ConfigChannel+0x1a4>)
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	490c      	ldr	r1, [pc, #48]	@ (8001eec <HAL_ADC_ConfigChannel+0x1a8>)
 8001eba:	fba1 1202 	umull	r1, r2, r1, r2
 8001ebe:	0c92      	lsrs	r2, r2, #18
 8001ec0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ec4:	0052      	lsls	r2, r2, #1
 8001ec6:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001ec8:	9a01      	ldr	r2, [sp, #4]
 8001eca:	2a00      	cmp	r2, #0
 8001ecc:	d085      	beq.n	8001dda <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8001ece:	9a01      	ldr	r2, [sp, #4]
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	9201      	str	r2, [sp, #4]
 8001ed4:	e7f8      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	e782      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x9c>
 8001eda:	bf00      	nop
 8001edc:	40012000 	.word	0x40012000
 8001ee0:	40012300 	.word	0x40012300
 8001ee4:	10000012 	.word	0x10000012
 8001ee8:	2000000c 	.word	0x2000000c
 8001eec:	431bde83 	.word	0x431bde83

08001ef0 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9301      	str	r3, [sp, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d06c      	beq.n	8001fd8 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8001efe:	2301      	movs	r3, #1
 8001f00:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f04:	6803      	ldr	r3, [r0, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	f012 0f01 	tst.w	r2, #1
 8001f0c:	d113      	bne.n	8001f36 <HAL_ADCEx_InjectedStart_IT+0x46>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f16:	4b35      	ldr	r3, [pc, #212]	@ (8001fec <HAL_ADCEx_InjectedStart_IT+0xfc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a35      	ldr	r2, [pc, #212]	@ (8001ff0 <HAL_ADCEx_InjectedStart_IT+0x100>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	0c9b      	lsrs	r3, r3, #18
 8001f22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f26:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001f28:	e002      	b.n	8001f30 <HAL_ADCEx_InjectedStart_IT+0x40>
    {
      counter--;
 8001f2a:	9b01      	ldr	r3, [sp, #4]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001f30:	9b01      	ldr	r3, [sp, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADCEx_InjectedStart_IT+0x3a>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f36:	6802      	ldr	r2, [r0, #0]
 8001f38:	6893      	ldr	r3, [r2, #8]
 8001f3a:	f013 0f01 	tst.w	r3, #1
 8001f3e:	d040      	beq.n	8001fc2 <HAL_ADCEx_InjectedStart_IT+0xd2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f4e:	6403      	str	r3, [r0, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f50:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f52:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f56:	d101      	bne.n	8001f5c <HAL_ADCEx_InjectedStart_IT+0x6c>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	6443      	str	r3, [r0, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001f62:	f06f 0304 	mvn.w	r3, #4
 8001f66:	6013      	str	r3, [r2, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001f68:	6802      	ldr	r2, [r0, #0]
 8001f6a:	6853      	ldr	r3, [r2, #4]
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f70:	6053      	str	r3, [r2, #4]
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f72:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <HAL_ADCEx_InjectedStart_IT+0x104>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f013 0f1f 	tst.w	r3, #31
 8001f7a:	d10e      	bne.n	8001f9a <HAL_ADCEx_InjectedStart_IT+0xaa>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001f7c:	6802      	ldr	r2, [r0, #0]
 8001f7e:	6891      	ldr	r1, [r2, #8]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001f80:	6853      	ldr	r3, [r2, #4]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if (tmp1 && tmp2)
 8001f86:	f411 1f40 	tst.w	r1, #3145728	@ 0x300000
 8001f8a:	d127      	bne.n	8001fdc <HAL_ADCEx_InjectedStart_IT+0xec>
 8001f8c:	bb43      	cbnz	r3, 8001fe0 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001f8e:	6893      	ldr	r3, [r2, #8]
 8001f90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f94:	6093      	str	r3, [r2, #8]
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
  }

  /* Return function status */
  return HAL_OK;
 8001f96:	2000      	movs	r0, #0
 8001f98:	e01c      	b.n	8001fd4 <HAL_ADCEx_InjectedStart_IT+0xe4>
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001f9a:	6803      	ldr	r3, [r0, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8001fa8:	4813      	ldr	r0, [pc, #76]	@ (8001ff8 <HAL_ADCEx_InjectedStart_IT+0x108>)
 8001faa:	4283      	cmp	r3, r0
 8001fac:	d001      	beq.n	8001fb2 <HAL_ADCEx_InjectedStart_IT+0xc2>
  return HAL_OK;
 8001fae:	2000      	movs	r0, #0
 8001fb0:	e010      	b.n	8001fd4 <HAL_ADCEx_InjectedStart_IT+0xe4>
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8001fb2:	b9ba      	cbnz	r2, 8001fe4 <HAL_ADCEx_InjectedStart_IT+0xf4>
 8001fb4:	b9c1      	cbnz	r1, 8001fe8 <HAL_ADCEx_InjectedStart_IT+0xf8>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001fbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e008      	b.n	8001fd4 <HAL_ADCEx_InjectedStart_IT+0xe4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fca:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 8001fd2:	2000      	movs	r0, #0
}
 8001fd4:	b002      	add	sp, #8
 8001fd6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001fd8:	2002      	movs	r0, #2
 8001fda:	e7fb      	b.n	8001fd4 <HAL_ADCEx_InjectedStart_IT+0xe4>
  return HAL_OK;
 8001fdc:	2000      	movs	r0, #0
 8001fde:	e7f9      	b.n	8001fd4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e7f7      	b.n	8001fd4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	e7f5      	b.n	8001fd4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e7f3      	b.n	8001fd4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8001fec:	2000000c 	.word	0x2000000c
 8001ff0:	431bde83 	.word	0x431bde83
 8001ff4:	40012300 	.word	0x40012300
 8001ff8:	40012000 	.word	0x40012000

08001ffc <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002000:	2a01      	cmp	r2, #1
 8002002:	f000 80f4 	beq.w	80021ee <HAL_ADCEx_InjectedConfigChannel+0x1f2>
{
 8002006:	b430      	push	{r4, r5}
 8002008:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800200a:	2201      	movs	r2, #1
 800200c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002010:	680a      	ldr	r2, [r1, #0]
 8002012:	2a09      	cmp	r2, #9
 8002014:	f240 8089 	bls.w	800212a <HAL_ADCEx_InjectedConfigChannel+0x12e>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002018:	6805      	ldr	r5, [r0, #0]
 800201a:	68e8      	ldr	r0, [r5, #12]
 800201c:	b292      	uxth	r2, r2
 800201e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002022:	3a1e      	subs	r2, #30
 8002024:	2407      	movs	r4, #7
 8002026:	fa04 f202 	lsl.w	r2, r4, r2
 800202a:	ea20 0202 	bic.w	r2, r0, r2
 800202e:	60ea      	str	r2, [r5, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002030:	681d      	ldr	r5, [r3, #0]
 8002032:	68e8      	ldr	r0, [r5, #12]
 8002034:	688c      	ldr	r4, [r1, #8]
 8002036:	880a      	ldrh	r2, [r1, #0]
 8002038:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800203c:	3a1e      	subs	r2, #30
 800203e:	4094      	lsls	r4, r2
 8002040:	4320      	orrs	r0, r4
 8002042:	60e8      	str	r0, [r5, #12]
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002048:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800204c:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800204e:	681c      	ldr	r4, [r3, #0]
 8002050:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002052:	6908      	ldr	r0, [r1, #16]
 8002054:	3801      	subs	r0, #1
 8002056:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800205a:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800205c:	681c      	ldr	r4, [r3, #0]
 800205e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002060:	684a      	ldr	r2, [r1, #4]
 8002062:	690d      	ldr	r5, [r1, #16]
 8002064:	1b52      	subs	r2, r2, r5
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	3203      	adds	r2, #3
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002070:	f04f 0c1f 	mov.w	ip, #31
 8002074:	fa0c f202 	lsl.w	r2, ip, r2
 8002078:	ea20 0202 	bic.w	r2, r0, r2
 800207c:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800207e:	681c      	ldr	r4, [r3, #0]
 8002080:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002082:	684a      	ldr	r2, [r1, #4]
 8002084:	690d      	ldr	r5, [r1, #16]
 8002086:	1b52      	subs	r2, r2, r5
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	3203      	adds	r2, #3
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002092:	f8b1 c000 	ldrh.w	ip, [r1]
 8002096:	fa0c f202 	lsl.w	r2, ip, r2
 800209a:	4302      	orrs	r2, r0
 800209c:	63a2      	str	r2, [r4, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800209e:	6988      	ldr	r0, [r1, #24]
 80020a0:	4a54      	ldr	r2, [pc, #336]	@ (80021f4 <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 80020a2:	4290      	cmp	r0, r2
 80020a4:	d056      	beq.n	8002154 <HAL_ADCEx_InjectedConfigChannel+0x158>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	6882      	ldr	r2, [r0, #8]
 80020aa:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80020ae:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	6882      	ldr	r2, [r0, #8]
 80020b4:	698c      	ldr	r4, [r1, #24]
 80020b6:	4322      	orrs	r2, r4
 80020b8:	6082      	str	r2, [r0, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	6882      	ldr	r2, [r0, #8]
 80020be:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80020c2:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	6882      	ldr	r2, [r0, #8]
 80020c8:	69cc      	ldr	r4, [r1, #28]
 80020ca:	4322      	orrs	r2, r4
 80020cc:	6082      	str	r2, [r0, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80020ce:	7d4a      	ldrb	r2, [r1, #21]
 80020d0:	2a00      	cmp	r2, #0
 80020d2:	d04a      	beq.n	800216a <HAL_ADCEx_InjectedConfigChannel+0x16e>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	6842      	ldr	r2, [r0, #4]
 80020d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020dc:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80020de:	7d0a      	ldrb	r2, [r1, #20]
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	d048      	beq.n	8002176 <HAL_ADCEx_InjectedConfigChannel+0x17a>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	6842      	ldr	r2, [r0, #4]
 80020e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020ec:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 80020ee:	684a      	ldr	r2, [r1, #4]
 80020f0:	2a02      	cmp	r2, #2
 80020f2:	d046      	beq.n	8002182 <HAL_ADCEx_InjectedConfigChannel+0x186>
 80020f4:	2a03      	cmp	r2, #3
 80020f6:	d04f      	beq.n	8002198 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 80020f8:	2a01      	cmp	r2, #1
 80020fa:	d158      	bne.n	80021ae <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	6942      	ldr	r2, [r0, #20]
 8002100:	f36f 020b 	bfc	r2, #0, #12
 8002104:	6142      	str	r2, [r0, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	6942      	ldr	r2, [r0, #20]
 800210a:	68cc      	ldr	r4, [r1, #12]
 800210c:	4322      	orrs	r2, r4
 800210e:	6142      	str	r2, [r0, #20]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	4a39      	ldr	r2, [pc, #228]	@ (80021f8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 8002114:	4290      	cmp	r0, r2
 8002116:	d055      	beq.n	80021c4 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	4a37      	ldr	r2, [pc, #220]	@ (80021f8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 800211c:	4290      	cmp	r0, r2
 800211e:	d05a      	beq.n	80021d6 <HAL_ADCEx_InjectedConfigChannel+0x1da>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002120:	2000      	movs	r0, #0
 8002122:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 8002126:	bc30      	pop	{r4, r5}
 8002128:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800212a:	6805      	ldr	r5, [r0, #0]
 800212c:	6928      	ldr	r0, [r5, #16]
 800212e:	b292      	uxth	r2, r2
 8002130:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002134:	2407      	movs	r4, #7
 8002136:	fa04 f202 	lsl.w	r2, r4, r2
 800213a:	ea20 0202 	bic.w	r2, r0, r2
 800213e:	612a      	str	r2, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002140:	681d      	ldr	r5, [r3, #0]
 8002142:	6928      	ldr	r0, [r5, #16]
 8002144:	688c      	ldr	r4, [r1, #8]
 8002146:	880a      	ldrh	r2, [r1, #0]
 8002148:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800214c:	4094      	lsls	r4, r2
 800214e:	4320      	orrs	r0, r4
 8002150:	6128      	str	r0, [r5, #16]
 8002152:	e777      	b.n	8002044 <HAL_ADCEx_InjectedConfigChannel+0x48>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	6882      	ldr	r2, [r0, #8]
 8002158:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800215c:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	6882      	ldr	r2, [r0, #8]
 8002162:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002166:	6082      	str	r2, [r0, #8]
 8002168:	e7b1      	b.n	80020ce <HAL_ADCEx_InjectedConfigChannel+0xd2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	6842      	ldr	r2, [r0, #4]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002172:	6042      	str	r2, [r0, #4]
 8002174:	e7b3      	b.n	80020de <HAL_ADCEx_InjectedConfigChannel+0xe2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	6842      	ldr	r2, [r0, #4]
 800217a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800217e:	6042      	str	r2, [r0, #4]
 8002180:	e7b5      	b.n	80020ee <HAL_ADCEx_InjectedConfigChannel+0xf2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	6982      	ldr	r2, [r0, #24]
 8002186:	f36f 020b 	bfc	r2, #0, #12
 800218a:	6182      	str	r2, [r0, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	6982      	ldr	r2, [r0, #24]
 8002190:	68cc      	ldr	r4, [r1, #12]
 8002192:	4322      	orrs	r2, r4
 8002194:	6182      	str	r2, [r0, #24]
      break;
 8002196:	e7bb      	b.n	8002110 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	69c2      	ldr	r2, [r0, #28]
 800219c:	f36f 020b 	bfc	r2, #0, #12
 80021a0:	61c2      	str	r2, [r0, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	69c2      	ldr	r2, [r0, #28]
 80021a6:	68cc      	ldr	r4, [r1, #12]
 80021a8:	4322      	orrs	r2, r4
 80021aa:	61c2      	str	r2, [r0, #28]
      break;
 80021ac:	e7b0      	b.n	8002110 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	6a02      	ldr	r2, [r0, #32]
 80021b2:	f36f 020b 	bfc	r2, #0, #12
 80021b6:	6202      	str	r2, [r0, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	6a02      	ldr	r2, [r0, #32]
 80021bc:	68cc      	ldr	r4, [r1, #12]
 80021be:	4322      	orrs	r2, r4
 80021c0:	6202      	str	r2, [r0, #32]
      break;
 80021c2:	e7a5      	b.n	8002110 <HAL_ADCEx_InjectedConfigChannel+0x114>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80021c4:	680a      	ldr	r2, [r1, #0]
 80021c6:	2a12      	cmp	r2, #18
 80021c8:	d1a6      	bne.n	8002118 <HAL_ADCEx_InjectedConfigChannel+0x11c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021ca:	480c      	ldr	r0, [pc, #48]	@ (80021fc <HAL_ADCEx_InjectedConfigChannel+0x200>)
 80021cc:	6842      	ldr	r2, [r0, #4]
 80021ce:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80021d2:	6042      	str	r2, [r0, #4]
 80021d4:	e7a0      	b.n	8002118 <HAL_ADCEx_InjectedConfigChannel+0x11c>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80021d6:	680a      	ldr	r2, [r1, #0]
 80021d8:	4909      	ldr	r1, [pc, #36]	@ (8002200 <HAL_ADCEx_InjectedConfigChannel+0x204>)
 80021da:	428a      	cmp	r2, r1
 80021dc:	d001      	beq.n	80021e2 <HAL_ADCEx_InjectedConfigChannel+0x1e6>
 80021de:	2a11      	cmp	r2, #17
 80021e0:	d19e      	bne.n	8002120 <HAL_ADCEx_InjectedConfigChannel+0x124>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021e2:	4906      	ldr	r1, [pc, #24]	@ (80021fc <HAL_ADCEx_InjectedConfigChannel+0x200>)
 80021e4:	684a      	ldr	r2, [r1, #4]
 80021e6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021ea:	604a      	str	r2, [r1, #4]
 80021ec:	e798      	b.n	8002120 <HAL_ADCEx_InjectedConfigChannel+0x124>
  __HAL_LOCK(hadc);
 80021ee:	2002      	movs	r0, #2
}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	000f0001 	.word	0x000f0001
 80021f8:	40012000 	.word	0x40012000
 80021fc:	40012300 	.word	0x40012300
 8002200:	10000012 	.word	0x10000012

08002204 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002204:	2800      	cmp	r0, #0
 8002206:	f000 80a1 	beq.w	800234c <HAL_CAN_Init+0x148>
{
 800220a:	b538      	push	{r3, r4, r5, lr}
 800220c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800220e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002212:	b1d3      	cbz	r3, 800224a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002214:	6822      	ldr	r2, [r4, #0]
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800221e:	f7ff fb0b 	bl	8001838 <HAL_GetTick>
 8002222:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	f012 0f01 	tst.w	r2, #1
 800222c:	d110      	bne.n	8002250 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800222e:	f7ff fb03 	bl	8001838 <HAL_GetTick>
 8002232:	1b40      	subs	r0, r0, r5
 8002234:	280a      	cmp	r0, #10
 8002236:	d9f5      	bls.n	8002224 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002238:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800223a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800223e:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002240:	2305      	movs	r3, #5
 8002242:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8002246:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002248:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800224a:	f7fe f9cf 	bl	80005ec <HAL_CAN_MspInit>
 800224e:	e7e1      	b.n	8002214 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f022 0202 	bic.w	r2, r2, #2
 8002256:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002258:	f7ff faee 	bl	8001838 <HAL_GetTick>
 800225c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	f012 0f02 	tst.w	r2, #2
 8002266:	d00d      	beq.n	8002284 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002268:	f7ff fae6 	bl	8001838 <HAL_GetTick>
 800226c:	1b40      	subs	r0, r0, r5
 800226e:	280a      	cmp	r0, #10
 8002270:	d9f5      	bls.n	800225e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002272:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002278:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800227a:	2305      	movs	r3, #5
 800227c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8002280:	2001      	movs	r0, #1
 8002282:	e7e1      	b.n	8002248 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002284:	7e22      	ldrb	r2, [r4, #24]
 8002286:	2a01      	cmp	r2, #1
 8002288:	d03d      	beq.n	8002306 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002290:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8002292:	7e63      	ldrb	r3, [r4, #25]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d03b      	beq.n	8002310 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002298:	6822      	ldr	r2, [r4, #0]
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022a0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022a2:	7ea3      	ldrb	r3, [r4, #26]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d039      	beq.n	800231c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022a8:	6822      	ldr	r2, [r4, #0]
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	f023 0320 	bic.w	r3, r3, #32
 80022b0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022b2:	7ee3      	ldrb	r3, [r4, #27]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d037      	beq.n	8002328 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	f043 0310 	orr.w	r3, r3, #16
 80022c0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022c2:	7f23      	ldrb	r3, [r4, #28]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d035      	beq.n	8002334 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022c8:	6822      	ldr	r2, [r4, #0]
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	f023 0308 	bic.w	r3, r3, #8
 80022d0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022d2:	7f63      	ldrb	r3, [r4, #29]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d033      	beq.n	8002340 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022d8:	6822      	ldr	r2, [r4, #0]
 80022da:	6813      	ldr	r3, [r2, #0]
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022e2:	68a3      	ldr	r3, [r4, #8]
 80022e4:	68e2      	ldr	r2, [r4, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	6922      	ldr	r2, [r4, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	6962      	ldr	r2, [r4, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	6862      	ldr	r2, [r4, #4]
 80022f2:	3a01      	subs	r2, #1
 80022f4:	6821      	ldr	r1, [r4, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022fa:	2000      	movs	r0, #0
 80022fc:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80022fe:	2301      	movs	r3, #1
 8002300:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002304:	e7a0      	b.n	8002248 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e7c0      	b.n	8002292 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	6813      	ldr	r3, [r2, #0]
 8002314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e7c2      	b.n	80022a2 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800231c:	6822      	ldr	r2, [r4, #0]
 800231e:	6813      	ldr	r3, [r2, #0]
 8002320:	f043 0320 	orr.w	r3, r3, #32
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e7c4      	b.n	80022b2 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002328:	6822      	ldr	r2, [r4, #0]
 800232a:	6813      	ldr	r3, [r2, #0]
 800232c:	f023 0310 	bic.w	r3, r3, #16
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e7c6      	b.n	80022c2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	6813      	ldr	r3, [r2, #0]
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e7c8      	b.n	80022d2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002340:	6822      	ldr	r2, [r4, #0]
 8002342:	6813      	ldr	r3, [r2, #0]
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e7ca      	b.n	80022e2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800234c:	2001      	movs	r0, #1
}
 800234e:	4770      	bx	lr

08002350 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002350:	2800      	cmp	r0, #0
 8002352:	db07      	blt.n	8002364 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002354:	f000 021f 	and.w	r2, r0, #31
 8002358:	0940      	lsrs	r0, r0, #5
 800235a:	2301      	movs	r3, #1
 800235c:	4093      	lsls	r3, r2
 800235e:	4a02      	ldr	r2, [pc, #8]	@ (8002368 <__NVIC_EnableIRQ+0x18>)
 8002360:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800236c:	2800      	cmp	r0, #0
 800236e:	db08      	blt.n	8002382 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	0109      	lsls	r1, r1, #4
 8002372:	b2c9      	uxtb	r1, r1
 8002374:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002378:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800237c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002380:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	f000 000f 	and.w	r0, r0, #15
 8002386:	0109      	lsls	r1, r1, #4
 8002388:	b2c9      	uxtb	r1, r1
 800238a:	4b01      	ldr	r3, [pc, #4]	@ (8002390 <__NVIC_SetPriority+0x24>)
 800238c:	5419      	strb	r1, [r3, r0]
  }
}
 800238e:	4770      	bx	lr
 8002390:	e000ed14 	.word	0xe000ed14

08002394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002394:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002396:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239a:	f1c0 0c07 	rsb	ip, r0, #7
 800239e:	f1bc 0f04 	cmp.w	ip, #4
 80023a2:	bf28      	it	cs
 80023a4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a8:	1d03      	adds	r3, r0, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d90f      	bls.n	80023ce <NVIC_EncodePriority+0x3a>
 80023ae:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 3eff 	mov.w	lr, #4294967295
 80023b4:	fa0e f00c 	lsl.w	r0, lr, ip
 80023b8:	ea21 0100 	bic.w	r1, r1, r0
 80023bc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023be:	fa0e fe03 	lsl.w	lr, lr, r3
 80023c2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80023c6:	ea41 0002 	orr.w	r0, r1, r2
 80023ca:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	2300      	movs	r3, #0
 80023d0:	e7ee      	b.n	80023b0 <NVIC_EncodePriority+0x1c>
	...

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4a07      	ldr	r2, [pc, #28]	@ (80023f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80023d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	0200      	lsls	r0, r0, #8
 80023e2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80023e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80023f0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f8:	b510      	push	{r4, lr}
 80023fa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_NVIC_SetPriority+0x1c>)
 80023fe:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002400:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002404:	f7ff ffc6 	bl	8002394 <NVIC_EncodePriority>
 8002408:	4601      	mov	r1, r0
 800240a:	4620      	mov	r0, r4
 800240c:	f7ff ffae 	bl	800236c <__NVIC_SetPriority>
}
 8002410:	bd10      	pop	{r4, pc}
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241a:	f7ff ff99 	bl	8002350 <__NVIC_EnableIRQ>
}
 800241e:	bd08      	pop	{r3, pc}

08002420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002420:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002422:	6805      	ldr	r5, [r0, #0]
 8002424:	682c      	ldr	r4, [r5, #0]
 8002426:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 800242a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800242c:	6804      	ldr	r4, [r0, #0]
 800242e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002430:	6883      	ldr	r3, [r0, #8]
 8002432:	2b40      	cmp	r3, #64	@ 0x40
 8002434:	d005      	beq.n	8002442 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002436:	6803      	ldr	r3, [r0, #0]
 8002438:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800243a:	6803      	ldr	r3, [r0, #0]
 800243c:	60da      	str	r2, [r3, #12]
  }
}
 800243e:	bc30      	pop	{r4, r5}
 8002440:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002442:	6803      	ldr	r3, [r0, #0]
 8002444:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002446:	6803      	ldr	r3, [r0, #0]
 8002448:	60d9      	str	r1, [r3, #12]
 800244a:	e7f8      	b.n	800243e <DMA_SetConfig+0x1e>

0800244c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800244c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800244e:	6803      	ldr	r3, [r0, #0]
 8002450:	b2d9      	uxtb	r1, r3
 8002452:	3910      	subs	r1, #16
 8002454:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <DMA_CalcBaseAndBitshift+0x34>)
 8002456:	fba2 4201 	umull	r4, r2, r2, r1
 800245a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800245c:	4c09      	ldr	r4, [pc, #36]	@ (8002484 <DMA_CalcBaseAndBitshift+0x38>)
 800245e:	5ca2      	ldrb	r2, [r4, r2]
 8002460:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002462:	295f      	cmp	r1, #95	@ 0x5f
 8002464:	d907      	bls.n	8002476 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002466:	f36f 0309 	bfc	r3, #0, #10
 800246a:	3304      	adds	r3, #4
 800246c:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800246e:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8002470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002474:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002476:	f36f 0309 	bfc	r3, #0, #10
 800247a:	6583      	str	r3, [r0, #88]	@ 0x58
 800247c:	e7f7      	b.n	800246e <DMA_CalcBaseAndBitshift+0x22>
 800247e:	bf00      	nop
 8002480:	aaaaaaab 	.word	0xaaaaaaab
 8002484:	08006218 	.word	0x08006218

08002488 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002488:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800248a:	6982      	ldr	r2, [r0, #24]
 800248c:	b992      	cbnz	r2, 80024b4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800248e:	2b01      	cmp	r3, #1
 8002490:	d00a      	beq.n	80024a8 <DMA_CheckFifoParam+0x20>
 8002492:	2b02      	cmp	r3, #2
 8002494:	d002      	beq.n	800249c <DMA_CheckFifoParam+0x14>
 8002496:	b10b      	cbz	r3, 800249c <DMA_CheckFifoParam+0x14>
 8002498:	2000      	movs	r0, #0
 800249a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800249c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800249e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80024a2:	d128      	bne.n	80024f6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2000      	movs	r0, #0
 80024a6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80024aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024ae:	d024      	beq.n	80024fa <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2000      	movs	r0, #0
 80024b2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024b4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80024b8:	d009      	beq.n	80024ce <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d925      	bls.n	800250a <DMA_CheckFifoParam+0x82>
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d125      	bne.n	800250e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80024c4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80024c8:	d123      	bne.n	8002512 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2000      	movs	r0, #0
 80024cc:	4770      	bx	lr
    switch (tmp)
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d803      	bhi.n	80024da <DMA_CheckFifoParam+0x52>
 80024d2:	e8df f003 	tbb	[pc, r3]
 80024d6:	0414      	.short	0x0414
 80024d8:	0a14      	.short	0x0a14
 80024da:	2000      	movs	r0, #0
 80024dc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024de:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80024e0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80024e4:	d10d      	bne.n	8002502 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2000      	movs	r0, #0
 80024e8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024ea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80024ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024f0:	d009      	beq.n	8002506 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	2000      	movs	r0, #0
 80024f4:	4770      	bx	lr
        status = HAL_ERROR;
 80024f6:	2001      	movs	r0, #1
 80024f8:	4770      	bx	lr
        status = HAL_ERROR;
 80024fa:	2001      	movs	r0, #1
 80024fc:	4770      	bx	lr
      status = HAL_ERROR;
 80024fe:	2001      	movs	r0, #1
 8002500:	4770      	bx	lr
        status = HAL_ERROR;
 8002502:	2001      	movs	r0, #1
 8002504:	4770      	bx	lr
        status = HAL_ERROR;
 8002506:	2001      	movs	r0, #1
 8002508:	4770      	bx	lr
      status = HAL_ERROR;
 800250a:	2001      	movs	r0, #1
 800250c:	4770      	bx	lr
    switch (tmp)
 800250e:	2000      	movs	r0, #0
 8002510:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8002512:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002514:	4770      	bx	lr
	...

08002518 <HAL_DMA_Init>:
{
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff f98c 	bl	8001838 <HAL_GetTick>
  if(hdma == NULL)
 8002520:	2c00      	cmp	r4, #0
 8002522:	d05b      	beq.n	80025dc <HAL_DMA_Init+0xc4>
 8002524:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800252c:	2300      	movs	r3, #0
 800252e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	f012 0f01 	tst.w	r2, #1
 8002544:	d00a      	beq.n	800255c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002546:	f7ff f977 	bl	8001838 <HAL_GetTick>
 800254a:	1b43      	subs	r3, r0, r5
 800254c:	2b05      	cmp	r3, #5
 800254e:	d9f5      	bls.n	800253c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002550:	2320      	movs	r3, #32
 8002552:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002554:	2003      	movs	r0, #3
 8002556:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800255a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800255c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800255e:	4920      	ldr	r1, [pc, #128]	@ (80025e0 <HAL_DMA_Init+0xc8>)
 8002560:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002562:	6862      	ldr	r2, [r4, #4]
 8002564:	68a0      	ldr	r0, [r4, #8]
 8002566:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002568:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256c:	6920      	ldr	r0, [r4, #16]
 800256e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002570:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002572:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002574:	69a0      	ldr	r0, [r4, #24]
 8002576:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002578:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800257c:	6a20      	ldr	r0, [r4, #32]
 800257e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002580:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002582:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002584:	2904      	cmp	r1, #4
 8002586:	d01e      	beq.n	80025c6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002588:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800258a:	6826      	ldr	r6, [r4, #0]
 800258c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800258e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002592:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002594:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002596:	2b04      	cmp	r3, #4
 8002598:	d107      	bne.n	80025aa <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800259a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800259c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800259e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80025a0:	b11b      	cbz	r3, 80025aa <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025a2:	4620      	mov	r0, r4
 80025a4:	f7ff ff70 	bl	8002488 <DMA_CheckFifoParam>
 80025a8:	b990      	cbnz	r0, 80025d0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80025aa:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7ff ff4d 	bl	800244c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80025b4:	233f      	movs	r3, #63	@ 0x3f
 80025b6:	4093      	lsls	r3, r2
 80025b8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ba:	2000      	movs	r0, #0
 80025bc:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80025be:	2301      	movs	r3, #1
 80025c0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80025c4:	e7c9      	b.n	800255a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80025c8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80025ca:	4301      	orrs	r1, r0
 80025cc:	430a      	orrs	r2, r1
 80025ce:	e7db      	b.n	8002588 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025d0:	2340      	movs	r3, #64	@ 0x40
 80025d2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80025d4:	2001      	movs	r0, #1
 80025d6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80025da:	e7be      	b.n	800255a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80025dc:	2001      	movs	r0, #1
 80025de:	e7bc      	b.n	800255a <HAL_DMA_Init+0x42>
 80025e0:	f010803f 	.word	0xf010803f

080025e4 <HAL_DMA_Start_IT>:
{
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80025ea:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80025ee:	2801      	cmp	r0, #1
 80025f0:	d02a      	beq.n	8002648 <HAL_DMA_Start_IT+0x64>
 80025f2:	2001      	movs	r0, #1
 80025f4:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80025f8:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80025fc:	2801      	cmp	r0, #1
 80025fe:	d004      	beq.n	800260a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002600:	2300      	movs	r3, #0
 8002602:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8002606:	2002      	movs	r0, #2
}
 8002608:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800260a:	2002      	movs	r0, #2
 800260c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002610:	2000      	movs	r0, #0
 8002612:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff ff03 	bl	8002420 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800261c:	233f      	movs	r3, #63	@ 0x3f
 800261e:	4093      	lsls	r3, r2
 8002620:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002622:	6822      	ldr	r2, [r4, #0]
 8002624:	6813      	ldr	r3, [r2, #0]
 8002626:	f043 0316 	orr.w	r3, r3, #22
 800262a:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800262c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800262e:	b123      	cbz	r3, 800263a <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002630:	6822      	ldr	r2, [r4, #0]
 8002632:	6813      	ldr	r3, [r2, #0]
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800263a:	6822      	ldr	r2, [r4, #0]
 800263c:	6813      	ldr	r3, [r2, #0]
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2000      	movs	r0, #0
 8002646:	e7df      	b.n	8002608 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002648:	2002      	movs	r0, #2
 800264a:	e7dd      	b.n	8002608 <HAL_DMA_Start_IT+0x24>

0800264c <HAL_DMA_Abort>:
{
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002650:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8002652:	f7ff f8f1 	bl	8001838 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002656:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800265a:	2b02      	cmp	r3, #2
 800265c:	d006      	beq.n	800266c <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265e:	2380      	movs	r3, #128	@ 0x80
 8002660:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002662:	2300      	movs	r3, #0
 8002664:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
}
 800266a:	bd70      	pop	{r4, r5, r6, pc}
 800266c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800266e:	6822      	ldr	r2, [r4, #0]
 8002670:	6813      	ldr	r3, [r2, #0]
 8002672:	f023 0316 	bic.w	r3, r3, #22
 8002676:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002678:	6822      	ldr	r2, [r4, #0]
 800267a:	6953      	ldr	r3, [r2, #20]
 800267c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002680:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002682:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002684:	b1e3      	cbz	r3, 80026c0 <HAL_DMA_Abort+0x74>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	6813      	ldr	r3, [r2, #0]
 800268a:	f023 0308 	bic.w	r3, r3, #8
 800268e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	6813      	ldr	r3, [r2, #0]
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f013 0f01 	tst.w	r3, #1
 80026a2:	d011      	beq.n	80026c8 <HAL_DMA_Abort+0x7c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a4:	f7ff f8c8 	bl	8001838 <HAL_GetTick>
 80026a8:	1b43      	subs	r3, r0, r5
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d9f5      	bls.n	800269a <HAL_DMA_Abort+0x4e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ae:	2320      	movs	r3, #32
 80026b0:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b2:	2003      	movs	r0, #3
 80026b4:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80026b8:	2300      	movs	r3, #0
 80026ba:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 80026be:	e7d4      	b.n	800266a <HAL_DMA_Abort+0x1e>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1df      	bne.n	8002686 <HAL_DMA_Abort+0x3a>
 80026c6:	e7e3      	b.n	8002690 <HAL_DMA_Abort+0x44>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80026ca:	233f      	movs	r3, #63	@ 0x3f
 80026cc:	4093      	lsls	r3, r2
 80026ce:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80026dc:	e7c5      	b.n	800266a <HAL_DMA_Abort+0x1e>

080026de <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026de:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d003      	beq.n	80026ee <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e6:	2380      	movs	r3, #128	@ 0x80
 80026e8:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80026ea:	2001      	movs	r0, #1
 80026ec:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ee:	2305      	movs	r3, #5
 80026f0:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80026f4:	6802      	ldr	r2, [r0, #0]
 80026f6:	6813      	ldr	r3, [r2, #0]
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80026fe:	2000      	movs	r0, #0
}
 8002700:	4770      	bx	lr
	...

08002704 <HAL_DMA_IRQHandler>:
{
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	b083      	sub	sp, #12
 8002708:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800270e:	4b72      	ldr	r3, [pc, #456]	@ (80028d8 <HAL_DMA_IRQHandler+0x1d4>)
 8002710:	681d      	ldr	r5, [r3, #0]
 8002712:	4b72      	ldr	r3, [pc, #456]	@ (80028dc <HAL_DMA_IRQHandler+0x1d8>)
 8002714:	fba3 3505 	umull	r3, r5, r3, r5
 8002718:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800271a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 800271c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800271e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002720:	2308      	movs	r3, #8
 8002722:	4093      	lsls	r3, r2
 8002724:	4233      	tst	r3, r6
 8002726:	d010      	beq.n	800274a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002728:	6803      	ldr	r3, [r0, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	f012 0f04 	tst.w	r2, #4
 8002730:	d00b      	beq.n	800274a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	f022 0204 	bic.w	r2, r2, #4
 8002738:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800273a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800273c:	2308      	movs	r3, #8
 800273e:	4093      	lsls	r3, r2
 8002740:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002742:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800274a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800274c:	2301      	movs	r3, #1
 800274e:	4093      	lsls	r3, r2
 8002750:	4233      	tst	r3, r6
 8002752:	d009      	beq.n	8002768 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002754:	6822      	ldr	r2, [r4, #0]
 8002756:	6952      	ldr	r2, [r2, #20]
 8002758:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800275c:	d004      	beq.n	8002768 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002760:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002768:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800276a:	2304      	movs	r3, #4
 800276c:	4093      	lsls	r3, r2
 800276e:	4233      	tst	r3, r6
 8002770:	d009      	beq.n	8002786 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002772:	6822      	ldr	r2, [r4, #0]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	f012 0f02 	tst.w	r2, #2
 800277a:	d004      	beq.n	8002786 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800277c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800277e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002786:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002788:	2310      	movs	r3, #16
 800278a:	4093      	lsls	r3, r2
 800278c:	4233      	tst	r3, r6
 800278e:	d024      	beq.n	80027da <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002790:	6822      	ldr	r2, [r4, #0]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	f012 0f08 	tst.w	r2, #8
 8002798:	d01f      	beq.n	80027da <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800279a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80027a4:	d00d      	beq.n	80027c2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80027ac:	d104      	bne.n	80027b8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80027ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027b0:	b19b      	cbz	r3, 80027da <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80027b2:	4620      	mov	r0, r4
 80027b4:	4798      	blx	r3
 80027b6:	e010      	b.n	80027da <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027b8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80027ba:	b173      	cbz	r3, 80027da <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80027bc:	4620      	mov	r0, r4
 80027be:	4798      	blx	r3
 80027c0:	e00b      	b.n	80027da <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80027c8:	d103      	bne.n	80027d2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f022 0208 	bic.w	r2, r2, #8
 80027d0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80027d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027d4:	b10b      	cbz	r3, 80027da <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80027d6:	4620      	mov	r0, r4
 80027d8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027da:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80027dc:	2320      	movs	r3, #32
 80027de:	4093      	lsls	r3, r2
 80027e0:	4233      	tst	r3, r6
 80027e2:	d054      	beq.n	800288e <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027e4:	6822      	ldr	r2, [r4, #0]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	f012 0f10 	tst.w	r2, #16
 80027ec:	d04f      	beq.n	800288e <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ee:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027f0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d00e      	beq.n	8002816 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002800:	d033      	beq.n	800286a <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002808:	d12a      	bne.n	8002860 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 800280a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800280c:	2b00      	cmp	r3, #0
 800280e:	d03e      	beq.n	800288e <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8002810:	4620      	mov	r0, r4
 8002812:	4798      	blx	r3
 8002814:	e03b      	b.n	800288e <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002816:	6822      	ldr	r2, [r4, #0]
 8002818:	6813      	ldr	r3, [r2, #0]
 800281a:	f023 0316 	bic.w	r3, r3, #22
 800281e:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002820:	6822      	ldr	r2, [r4, #0]
 8002822:	6953      	ldr	r3, [r2, #20]
 8002824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002828:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800282a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800282c:	b1a3      	cbz	r3, 8002858 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	6813      	ldr	r3, [r2, #0]
 8002832:	f023 0308 	bic.w	r3, r3, #8
 8002836:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002838:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800283a:	233f      	movs	r3, #63	@ 0x3f
 800283c:	4093      	lsls	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002840:	2301      	movs	r3, #1
 8002842:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002846:	2300      	movs	r3, #0
 8002848:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800284c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800284e:	2b00      	cmp	r3, #0
 8002850:	d03f      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8002852:	4620      	mov	r0, r4
 8002854:	4798      	blx	r3
        return;
 8002856:	e03c      	b.n	80028d2 <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002858:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e7      	bne.n	800282e <HAL_DMA_IRQHandler+0x12a>
 800285e:	e7eb      	b.n	8002838 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8002860:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002862:	b1a3      	cbz	r3, 800288e <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8002864:	4620      	mov	r0, r4
 8002866:	4798      	blx	r3
 8002868:	e011      	b.n	800288e <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002870:	d109      	bne.n	8002886 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	f022 0210 	bic.w	r2, r2, #16
 8002878:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800287a:	2301      	movs	r3, #1
 800287c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8002880:	2300      	movs	r3, #0
 8002882:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8002886:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002888:	b10b      	cbz	r3, 800288e <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 800288a:	4620      	mov	r0, r4
 800288c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800288e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002890:	b1fb      	cbz	r3, 80028d2 <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002892:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002894:	f013 0f01 	tst.w	r3, #1
 8002898:	d017      	beq.n	80028ca <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800289a:	2305      	movs	r3, #5
 800289c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	6813      	ldr	r3, [r2, #0]
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80028aa:	9b01      	ldr	r3, [sp, #4]
 80028ac:	3301      	adds	r3, #1
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	42ab      	cmp	r3, r5
 80028b2:	d804      	bhi.n	80028be <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f013 0f01 	tst.w	r3, #1
 80028bc:	d1f5      	bne.n	80028aa <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 80028be:	2301      	movs	r3, #1
 80028c0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80028c4:	2300      	movs	r3, #0
 80028c6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80028ca:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80028cc:	b10b      	cbz	r3, 80028d2 <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 80028ce:	4620      	mov	r0, r4
 80028d0:	4798      	blx	r3
}
 80028d2:	b003      	add	sp, #12
 80028d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000000c 	.word	0x2000000c
 80028dc:	1b4e81b5 	.word	0x1b4e81b5

080028e0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	2b0f      	cmp	r3, #15
 80028e4:	f200 80e3 	bhi.w	8002aae <HAL_GPIO_Init+0x1ce>
{
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	e065      	b.n	80029ba <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ee:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80028f4:	2403      	movs	r4, #3
 80028f6:	fa04 f40e 	lsl.w	r4, r4, lr
 80028fa:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028fe:	68cc      	ldr	r4, [r1, #12]
 8002900:	fa04 f40e 	lsl.w	r4, r4, lr
 8002904:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002906:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002908:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800290a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290e:	684a      	ldr	r2, [r1, #4]
 8002910:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002914:	409a      	lsls	r2, r3
 8002916:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002918:	6042      	str	r2, [r0, #4]
 800291a:	e05c      	b.n	80029d6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800291c:	08dc      	lsrs	r4, r3, #3
 800291e:	3408      	adds	r4, #8
 8002920:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002924:	f003 0507 	and.w	r5, r3, #7
 8002928:	00ad      	lsls	r5, r5, #2
 800292a:	f04f 0e0f 	mov.w	lr, #15
 800292e:	fa0e fe05 	lsl.w	lr, lr, r5
 8002932:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002936:	690a      	ldr	r2, [r1, #16]
 8002938:	40aa      	lsls	r2, r5
 800293a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800293e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002942:	e05c      	b.n	80029fe <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002944:	2206      	movs	r2, #6
 8002946:	e000      	b.n	800294a <HAL_GPIO_Init+0x6a>
 8002948:	2200      	movs	r2, #0
 800294a:	fa02 f20e 	lsl.w	r2, r2, lr
 800294e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002950:	3402      	adds	r4, #2
 8002952:	4d57      	ldr	r5, [pc, #348]	@ (8002ab0 <HAL_GPIO_Init+0x1d0>)
 8002954:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002958:	4a56      	ldr	r2, [pc, #344]	@ (8002ab4 <HAL_GPIO_Init+0x1d4>)
 800295a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800295c:	ea6f 020c 	mvn.w	r2, ip
 8002960:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002964:	684e      	ldr	r6, [r1, #4]
 8002966:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800296a:	d001      	beq.n	8002970 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800296c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002970:	4c50      	ldr	r4, [pc, #320]	@ (8002ab4 <HAL_GPIO_Init+0x1d4>)
 8002972:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002974:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002976:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800297a:	684e      	ldr	r6, [r1, #4]
 800297c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8002980:	d001      	beq.n	8002986 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8002982:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002986:	4c4b      	ldr	r4, [pc, #300]	@ (8002ab4 <HAL_GPIO_Init+0x1d4>)
 8002988:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800298a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800298c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002990:	684e      	ldr	r6, [r1, #4]
 8002992:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8002996:	d001      	beq.n	800299c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002998:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800299c:	4c45      	ldr	r4, [pc, #276]	@ (8002ab4 <HAL_GPIO_Init+0x1d4>)
 800299e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80029a2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a4:	684d      	ldr	r5, [r1, #4]
 80029a6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80029aa:	d001      	beq.n	80029b0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80029ac:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80029b0:	4c40      	ldr	r4, [pc, #256]	@ (8002ab4 <HAL_GPIO_Init+0x1d4>)
 80029b2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b4:	3301      	adds	r3, #1
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	d877      	bhi.n	8002aaa <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 80029ba:	2201      	movs	r2, #1
 80029bc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029be:	680c      	ldr	r4, [r1, #0]
 80029c0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80029c4:	ea32 0404 	bics.w	r4, r2, r4
 80029c8:	d1f4      	bne.n	80029b4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ca:	684c      	ldr	r4, [r1, #4]
 80029cc:	f004 0403 	and.w	r4, r4, #3
 80029d0:	3c01      	subs	r4, #1
 80029d2:	2c01      	cmp	r4, #1
 80029d4:	d98b      	bls.n	80028ee <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d6:	684a      	ldr	r2, [r1, #4]
 80029d8:	f002 0203 	and.w	r2, r2, #3
 80029dc:	2a03      	cmp	r2, #3
 80029de:	d009      	beq.n	80029f4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80029e0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029e2:	005d      	lsls	r5, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	40aa      	lsls	r2, r5
 80029e8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ec:	688a      	ldr	r2, [r1, #8]
 80029ee:	40aa      	lsls	r2, r5
 80029f0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80029f2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f4:	684a      	ldr	r2, [r1, #4]
 80029f6:	f002 0203 	and.w	r2, r2, #3
 80029fa:	2a02      	cmp	r2, #2
 80029fc:	d08e      	beq.n	800291c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80029fe:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a00:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	fa02 f20e 	lsl.w	r2, r2, lr
 8002a0a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a0e:	684a      	ldr	r2, [r1, #4]
 8002a10:	f002 0203 	and.w	r2, r2, #3
 8002a14:	fa02 f20e 	lsl.w	r2, r2, lr
 8002a18:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002a1a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a1c:	684a      	ldr	r2, [r1, #4]
 8002a1e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8002a22:	d0c7      	beq.n	80029b4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a24:	2200      	movs	r2, #0
 8002a26:	9201      	str	r2, [sp, #4]
 8002a28:	4a23      	ldr	r2, [pc, #140]	@ (8002ab8 <HAL_GPIO_Init+0x1d8>)
 8002a2a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002a2c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002a30:	6454      	str	r4, [r2, #68]	@ 0x44
 8002a32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a34:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002a38:	9201      	str	r2, [sp, #4]
 8002a3a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3c:	089c      	lsrs	r4, r3, #2
 8002a3e:	1ca5      	adds	r5, r4, #2
 8002a40:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab0 <HAL_GPIO_Init+0x1d0>)
 8002a42:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a46:	f003 0e03 	and.w	lr, r3, #3
 8002a4a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002a4e:	220f      	movs	r2, #15
 8002a50:	fa02 f20e 	lsl.w	r2, r2, lr
 8002a54:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a58:	4a18      	ldr	r2, [pc, #96]	@ (8002abc <HAL_GPIO_Init+0x1dc>)
 8002a5a:	4290      	cmp	r0, r2
 8002a5c:	f43f af74 	beq.w	8002948 <HAL_GPIO_Init+0x68>
 8002a60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a64:	4290      	cmp	r0, r2
 8002a66:	d016      	beq.n	8002a96 <HAL_GPIO_Init+0x1b6>
 8002a68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a6c:	4290      	cmp	r0, r2
 8002a6e:	d014      	beq.n	8002a9a <HAL_GPIO_Init+0x1ba>
 8002a70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a74:	4290      	cmp	r0, r2
 8002a76:	d012      	beq.n	8002a9e <HAL_GPIO_Init+0x1be>
 8002a78:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a7c:	4290      	cmp	r0, r2
 8002a7e:	d010      	beq.n	8002aa2 <HAL_GPIO_Init+0x1c2>
 8002a80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a84:	4290      	cmp	r0, r2
 8002a86:	d00e      	beq.n	8002aa6 <HAL_GPIO_Init+0x1c6>
 8002a88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a8c:	4290      	cmp	r0, r2
 8002a8e:	f43f af59 	beq.w	8002944 <HAL_GPIO_Init+0x64>
 8002a92:	2207      	movs	r2, #7
 8002a94:	e759      	b.n	800294a <HAL_GPIO_Init+0x6a>
 8002a96:	2201      	movs	r2, #1
 8002a98:	e757      	b.n	800294a <HAL_GPIO_Init+0x6a>
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	e755      	b.n	800294a <HAL_GPIO_Init+0x6a>
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	e753      	b.n	800294a <HAL_GPIO_Init+0x6a>
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	e751      	b.n	800294a <HAL_GPIO_Init+0x6a>
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	e74f      	b.n	800294a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	4770      	bx	lr
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40013c00 	.word	0x40013c00
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020000 	.word	0x40020000

08002ac0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac0:	b10a      	cbz	r2, 8002ac6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac2:	6181      	str	r1, [r0, #24]
 8002ac4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac6:	0409      	lsls	r1, r1, #16
 8002ac8:	6181      	str	r1, [r0, #24]
  }
}
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002acc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ace:	ea01 0203 	and.w	r2, r1, r3
 8002ad2:	ea21 0103 	bic.w	r1, r1, r3
 8002ad6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002ada:	6181      	str	r1, [r0, #24]
}
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	f000 80cc 	beq.w	8002c7e <HAL_I2C_Init+0x19e>
{
 8002ae6:	b570      	push	{r4, r5, r6, lr}
 8002ae8:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d077      	beq.n	8002be2 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af2:	2324      	movs	r3, #36	@ 0x24
 8002af4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af8:	6822      	ldr	r2, [r4, #0]
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b0a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b0c:	6822      	ldr	r2, [r4, #0]
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002b14:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b16:	f000 f999 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b1a:	6862      	ldr	r2, [r4, #4]
 8002b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8002c88 <HAL_I2C_Init+0x1a8>)
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d864      	bhi.n	8002bec <HAL_I2C_Init+0x10c>
 8002b22:	4b5a      	ldr	r3, [pc, #360]	@ (8002c8c <HAL_I2C_Init+0x1ac>)
 8002b24:	4298      	cmp	r0, r3
 8002b26:	bf8c      	ite	hi
 8002b28:	2300      	movhi	r3, #0
 8002b2a:	2301      	movls	r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 80a8 	bne.w	8002c82 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b32:	4957      	ldr	r1, [pc, #348]	@ (8002c90 <HAL_I2C_Init+0x1b0>)
 8002b34:	fba1 3100 	umull	r3, r1, r1, r0
 8002b38:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b3a:	6825      	ldr	r5, [r4, #0]
 8002b3c:	686a      	ldr	r2, [r5, #4]
 8002b3e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002b42:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002b46:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b48:	6821      	ldr	r1, [r4, #0]
 8002b4a:	6a0a      	ldr	r2, [r1, #32]
 8002b4c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002b50:	6866      	ldr	r6, [r4, #4]
 8002b52:	4d4d      	ldr	r5, [pc, #308]	@ (8002c88 <HAL_I2C_Init+0x1a8>)
 8002b54:	42ae      	cmp	r6, r5
 8002b56:	d84f      	bhi.n	8002bf8 <HAL_I2C_Init+0x118>
 8002b58:	3301      	adds	r3, #1
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b5e:	6821      	ldr	r1, [r4, #0]
 8002b60:	69ca      	ldr	r2, [r1, #28]
 8002b62:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002b66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b6a:	6865      	ldr	r5, [r4, #4]
 8002b6c:	4b46      	ldr	r3, [pc, #280]	@ (8002c88 <HAL_I2C_Init+0x1a8>)
 8002b6e:	429d      	cmp	r5, r3
 8002b70:	d84c      	bhi.n	8002c0c <HAL_I2C_Init+0x12c>
 8002b72:	1e43      	subs	r3, r0, #1
 8002b74:	006d      	lsls	r5, r5, #1
 8002b76:	fbb3 f3f5 	udiv	r3, r3, r5
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002b80:	4203      	tst	r3, r0
 8002b82:	d078      	beq.n	8002c76 <HAL_I2C_Init+0x196>
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b8c:	6821      	ldr	r1, [r4, #0]
 8002b8e:	680b      	ldr	r3, [r1, #0]
 8002b90:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002b94:	69e2      	ldr	r2, [r4, #28]
 8002b96:	6a20      	ldr	r0, [r4, #32]
 8002b98:	4302      	orrs	r2, r0
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b9e:	6821      	ldr	r1, [r4, #0]
 8002ba0:	688b      	ldr	r3, [r1, #8]
 8002ba2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ba6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002baa:	6922      	ldr	r2, [r4, #16]
 8002bac:	68e0      	ldr	r0, [r4, #12]
 8002bae:	4302      	orrs	r2, r0
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bb4:	6821      	ldr	r1, [r4, #0]
 8002bb6:	68cb      	ldr	r3, [r1, #12]
 8002bb8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bbc:	6962      	ldr	r2, [r4, #20]
 8002bbe:	69a0      	ldr	r0, [r4, #24]
 8002bc0:	4302      	orrs	r2, r0
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bda:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002be2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002be6:	f7fe fa7b 	bl	80010e0 <HAL_I2C_MspInit>
 8002bea:	e782      	b.n	8002af2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bec:	4b29      	ldr	r3, [pc, #164]	@ (8002c94 <HAL_I2C_Init+0x1b4>)
 8002bee:	4298      	cmp	r0, r3
 8002bf0:	bf8c      	ite	hi
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	2301      	movls	r3, #1
 8002bf6:	e799      	b.n	8002b2c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bf8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002bfc:	fb05 f303 	mul.w	r3, r5, r3
 8002c00:	4d25      	ldr	r5, [pc, #148]	@ (8002c98 <HAL_I2C_Init+0x1b8>)
 8002c02:	fba5 5303 	umull	r5, r3, r5, r3
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	3301      	adds	r3, #1
 8002c0a:	e7a6      	b.n	8002b5a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c0c:	68a6      	ldr	r6, [r4, #8]
 8002c0e:	b9be      	cbnz	r6, 8002c40 <HAL_I2C_Init+0x160>
 8002c10:	1e43      	subs	r3, r0, #1
 8002c12:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8002c16:	fbb3 f3fc 	udiv	r3, r3, ip
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	bb43      	cbnz	r3, 8002c7a <HAL_I2C_Init+0x19a>
 8002c28:	b9c6      	cbnz	r6, 8002c5c <HAL_I2C_Init+0x17c>
 8002c2a:	1e43      	subs	r3, r0, #1
 8002c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c30:	fbb3 f3f5 	udiv	r3, r3, r5
 8002c34:	3301      	adds	r3, #1
 8002c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c3e:	e7a3      	b.n	8002b88 <HAL_I2C_Init+0xa8>
 8002c40:	1e43      	subs	r3, r0, #1
 8002c42:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002c46:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002c4a:	fbb3 f3fc 	udiv	r3, r3, ip
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	e7e4      	b.n	8002c26 <HAL_I2C_Init+0x146>
 8002c5c:	1e43      	subs	r3, r0, #1
 8002c5e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002c62:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002c66:	fbb3 f3f5 	udiv	r3, r3, r5
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c74:	e788      	b.n	8002b88 <HAL_I2C_Init+0xa8>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e786      	b.n	8002b88 <HAL_I2C_Init+0xa8>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e784      	b.n	8002b88 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002c7e:	2001      	movs	r0, #1
}
 8002c80:	4770      	bx	lr
    return HAL_ERROR;
 8002c82:	2001      	movs	r0, #1
 8002c84:	e7ac      	b.n	8002be0 <HAL_I2C_Init+0x100>
 8002c86:	bf00      	nop
 8002c88:	000186a0 	.word	0x000186a0
 8002c8c:	001e847f 	.word	0x001e847f
 8002c90:	431bde83 	.word	0x431bde83
 8002c94:	003d08ff 	.word	0x003d08ff
 8002c98:	10624dd3 	.word	0x10624dd3

08002c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c9c:	b500      	push	{lr}
 8002c9e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	9200      	str	r2, [sp, #0]
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <HAL_MspInit+0x40>)
 8002ca6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002ca8:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002cac:	6459      	str	r1, [r3, #68]	@ 0x44
 8002cae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cb0:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8002cb4:	9100      	str	r1, [sp, #0]
 8002cb6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	9201      	str	r2, [sp, #4]
 8002cba:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002cbc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002cc0:	6419      	str	r1, [r3, #64]	@ 0x40
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ccc:	210f      	movs	r1, #15
 8002cce:	f06f 0001 	mvn.w	r0, #1
 8002cd2:	f7ff fb91 	bl	80023f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd6:	b003      	add	sp, #12
 8002cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	f000 809b 	beq.w	8002e1c <HAL_RCC_ClockConfig+0x13c>
{
 8002ce6:	b570      	push	{r4, r5, r6, lr}
 8002ce8:	460d      	mov	r5, r1
 8002cea:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b4f      	ldr	r3, [pc, #316]	@ (8002e2c <HAL_RCC_ClockConfig+0x14c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	428b      	cmp	r3, r1
 8002cf6:	d208      	bcs.n	8002d0a <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf8:	b2cb      	uxtb	r3, r1
 8002cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8002e2c <HAL_RCC_ClockConfig+0x14c>)
 8002cfc:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	6813      	ldr	r3, [r2, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	428b      	cmp	r3, r1
 8002d06:	f040 808b 	bne.w	8002e20 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	f013 0f02 	tst.w	r3, #2
 8002d10:	d017      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d12:	f013 0f04 	tst.w	r3, #4
 8002d16:	d004      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d18:	4a45      	ldr	r2, [pc, #276]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002d1a:	6893      	ldr	r3, [r2, #8]
 8002d1c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d20:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	f013 0f08 	tst.w	r3, #8
 8002d28:	d004      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d2a:	4a41      	ldr	r2, [pc, #260]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002d2c:	6893      	ldr	r3, [r2, #8]
 8002d2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4a3e      	ldr	r2, [pc, #248]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002d36:	6893      	ldr	r3, [r2, #8]
 8002d38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d3c:	68a1      	ldr	r1, [r4, #8]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f013 0f01 	tst.w	r3, #1
 8002d48:	d032      	beq.n	8002db0 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4a:	6863      	ldr	r3, [r4, #4]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d021      	beq.n	8002d94 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d50:	1e9a      	subs	r2, r3, #2
 8002d52:	2a01      	cmp	r2, #1
 8002d54:	d925      	bls.n	8002da2 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4a36      	ldr	r2, [pc, #216]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	f012 0f02 	tst.w	r2, #2
 8002d5e:	d061      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d60:	4933      	ldr	r1, [pc, #204]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002d62:	688a      	ldr	r2, [r1, #8]
 8002d64:	f022 0203 	bic.w	r2, r2, #3
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fd64 	bl	8001838 <HAL_GetTick>
 8002d70:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b2f      	ldr	r3, [pc, #188]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	6862      	ldr	r2, [r4, #4]
 8002d7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d80:	d016      	beq.n	8002db0 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d82:	f7fe fd59 	bl	8001838 <HAL_GetTick>
 8002d86:	1b80      	subs	r0, r0, r6
 8002d88:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d8c:	4298      	cmp	r0, r3
 8002d8e:	d9f0      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8002d90:	2003      	movs	r0, #3
 8002d92:	e042      	b.n	8002e1a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d94:	4a26      	ldr	r2, [pc, #152]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002d9c:	d1e0      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002d9e:	2001      	movs	r0, #1
 8002da0:	e03b      	b.n	8002e1a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4a23      	ldr	r2, [pc, #140]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002daa:	d1d9      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002dac:	2001      	movs	r0, #1
 8002dae:	e034      	b.n	8002e1a <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <HAL_RCC_ClockConfig+0x14c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	42ab      	cmp	r3, r5
 8002dba:	d907      	bls.n	8002dcc <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbc:	b2ea      	uxtb	r2, r5
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <HAL_RCC_ClockConfig+0x14c>)
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	42ab      	cmp	r3, r5
 8002dca:	d12d      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	f013 0f04 	tst.w	r3, #4
 8002dd2:	d006      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd4:	4a16      	ldr	r2, [pc, #88]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002dd6:	6893      	ldr	r3, [r2, #8]
 8002dd8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002ddc:	68e1      	ldr	r1, [r4, #12]
 8002dde:	430b      	orrs	r3, r1
 8002de0:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	f013 0f08 	tst.w	r3, #8
 8002de8:	d007      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dea:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002dec:	6893      	ldr	r3, [r2, #8]
 8002dee:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002df2:	6921      	ldr	r1, [r4, #16]
 8002df4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002df8:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f865 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <HAL_RCC_ClockConfig+0x150>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e06:	4a0b      	ldr	r2, [pc, #44]	@ (8002e34 <HAL_RCC_ClockConfig+0x154>)
 8002e08:	5cd3      	ldrb	r3, [r2, r3]
 8002e0a:	40d8      	lsrs	r0, r3
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_RCC_ClockConfig+0x158>)
 8002e0e:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e10:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <HAL_RCC_ClockConfig+0x15c>)
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	f001 fb2a 	bl	800446c <HAL_InitTick>

  return HAL_OK;
 8002e18:	2000      	movs	r0, #0
}
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e1c:	2001      	movs	r0, #1
}
 8002e1e:	4770      	bx	lr
      return HAL_ERROR;
 8002e20:	2001      	movs	r0, #1
 8002e22:	e7fa      	b.n	8002e1a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
 8002e26:	e7f8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e7f6      	b.n	8002e1a <HAL_RCC_ClockConfig+0x13a>
 8002e2c:	40023c00 	.word	0x40023c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08006228 	.word	0x08006228
 8002e38:	2000000c 	.word	0x2000000c
 8002e3c:	20000008 	.word	0x20000008

08002e40 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e40:	4b01      	ldr	r3, [pc, #4]	@ (8002e48 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	2000000c 	.word	0x2000000c

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e4e:	f7ff fff7 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e52:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e5a:	4a03      	ldr	r2, [pc, #12]	@ (8002e68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e5c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e5e:	40d8      	lsrs	r0, r3
 8002e60:	bd08      	pop	{r3, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	08006220 	.word	0x08006220

08002e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e6c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e6e:	f7ff ffe7 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e72:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e7a:	4a03      	ldr	r2, [pc, #12]	@ (8002e88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e7e:	40d8      	lsrs	r0, r3
 8002e80:	bd08      	pop	{r3, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08006220 	.word	0x08006220

08002e8c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e8c:	230f      	movs	r3, #15
 8002e8e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_GetClockConfig+0x34>)
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	f002 0203 	and.w	r2, r2, #3
 8002e98:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002ea0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002ea8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002eb2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eb4:	4b03      	ldr	r3, [pc, #12]	@ (8002ec4 <HAL_RCC_GetClockConfig+0x38>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	600b      	str	r3, [r1, #0]
}
 8002ebe:	4770      	bx	lr
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40023c00 	.word	0x40023c00

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eca:	4b5e      	ldr	r3, [pc, #376]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0x16>
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d05b      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0xca>
 8002eda:	485b      	ldr	r0, [pc, #364]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x180>)
 8002edc:	e033      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x7e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ede:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002eec:	d02c      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4b55      	ldr	r3, [pc, #340]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002ef0:	6858      	ldr	r0, [r3, #4]
 8002ef2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002ef6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002efa:	ebbc 0c00 	subs.w	ip, ip, r0
 8002efe:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002f02:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002f06:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002f0a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002f0e:	ebb1 010c 	subs.w	r1, r1, ip
 8002f12:	eb63 030e 	sbc.w	r3, r3, lr
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f1c:	00c9      	lsls	r1, r1, #3
 8002f1e:	eb11 0c00 	adds.w	ip, r1, r0
 8002f22:	f143 0300 	adc.w	r3, r3, #0
 8002f26:	0299      	lsls	r1, r3, #10
 8002f28:	2300      	movs	r3, #0
 8002f2a:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002f2e:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002f32:	f7fd f94d 	bl	80001d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f36:	4b43      	ldr	r3, [pc, #268]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f3e:	3301      	adds	r3, #1
 8002f40:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002f42:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f46:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f48:	4b3e      	ldr	r3, [pc, #248]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002f4a:	6858      	ldr	r0, [r3, #4]
 8002f4c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002f50:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002f54:	ebbc 0c00 	subs.w	ip, ip, r0
 8002f58:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002f5c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002f60:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002f64:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002f68:	ebb1 010c 	subs.w	r1, r1, ip
 8002f6c:	eb63 030e 	sbc.w	r3, r3, lr
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f76:	00c9      	lsls	r1, r1, #3
 8002f78:	eb11 0c00 	adds.w	ip, r1, r0
 8002f7c:	f143 0300 	adc.w	r3, r3, #0
 8002f80:	0299      	lsls	r1, r3, #10
 8002f82:	2300      	movs	r3, #0
 8002f84:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002f88:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002f8c:	f7fd f920 	bl	80001d0 <__aeabi_uldivmod>
 8002f90:	e7d1      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x6e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f92:	4b2c      	ldr	r3, [pc, #176]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002fa0:	d02a      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x130>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa2:	4b28      	ldr	r3, [pc, #160]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002fa4:	6858      	ldr	r0, [r3, #4]
 8002fa6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002faa:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002fae:	ebbc 0c00 	subs.w	ip, ip, r0
 8002fb2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002fb6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002fba:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002fbe:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002fc2:	ebb1 010c 	subs.w	r1, r1, ip
 8002fc6:	eb63 030e 	sbc.w	r3, r3, lr
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fd0:	00c9      	lsls	r1, r1, #3
 8002fd2:	eb11 0c00 	adds.w	ip, r1, r0
 8002fd6:	f143 0300 	adc.w	r3, r3, #0
 8002fda:	0299      	lsls	r1, r3, #10
 8002fdc:	2300      	movs	r3, #0
 8002fde:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002fe2:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002fe6:	f7fd f8f3 	bl	80001d0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fea:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8002ff2:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002ff6:	e7a6      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0x7e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff8:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002ffa:	6858      	ldr	r0, [r3, #4]
 8002ffc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003000:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003004:	ebbc 0c00 	subs.w	ip, ip, r0
 8003008:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800300c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003010:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003014:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003018:	ebb1 010c 	subs.w	r1, r1, ip
 800301c:	eb63 030e 	sbc.w	r3, r3, lr
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003026:	00c9      	lsls	r1, r1, #3
 8003028:	eb11 0c00 	adds.w	ip, r1, r0
 800302c:	f143 0300 	adc.w	r3, r3, #0
 8003030:	0299      	lsls	r1, r3, #10
 8003032:	2300      	movs	r3, #0
 8003034:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003038:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800303c:	f7fd f8c8 	bl	80001d0 <__aeabi_uldivmod>
 8003040:	e7d3      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x122>
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	00f42400 	.word	0x00f42400

0800304c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800304c:	2800      	cmp	r0, #0
 800304e:	f000 8201 	beq.w	8003454 <HAL_RCC_OscConfig+0x408>
{
 8003052:	b570      	push	{r4, r5, r6, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003058:	6803      	ldr	r3, [r0, #0]
 800305a:	f013 0f01 	tst.w	r3, #1
 800305e:	d041      	beq.n	80030e4 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003060:	4b99      	ldr	r3, [pc, #612]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b04      	cmp	r3, #4
 800306a:	d032      	beq.n	80030d2 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800306c:	4b96      	ldr	r3, [pc, #600]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
        || \
 8003074:	2b08      	cmp	r3, #8
 8003076:	d027      	beq.n	80030c8 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003078:	4b93      	ldr	r3, [pc, #588]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d059      	beq.n	8003138 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	6863      	ldr	r3, [r4, #4]
 8003086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308a:	d05b      	beq.n	8003144 <HAL_RCC_OscConfig+0xf8>
 800308c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003090:	d05e      	beq.n	8003150 <HAL_RCC_OscConfig+0x104>
 8003092:	4b8d      	ldr	r3, [pc, #564]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	6863      	ldr	r3, [r4, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d05c      	beq.n	8003164 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fe fbc5 	bl	8001838 <HAL_GetTick>
 80030ae:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b0:	4b85      	ldr	r3, [pc, #532]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030b8:	d114      	bne.n	80030e4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ba:	f7fe fbbd 	bl	8001838 <HAL_GetTick>
 80030be:	1b40      	subs	r0, r0, r5
 80030c0:	2864      	cmp	r0, #100	@ 0x64
 80030c2:	d9f5      	bls.n	80030b0 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 80030c4:	2003      	movs	r0, #3
 80030c6:	e1cc      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030c8:	4b7f      	ldr	r3, [pc, #508]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80030d0:	d0d2      	beq.n	8003078 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d2:	4b7d      	ldr	r3, [pc, #500]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030da:	d003      	beq.n	80030e4 <HAL_RCC_OscConfig+0x98>
 80030dc:	6863      	ldr	r3, [r4, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 81ba 	beq.w	8003458 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	f013 0f02 	tst.w	r3, #2
 80030ea:	d060      	beq.n	80031ae <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030ec:	4b76      	ldr	r3, [pc, #472]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f013 0f0c 	tst.w	r3, #12
 80030f4:	d04a      	beq.n	800318c <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030f6:	4b74      	ldr	r3, [pc, #464]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
        || \
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d03f      	beq.n	8003182 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b71      	ldr	r3, [pc, #452]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d069      	beq.n	80031e2 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800310e:	68e3      	ldr	r3, [r4, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d075      	beq.n	8003200 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b6d      	ldr	r3, [pc, #436]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe fb8d 	bl	8001838 <HAL_GetTick>
 800311e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	4b69      	ldr	r3, [pc, #420]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f013 0f02 	tst.w	r3, #2
 8003128:	d161      	bne.n	80031ee <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312a:	f7fe fb85 	bl	8001838 <HAL_GetTick>
 800312e:	1b40      	subs	r0, r0, r5
 8003130:	2802      	cmp	r0, #2
 8003132:	d9f5      	bls.n	8003120 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8003134:	2003      	movs	r0, #3
 8003136:	e194      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003138:	4b63      	ldr	r3, [pc, #396]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003140:	d0a0      	beq.n	8003084 <HAL_RCC_OscConfig+0x38>
 8003142:	e7c6      	b.n	80030d2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003144:	4a60      	ldr	r2, [pc, #384]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e7a9      	b.n	80030a4 <HAL_RCC_OscConfig+0x58>
 8003150:	4b5d      	ldr	r3, [pc, #372]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e79f      	b.n	80030a4 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8003164:	f7fe fb68 	bl	8001838 <HAL_GetTick>
 8003168:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	4b57      	ldr	r3, [pc, #348]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003172:	d0b7      	beq.n	80030e4 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fb60 	bl	8001838 <HAL_GetTick>
 8003178:	1b40      	subs	r0, r0, r5
 800317a:	2864      	cmp	r0, #100	@ 0x64
 800317c:	d9f5      	bls.n	800316a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800317e:	2003      	movs	r0, #3
 8003180:	e16f      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003182:	4b51      	ldr	r3, [pc, #324]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800318a:	d1ba      	bne.n	8003102 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318c:	4b4e      	ldr	r3, [pc, #312]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f013 0f02 	tst.w	r3, #2
 8003194:	d003      	beq.n	800319e <HAL_RCC_OscConfig+0x152>
 8003196:	68e3      	ldr	r3, [r4, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	f040 815f 	bne.w	800345c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319e:	4a4a      	ldr	r2, [pc, #296]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	6813      	ldr	r3, [r2, #0]
 80031a2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031a6:	6921      	ldr	r1, [r4, #16]
 80031a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031ac:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	f013 0f08 	tst.w	r3, #8
 80031b4:	d049      	beq.n	800324a <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031b6:	6963      	ldr	r3, [r4, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d033      	beq.n	8003224 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031bc:	4b43      	ldr	r3, [pc, #268]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 80031be:	2201      	movs	r2, #1
 80031c0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe fb38 	bl	8001838 <HAL_GetTick>
 80031c8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ca:	4b3f      	ldr	r3, [pc, #252]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80031cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ce:	f013 0f02 	tst.w	r3, #2
 80031d2:	d13a      	bne.n	800324a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d4:	f7fe fb30 	bl	8001838 <HAL_GetTick>
 80031d8:	1b40      	subs	r0, r0, r5
 80031da:	2802      	cmp	r0, #2
 80031dc:	d9f5      	bls.n	80031ca <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 80031de:	2003      	movs	r0, #3
 80031e0:	e13f      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e2:	4b39      	ldr	r3, [pc, #228]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80031ea:	d190      	bne.n	800310e <HAL_RCC_OscConfig+0xc2>
 80031ec:	e7ce      	b.n	800318c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4a36      	ldr	r2, [pc, #216]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	6813      	ldr	r3, [r2, #0]
 80031f2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031f6:	6921      	ldr	r1, [r4, #16]
 80031f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e7d6      	b.n	80031ae <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003200:	4b32      	ldr	r3, [pc, #200]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003206:	f7fe fb17 	bl	8001838 <HAL_GetTick>
 800320a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320c:	4b2e      	ldr	r3, [pc, #184]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f013 0f02 	tst.w	r3, #2
 8003214:	d0cb      	beq.n	80031ae <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003216:	f7fe fb0f 	bl	8001838 <HAL_GetTick>
 800321a:	1b40      	subs	r0, r0, r5
 800321c:	2802      	cmp	r0, #2
 800321e:	d9f5      	bls.n	800320c <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8003220:	2003      	movs	r0, #3
 8003222:	e11e      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003224:	4b29      	ldr	r3, [pc, #164]	@ (80032cc <HAL_RCC_OscConfig+0x280>)
 8003226:	2200      	movs	r2, #0
 8003228:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fe fb04 	bl	8001838 <HAL_GetTick>
 8003230:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003232:	4b25      	ldr	r3, [pc, #148]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003236:	f013 0f02 	tst.w	r3, #2
 800323a:	d006      	beq.n	800324a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323c:	f7fe fafc 	bl	8001838 <HAL_GetTick>
 8003240:	1b40      	subs	r0, r0, r5
 8003242:	2802      	cmp	r0, #2
 8003244:	d9f5      	bls.n	8003232 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8003246:	2003      	movs	r0, #3
 8003248:	e10b      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	f013 0f04 	tst.w	r3, #4
 8003250:	d076      	beq.n	8003340 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b1d      	ldr	r3, [pc, #116]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800325a:	d133      	bne.n	80032c4 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	4b19      	ldr	r3, [pc, #100]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003264:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003268:	641a      	str	r2, [r3, #64]	@ 0x40
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003274:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b16      	ldr	r3, [pc, #88]	@ (80032d0 <HAL_RCC_OscConfig+0x284>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800327e:	d029      	beq.n	80032d4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	68a3      	ldr	r3, [r4, #8]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d03a      	beq.n	80032fc <HAL_RCC_OscConfig+0x2b0>
 8003286:	2b05      	cmp	r3, #5
 8003288:	d03e      	beq.n	8003308 <HAL_RCC_OscConfig+0x2bc>
 800328a:	4b0f      	ldr	r3, [pc, #60]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 800328c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	671a      	str	r2, [r3, #112]	@ 0x70
 8003294:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329c:	68a3      	ldr	r3, [r4, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d03c      	beq.n	800331c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fe fac9 	bl	8001838 <HAL_GetTick>
 80032a6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	f013 0f02 	tst.w	r3, #2
 80032b0:	d145      	bne.n	800333e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fe fac1 	bl	8001838 <HAL_GetTick>
 80032b6:	1b80      	subs	r0, r0, r6
 80032b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032bc:	4298      	cmp	r0, r3
 80032be:	d9f3      	bls.n	80032a8 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 80032c0:	2003      	movs	r0, #3
 80032c2:	e0ce      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80032c4:	2500      	movs	r5, #0
 80032c6:	e7d6      	b.n	8003276 <HAL_RCC_OscConfig+0x22a>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003484 <HAL_RCC_OscConfig+0x438>)
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032de:	f7fe faab 	bl	8001838 <HAL_GetTick>
 80032e2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e4:	4b67      	ldr	r3, [pc, #412]	@ (8003484 <HAL_RCC_OscConfig+0x438>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80032ec:	d1c8      	bne.n	8003280 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ee:	f7fe faa3 	bl	8001838 <HAL_GetTick>
 80032f2:	1b80      	subs	r0, r0, r6
 80032f4:	2802      	cmp	r0, #2
 80032f6:	d9f5      	bls.n	80032e4 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 80032f8:	2003      	movs	r0, #3
 80032fa:	e0b2      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	4a62      	ldr	r2, [pc, #392]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 80032fe:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6713      	str	r3, [r2, #112]	@ 0x70
 8003306:	e7c9      	b.n	800329c <HAL_RCC_OscConfig+0x250>
 8003308:	4b5f      	ldr	r3, [pc, #380]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 800330a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800330c:	f042 0204 	orr.w	r2, r2, #4
 8003310:	671a      	str	r2, [r3, #112]	@ 0x70
 8003312:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	671a      	str	r2, [r3, #112]	@ 0x70
 800331a:	e7bf      	b.n	800329c <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fe fa8c 	bl	8001838 <HAL_GetTick>
 8003320:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003322:	4b59      	ldr	r3, [pc, #356]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003326:	f013 0f02 	tst.w	r3, #2
 800332a:	d008      	beq.n	800333e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fe fa84 	bl	8001838 <HAL_GetTick>
 8003330:	1b80      	subs	r0, r0, r6
 8003332:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003336:	4298      	cmp	r0, r3
 8003338:	d9f3      	bls.n	8003322 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800333a:	2003      	movs	r0, #3
 800333c:	e091      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800333e:	b9ed      	cbnz	r5, 800337c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	69a3      	ldr	r3, [r4, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 808c 	beq.w	8003460 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003348:	4a4f      	ldr	r2, [pc, #316]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	f002 020c 	and.w	r2, r2, #12
 8003350:	2a08      	cmp	r2, #8
 8003352:	d054      	beq.n	80033fe <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003354:	2b02      	cmp	r3, #2
 8003356:	d017      	beq.n	8003388 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b4c      	ldr	r3, [pc, #304]	@ (800348c <HAL_RCC_OscConfig+0x440>)
 800335a:	2200      	movs	r2, #0
 800335c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe fa6b 	bl	8001838 <HAL_GetTick>
 8003362:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003364:	4b48      	ldr	r3, [pc, #288]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800336c:	d045      	beq.n	80033fa <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fa63 	bl	8001838 <HAL_GetTick>
 8003372:	1b00      	subs	r0, r0, r4
 8003374:	2802      	cmp	r0, #2
 8003376:	d9f5      	bls.n	8003364 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003378:	2003      	movs	r0, #3
 800337a:	e072      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4a42      	ldr	r2, [pc, #264]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 800337e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003384:	6413      	str	r3, [r2, #64]	@ 0x40
 8003386:	e7db      	b.n	8003340 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8003388:	4b40      	ldr	r3, [pc, #256]	@ (800348c <HAL_RCC_OscConfig+0x440>)
 800338a:	2200      	movs	r2, #0
 800338c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800338e:	f7fe fa53 	bl	8001838 <HAL_GetTick>
 8003392:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003394:	4b3c      	ldr	r3, [pc, #240]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800339c:	d006      	beq.n	80033ac <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339e:	f7fe fa4b 	bl	8001838 <HAL_GetTick>
 80033a2:	1b40      	subs	r0, r0, r5
 80033a4:	2802      	cmp	r0, #2
 80033a6:	d9f5      	bls.n	8003394 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 80033a8:	2003      	movs	r0, #3
 80033aa:	e05a      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ac:	69e3      	ldr	r3, [r4, #28]
 80033ae:	6a22      	ldr	r2, [r4, #32]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80033b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80033b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80033ba:	0852      	lsrs	r2, r2, #1
 80033bc:	3a01      	subs	r2, #1
 80033be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80033c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80033c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80033ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80033ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 80033d0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80033d2:	4b2e      	ldr	r3, [pc, #184]	@ (800348c <HAL_RCC_OscConfig+0x440>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80033d8:	f7fe fa2e 	bl	8001838 <HAL_GetTick>
 80033dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b2a      	ldr	r3, [pc, #168]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe fa26 	bl	8001838 <HAL_GetTick>
 80033ec:	1b00      	subs	r0, r0, r4
 80033ee:	2802      	cmp	r0, #2
 80033f0:	d9f5      	bls.n	80033de <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 80033f2:	2003      	movs	r0, #3
 80033f4:	e035      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80033f6:	2000      	movs	r0, #0
 80033f8:	e033      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
 80033fa:	2000      	movs	r0, #0
 80033fc:	e031      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d031      	beq.n	8003466 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8003402:	4b21      	ldr	r3, [pc, #132]	@ (8003488 <HAL_RCC_OscConfig+0x43c>)
 8003404:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003406:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800340a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340c:	4291      	cmp	r1, r2
 800340e:	d12c      	bne.n	800346a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003410:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003414:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003416:	428a      	cmp	r2, r1
 8003418:	d129      	bne.n	800346e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800341a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003420:	401a      	ands	r2, r3
 8003422:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003426:	d124      	bne.n	8003472 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003428:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800342c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800342e:	0852      	lsrs	r2, r2, #1
 8003430:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003432:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003436:	d11e      	bne.n	8003476 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003438:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800343c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003442:	d11a      	bne.n	800347a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003444:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8003448:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800344a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800344e:	d116      	bne.n	800347e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8003450:	2000      	movs	r0, #0
 8003452:	e006      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8003454:	2001      	movs	r0, #1
}
 8003456:	4770      	bx	lr
        return HAL_ERROR;
 8003458:	2001      	movs	r0, #1
 800345a:	e002      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800345c:	2001      	movs	r0, #1
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003460:	2000      	movs	r0, #0
}
 8003462:	b002      	add	sp, #8
 8003464:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003466:	2001      	movs	r0, #1
 8003468:	e7fb      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800346a:	2001      	movs	r0, #1
 800346c:	e7f9      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
 800346e:	2001      	movs	r0, #1
 8003470:	e7f7      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
 8003472:	2001      	movs	r0, #1
 8003474:	e7f5      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
 8003476:	2001      	movs	r0, #1
 8003478:	e7f3      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
 800347a:	2001      	movs	r0, #1
 800347c:	e7f1      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
 800347e:	2001      	movs	r0, #1
 8003480:	e7ef      	b.n	8003462 <HAL_RCC_OscConfig+0x416>
 8003482:	bf00      	nop
 8003484:	40007000 	.word	0x40007000
 8003488:	40023800 	.word	0x40023800
 800348c:	42470000 	.word	0x42470000

08003490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	4605      	mov	r5, r0
 8003498:	4688      	mov	r8, r1
 800349a:	4617      	mov	r7, r2
 800349c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800349e:	f7fe f9cb 	bl	8001838 <HAL_GetTick>
 80034a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034a4:	1a1b      	subs	r3, r3, r0
 80034a6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80034aa:	f7fe f9c5 	bl	8001838 <HAL_GetTick>
 80034ae:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034b0:	4b28      	ldr	r3, [pc, #160]	@ (8003554 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80034b8:	fb09 f303 	mul.w	r3, r9, r3
 80034bc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	689c      	ldr	r4, [r3, #8]
 80034c2:	ea38 0404 	bics.w	r4, r8, r4
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	42bb      	cmp	r3, r7
 80034ce:	d03d      	beq.n	800354c <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034d0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80034d4:	d0f3      	beq.n	80034be <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034d6:	f7fe f9af 	bl	8001838 <HAL_GetTick>
 80034da:	eba0 000a 	sub.w	r0, r0, sl
 80034de:	4548      	cmp	r0, r9
 80034e0:	d207      	bcs.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034e2:	9a01      	ldr	r2, [sp, #4]
 80034e4:	b102      	cbz	r2, 80034e8 <SPI_WaitFlagStateUntilTimeout+0x58>
 80034e6:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80034e8:	9b01      	ldr	r3, [sp, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	4691      	mov	r9, r2
 80034f0:	e7e5      	b.n	80034be <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034f2:	682a      	ldr	r2, [r5, #0]
 80034f4:	6853      	ldr	r3, [r2, #4]
 80034f6:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80034fa:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034fc:	686b      	ldr	r3, [r5, #4]
 80034fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003502:	d00b      	beq.n	800351c <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003504:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350a:	d014      	beq.n	8003536 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 800350c:	2301      	movs	r3, #1
 800350e:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003512:	2300      	movs	r3, #0
 8003514:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003518:	2003      	movs	r0, #3
 800351a:	e018      	b.n	800354e <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351c:	68ab      	ldr	r3, [r5, #8]
 800351e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003522:	d002      	beq.n	800352a <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003528:	d1ec      	bne.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 800352a:	682a      	ldr	r2, [r5, #0]
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e7e6      	b.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8003536:	682a      	ldr	r2, [r5, #0]
 8003538:	6813      	ldr	r3, [r2, #0]
 800353a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	682a      	ldr	r2, [r5, #0]
 8003542:	6813      	ldr	r3, [r2, #0]
 8003544:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e7df      	b.n	800350c <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 800354c:	2000      	movs	r0, #0
}
 800354e:	b002      	add	sp, #8
 8003550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003554:	2000000c 	.word	0x2000000c

08003558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	4604      	mov	r4, r0
 800355e:	460d      	mov	r5, r1
 8003560:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003562:	9200      	str	r2, [sp, #0]
 8003564:	460b      	mov	r3, r1
 8003566:	2201      	movs	r2, #1
 8003568:	2102      	movs	r1, #2
 800356a:	f7ff ff91 	bl	8003490 <SPI_WaitFlagStateUntilTimeout>
 800356e:	b9d0      	cbnz	r0, 80035a6 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003570:	4b17      	ldr	r3, [pc, #92]	@ (80035d0 <SPI_EndRxTxTransaction+0x78>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <SPI_EndRxTxTransaction+0x7c>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0d5b      	lsrs	r3, r3, #21
 800357c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800358c:	d011      	beq.n	80035b2 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800358e:	9b03      	ldr	r3, [sp, #12]
 8003590:	b13b      	cbz	r3, 80035a2 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8003592:	9b03      	ldr	r3, [sp, #12]
 8003594:	3b01      	subs	r3, #1
 8003596:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035a0:	d1f5      	bne.n	800358e <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80035a2:	b004      	add	sp, #16
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035a8:	f043 0320 	orr.w	r3, r3, #32
 80035ac:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80035ae:	2003      	movs	r0, #3
 80035b0:	e7f7      	b.n	80035a2 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035b2:	9600      	str	r6, [sp, #0]
 80035b4:	462b      	mov	r3, r5
 80035b6:	2200      	movs	r2, #0
 80035b8:	2180      	movs	r1, #128	@ 0x80
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7ff ff68 	bl	8003490 <SPI_WaitFlagStateUntilTimeout>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d0ee      	beq.n	80035a2 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035c6:	f043 0320 	orr.w	r3, r3, #32
 80035ca:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035cc:	2003      	movs	r0, #3
 80035ce:	e7e8      	b.n	80035a2 <SPI_EndRxTxTransaction+0x4a>
 80035d0:	2000000c 	.word	0x2000000c
 80035d4:	165e9f81 	.word	0x165e9f81

080035d8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80035d8:	2800      	cmp	r0, #0
 80035da:	d05a      	beq.n	8003692 <HAL_SPI_Init+0xba>
{
 80035dc:	b510      	push	{r4, lr}
 80035de:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035e0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80035e2:	b933      	cbnz	r3, 80035f2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035e4:	6843      	ldr	r3, [r0, #4]
 80035e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ea:	d005      	beq.n	80035f8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61c3      	str	r3, [r0, #28]
 80035f0:	e002      	b.n	80035f8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035f6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80035fc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003600:	2b00      	cmp	r3, #0
 8003602:	d040      	beq.n	8003686 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003604:	2302      	movs	r3, #2
 8003606:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003612:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003614:	6863      	ldr	r3, [r4, #4]
 8003616:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 800361a:	68a2      	ldr	r2, [r4, #8]
 800361c:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8003620:	4313      	orrs	r3, r2
 8003622:	68e2      	ldr	r2, [r4, #12]
 8003624:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003628:	4313      	orrs	r3, r2
 800362a:	6922      	ldr	r2, [r4, #16]
 800362c:	f002 0202 	and.w	r2, r2, #2
 8003630:	4313      	orrs	r3, r2
 8003632:	6962      	ldr	r2, [r4, #20]
 8003634:	f002 0201 	and.w	r2, r2, #1
 8003638:	4313      	orrs	r3, r2
 800363a:	69a2      	ldr	r2, [r4, #24]
 800363c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003640:	4313      	orrs	r3, r2
 8003642:	69e2      	ldr	r2, [r4, #28]
 8003644:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003648:	4313      	orrs	r3, r2
 800364a:	6a22      	ldr	r2, [r4, #32]
 800364c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8003650:	4313      	orrs	r3, r2
 8003652:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003654:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003658:	6821      	ldr	r1, [r4, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800365e:	8b63      	ldrh	r3, [r4, #26]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003666:	f002 0210 	and.w	r2, r2, #16
 800366a:	6821      	ldr	r1, [r4, #0]
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003670:	6822      	ldr	r2, [r4, #0]
 8003672:	69d3      	ldr	r3, [r2, #28]
 8003674:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003678:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800367a:	2000      	movs	r0, #0
 800367c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800367e:	2301      	movs	r3, #1
 8003680:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8003684:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003686:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 800368a:	4620      	mov	r0, r4
 800368c:	f7fd fff2 	bl	8001674 <HAL_SPI_MspInit>
 8003690:	e7b8      	b.n	8003604 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003692:	2001      	movs	r0, #1
}
 8003694:	4770      	bx	lr

08003696 <HAL_SPI_TransmitReceive>:
{
 8003696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800369a:	b083      	sub	sp, #12
 800369c:	4604      	mov	r4, r0
 800369e:	4688      	mov	r8, r1
 80036a0:	4691      	mov	r9, r2
 80036a2:	461f      	mov	r7, r3
 80036a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80036a6:	f7fe f8c7 	bl	8001838 <HAL_GetTick>
 80036aa:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80036ac:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 80036b0:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d00b      	beq.n	80036ce <HAL_SPI_TransmitReceive+0x38>
 80036b6:	b2d9      	uxtb	r1, r3
 80036b8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80036bc:	f040 8104 	bne.w	80038c8 <HAL_SPI_TransmitReceive+0x232>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c0:	68a3      	ldr	r3, [r4, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 8104 	bne.w	80038d0 <HAL_SPI_TransmitReceive+0x23a>
 80036c8:	2904      	cmp	r1, #4
 80036ca:	f040 8103 	bne.w	80038d4 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036ce:	f1b8 0f00 	cmp.w	r8, #0
 80036d2:	f000 8101 	beq.w	80038d8 <HAL_SPI_TransmitReceive+0x242>
 80036d6:	f1b9 0f00 	cmp.w	r9, #0
 80036da:	f000 80ff 	beq.w	80038dc <HAL_SPI_TransmitReceive+0x246>
 80036de:	2f00      	cmp	r7, #0
 80036e0:	f000 80fe 	beq.w	80038e0 <HAL_SPI_TransmitReceive+0x24a>
  __HAL_LOCK(hspi);
 80036e4:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	f000 80fb 	beq.w	80038e4 <HAL_SPI_TransmitReceive+0x24e>
 80036ee:	2301      	movs	r3, #1
 80036f0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036f4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d002      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036fc:	2305      	movs	r3, #5
 80036fe:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003702:	2300      	movs	r3, #0
 8003704:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003706:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800370a:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800370c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800370e:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003712:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003714:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8003716:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003718:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003722:	d103      	bne.n	800372c <HAL_SPI_TransmitReceive+0x96>
    __HAL_SPI_ENABLE(hspi);
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800372a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800372c:	68e3      	ldr	r3, [r4, #12]
 800372e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003732:	d011      	beq.n	8003758 <HAL_SPI_TransmitReceive+0xc2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003734:	6863      	ldr	r3, [r4, #4]
 8003736:	b10b      	cbz	r3, 800373c <HAL_SPI_TransmitReceive+0xa6>
 8003738:	2f01      	cmp	r7, #1
 800373a:	d10b      	bne.n	8003754 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800373c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003744:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003746:	3301      	adds	r3, #1
 8003748:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800374a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29b      	uxth	r3, r3
 8003752:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003754:	2701      	movs	r7, #1
 8003756:	e071      	b.n	800383c <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	b10b      	cbz	r3, 8003760 <HAL_SPI_TransmitReceive+0xca>
 800375c:	2f01      	cmp	r7, #1
 800375e:	d10b      	bne.n	8003778 <HAL_SPI_TransmitReceive+0xe2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003760:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	8812      	ldrh	r2, [r2, #0]
 8003766:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003768:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800376a:	3302      	adds	r3, #2
 800376c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800376e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003778:	2701      	movs	r7, #1
 800377a:	e01b      	b.n	80037b4 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	f012 0f01 	tst.w	r2, #1
 8003784:	d00e      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x10e>
 8003786:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003788:	b292      	uxth	r2, r2
 800378a:	b15a      	cbz	r2, 80037a4 <HAL_SPI_TransmitReceive+0x10e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003790:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003792:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003794:	3302      	adds	r3, #2
 8003796:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003798:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29b      	uxth	r3, r3
 80037a0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80037a2:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037a4:	f7fe f848 	bl	8001838 <HAL_GetTick>
 80037a8:	1b80      	subs	r0, r0, r6
 80037aa:	42a8      	cmp	r0, r5
 80037ac:	d302      	bcc.n	80037b4 <HAL_SPI_TransmitReceive+0x11e>
 80037ae:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037b2:	d11e      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	b91b      	cbnz	r3, 80037c2 <HAL_SPI_TransmitReceive+0x12c>
 80037ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d062      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	f012 0f02 	tst.w	r2, #2
 80037ca:	d0d7      	beq.n	800377c <HAL_SPI_TransmitReceive+0xe6>
 80037cc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80037ce:	b292      	uxth	r2, r2
 80037d0:	2a00      	cmp	r2, #0
 80037d2:	d0d3      	beq.n	800377c <HAL_SPI_TransmitReceive+0xe6>
 80037d4:	2f00      	cmp	r7, #0
 80037d6:	d0d1      	beq.n	800377c <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037d8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80037da:	8812      	ldrh	r2, [r2, #0]
 80037dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80037e0:	3302      	adds	r3, #2
 80037e2:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80037e4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80037ee:	2700      	movs	r7, #0
 80037f0:	e7c4      	b.n	800377c <HAL_SPI_TransmitReceive+0xe6>
        hspi->State = HAL_SPI_STATE_READY;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80037f8:	2300      	movs	r3, #0
 80037fa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80037fe:	2003      	movs	r0, #3
 8003800:	e063      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	f012 0f01 	tst.w	r2, #1
 800380a:	d00e      	beq.n	800382a <HAL_SPI_TransmitReceive+0x194>
 800380c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800380e:	b292      	uxth	r2, r2
 8003810:	b15a      	cbz	r2, 800382a <HAL_SPI_TransmitReceive+0x194>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003818:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800381a:	3301      	adds	r3, #1
 800381c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800381e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29b      	uxth	r3, r3
 8003826:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003828:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800382a:	f7fe f805 	bl	8001838 <HAL_GetTick>
 800382e:	1b83      	subs	r3, r0, r6
 8003830:	42ab      	cmp	r3, r5
 8003832:	d302      	bcc.n	800383a <HAL_SPI_TransmitReceive+0x1a4>
 8003834:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003838:	d11e      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x1e2>
 800383a:	b1ed      	cbz	r5, 8003878 <HAL_SPI_TransmitReceive+0x1e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800383c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	b913      	cbnz	r3, 8003848 <HAL_SPI_TransmitReceive+0x1b2>
 8003842:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003844:	b29b      	uxth	r3, r3
 8003846:	b1fb      	cbz	r3, 8003888 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	f012 0f02 	tst.w	r2, #2
 8003850:	d0d7      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x16c>
 8003852:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003854:	b292      	uxth	r2, r2
 8003856:	2a00      	cmp	r2, #0
 8003858:	d0d3      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x16c>
 800385a:	2f00      	cmp	r7, #0
 800385c:	d0d1      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x16c>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800385e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003860:	7812      	ldrb	r2, [r2, #0]
 8003862:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003864:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003866:	3301      	adds	r3, #1
 8003868:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800386a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29b      	uxth	r3, r3
 8003872:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003874:	2700      	movs	r7, #0
 8003876:	e7c4      	b.n	8003802 <HAL_SPI_TransmitReceive+0x16c>
        hspi->State = HAL_SPI_STATE_READY;
 8003878:	2301      	movs	r3, #1
 800387a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800387e:	2300      	movs	r3, #0
 8003880:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003884:	2003      	movs	r0, #3
 8003886:	e020      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003888:	4632      	mov	r2, r6
 800388a:	4629      	mov	r1, r5
 800388c:	4620      	mov	r0, r4
 800388e:	f7ff fe63 	bl	8003558 <SPI_EndRxTxTransaction>
 8003892:	b990      	cbnz	r0, 80038ba <HAL_SPI_TransmitReceive+0x224>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003894:	68a3      	ldr	r3, [r4, #8]
 8003896:	b933      	cbnz	r3, 80038a6 <HAL_SPI_TransmitReceive+0x210>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80038ac:	2300      	movs	r3, #0
 80038ae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80038b4:	b14b      	cbz	r3, 80038ca <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 80038b6:	2001      	movs	r0, #1
 80038b8:	e007      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038ba:	2320      	movs	r3, #32
 80038bc:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80038be:	2300      	movs	r3, #0
 80038c0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80038c4:	2001      	movs	r0, #1
 80038c6:	e000      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>
    return HAL_BUSY;
 80038c8:	2002      	movs	r0, #2
}
 80038ca:	b003      	add	sp, #12
 80038cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80038d0:	2002      	movs	r0, #2
 80038d2:	e7fa      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>
 80038d4:	2002      	movs	r0, #2
 80038d6:	e7f8      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 80038d8:	2001      	movs	r0, #1
 80038da:	e7f6      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>
 80038dc:	2001      	movs	r0, #1
 80038de:	e7f4      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>
 80038e0:	2001      	movs	r0, #1
 80038e2:	e7f2      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>
  __HAL_LOCK(hspi);
 80038e4:	2002      	movs	r0, #2
 80038e6:	e7f0      	b.n	80038ca <HAL_SPI_TransmitReceive+0x234>

080038e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ec:	6a02      	ldr	r2, [r0, #32]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f6:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038f8:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038fc:	680c      	ldr	r4, [r1, #0]
 80038fe:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003902:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003906:	688b      	ldr	r3, [r1, #8]
 8003908:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800390c:	4d11      	ldr	r5, [pc, #68]	@ (8003954 <TIM_OC1_SetConfig+0x6c>)
 800390e:	42a8      	cmp	r0, r5
 8003910:	d003      	beq.n	800391a <TIM_OC1_SetConfig+0x32>
 8003912:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003916:	42a8      	cmp	r0, r5
 8003918:	d105      	bne.n	8003926 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800391a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800391e:	68cd      	ldr	r5, [r1, #12]
 8003920:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003922:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	4d0b      	ldr	r5, [pc, #44]	@ (8003954 <TIM_OC1_SetConfig+0x6c>)
 8003928:	42a8      	cmp	r0, r5
 800392a:	d003      	beq.n	8003934 <TIM_OC1_SetConfig+0x4c>
 800392c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003930:	42a8      	cmp	r0, r5
 8003932:	d107      	bne.n	8003944 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003934:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003938:	694d      	ldr	r5, [r1, #20]
 800393a:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800393e:	698a      	ldr	r2, [r1, #24]
 8003940:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003944:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003946:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003948:	684a      	ldr	r2, [r1, #4]
 800394a:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394c:	6203      	str	r3, [r0, #32]
}
 800394e:	bc30      	pop	{r4, r5}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000

08003958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800395c:	6a02      	ldr	r2, [r0, #32]
 800395e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003962:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003964:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003966:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003968:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800396c:	680c      	ldr	r4, [r1, #0]
 800396e:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003972:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003976:	688c      	ldr	r4, [r1, #8]
 8003978:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800397c:	4c11      	ldr	r4, [pc, #68]	@ (80039c4 <TIM_OC3_SetConfig+0x6c>)
 800397e:	42a0      	cmp	r0, r4
 8003980:	d003      	beq.n	800398a <TIM_OC3_SetConfig+0x32>
 8003982:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003986:	42a0      	cmp	r0, r4
 8003988:	d106      	bne.n	8003998 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800398a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800398e:	68cc      	ldr	r4, [r1, #12]
 8003990:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003994:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003998:	4c0a      	ldr	r4, [pc, #40]	@ (80039c4 <TIM_OC3_SetConfig+0x6c>)
 800399a:	42a0      	cmp	r0, r4
 800399c:	d003      	beq.n	80039a6 <TIM_OC3_SetConfig+0x4e>
 800399e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80039a2:	42a0      	cmp	r0, r4
 80039a4:	d107      	bne.n	80039b6 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039a6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039aa:	694c      	ldr	r4, [r1, #20]
 80039ac:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039b0:	698c      	ldr	r4, [r1, #24]
 80039b2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b8:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ba:	684a      	ldr	r2, [r1, #4]
 80039bc:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039be:	6203      	str	r3, [r0, #32]
}
 80039c0:	bc30      	pop	{r4, r5}
 80039c2:	4770      	bx	lr
 80039c4:	40010000 	.word	0x40010000

080039c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039cc:	6a02      	ldr	r2, [r0, #32]
 80039ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039d2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039d8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039dc:	680d      	ldr	r5, [r1, #0]
 80039de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039e6:	688d      	ldr	r5, [r1, #8]
 80039e8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ec:	4d09      	ldr	r5, [pc, #36]	@ (8003a14 <TIM_OC4_SetConfig+0x4c>)
 80039ee:	42a8      	cmp	r0, r5
 80039f0:	d003      	beq.n	80039fa <TIM_OC4_SetConfig+0x32>
 80039f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80039f6:	42a8      	cmp	r0, r5
 80039f8:	d104      	bne.n	8003a04 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039fa:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039fe:	694d      	ldr	r5, [r1, #20]
 8003a00:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a06:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a08:	684a      	ldr	r2, [r1, #4]
 8003a0a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0c:	6203      	str	r3, [r0, #32]
}
 8003a0e:	bc30      	pop	{r4, r5}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40010000 	.word	0x40010000

08003a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a18:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a1a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1c:	6a04      	ldr	r4, [r0, #32]
 8003a1e:	f024 0401 	bic.w	r4, r4, #1
 8003a22:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a24:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a26:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a2a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a2e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003a32:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a34:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a36:	6203      	str	r3, [r0, #32]
}
 8003a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a40:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a42:	6a04      	ldr	r4, [r0, #32]
 8003a44:	f024 0410 	bic.w	r4, r4, #16
 8003a48:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a4c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a50:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a58:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a5e:	6203      	str	r3, [r0, #32]
}
 8003a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a66:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a72:	6083      	str	r3, [r0, #8]
}
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003a78:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d137      	bne.n	8003af0 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	2302      	movs	r3, #2
 8003a82:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a86:	6802      	ldr	r2, [r0, #0]
 8003a88:	68d3      	ldr	r3, [r2, #12]
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a90:	6803      	ldr	r3, [r0, #0]
 8003a92:	4a19      	ldr	r2, [pc, #100]	@ (8003af8 <HAL_TIM_Base_Start_IT+0x80>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d020      	beq.n	8003ada <HAL_TIM_Base_Start_IT+0x62>
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9c:	d01d      	beq.n	8003ada <HAL_TIM_Base_Start_IT+0x62>
 8003a9e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d019      	beq.n	8003ada <HAL_TIM_Base_Start_IT+0x62>
 8003aa6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d015      	beq.n	8003ada <HAL_TIM_Base_Start_IT+0x62>
 8003aae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d011      	beq.n	8003ada <HAL_TIM_Base_Start_IT+0x62>
 8003ab6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00d      	beq.n	8003ada <HAL_TIM_Base_Start_IT+0x62>
 8003abe:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_TIM_Base_Start_IT+0x62>
 8003ac6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d005      	beq.n	8003ada <HAL_TIM_Base_Start_IT+0x62>
    __HAL_TIM_ENABLE(htim);
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae0:	2a06      	cmp	r2, #6
 8003ae2:	d007      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003aec:	2000      	movs	r0, #0
 8003aee:	4770      	bx	lr
    return HAL_ERROR;
 8003af0:	2001      	movs	r0, #1
 8003af2:	4770      	bx	lr
  return HAL_OK;
 8003af4:	2000      	movs	r0, #0
}
 8003af6:	4770      	bx	lr
 8003af8:	40010000 	.word	0x40010000

08003afc <HAL_TIM_PWM_MspInit>:
}
 8003afc:	4770      	bx	lr

08003afe <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003b00:	4770      	bx	lr

08003b02 <HAL_TIM_TriggerCallback>:
}
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIM_IRQHandler>:
{
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003b08:	6803      	ldr	r3, [r0, #0]
 8003b0a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b0c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b0e:	f015 0f02 	tst.w	r5, #2
 8003b12:	d010      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b14:	f016 0f02 	tst.w	r6, #2
 8003b18:	d00d      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b1a:	f06f 0202 	mvn.w	r2, #2
 8003b1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b20:	2301      	movs	r3, #1
 8003b22:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b24:	6803      	ldr	r3, [r0, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f013 0f03 	tst.w	r3, #3
 8003b2c:	d05e      	beq.n	8003bec <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	f7fd f98d 	bl	8000e4c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	2300      	movs	r3, #0
 8003b34:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b36:	f015 0f04 	tst.w	r5, #4
 8003b3a:	d012      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b3c:	f016 0f04 	tst.w	r6, #4
 8003b40:	d00f      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	f06f 0204 	mvn.w	r2, #4
 8003b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003b56:	d04f      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7fd f977 	bl	8000e4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b62:	f015 0f08 	tst.w	r5, #8
 8003b66:	d012      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b68:	f016 0f08 	tst.w	r6, #8
 8003b6c:	d00f      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	f06f 0208 	mvn.w	r2, #8
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b76:	2304      	movs	r3, #4
 8003b78:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f013 0f03 	tst.w	r3, #3
 8003b82:	d040      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7fd f961 	bl	8000e4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b8e:	f015 0f10 	tst.w	r5, #16
 8003b92:	d012      	beq.n	8003bba <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b94:	f016 0f10 	tst.w	r6, #16
 8003b98:	d00f      	beq.n	8003bba <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	f06f 0210 	mvn.w	r2, #16
 8003ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003bae:	d031      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7fd f94b 	bl	8000e4c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bba:	f015 0f01 	tst.w	r5, #1
 8003bbe:	d002      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bc0:	f016 0f01 	tst.w	r6, #1
 8003bc4:	d12d      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bc6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003bca:	d002      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bcc:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003bd0:	d12f      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bd2:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8003bd6:	d002      	beq.n	8003bde <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bd8:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003bdc:	d131      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bde:	f015 0f20 	tst.w	r5, #32
 8003be2:	d002      	beq.n	8003bea <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003be4:	f016 0f20 	tst.w	r6, #32
 8003be8:	d133      	bne.n	8003c52 <HAL_TIM_IRQHandler+0x14e>
}
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bec:	f7ff ff87 	bl	8003afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff ff85 	bl	8003b00 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bf6:	e79c      	b.n	8003b32 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f7ff ff80 	bl	8003afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f7ff ff7e 	bl	8003b00 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c04:	e7ab      	b.n	8003b5e <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	4620      	mov	r0, r4
 8003c08:	f7ff ff79 	bl	8003afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7ff ff77 	bl	8003b00 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c12:	e7ba      	b.n	8003b8a <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7ff ff72 	bl	8003afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff ff70 	bl	8003b00 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c20:	e7c9      	b.n	8003bb6 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	f06f 0201 	mvn.w	r2, #1
 8003c28:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7fd fad6 	bl	80011dc <HAL_TIM_PeriodElapsedCallback>
 8003c30:	e7c9      	b.n	8003bc6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c38:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f000 fc14 	bl	8004468 <HAL_TIMEx_BreakCallback>
 8003c40:	e7c7      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c48:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f7ff ff59 	bl	8003b02 <HAL_TIM_TriggerCallback>
 8003c50:	e7c5      	b.n	8003bde <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	f06f 0220 	mvn.w	r2, #32
 8003c58:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 fc03 	bl	8004466 <HAL_TIMEx_CommutCallback>
}
 8003c60:	e7c3      	b.n	8003bea <HAL_TIM_IRQHandler+0xe6>
	...

08003c64 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003c64:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c66:	4a34      	ldr	r2, [pc, #208]	@ (8003d38 <TIM_Base_SetConfig+0xd4>)
 8003c68:	4290      	cmp	r0, r2
 8003c6a:	d012      	beq.n	8003c92 <TIM_Base_SetConfig+0x2e>
 8003c6c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003c70:	d00f      	beq.n	8003c92 <TIM_Base_SetConfig+0x2e>
 8003c72:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003c76:	4290      	cmp	r0, r2
 8003c78:	d00b      	beq.n	8003c92 <TIM_Base_SetConfig+0x2e>
 8003c7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c7e:	4290      	cmp	r0, r2
 8003c80:	d007      	beq.n	8003c92 <TIM_Base_SetConfig+0x2e>
 8003c82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c86:	4290      	cmp	r0, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_Base_SetConfig+0x2e>
 8003c8a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003c8e:	4290      	cmp	r0, r2
 8003c90:	d103      	bne.n	8003c9a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c96:	684a      	ldr	r2, [r1, #4]
 8003c98:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c9a:	4a27      	ldr	r2, [pc, #156]	@ (8003d38 <TIM_Base_SetConfig+0xd4>)
 8003c9c:	4290      	cmp	r0, r2
 8003c9e:	d02a      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003ca0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003ca4:	d027      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003ca6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003caa:	4290      	cmp	r0, r2
 8003cac:	d023      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003cae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cb2:	4290      	cmp	r0, r2
 8003cb4:	d01f      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003cb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cba:	4290      	cmp	r0, r2
 8003cbc:	d01b      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003cbe:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003cc2:	4290      	cmp	r0, r2
 8003cc4:	d017      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003cc6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003cca:	4290      	cmp	r0, r2
 8003ccc:	d013      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003cce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cd2:	4290      	cmp	r0, r2
 8003cd4:	d00f      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003cd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cda:	4290      	cmp	r0, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003cde:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8003ce2:	4290      	cmp	r0, r2
 8003ce4:	d007      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003ce6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cea:	4290      	cmp	r0, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_Base_SetConfig+0x92>
 8003cee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cf2:	4290      	cmp	r0, r2
 8003cf4:	d103      	bne.n	8003cfe <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfa:	68ca      	ldr	r2, [r1, #12]
 8003cfc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d02:	694a      	ldr	r2, [r1, #20]
 8003d04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d08:	688b      	ldr	r3, [r1, #8]
 8003d0a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d0c:	680b      	ldr	r3, [r1, #0]
 8003d0e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d10:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <TIM_Base_SetConfig+0xd4>)
 8003d12:	4298      	cmp	r0, r3
 8003d14:	d003      	beq.n	8003d1e <TIM_Base_SetConfig+0xba>
 8003d16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d1a:	4298      	cmp	r0, r3
 8003d1c:	d101      	bne.n	8003d22 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8003d1e:	690b      	ldr	r3, [r1, #16]
 8003d20:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003d22:	2301      	movs	r3, #1
 8003d24:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d26:	6903      	ldr	r3, [r0, #16]
 8003d28:	f013 0f01 	tst.w	r3, #1
 8003d2c:	d003      	beq.n	8003d36 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d2e:	6903      	ldr	r3, [r0, #16]
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	6103      	str	r3, [r0, #16]
}
 8003d36:	4770      	bx	lr
 8003d38:	40010000 	.word	0x40010000

08003d3c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003d3c:	b340      	cbz	r0, 8003d90 <HAL_TIM_Base_Init+0x54>
{
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003d46:	b1f3      	cbz	r3, 8003d86 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4e:	4621      	mov	r1, r4
 8003d50:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d54:	f7ff ff86 	bl	8003c64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003d62:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003d66:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003d6a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d76:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003d7a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003d82:	2000      	movs	r0, #0
}
 8003d84:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d86:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d8a:	f001 fccb 	bl	8005724 <HAL_TIM_Base_MspInit>
 8003d8e:	e7db      	b.n	8003d48 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003d90:	2001      	movs	r0, #1
}
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003d94:	b340      	cbz	r0, 8003de8 <HAL_TIM_PWM_Init+0x54>
{
 8003d96:	b510      	push	{r4, lr}
 8003d98:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003d9e:	b1f3      	cbz	r3, 8003dde <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	2302      	movs	r3, #2
 8003da2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da6:	4621      	mov	r1, r4
 8003da8:	f851 0b04 	ldr.w	r0, [r1], #4
 8003dac:	f7ff ff5a 	bl	8003c64 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003dba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003dbe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003dc2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003dd2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003dd6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003dda:	2000      	movs	r0, #0
}
 8003ddc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003dde:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003de2:	f7ff fe8b 	bl	8003afc <HAL_TIM_PWM_MspInit>
 8003de6:	e7db      	b.n	8003da0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003de8:	2001      	movs	r0, #1
}
 8003dea:	4770      	bx	lr

08003dec <TIM_OC2_SetConfig>:
{
 8003dec:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003dee:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df0:	6a02      	ldr	r2, [r0, #32]
 8003df2:	f022 0210 	bic.w	r2, r2, #16
 8003df6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003df8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003dfa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dfc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e00:	680d      	ldr	r5, [r1, #0]
 8003e02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003e06:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e0a:	688d      	ldr	r5, [r1, #8]
 8003e0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e10:	4d11      	ldr	r5, [pc, #68]	@ (8003e58 <TIM_OC2_SetConfig+0x6c>)
 8003e12:	42a8      	cmp	r0, r5
 8003e14:	d003      	beq.n	8003e1e <TIM_OC2_SetConfig+0x32>
 8003e16:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e1a:	42a8      	cmp	r0, r5
 8003e1c:	d106      	bne.n	8003e2c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e22:	68cd      	ldr	r5, [r1, #12]
 8003e24:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2c:	4d0a      	ldr	r5, [pc, #40]	@ (8003e58 <TIM_OC2_SetConfig+0x6c>)
 8003e2e:	42a8      	cmp	r0, r5
 8003e30:	d003      	beq.n	8003e3a <TIM_OC2_SetConfig+0x4e>
 8003e32:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e36:	42a8      	cmp	r0, r5
 8003e38:	d107      	bne.n	8003e4a <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e3a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e3e:	694d      	ldr	r5, [r1, #20]
 8003e40:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e44:	698d      	ldr	r5, [r1, #24]
 8003e46:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003e4a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e4c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003e4e:	684a      	ldr	r2, [r1, #4]
 8003e50:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003e52:	6203      	str	r3, [r0, #32]
}
 8003e54:	bc30      	pop	{r4, r5}
 8003e56:	4770      	bx	lr
 8003e58:	40010000 	.word	0x40010000

08003e5c <HAL_TIM_PWM_ConfigChannel>:
{
 8003e5c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003e5e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d066      	beq.n	8003f34 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003e66:	4604      	mov	r4, r0
 8003e68:	460d      	mov	r5, r1
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003e70:	2a0c      	cmp	r2, #12
 8003e72:	d85a      	bhi.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0xce>
 8003e74:	e8df f002 	tbb	[pc, r2]
 8003e78:	59595907 	.word	0x59595907
 8003e7c:	5959591b 	.word	0x5959591b
 8003e80:	59595930 	.word	0x59595930
 8003e84:	44          	.byte	0x44
 8003e85:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e86:	6800      	ldr	r0, [r0, #0]
 8003e88:	f7ff fd2e 	bl	80038e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e8c:	6822      	ldr	r2, [r4, #0]
 8003e8e:	6993      	ldr	r3, [r2, #24]
 8003e90:	f043 0308 	orr.w	r3, r3, #8
 8003e94:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	6993      	ldr	r3, [r2, #24]
 8003e9a:	f023 0304 	bic.w	r3, r3, #4
 8003e9e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	6993      	ldr	r3, [r2, #24]
 8003ea4:	6929      	ldr	r1, [r5, #16]
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2000      	movs	r0, #0
      break;
 8003eac:	e03e      	b.n	8003f2c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eae:	6800      	ldr	r0, [r0, #0]
 8003eb0:	f7ff ff9c 	bl	8003dec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eb4:	6822      	ldr	r2, [r4, #0]
 8003eb6:	6993      	ldr	r3, [r2, #24]
 8003eb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ebc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ebe:	6822      	ldr	r2, [r4, #0]
 8003ec0:	6993      	ldr	r3, [r2, #24]
 8003ec2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ec6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ec8:	6822      	ldr	r2, [r4, #0]
 8003eca:	6993      	ldr	r3, [r2, #24]
 8003ecc:	6929      	ldr	r1, [r5, #16]
 8003ece:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ed2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed4:	2000      	movs	r0, #0
      break;
 8003ed6:	e029      	b.n	8003f2c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ed8:	6800      	ldr	r0, [r0, #0]
 8003eda:	f7ff fd3d 	bl	8003958 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	69d3      	ldr	r3, [r2, #28]
 8003ee2:	f043 0308 	orr.w	r3, r3, #8
 8003ee6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	69d3      	ldr	r3, [r2, #28]
 8003eec:	f023 0304 	bic.w	r3, r3, #4
 8003ef0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	69d3      	ldr	r3, [r2, #28]
 8003ef6:	6929      	ldr	r1, [r5, #16]
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003efc:	2000      	movs	r0, #0
      break;
 8003efe:	e015      	b.n	8003f2c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f00:	6800      	ldr	r0, [r0, #0]
 8003f02:	f7ff fd61 	bl	80039c8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	69d3      	ldr	r3, [r2, #28]
 8003f0a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f0e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f10:	6822      	ldr	r2, [r4, #0]
 8003f12:	69d3      	ldr	r3, [r2, #28]
 8003f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f18:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	69d3      	ldr	r3, [r2, #28]
 8003f1e:	6929      	ldr	r1, [r5, #16]
 8003f20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f24:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2000      	movs	r0, #0
      break;
 8003f28:	e000      	b.n	8003f2c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003f2a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003f34:	2002      	movs	r0, #2
 8003f36:	e7fc      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003f38 <TIM_TI1_SetConfig>:
{
 8003f38:	b470      	push	{r4, r5, r6}
 8003f3a:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 8003f3c:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3e:	6a04      	ldr	r4, [r0, #32]
 8003f40:	f024 0401 	bic.w	r4, r4, #1
 8003f44:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f46:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f48:	4d18      	ldr	r5, [pc, #96]	@ (8003fac <TIM_TI1_SetConfig+0x74>)
 8003f4a:	42a8      	cmp	r0, r5
 8003f4c:	d01c      	beq.n	8003f88 <TIM_TI1_SetConfig+0x50>
 8003f4e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003f52:	d019      	beq.n	8003f88 <TIM_TI1_SetConfig+0x50>
 8003f54:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <TIM_TI1_SetConfig+0x78>)
 8003f56:	4290      	cmp	r0, r2
 8003f58:	d016      	beq.n	8003f88 <TIM_TI1_SetConfig+0x50>
 8003f5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f5e:	4290      	cmp	r0, r2
 8003f60:	d012      	beq.n	8003f88 <TIM_TI1_SetConfig+0x50>
 8003f62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f66:	4290      	cmp	r0, r2
 8003f68:	d00e      	beq.n	8003f88 <TIM_TI1_SetConfig+0x50>
 8003f6a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003f6e:	4290      	cmp	r0, r2
 8003f70:	d00a      	beq.n	8003f88 <TIM_TI1_SetConfig+0x50>
 8003f72:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003f76:	4290      	cmp	r0, r2
 8003f78:	d006      	beq.n	8003f88 <TIM_TI1_SetConfig+0x50>
 8003f7a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003f7e:	4290      	cmp	r0, r2
 8003f80:	d002      	beq.n	8003f88 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f82:	f044 0201 	orr.w	r2, r4, #1
 8003f86:	e003      	b.n	8003f90 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f88:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003f8c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f90:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9a:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f9e:	f001 010a 	and.w	r1, r1, #10
 8003fa2:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8003fa4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003fa6:	6201      	str	r1, [r0, #32]
}
 8003fa8:	bc70      	pop	{r4, r5, r6}
 8003faa:	4770      	bx	lr
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	40000400 	.word	0x40000400

08003fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fb4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb8:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fbc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc6:	6082      	str	r2, [r0, #8]
}
 8003fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003fce:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d078      	beq.n	80040c8 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003fd6:	b510      	push	{r4, lr}
 8003fd8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003fe6:	6802      	ldr	r2, [r0, #0]
 8003fe8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003ff2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003ff4:	680b      	ldr	r3, [r1, #0]
 8003ff6:	2b60      	cmp	r3, #96	@ 0x60
 8003ff8:	d04c      	beq.n	8004094 <HAL_TIM_ConfigClockSource+0xc6>
 8003ffa:	d823      	bhi.n	8004044 <HAL_TIM_ConfigClockSource+0x76>
 8003ffc:	2b40      	cmp	r3, #64	@ 0x40
 8003ffe:	d054      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0xdc>
 8004000:	d811      	bhi.n	8004026 <HAL_TIM_ConfigClockSource+0x58>
 8004002:	2b20      	cmp	r3, #32
 8004004:	d003      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x40>
 8004006:	d80a      	bhi.n	800401e <HAL_TIM_ConfigClockSource+0x50>
 8004008:	b10b      	cbz	r3, 800400e <HAL_TIM_ConfigClockSource+0x40>
 800400a:	2b10      	cmp	r3, #16
 800400c:	d105      	bne.n	800401a <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400e:	4619      	mov	r1, r3
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	f7ff fd28 	bl	8003a66 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2000      	movs	r0, #0
      break;
 8004018:	e028      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800401a:	2001      	movs	r0, #1
 800401c:	e026      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800401e:	2b30      	cmp	r3, #48	@ 0x30
 8004020:	d0f5      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8004022:	2001      	movs	r0, #1
 8004024:	e022      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004026:	2b50      	cmp	r3, #80	@ 0x50
 8004028:	d10a      	bne.n	8004040 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402a:	68ca      	ldr	r2, [r1, #12]
 800402c:	6849      	ldr	r1, [r1, #4]
 800402e:	6800      	ldr	r0, [r0, #0]
 8004030:	f7ff fcf2 	bl	8003a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004034:	2150      	movs	r1, #80	@ 0x50
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	f7ff fd15 	bl	8003a66 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800403c:	2000      	movs	r0, #0
      break;
 800403e:	e015      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8004040:	2001      	movs	r0, #1
 8004042:	e013      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004048:	d03a      	beq.n	80040c0 <HAL_TIM_ConfigClockSource+0xf2>
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404e:	d014      	beq.n	800407a <HAL_TIM_ConfigClockSource+0xac>
 8004050:	2b70      	cmp	r3, #112	@ 0x70
 8004052:	d137      	bne.n	80040c4 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004054:	68cb      	ldr	r3, [r1, #12]
 8004056:	684a      	ldr	r2, [r1, #4]
 8004058:	6889      	ldr	r1, [r1, #8]
 800405a:	6800      	ldr	r0, [r0, #0]
 800405c:	f7ff ffaa 	bl	8003fb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004064:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004068:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800406c:	2301      	movs	r3, #1
 800406e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004072:	2300      	movs	r3, #0
 8004074:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004078:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800407a:	68cb      	ldr	r3, [r1, #12]
 800407c:	684a      	ldr	r2, [r1, #4]
 800407e:	6889      	ldr	r1, [r1, #8]
 8004080:	6800      	ldr	r0, [r0, #0]
 8004082:	f7ff ff97 	bl	8003fb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	6893      	ldr	r3, [r2, #8]
 800408a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800408e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004090:	2000      	movs	r0, #0
      break;
 8004092:	e7eb      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004094:	68ca      	ldr	r2, [r1, #12]
 8004096:	6849      	ldr	r1, [r1, #4]
 8004098:	6800      	ldr	r0, [r0, #0]
 800409a:	f7ff fcd0 	bl	8003a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800409e:	2160      	movs	r1, #96	@ 0x60
 80040a0:	6820      	ldr	r0, [r4, #0]
 80040a2:	f7ff fce0 	bl	8003a66 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2000      	movs	r0, #0
      break;
 80040a8:	e7e0      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040aa:	68ca      	ldr	r2, [r1, #12]
 80040ac:	6849      	ldr	r1, [r1, #4]
 80040ae:	6800      	ldr	r0, [r0, #0]
 80040b0:	f7ff fcb2 	bl	8003a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040b4:	2140      	movs	r1, #64	@ 0x40
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	f7ff fcd5 	bl	8003a66 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2000      	movs	r0, #0
      break;
 80040be:	e7d5      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80040c0:	2000      	movs	r0, #0
 80040c2:	e7d3      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80040c4:	2001      	movs	r0, #1
 80040c6:	e7d1      	b.n	800406c <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80040c8:	2002      	movs	r0, #2
}
 80040ca:	4770      	bx	lr

080040cc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040cc:	f001 011f 	and.w	r1, r1, #31
 80040d0:	f04f 0c01 	mov.w	ip, #1
 80040d4:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040d8:	6a03      	ldr	r3, [r0, #32]
 80040da:	ea23 030c 	bic.w	r3, r3, ip
 80040de:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040e0:	6a03      	ldr	r3, [r0, #32]
 80040e2:	408a      	lsls	r2, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	6203      	str	r3, [r0, #32]
}
 80040e8:	4770      	bx	lr
	...

080040ec <HAL_TIM_PWM_Start>:
{
 80040ec:	b510      	push	{r4, lr}
 80040ee:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040f0:	4608      	mov	r0, r1
 80040f2:	2900      	cmp	r1, #0
 80040f4:	d141      	bne.n	800417a <HAL_TIM_PWM_Start+0x8e>
 80040f6:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80040fa:	3b01      	subs	r3, #1
 80040fc:	bf18      	it	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d16b      	bne.n	80041dc <HAL_TIM_PWM_Start+0xf0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004104:	2800      	cmp	r0, #0
 8004106:	d14e      	bne.n	80041a6 <HAL_TIM_PWM_Start+0xba>
 8004108:	2302      	movs	r3, #2
 800410a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800410e:	2201      	movs	r2, #1
 8004110:	4601      	mov	r1, r0
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	f7ff ffda 	bl	80040cc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	4a32      	ldr	r2, [pc, #200]	@ (80041e4 <HAL_TIM_PWM_Start+0xf8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <HAL_TIM_PWM_Start+0x3c>
 8004120:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004124:	4293      	cmp	r3, r2
 8004126:	d103      	bne.n	8004130 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8004128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800412a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	4a2c      	ldr	r2, [pc, #176]	@ (80041e4 <HAL_TIM_PWM_Start+0xf8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d046      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xda>
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413c:	d043      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xda>
 800413e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004142:	4293      	cmp	r3, r2
 8004144:	d03f      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xda>
 8004146:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800414a:	4293      	cmp	r3, r2
 800414c:	d03b      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xda>
 800414e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004152:	4293      	cmp	r3, r2
 8004154:	d037      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xda>
 8004156:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800415a:	4293      	cmp	r3, r2
 800415c:	d033      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xda>
 800415e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004162:	4293      	cmp	r3, r2
 8004164:	d02f      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xda>
 8004166:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800416a:	4293      	cmp	r3, r2
 800416c:	d02b      	beq.n	80041c6 <HAL_TIM_PWM_Start+0xda>
    __HAL_TIM_ENABLE(htim);
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004176:	2000      	movs	r0, #0
 8004178:	e02f      	b.n	80041da <HAL_TIM_PWM_Start+0xee>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800417a:	2904      	cmp	r1, #4
 800417c:	d007      	beq.n	800418e <HAL_TIM_PWM_Start+0xa2>
 800417e:	2908      	cmp	r1, #8
 8004180:	d00b      	beq.n	800419a <HAL_TIM_PWM_Start+0xae>
 8004182:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004186:	3b01      	subs	r3, #1
 8004188:	bf18      	it	ne
 800418a:	2301      	movne	r3, #1
 800418c:	e7b8      	b.n	8004100 <HAL_TIM_PWM_Start+0x14>
 800418e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8004192:	3b01      	subs	r3, #1
 8004194:	bf18      	it	ne
 8004196:	2301      	movne	r3, #1
 8004198:	e7b2      	b.n	8004100 <HAL_TIM_PWM_Start+0x14>
 800419a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800419e:	3b01      	subs	r3, #1
 80041a0:	bf18      	it	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	e7ac      	b.n	8004100 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a6:	2804      	cmp	r0, #4
 80041a8:	d005      	beq.n	80041b6 <HAL_TIM_PWM_Start+0xca>
 80041aa:	2808      	cmp	r0, #8
 80041ac:	d007      	beq.n	80041be <HAL_TIM_PWM_Start+0xd2>
 80041ae:	2302      	movs	r3, #2
 80041b0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80041b4:	e7ab      	b.n	800410e <HAL_TIM_PWM_Start+0x22>
 80041b6:	2302      	movs	r3, #2
 80041b8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80041bc:	e7a7      	b.n	800410e <HAL_TIM_PWM_Start+0x22>
 80041be:	2302      	movs	r3, #2
 80041c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80041c4:	e7a3      	b.n	800410e <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041cc:	2a06      	cmp	r2, #6
 80041ce:	d007      	beq.n	80041e0 <HAL_TIM_PWM_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80041d8:	2000      	movs	r0, #0
}
 80041da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80041dc:	2001      	movs	r0, #1
 80041de:	e7fc      	b.n	80041da <HAL_TIM_PWM_Start+0xee>
  return HAL_OK;
 80041e0:	2000      	movs	r0, #0
 80041e2:	e7fa      	b.n	80041da <HAL_TIM_PWM_Start+0xee>
 80041e4:	40010000 	.word	0x40010000

080041e8 <HAL_TIMEx_HallSensor_Init>:
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d065      	beq.n	80042b8 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	460e      	mov	r6, r1
 80041f2:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d058      	beq.n	80042ae <HAL_TIMEx_HallSensor_Init+0xc6>
    HAL_TIMEx_HallSensor_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	2302      	movs	r3, #2
 80041fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004202:	4621      	mov	r1, r4
 8004204:	f851 0b04 	ldr.w	r0, [r1], #4
 8004208:	f7ff fd2c 	bl	8003c64 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800420c:	68b3      	ldr	r3, [r6, #8]
 800420e:	2203      	movs	r2, #3
 8004210:	6831      	ldr	r1, [r6, #0]
 8004212:	6820      	ldr	r0, [r4, #0]
 8004214:	f7ff fe90 	bl	8003f38 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	6993      	ldr	r3, [r2, #24]
 800421c:	f023 030c 	bic.w	r3, r3, #12
 8004220:	6193      	str	r3, [r2, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004222:	6822      	ldr	r2, [r4, #0]
 8004224:	6993      	ldr	r3, [r2, #24]
 8004226:	6871      	ldr	r1, [r6, #4]
 8004228:	430b      	orrs	r3, r1
 800422a:	6193      	str	r3, [r2, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800422c:	6822      	ldr	r2, [r4, #0]
 800422e:	6853      	ldr	r3, [r2, #4]
 8004230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004234:	6053      	str	r3, [r2, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	6893      	ldr	r3, [r2, #8]
 800423a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	6893      	ldr	r3, [r2, #8]
 8004244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004248:	6093      	str	r3, [r2, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	6893      	ldr	r3, [r2, #8]
 800424e:	f023 0307 	bic.w	r3, r3, #7
 8004252:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004254:	6822      	ldr	r2, [r4, #0]
 8004256:	6893      	ldr	r3, [r2, #8]
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	6093      	str	r3, [r2, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800425e:	2500      	movs	r5, #0
 8004260:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004262:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004264:	2370      	movs	r3, #112	@ 0x70
 8004266:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004268:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800426a:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800426c:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800426e:	68f3      	ldr	r3, [r6, #12]
 8004270:	9302      	str	r3, [sp, #8]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004272:	a901      	add	r1, sp, #4
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	f7ff fdb9 	bl	8003dec <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	6853      	ldr	r3, [r2, #4]
 800427e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004282:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004284:	6822      	ldr	r2, [r4, #0]
 8004286:	6853      	ldr	r3, [r2, #4]
 8004288:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800428c:	6053      	str	r3, [r2, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428e:	2301      	movs	r3, #1
 8004290:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004298:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  return HAL_OK;
 80042a8:	4628      	mov	r0, r5
}
 80042aa:	b008      	add	sp, #32
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80042ae:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80042b2:	f001 fa85 	bl	80057c0 <HAL_TIMEx_HallSensor_MspInit>
 80042b6:	e7a1      	b.n	80041fc <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 80042b8:	2001      	movs	r0, #1
}
 80042ba:	4770      	bx	lr

080042bc <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 80042bc:	b510      	push	{r4, lr}
 80042be:	4604      	mov	r4, r0
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042c0:	f890 c03e 	ldrb.w	ip, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042c4:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042c8:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042cc:	f890 1043 	ldrb.w	r1, [r0, #67]	@ 0x43

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042d0:	f1bc 0f01 	cmp.w	ip, #1
 80042d4:	d14f      	bne.n	8004376 <HAL_TIMEx_HallSensor_Start_IT+0xba>
 80042d6:	fa5f f08c 	uxtb.w	r0, ip
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	b2c9      	uxtb	r1, r1
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d149      	bne.n	8004378 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042e4:	2a01      	cmp	r2, #1
 80042e6:	d148      	bne.n	800437a <HAL_TIMEx_HallSensor_Start_IT+0xbe>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042e8:	2901      	cmp	r1, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIMEx_HallSensor_Start_IT+0x34>
  {
    return HAL_ERROR;
 80042ec:	4610      	mov	r0, r2
 80042ee:	e043      	b.n	8004378 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f0:	2302      	movs	r3, #2
 80042f2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	68d3      	ldr	r3, [r2, #12]
 8004306:	f043 0302 	orr.w	r3, r3, #2
 800430a:	60d3      	str	r3, [r2, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800430c:	2201      	movs	r2, #1
 800430e:	2100      	movs	r1, #0
 8004310:	6820      	ldr	r0, [r4, #0]
 8004312:	f7ff fedb 	bl	80040cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	4a1a      	ldr	r2, [pc, #104]	@ (8004384 <HAL_TIMEx_HallSensor_Start_IT+0xc8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d020      	beq.n	8004360 <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004322:	d01d      	beq.n	8004360 <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 8004324:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004328:	4293      	cmp	r3, r2
 800432a:	d019      	beq.n	8004360 <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 800432c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004330:	4293      	cmp	r3, r2
 8004332:	d015      	beq.n	8004360 <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 8004334:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004338:	4293      	cmp	r3, r2
 800433a:	d011      	beq.n	8004360 <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 800433c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004340:	4293      	cmp	r3, r2
 8004342:	d00d      	beq.n	8004360 <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 8004344:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004348:	4293      	cmp	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 800434c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004350:	4293      	cmp	r3, r2
 8004352:	d005      	beq.n	8004360 <HAL_TIMEx_HallSensor_Start_IT+0xa4>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435c:	2000      	movs	r0, #0
 800435e:	e00b      	b.n	8004378 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004366:	2a06      	cmp	r2, #6
 8004368:	d009      	beq.n	800437e <HAL_TIMEx_HallSensor_Start_IT+0xc2>
      __HAL_TIM_ENABLE(htim);
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004372:	2000      	movs	r0, #0
 8004374:	e000      	b.n	8004378 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
    return HAL_ERROR;
 8004376:	2001      	movs	r0, #1
}
 8004378:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800437a:	4618      	mov	r0, r3
 800437c:	e7fc      	b.n	8004378 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
  return HAL_OK;
 800437e:	2000      	movs	r0, #0
 8004380:	e7fa      	b.n	8004378 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000

08004388 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004388:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800438c:	2a01      	cmp	r2, #1
 800438e:	d03d      	beq.n	800440c <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8004390:	b410      	push	{r4}
 8004392:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004394:	2201      	movs	r2, #1
 8004396:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439a:	2202      	movs	r2, #2
 800439c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	6802      	ldr	r2, [r0, #0]
 80043a2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a6:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043aa:	6808      	ldr	r0, [r1, #0]
 80043ac:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4816      	ldr	r0, [pc, #88]	@ (8004410 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80043b6:	4282      	cmp	r2, r0
 80043b8:	d01a      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80043ba:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80043be:	d017      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80043c0:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80043c4:	4282      	cmp	r2, r0
 80043c6:	d013      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80043c8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80043cc:	4282      	cmp	r2, r0
 80043ce:	d00f      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80043d0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80043d4:	4282      	cmp	r2, r0
 80043d6:	d00b      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80043d8:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80043dc:	4282      	cmp	r2, r0
 80043de:	d007      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80043e0:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80043e4:	4282      	cmp	r2, r0
 80043e6:	d003      	beq.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80043e8:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80043ec:	4282      	cmp	r2, r0
 80043ee:	d104      	bne.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f4:	6849      	ldr	r1, [r1, #4]
 80043f6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004400:	2000      	movs	r0, #0
 8004402:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800440a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800440c:	2002      	movs	r0, #2
}
 800440e:	4770      	bx	lr
 8004410:	40010000 	.word	0x40010000

08004414 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004414:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004416:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d021      	beq.n	8004462 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800441e:	2301      	movs	r3, #1
 8004420:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004424:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442a:	6888      	ldr	r0, [r1, #8]
 800442c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800442e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004432:	6848      	ldr	r0, [r1, #4]
 8004434:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800443a:	6808      	ldr	r0, [r1, #0]
 800443c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800443e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004442:	6908      	ldr	r0, [r1, #16]
 8004444:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004446:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800444a:	6948      	ldr	r0, [r1, #20]
 800444c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800444e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004452:	69c9      	ldr	r1, [r1, #28]
 8004454:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004456:	6811      	ldr	r1, [r2, #0]
 8004458:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800445a:	2000      	movs	r0, #0
 800445c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8004460:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004462:	2002      	movs	r0, #2
}
 8004464:	4770      	bx	lr

08004466 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004468:	4770      	bx	lr
	...

0800446c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800446c:	b530      	push	{r4, r5, lr}
 800446e:	b089      	sub	sp, #36	@ 0x24
 8004470:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	4b21      	ldr	r3, [pc, #132]	@ (80044fc <HAL_InitTick+0x90>)
 8004478:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800447a:	f042 0210 	orr.w	r2, r2, #16
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800448a:	a902      	add	r1, sp, #8
 800448c:	a803      	add	r0, sp, #12
 800448e:	f7fe fcfd 	bl	8002e8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004492:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004494:	b9cb      	cbnz	r3, 80044ca <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004496:	f7fe fcd9 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 800449a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800449c:	4a18      	ldr	r2, [pc, #96]	@ (8004500 <HAL_InitTick+0x94>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	0c9b      	lsrs	r3, r3, #18
 80044a4:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80044a6:	4817      	ldr	r0, [pc, #92]	@ (8004504 <HAL_InitTick+0x98>)
 80044a8:	4a17      	ldr	r2, [pc, #92]	@ (8004508 <HAL_InitTick+0x9c>)
 80044aa:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80044ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80044b0:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80044b2:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b8:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ba:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80044bc:	f7ff fc3e 	bl	8003d3c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80044c0:	4605      	mov	r5, r0
 80044c2:	b130      	cbz	r0, 80044d2 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 80044c4:	4628      	mov	r0, r5
 80044c6:	b009      	add	sp, #36	@ 0x24
 80044c8:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80044ca:	f7fe fcbf 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 80044ce:	0043      	lsls	r3, r0, #1
 80044d0:	e7e4      	b.n	800449c <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 80044d2:	480c      	ldr	r0, [pc, #48]	@ (8004504 <HAL_InitTick+0x98>)
 80044d4:	f7ff fad0 	bl	8003a78 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80044d8:	4605      	mov	r5, r0
 80044da:	2800      	cmp	r0, #0
 80044dc:	d1f2      	bne.n	80044c4 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80044de:	2036      	movs	r0, #54	@ 0x36
 80044e0:	f7fd ff9a 	bl	8002418 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044e4:	2c0f      	cmp	r4, #15
 80044e6:	d901      	bls.n	80044ec <HAL_InitTick+0x80>
        status = HAL_ERROR;
 80044e8:	2501      	movs	r5, #1
 80044ea:	e7eb      	b.n	80044c4 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80044ec:	2200      	movs	r2, #0
 80044ee:	4621      	mov	r1, r4
 80044f0:	2036      	movs	r0, #54	@ 0x36
 80044f2:	f7fd ff81 	bl	80023f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044f6:	4b05      	ldr	r3, [pc, #20]	@ (800450c <HAL_InitTick+0xa0>)
 80044f8:	601c      	str	r4, [r3, #0]
 80044fa:	e7e3      	b.n	80044c4 <HAL_InitTick+0x58>
 80044fc:	40023800 	.word	0x40023800
 8004500:	431bde83 	.word	0x431bde83
 8004504:	200042ec 	.word	0x200042ec
 8004508:	40001000 	.word	0x40001000
 800450c:	20000008 	.word	0x20000008

08004510 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004510:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	f102 030c 	add.w	r3, r2, #12
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	320c      	adds	r2, #12
 8004520:	e842 3100 	strex	r1, r3, [r2]
 8004524:	2900      	cmp	r1, #0
 8004526:	d1f3      	bne.n	8004510 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004528:	2320      	movs	r3, #32
 800452a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 800452e:	4770      	bx	lr

08004530 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004530:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	f102 030c 	add.w	r3, r2, #12
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	320c      	adds	r2, #12
 8004540:	e842 3100 	strex	r1, r3, [r2]
 8004544:	2900      	cmp	r1, #0
 8004546:	d1f3      	bne.n	8004530 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	f102 0314 	add.w	r3, r2, #20
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	3214      	adds	r2, #20
 8004558:	e842 3100 	strex	r1, r3, [r2]
 800455c:	2900      	cmp	r1, #0
 800455e:	d1f3      	bne.n	8004548 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004560:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004562:	2b01      	cmp	r3, #1
 8004564:	d005      	beq.n	8004572 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004566:	2320      	movs	r3, #32
 8004568:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456c:	2300      	movs	r3, #0
 800456e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004570:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004572:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	f102 030c 	add.w	r3, r2, #12
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	320c      	adds	r2, #12
 8004582:	e842 3100 	strex	r1, r3, [r2]
 8004586:	2900      	cmp	r1, #0
 8004588:	d1f3      	bne.n	8004572 <UART_EndRxTransfer+0x42>
 800458a:	e7ec      	b.n	8004566 <UART_EndRxTransfer+0x36>

0800458c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800458c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004590:	2b21      	cmp	r3, #33	@ 0x21
 8004592:	d001      	beq.n	8004598 <UART_Transmit_IT+0xc>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004594:	2002      	movs	r0, #2
  }
}
 8004596:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004598:	6883      	ldr	r3, [r0, #8]
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800459e:	d017      	beq.n	80045d0 <UART_Transmit_IT+0x44>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045a0:	6a03      	ldr	r3, [r0, #32]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	6202      	str	r2, [r0, #32]
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	6803      	ldr	r3, [r0, #0]
 80045aa:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80045ac:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80045b6:	b94b      	cbnz	r3, 80045cc <UART_Transmit_IT+0x40>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045b8:	6802      	ldr	r2, [r0, #0]
 80045ba:	68d3      	ldr	r3, [r2, #12]
 80045bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045c0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045c2:	6802      	ldr	r2, [r0, #0]
 80045c4:	68d3      	ldr	r3, [r2, #12]
 80045c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045ca:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80045cc:	2000      	movs	r0, #0
 80045ce:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d0:	6903      	ldr	r3, [r0, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e4      	bne.n	80045a0 <UART_Transmit_IT+0x14>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045d6:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	6802      	ldr	r2, [r0, #0]
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80045e2:	6a03      	ldr	r3, [r0, #32]
 80045e4:	3302      	adds	r3, #2
 80045e6:	6203      	str	r3, [r0, #32]
 80045e8:	e7e0      	b.n	80045ac <UART_Transmit_IT+0x20>
	...

080045ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ec:	b510      	push	{r4, lr}
 80045ee:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	6802      	ldr	r2, [r0, #0]
 80045f2:	6913      	ldr	r3, [r2, #16]
 80045f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045f8:	68c1      	ldr	r1, [r0, #12]
 80045fa:	430b      	orrs	r3, r1
 80045fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045fe:	6883      	ldr	r3, [r0, #8]
 8004600:	6902      	ldr	r2, [r0, #16]
 8004602:	431a      	orrs	r2, r3
 8004604:	6943      	ldr	r3, [r0, #20]
 8004606:	431a      	orrs	r2, r3
 8004608:	69c3      	ldr	r3, [r0, #28]
 800460a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800460c:	6801      	ldr	r1, [r0, #0]
 800460e:	68cb      	ldr	r3, [r1, #12]
 8004610:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004614:	f023 030c 	bic.w	r3, r3, #12
 8004618:	4313      	orrs	r3, r2
 800461a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800461c:	6802      	ldr	r2, [r0, #0]
 800461e:	6953      	ldr	r3, [r2, #20]
 8004620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004624:	6981      	ldr	r1, [r0, #24]
 8004626:	430b      	orrs	r3, r1
 8004628:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800462a:	6803      	ldr	r3, [r0, #0]
 800462c:	4a31      	ldr	r2, [pc, #196]	@ (80046f4 <UART_SetConfig+0x108>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d006      	beq.n	8004640 <UART_SetConfig+0x54>
 8004632:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004636:	4293      	cmp	r3, r2
 8004638:	d002      	beq.n	8004640 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800463a:	f7fe fc07 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 800463e:	e001      	b.n	8004644 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004640:	f7fe fc14 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004644:	69e3      	ldr	r3, [r4, #28]
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800464a:	d029      	beq.n	80046a0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800464c:	2100      	movs	r1, #0
 800464e:	1803      	adds	r3, r0, r0
 8004650:	4149      	adcs	r1, r1
 8004652:	181b      	adds	r3, r3, r0
 8004654:	f141 0100 	adc.w	r1, r1, #0
 8004658:	00c9      	lsls	r1, r1, #3
 800465a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	1818      	adds	r0, r3, r0
 8004662:	6863      	ldr	r3, [r4, #4]
 8004664:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004668:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800466c:	f141 0100 	adc.w	r1, r1, #0
 8004670:	f7fb fdae 	bl	80001d0 <__aeabi_uldivmod>
 8004674:	4a20      	ldr	r2, [pc, #128]	@ (80046f8 <UART_SetConfig+0x10c>)
 8004676:	fba2 3100 	umull	r3, r1, r2, r0
 800467a:	0949      	lsrs	r1, r1, #5
 800467c:	2364      	movs	r3, #100	@ 0x64
 800467e:	fb03 0311 	mls	r3, r3, r1, r0
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	@ 0x32
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004690:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	6821      	ldr	r1, [r4, #0]
 800469a:	4413      	add	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }
}
 800469e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046a0:	2300      	movs	r3, #0
 80046a2:	1802      	adds	r2, r0, r0
 80046a4:	eb43 0103 	adc.w	r1, r3, r3
 80046a8:	1812      	adds	r2, r2, r0
 80046aa:	f141 0100 	adc.w	r1, r1, #0
 80046ae:	00c9      	lsls	r1, r1, #3
 80046b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046b4:	00d2      	lsls	r2, r2, #3
 80046b6:	1810      	adds	r0, r2, r0
 80046b8:	f141 0100 	adc.w	r1, r1, #0
 80046bc:	6862      	ldr	r2, [r4, #4]
 80046be:	1892      	adds	r2, r2, r2
 80046c0:	415b      	adcs	r3, r3
 80046c2:	f7fb fd85 	bl	80001d0 <__aeabi_uldivmod>
 80046c6:	4a0c      	ldr	r2, [pc, #48]	@ (80046f8 <UART_SetConfig+0x10c>)
 80046c8:	fba2 3100 	umull	r3, r1, r2, r0
 80046cc:	0949      	lsrs	r1, r1, #5
 80046ce:	2364      	movs	r3, #100	@ 0x64
 80046d0:	fb03 0311 	mls	r3, r3, r1, r0
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	3332      	adds	r3, #50	@ 0x32
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	005a      	lsls	r2, r3, #1
 80046e0:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80046e4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	6821      	ldr	r1, [r4, #0]
 80046ee:	4413      	add	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
 80046f2:	e7d4      	b.n	800469e <UART_SetConfig+0xb2>
 80046f4:	40011000 	.word	0x40011000
 80046f8:	51eb851f 	.word	0x51eb851f

080046fc <HAL_UART_Init>:
  if (huart == NULL)
 80046fc:	b360      	cbz	r0, 8004758 <HAL_UART_Init+0x5c>
{
 80046fe:	b510      	push	{r4, lr}
 8004700:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004702:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004706:	b313      	cbz	r3, 800474e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004708:	2324      	movs	r3, #36	@ 0x24
 800470a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	68d3      	ldr	r3, [r2, #12]
 8004712:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004716:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff ff67 	bl	80045ec <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	6913      	ldr	r3, [r2, #16]
 8004722:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004726:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	6953      	ldr	r3, [r2, #20]
 800472c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004730:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	68d3      	ldr	r3, [r2, #12]
 8004736:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800473a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	2000      	movs	r0, #0
 800473e:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004740:	2320      	movs	r3, #32
 8004742:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004746:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800474a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800474c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800474e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004752:	f001 f96b 	bl	8005a2c <HAL_UART_MspInit>
 8004756:	e7d7      	b.n	8004708 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004758:	2001      	movs	r0, #1
}
 800475a:	4770      	bx	lr

0800475c <HAL_UART_Transmit_DMA>:
{
 800475c:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800475e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004762:	2b20      	cmp	r3, #32
 8004764:	d130      	bne.n	80047c8 <HAL_UART_Transmit_DMA+0x6c>
 8004766:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004768:	2900      	cmp	r1, #0
 800476a:	d02f      	beq.n	80047cc <HAL_UART_Transmit_DMA+0x70>
 800476c:	b90a      	cbnz	r2, 8004772 <HAL_UART_Transmit_DMA+0x16>
      return HAL_ERROR;
 800476e:	2001      	movs	r0, #1
}
 8004770:	bd38      	pop	{r3, r4, r5, pc}
    huart->pTxBuffPtr = pData;
 8004772:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004774:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004776:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	2300      	movs	r3, #0
 800477a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800477c:	2021      	movs	r0, #33	@ 0x21
 800477e:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004782:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004784:	4d12      	ldr	r5, [pc, #72]	@ (80047d0 <HAL_UART_Transmit_DMA+0x74>)
 8004786:	63c5      	str	r5, [r0, #60]	@ 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004788:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800478a:	4d12      	ldr	r5, [pc, #72]	@ (80047d4 <HAL_UART_Transmit_DMA+0x78>)
 800478c:	6405      	str	r5, [r0, #64]	@ 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800478e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004790:	4d11      	ldr	r5, [pc, #68]	@ (80047d8 <HAL_UART_Transmit_DMA+0x7c>)
 8004792:	64c5      	str	r5, [r0, #76]	@ 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8004794:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004796:	6503      	str	r3, [r0, #80]	@ 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	4613      	mov	r3, r2
 800479c:	1d02      	adds	r2, r0, #4
 800479e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80047a0:	f7fd ff20 	bl	80025e4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047aa:	601a      	str	r2, [r3, #0]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	f102 0314 	add.w	r3, r2, #20
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	3214      	adds	r2, #20
 80047bc:	e842 3100 	strex	r1, r3, [r2]
 80047c0:	2900      	cmp	r1, #0
 80047c2:	d1f3      	bne.n	80047ac <HAL_UART_Transmit_DMA+0x50>
    return HAL_OK;
 80047c4:	2000      	movs	r0, #0
 80047c6:	e7d3      	b.n	8004770 <HAL_UART_Transmit_DMA+0x14>
    return HAL_BUSY;
 80047c8:	2002      	movs	r0, #2
 80047ca:	e7d1      	b.n	8004770 <HAL_UART_Transmit_DMA+0x14>
      return HAL_ERROR;
 80047cc:	2001      	movs	r0, #1
 80047ce:	e7cf      	b.n	8004770 <HAL_UART_Transmit_DMA+0x14>
 80047d0:	080047df 	.word	0x080047df
 80047d4:	08004847 	.word	0x08004847
 80047d8:	08004855 	.word	0x08004855

080047dc <HAL_UART_TxCpltCallback>:
}
 80047dc:	4770      	bx	lr

080047de <UART_DMATransmitCplt>:
{
 80047de:	b508      	push	{r3, lr}
 80047e0:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80047ec:	d11a      	bne.n	8004824 <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	84c3      	strh	r3, [r0, #38]	@ 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	f102 0314 	add.w	r3, r2, #20
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	3214      	adds	r2, #20
 8004802:	e842 3100 	strex	r1, r3, [r2]
 8004806:	2900      	cmp	r1, #0
 8004808:	d1f3      	bne.n	80047f2 <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800480a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	f102 030c 	add.w	r3, r2, #12
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	320c      	adds	r2, #12
 800481a:	e842 3100 	strex	r1, r3, [r2]
 800481e:	2900      	cmp	r1, #0
 8004820:	d1f3      	bne.n	800480a <UART_DMATransmitCplt+0x2c>
}
 8004822:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004824:	f7ff ffda 	bl	80047dc <HAL_UART_TxCpltCallback>
}
 8004828:	e7fb      	b.n	8004822 <UART_DMATransmitCplt+0x44>

0800482a <UART_EndTransmit_IT>:
{
 800482a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800482c:	6801      	ldr	r1, [r0, #0]
 800482e:	68ca      	ldr	r2, [r1, #12]
 8004830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004834:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004836:	2220      	movs	r2, #32
 8004838:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800483c:	f7ff ffce 	bl	80047dc <HAL_UART_TxCpltCallback>
}
 8004840:	2000      	movs	r0, #0
 8004842:	bd08      	pop	{r3, pc}

08004844 <HAL_UART_TxHalfCpltCallback>:
}
 8004844:	4770      	bx	lr

08004846 <UART_DMATxHalfCplt>:
{
 8004846:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004848:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800484a:	f7ff fffb 	bl	8004844 <HAL_UART_TxHalfCpltCallback>
}
 800484e:	bd08      	pop	{r3, pc}

08004850 <HAL_UART_RxCpltCallback>:
}
 8004850:	4770      	bx	lr

08004852 <HAL_UART_RxHalfCpltCallback>:
}
 8004852:	4770      	bx	lr

08004854 <UART_DMAError>:
{
 8004854:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004856:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800485c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8004860:	2a21      	cmp	r2, #33	@ 0x21
 8004862:	d00f      	beq.n	8004884 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800486c:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8004870:	2a22      	cmp	r2, #34	@ 0x22
 8004872:	d011      	beq.n	8004898 <UART_DMAError+0x44>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004874:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004876:	f043 0310 	orr.w	r3, r3, #16
 800487a:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 800487c:	4620      	mov	r0, r4
 800487e:	f7fc f8cf 	bl	8000a20 <HAL_UART_ErrorCallback>
}
 8004882:	bd10      	pop	{r4, pc}
 8004884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0eb      	beq.n	8004864 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800488c:	2300      	movs	r3, #0
 800488e:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004890:	4620      	mov	r0, r4
 8004892:	f7ff fe3d 	bl	8004510 <UART_EndTxTransfer>
 8004896:	e7e5      	b.n	8004864 <UART_DMAError+0x10>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0eb      	beq.n	8004874 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 800489c:	2300      	movs	r3, #0
 800489e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80048a0:	4620      	mov	r0, r4
 80048a2:	f7ff fe45 	bl	8004530 <UART_EndRxTransfer>
 80048a6:	e7e5      	b.n	8004874 <UART_DMAError+0x20>

080048a8 <UART_DMAAbortOnError>:
{
 80048a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048aa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048b0:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80048b2:	f7fc f8b5 	bl	8000a20 <HAL_UART_ErrorCallback>
}
 80048b6:	bd08      	pop	{r3, pc}

080048b8 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048b8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80048bc:	2b22      	cmp	r3, #34	@ 0x22
 80048be:	d169      	bne.n	8004994 <UART_Receive_IT+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c0:	6883      	ldr	r3, [r0, #8]
 80048c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c6:	d04f      	beq.n	8004968 <UART_Receive_IT+0xb0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048c8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ce:	d004      	beq.n	80048da <UART_Receive_IT+0x22>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d156      	bne.n	8004982 <UART_Receive_IT+0xca>
 80048d4:	6903      	ldr	r3, [r0, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d153      	bne.n	8004982 <UART_Receive_IT+0xca>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048da:	6803      	ldr	r3, [r0, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80048e0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80048e2:	3301      	adds	r3, #1
 80048e4:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80048e6:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d151      	bne.n	8004998 <UART_Receive_IT+0xe0>
{
 80048f4:	b500      	push	{lr}
 80048f6:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048f8:	6802      	ldr	r2, [r0, #0]
 80048fa:	68d3      	ldr	r3, [r2, #12]
 80048fc:	f023 0320 	bic.w	r3, r3, #32
 8004900:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004902:	6802      	ldr	r2, [r0, #0]
 8004904:	68d3      	ldr	r3, [r2, #12]
 8004906:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800490a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800490c:	6802      	ldr	r2, [r0, #0]
 800490e:	6953      	ldr	r3, [r2, #20]
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004916:	2320      	movs	r3, #32
 8004918:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800491c:	2300      	movs	r3, #0
 800491e:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004920:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004922:	2b01      	cmp	r3, #1
 8004924:	d133      	bne.n	800498e <UART_Receive_IT+0xd6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	2300      	movs	r3, #0
 8004928:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	f102 030c 	add.w	r3, r2, #12
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	320c      	adds	r2, #12
 800493a:	e842 3100 	strex	r1, r3, [r2]
 800493e:	2900      	cmp	r1, #0
 8004940:	d1f3      	bne.n	800492a <UART_Receive_IT+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004942:	6803      	ldr	r3, [r0, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	f012 0f10 	tst.w	r2, #16
 800494a:	d006      	beq.n	800495a <UART_Receive_IT+0xa2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800494c:	2200      	movs	r2, #0
 800494e:	9201      	str	r2, [sp, #4]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	9201      	str	r2, [sp, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800495c:	f7fc f85e 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004960:	2000      	movs	r0, #0
}
 8004962:	b003      	add	sp, #12
 8004964:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004968:	6902      	ldr	r2, [r0, #16]
 800496a:	2a00      	cmp	r2, #0
 800496c:	d1ac      	bne.n	80048c8 <UART_Receive_IT+0x10>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800496e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004970:	6803      	ldr	r3, [r0, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004978:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800497a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800497c:	3302      	adds	r3, #2
 800497e:	6283      	str	r3, [r0, #40]	@ 0x28
 8004980:	e7b1      	b.n	80048e6 <UART_Receive_IT+0x2e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004982:	6803      	ldr	r3, [r0, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800498a:	7013      	strb	r3, [r2, #0]
 800498c:	e7a8      	b.n	80048e0 <UART_Receive_IT+0x28>
        HAL_UART_RxCpltCallback(huart);
 800498e:	f7ff ff5f 	bl	8004850 <HAL_UART_RxCpltCallback>
 8004992:	e7e5      	b.n	8004960 <UART_Receive_IT+0xa8>
    return HAL_BUSY;
 8004994:	2002      	movs	r0, #2
 8004996:	4770      	bx	lr
    return HAL_OK;
 8004998:	2000      	movs	r0, #0
}
 800499a:	4770      	bx	lr

0800499c <HAL_UART_IRQHandler>:
{
 800499c:	b510      	push	{r4, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049a2:	6802      	ldr	r2, [r0, #0]
 80049a4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049a6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80049aa:	f013 0f0f 	tst.w	r3, #15
 80049ae:	d109      	bne.n	80049c4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049b0:	f013 0f20 	tst.w	r3, #32
 80049b4:	d00c      	beq.n	80049d0 <HAL_UART_IRQHandler+0x34>
 80049b6:	f010 0f20 	tst.w	r0, #32
 80049ba:	d009      	beq.n	80049d0 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80049bc:	4620      	mov	r0, r4
 80049be:	f7ff ff7b 	bl	80048b8 <UART_Receive_IT>
      return;
 80049c2:	e016      	b.n	80049f2 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049c4:	f011 0101 	ands.w	r1, r1, #1
 80049c8:	d115      	bne.n	80049f6 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049ca:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80049ce:	d112      	bne.n	80049f6 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80049d2:	2901      	cmp	r1, #1
 80049d4:	d079      	beq.n	8004aca <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80049da:	d003      	beq.n	80049e4 <HAL_UART_IRQHandler+0x48>
 80049dc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80049e0:	f040 8114 	bne.w	8004c0c <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049e4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80049e8:	d003      	beq.n	80049f2 <HAL_UART_IRQHandler+0x56>
 80049ea:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80049ee:	f040 8111 	bne.w	8004c14 <HAL_UART_IRQHandler+0x278>
}
 80049f2:	b002      	add	sp, #8
 80049f4:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049f6:	f013 0f01 	tst.w	r3, #1
 80049fa:	d006      	beq.n	8004a0a <HAL_UART_IRQHandler+0x6e>
 80049fc:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8004a00:	d003      	beq.n	8004a0a <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a02:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a04:	f042 0201 	orr.w	r2, r2, #1
 8004a08:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0a:	f013 0f04 	tst.w	r3, #4
 8004a0e:	d004      	beq.n	8004a1a <HAL_UART_IRQHandler+0x7e>
 8004a10:	b119      	cbz	r1, 8004a1a <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a12:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a14:	f042 0202 	orr.w	r2, r2, #2
 8004a18:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a1a:	f013 0f02 	tst.w	r3, #2
 8004a1e:	d004      	beq.n	8004a2a <HAL_UART_IRQHandler+0x8e>
 8004a20:	b119      	cbz	r1, 8004a2a <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a22:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a24:	f042 0204 	orr.w	r2, r2, #4
 8004a28:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a2a:	f013 0f08 	tst.w	r3, #8
 8004a2e:	d007      	beq.n	8004a40 <HAL_UART_IRQHandler+0xa4>
 8004a30:	f010 0f20 	tst.w	r0, #32
 8004a34:	d100      	bne.n	8004a38 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a36:	b119      	cbz	r1, 8004a40 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a38:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a3a:	f042 0208 	orr.w	r2, r2, #8
 8004a3e:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a40:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	d0d5      	beq.n	80049f2 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a46:	f013 0f20 	tst.w	r3, #32
 8004a4a:	d002      	beq.n	8004a52 <HAL_UART_IRQHandler+0xb6>
 8004a4c:	f010 0f20 	tst.w	r0, #32
 8004a50:	d129      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a5a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a5c:	f012 0f08 	tst.w	r2, #8
 8004a60:	d100      	bne.n	8004a64 <HAL_UART_IRQHandler+0xc8>
 8004a62:	b363      	cbz	r3, 8004abe <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff fd63 	bl	8004530 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004a72:	d020      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a74:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	f102 0314 	add.w	r3, r2, #20
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	3214      	adds	r2, #20
 8004a84:	e842 3100 	strex	r1, r3, [r2]
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d1f3      	bne.n	8004a74 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8004a8c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004a8e:	b173      	cbz	r3, 8004aae <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a90:	4a62      	ldr	r2, [pc, #392]	@ (8004c1c <HAL_UART_IRQHandler+0x280>)
 8004a92:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a94:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a96:	f7fd fe22 	bl	80026de <HAL_DMA_Abort_IT>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d0a9      	beq.n	80049f2 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a9e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004aa0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004aa2:	4798      	blx	r3
 8004aa4:	e7a5      	b.n	80049f2 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7ff ff06 	bl	80048b8 <UART_Receive_IT>
 8004aac:	e7d1      	b.n	8004a52 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7fb ffb6 	bl	8000a20 <HAL_UART_ErrorCallback>
 8004ab4:	e79d      	b.n	80049f2 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7fb ffb2 	bl	8000a20 <HAL_UART_ErrorCallback>
 8004abc:	e799      	b.n	80049f2 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7fb ffae 	bl	8000a20 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8004ac8:	e793      	b.n	80049f2 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004aca:	f013 0f10 	tst.w	r3, #16
 8004ace:	d082      	beq.n	80049d6 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ad0:	f010 0f10 	tst.w	r0, #16
 8004ad4:	f43f af7f 	beq.w	80049d6 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	9301      	str	r3, [sp, #4]
 8004ae0:	6853      	ldr	r3, [r2, #4]
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae6:	6953      	ldr	r3, [r2, #20]
 8004ae8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004aec:	d052      	beq.n	8004b94 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aee:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004af0:	6813      	ldr	r3, [r2, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f43f af7b 	beq.w	80049f2 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004afc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004afe:	4299      	cmp	r1, r3
 8004b00:	f67f af77 	bls.w	80049f2 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8004b04:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b06:	69d3      	ldr	r3, [r2, #28]
 8004b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b0c:	d037      	beq.n	8004b7e <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	f102 030c 	add.w	r3, r2, #12
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	320c      	adds	r2, #12
 8004b1e:	e842 3100 	strex	r1, r3, [r2]
 8004b22:	2900      	cmp	r1, #0
 8004b24:	d1f3      	bne.n	8004b0e <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b26:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	f102 0314 	add.w	r3, r2, #20
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	3214      	adds	r2, #20
 8004b36:	e842 3100 	strex	r1, r3, [r2]
 8004b3a:	2900      	cmp	r1, #0
 8004b3c:	d1f3      	bne.n	8004b26 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	f102 0314 	add.w	r3, r2, #20
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	3214      	adds	r2, #20
 8004b4e:	e842 3100 	strex	r1, r3, [r2]
 8004b52:	2900      	cmp	r1, #0
 8004b54:	d1f3      	bne.n	8004b3e <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8004b56:	2320      	movs	r3, #32
 8004b58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	f102 030c 	add.w	r3, r2, #12
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	320c      	adds	r2, #12
 8004b70:	e842 3100 	strex	r1, r3, [r2]
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d1f3      	bne.n	8004b60 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b78:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b7a:	f7fd fd67 	bl	800264c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b82:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004b84:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	1ac9      	subs	r1, r1, r3
 8004b8a:	b289      	uxth	r1, r1
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7fb ff45 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
      return;
 8004b92:	e72e      	b.n	80049f2 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b94:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004b96:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	1ac9      	subs	r1, r1, r3
 8004b9c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004b9e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f43f af25 	beq.w	80049f2 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	f43f af22 	beq.w	80049f2 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	f102 030c 	add.w	r3, r2, #12
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	320c      	adds	r2, #12
 8004bbe:	e842 3000 	strex	r0, r3, [r2]
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d1f3      	bne.n	8004bae <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	f102 0314 	add.w	r3, r2, #20
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	3214      	adds	r2, #20
 8004bd6:	e842 3000 	strex	r0, r3, [r2]
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d1f3      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8004bde:	2320      	movs	r3, #32
 8004be0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be4:	2300      	movs	r3, #0
 8004be6:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	f102 030c 	add.w	r3, r2, #12
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	320c      	adds	r2, #12
 8004bf8:	e842 3000 	strex	r0, r3, [r2]
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d1f3      	bne.n	8004be8 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c00:	2302      	movs	r3, #2
 8004c02:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7fb ff09 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
      return;
 8004c0a:	e6f2      	b.n	80049f2 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f7ff fcbd 	bl	800458c <UART_Transmit_IT>
    return;
 8004c12:	e6ee      	b.n	80049f2 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8004c14:	4620      	mov	r0, r4
 8004c16:	f7ff fe08 	bl	800482a <UART_EndTransmit_IT>
    return;
 8004c1a:	e6ea      	b.n	80049f2 <HAL_UART_IRQHandler+0x56>
 8004c1c:	080048a9 	.word	0x080048a9

08004c20 <UART_DMARxHalfCplt>:
{
 8004c20:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c22:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c24:	2301      	movs	r3, #1
 8004c26:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c28:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d002      	beq.n	8004c34 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c2e:	f7ff fe10 	bl	8004852 <HAL_UART_RxHalfCpltCallback>
}
 8004c32:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c34:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004c36:	0849      	lsrs	r1, r1, #1
 8004c38:	f7fb fef0 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
 8004c3c:	e7f9      	b.n	8004c32 <UART_DMARxHalfCplt+0x12>

08004c3e <UART_DMAReceiveCplt>:
{
 8004c3e:	b508      	push	{r3, lr}
 8004c40:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c42:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004c4c:	d12b      	bne.n	8004ca6 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c52:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	f102 030c 	add.w	r3, r2, #12
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	320c      	adds	r2, #12
 8004c62:	e842 3100 	strex	r1, r3, [r2]
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d1f3      	bne.n	8004c52 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	f102 0314 	add.w	r3, r2, #20
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	3214      	adds	r2, #20
 8004c7a:	e842 3100 	strex	r1, r3, [r2]
 8004c7e:	2900      	cmp	r1, #0
 8004c80:	d1f3      	bne.n	8004c6a <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	f102 0314 	add.w	r3, r2, #20
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	3214      	adds	r2, #20
 8004c92:	e842 3100 	strex	r1, r3, [r2]
 8004c96:	2900      	cmp	r1, #0
 8004c98:	d1f3      	bne.n	8004c82 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	2320      	movs	r3, #32
 8004c9c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d007      	beq.n	8004cb6 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004caa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d00f      	beq.n	8004cd0 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8004cb0:	f7ff fdce 	bl	8004850 <HAL_UART_RxCpltCallback>
}
 8004cb4:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	f102 030c 	add.w	r3, r2, #12
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	320c      	adds	r2, #12
 8004cc6:	e842 3100 	strex	r1, r3, [r2]
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	d1f3      	bne.n	8004cb6 <UART_DMAReceiveCplt+0x78>
 8004cce:	e7ea      	b.n	8004ca6 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cd0:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004cd2:	f7fb fea3 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
 8004cd6:	e7ed      	b.n	8004cb4 <UART_DMAReceiveCplt+0x76>

08004cd8 <UART_Start_Receive_DMA>:
{
 8004cd8:	b530      	push	{r4, r5, lr}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8004ce0:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ce2:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	2500      	movs	r5, #0
 8004ce6:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ce8:	2222      	movs	r2, #34	@ 0x22
 8004cea:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004cee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004cf0:	481f      	ldr	r0, [pc, #124]	@ (8004d70 <UART_Start_Receive_DMA+0x98>)
 8004cf2:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004cf4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004cf6:	481f      	ldr	r0, [pc, #124]	@ (8004d74 <UART_Start_Receive_DMA+0x9c>)
 8004cf8:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cfa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004cfc:	481e      	ldr	r0, [pc, #120]	@ (8004d78 <UART_Start_Receive_DMA+0xa0>)
 8004cfe:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8004d00:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004d02:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d04:	6820      	ldr	r0, [r4, #0]
 8004d06:	460a      	mov	r2, r1
 8004d08:	1d01      	adds	r1, r0, #4
 8004d0a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d0c:	f7fd fc6a 	bl	80025e4 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d10:	9501      	str	r5, [sp, #4]
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	9201      	str	r2, [sp, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	b15b      	cbz	r3, 8004d3a <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	f102 030c 	add.w	r3, r2, #12
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	320c      	adds	r2, #12
 8004d32:	e842 3100 	strex	r1, r3, [r2]
 8004d36:	2900      	cmp	r1, #0
 8004d38:	d1f3      	bne.n	8004d22 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	f102 0314 	add.w	r3, r2, #20
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	3214      	adds	r2, #20
 8004d4a:	e842 3100 	strex	r1, r3, [r2]
 8004d4e:	2900      	cmp	r1, #0
 8004d50:	d1f3      	bne.n	8004d3a <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	f102 0314 	add.w	r3, r2, #20
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	3214      	adds	r2, #20
 8004d62:	e842 3100 	strex	r1, r3, [r2]
 8004d66:	2900      	cmp	r1, #0
 8004d68:	d1f3      	bne.n	8004d52 <UART_Start_Receive_DMA+0x7a>
}
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	b003      	add	sp, #12
 8004d6e:	bd30      	pop	{r4, r5, pc}
 8004d70:	08004c3f 	.word	0x08004c3f
 8004d74:	08004c21 	.word	0x08004c21
 8004d78:	08004855 	.word	0x08004855

08004d7c <HAL_UART_Receive_DMA>:
{
 8004d7c:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d7e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d108      	bne.n	8004d98 <HAL_UART_Receive_DMA+0x1c>
    if ((pData == NULL) || (Size == 0U))
 8004d86:	b149      	cbz	r1, 8004d9c <HAL_UART_Receive_DMA+0x20>
 8004d88:	b90a      	cbnz	r2, 8004d8e <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 8004d8a:	2001      	movs	r0, #1
}
 8004d8c:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d92:	f7ff ffa1 	bl	8004cd8 <UART_Start_Receive_DMA>
 8004d96:	e7f9      	b.n	8004d8c <HAL_UART_Receive_DMA+0x10>
    return HAL_BUSY;
 8004d98:	2002      	movs	r0, #2
 8004d9a:	e7f7      	b.n	8004d8c <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	e7f5      	b.n	8004d8c <HAL_UART_Receive_DMA+0x10>

08004da0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004da0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d129      	bne.n	8004dfc <HAL_UARTEx_ReceiveToIdle_DMA+0x5c>
{
 8004da8:	b510      	push	{r4, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004dae:	b339      	cbz	r1, 8004e00 <HAL_UARTEx_ReceiveToIdle_DMA+0x60>
 8004db0:	b912      	cbnz	r2, 8004db8 <HAL_UARTEx_ReceiveToIdle_DMA+0x18>
      return HAL_ERROR;
 8004db2:	2001      	movs	r0, #1
}
 8004db4:	b002      	add	sp, #8
 8004db6:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004db8:	2301      	movs	r3, #1
 8004dba:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004dc0:	f7ff ff8a 	bl	8004cd8 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d1f5      	bne.n	8004db4 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d001      	beq.n	8004dd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
        status = HAL_ERROR;
 8004dce:	2001      	movs	r0, #1
    return status;
 8004dd0:	e7f0      	b.n	8004db4 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	9201      	str	r2, [sp, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	f102 030c 	add.w	r3, r2, #12
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	320c      	adds	r2, #12
 8004df2:	e842 3100 	strex	r1, r3, [r2]
 8004df6:	2900      	cmp	r1, #0
 8004df8:	d1f3      	bne.n	8004de2 <HAL_UARTEx_ReceiveToIdle_DMA+0x42>
 8004dfa:	e7db      	b.n	8004db4 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    return HAL_BUSY;
 8004dfc:	2002      	movs	r0, #2
}
 8004dfe:	4770      	bx	lr
      return HAL_ERROR;
 8004e00:	2001      	movs	r0, #1
 8004e02:	e7d7      	b.n	8004db4 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>

08004e04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e04:	e7fe      	b.n	8004e04 <NMI_Handler>

08004e06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e06:	e7fe      	b.n	8004e06 <HardFault_Handler>

08004e08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e08:	e7fe      	b.n	8004e08 <MemManage_Handler>

08004e0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e0a:	e7fe      	b.n	8004e0a <BusFault_Handler>

08004e0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e0c:	e7fe      	b.n	8004e0c <UsageFault_Handler>

08004e0e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e0e:	4770      	bx	lr

08004e10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004e12:	4802      	ldr	r0, [pc, #8]	@ (8004e1c <DMA1_Stream1_IRQHandler+0xc>)
 8004e14:	f7fd fc76 	bl	8002704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004e18:	bd08      	pop	{r3, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200044f0 	.word	0x200044f0

08004e20 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004e20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004e22:	4802      	ldr	r0, [pc, #8]	@ (8004e2c <DMA1_Stream3_IRQHandler+0xc>)
 8004e24:	f7fd fc6e 	bl	8002704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004e28:	bd08      	pop	{r3, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20004550 	.word	0x20004550

08004e30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8004e30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e32:	4805      	ldr	r0, [pc, #20]	@ (8004e48 <ADC_IRQHandler+0x18>)
 8004e34:	f7fc fee4 	bl	8001c00 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004e38:	4804      	ldr	r0, [pc, #16]	@ (8004e4c <ADC_IRQHandler+0x1c>)
 8004e3a:	f7fc fee1 	bl	8001c00 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8004e3e:	4804      	ldr	r0, [pc, #16]	@ (8004e50 <ADC_IRQHandler+0x20>)
 8004e40:	f7fc fede 	bl	8001c00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004e44:	bd08      	pop	{r3, pc}
 8004e46:	bf00      	nop
 8004e48:	2000010c 	.word	0x2000010c
 8004e4c:	200000c4 	.word	0x200000c4
 8004e50:	2000007c 	.word	0x2000007c

08004e54 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e56:	4802      	ldr	r0, [pc, #8]	@ (8004e60 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8004e58:	f7fe fe54 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004e5c:	bd08      	pop	{r3, pc}
 8004e5e:	bf00      	nop
 8004e60:	200044a8 	.word	0x200044a8

08004e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004e64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e66:	4802      	ldr	r0, [pc, #8]	@ (8004e70 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8004e68:	f7fe fe4c 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004e6c:	bd08      	pop	{r3, pc}
 8004e6e:	bf00      	nop
 8004e70:	200044a8 	.word	0x200044a8

08004e74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e76:	4802      	ldr	r0, [pc, #8]	@ (8004e80 <TIM1_CC_IRQHandler+0xc>)
 8004e78:	f7fe fe44 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004e7c:	bd08      	pop	{r3, pc}
 8004e7e:	bf00      	nop
 8004e80:	200044a8 	.word	0x200044a8

08004e84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e86:	4802      	ldr	r0, [pc, #8]	@ (8004e90 <TIM3_IRQHandler+0xc>)
 8004e88:	f7fe fe3c 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e8c:	bd08      	pop	{r3, pc}
 8004e8e:	bf00      	nop
 8004e90:	20004460 	.word	0x20004460

08004e94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004e94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004e96:	4802      	ldr	r0, [pc, #8]	@ (8004ea0 <USART3_IRQHandler+0xc>)
 8004e98:	f7ff fd80 	bl	800499c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004e9c:	bd08      	pop	{r3, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200045b0 	.word	0x200045b0

08004ea4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ea6:	4802      	ldr	r0, [pc, #8]	@ (8004eb0 <TIM6_DAC_IRQHandler+0xc>)
 8004ea8:	f7fe fe2c 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004eac:	bd08      	pop	{r3, pc}
 8004eae:	bf00      	nop
 8004eb0:	200042ec 	.word	0x200042ec

08004eb4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004eb4:	4a03      	ldr	r2, [pc, #12]	@ (8004ec4 <SystemInit+0x10>)
 8004eb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004eba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ebe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ec2:	4770      	bx	lr
 8004ec4:	e000ed00 	.word	0xe000ed00

08004ec8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec8:	4b08      	ldr	r3, [pc, #32]	@ (8004eec <prvResetNextTaskUnblockTime+0x24>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	b923      	cbnz	r3, 8004eda <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed0:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <prvResetNextTaskUnblockTime+0x28>)
 8004ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eda:	4b04      	ldr	r3, [pc, #16]	@ (8004eec <prvResetNextTaskUnblockTime+0x24>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	4b02      	ldr	r3, [pc, #8]	@ (8004ef0 <prvResetNextTaskUnblockTime+0x28>)
 8004ee6:	601a      	str	r2, [r3, #0]
	}
}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	200043a4 	.word	0x200043a4
 8004ef0:	2000433c 	.word	0x2000433c

08004ef4 <prvInitialiseNewTask>:
{
 8004ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	4607      	mov	r7, r0
 8004efa:	4698      	mov	r8, r3
 8004efc:	9d08      	ldr	r5, [sp, #32]
 8004efe:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8004f02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f04:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8004f06:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004f0a:	3a01      	subs	r2, #1
 8004f0c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f10:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8004f14:	b3c1      	cbz	r1, 8004f88 <prvInitialiseNewTask+0x94>
 8004f16:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f18:	f04f 0c00 	mov.w	ip, #0
 8004f1c:	f1bc 0f0f 	cmp.w	ip, #15
 8004f20:	d809      	bhi.n	8004f36 <prvInitialiseNewTask+0x42>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f22:	f810 200c 	ldrb.w	r2, [r0, ip]
 8004f26:	eb04 030c 	add.w	r3, r4, ip
 8004f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004f2e:	b112      	cbz	r2, 8004f36 <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f30:	f10c 0c01 	add.w	ip, ip, #1
 8004f34:	e7f2      	b.n	8004f1c <prvInitialiseNewTask+0x28>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f36:	2300      	movs	r3, #0
 8004f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f3c:	2d06      	cmp	r5, #6
 8004f3e:	d900      	bls.n	8004f42 <prvInitialiseNewTask+0x4e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f40:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004f42:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004f44:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f46:	f04f 0a00 	mov.w	sl, #0
 8004f4a:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f4e:	1d20      	adds	r0, r4, #4
 8004f50:	f7fc f909 	bl	8001166 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f54:	f104 0018 	add.w	r0, r4, #24
 8004f58:	f7fc f905 	bl	8001166 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f5c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5e:	f1c5 0507 	rsb	r5, r5, #7
 8004f62:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f64:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004f66:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f6a:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f6e:	4642      	mov	r2, r8
 8004f70:	4639      	mov	r1, r7
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7fc f9f8 	bl	8001368 <pxPortInitialiseStack>
 8004f78:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004f7a:	f1b9 0f00 	cmp.w	r9, #0
 8004f7e:	d001      	beq.n	8004f84 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f80:	f8c9 4000 	str.w	r4, [r9]
}
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8004f8e:	e7d5      	b.n	8004f3c <prvInitialiseNewTask+0x48>

08004f90 <prvInitialiseTaskLists>:
{
 8004f90:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f92:	2400      	movs	r4, #0
 8004f94:	e007      	b.n	8004fa6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f96:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004f9a:	0093      	lsls	r3, r2, #2
 8004f9c:	480e      	ldr	r0, [pc, #56]	@ (8004fd8 <prvInitialiseTaskLists+0x48>)
 8004f9e:	4418      	add	r0, r3
 8004fa0:	f7fc f8d6 	bl	8001150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fa4:	3401      	adds	r4, #1
 8004fa6:	2c06      	cmp	r4, #6
 8004fa8:	d9f5      	bls.n	8004f96 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8004faa:	4d0c      	ldr	r5, [pc, #48]	@ (8004fdc <prvInitialiseTaskLists+0x4c>)
 8004fac:	4628      	mov	r0, r5
 8004fae:	f7fc f8cf 	bl	8001150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fb2:	4c0b      	ldr	r4, [pc, #44]	@ (8004fe0 <prvInitialiseTaskLists+0x50>)
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f7fc f8cb 	bl	8001150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fba:	480a      	ldr	r0, [pc, #40]	@ (8004fe4 <prvInitialiseTaskLists+0x54>)
 8004fbc:	f7fc f8c8 	bl	8001150 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004fc0:	4809      	ldr	r0, [pc, #36]	@ (8004fe8 <prvInitialiseTaskLists+0x58>)
 8004fc2:	f7fc f8c5 	bl	8001150 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004fc6:	4809      	ldr	r0, [pc, #36]	@ (8004fec <prvInitialiseTaskLists+0x5c>)
 8004fc8:	f7fc f8c2 	bl	8001150 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fcc:	4b08      	ldr	r3, [pc, #32]	@ (8004ff0 <prvInitialiseTaskLists+0x60>)
 8004fce:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fd0:	4b08      	ldr	r3, [pc, #32]	@ (8004ff4 <prvInitialiseTaskLists+0x64>)
 8004fd2:	601c      	str	r4, [r3, #0]
}
 8004fd4:	bd38      	pop	{r3, r4, r5, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200043d0 	.word	0x200043d0
 8004fdc:	200043bc 	.word	0x200043bc
 8004fe0:	200043a8 	.word	0x200043a8
 8004fe4:	2000438c 	.word	0x2000438c
 8004fe8:	20004378 	.word	0x20004378
 8004fec:	20004360 	.word	0x20004360
 8004ff0:	200043a4 	.word	0x200043a4
 8004ff4:	200043a0 	.word	0x200043a0

08004ff8 <prvAddNewTaskToReadyList>:
{
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004ffc:	f7fc f9e2 	bl	80013c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005000:	4a21      	ldr	r2, [pc, #132]	@ (8005088 <prvAddNewTaskToReadyList+0x90>)
 8005002:	6813      	ldr	r3, [r2, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005008:	4b20      	ldr	r3, [pc, #128]	@ (800508c <prvAddNewTaskToReadyList+0x94>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	b15b      	cbz	r3, 8005026 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800500e:	4b20      	ldr	r3, [pc, #128]	@ (8005090 <prvAddNewTaskToReadyList+0x98>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	b96b      	cbnz	r3, 8005030 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005014:	4b1d      	ldr	r3, [pc, #116]	@ (800508c <prvAddNewTaskToReadyList+0x94>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800501c:	429a      	cmp	r2, r3
 800501e:	d807      	bhi.n	8005030 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005020:	4b1a      	ldr	r3, [pc, #104]	@ (800508c <prvAddNewTaskToReadyList+0x94>)
 8005022:	601c      	str	r4, [r3, #0]
 8005024:	e004      	b.n	8005030 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005026:	4b19      	ldr	r3, [pc, #100]	@ (800508c <prvAddNewTaskToReadyList+0x94>)
 8005028:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800502a:	6813      	ldr	r3, [r2, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d028      	beq.n	8005082 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8005030:	4a18      	ldr	r2, [pc, #96]	@ (8005094 <prvAddNewTaskToReadyList+0x9c>)
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005038:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800503a:	2301      	movs	r3, #1
 800503c:	4083      	lsls	r3, r0
 800503e:	4a16      	ldr	r2, [pc, #88]	@ (8005098 <prvAddNewTaskToReadyList+0xa0>)
 8005040:	6811      	ldr	r1, [r2, #0]
 8005042:	430b      	orrs	r3, r1
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800504a:	1d21      	adds	r1, r4, #4
 800504c:	4b13      	ldr	r3, [pc, #76]	@ (800509c <prvAddNewTaskToReadyList+0xa4>)
 800504e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005052:	f7fc f88b 	bl	800116c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005056:	f7fc f9d7 	bl	8001408 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <prvAddNewTaskToReadyList+0x98>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	b17b      	cbz	r3, 8005080 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005060:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <prvAddNewTaskToReadyList+0x94>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005066:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005068:	429a      	cmp	r2, r3
 800506a:	d209      	bcs.n	8005080 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 800506c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005070:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005074:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
}
 8005080:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005082:	f7ff ff85 	bl	8004f90 <prvInitialiseTaskLists>
 8005086:	e7d3      	b.n	8005030 <prvAddNewTaskToReadyList+0x38>
 8005088:	2000435c 	.word	0x2000435c
 800508c:	2000445c 	.word	0x2000445c
 8005090:	20004350 	.word	0x20004350
 8005094:	20004340 	.word	0x20004340
 8005098:	20004354 	.word	0x20004354
 800509c:	200043d0 	.word	0x200043d0

080050a0 <prvDeleteTCB>:
	{
 80050a0:	b510      	push	{r4, lr}
 80050a2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050a4:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 80050a8:	b163      	cbz	r3, 80050c4 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d011      	beq.n	80050d2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d00e      	beq.n	80050d0 <prvDeleteTCB+0x30>
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	e7fe      	b.n	80050c2 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80050c4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80050c6:	f7fb ffaf 	bl	8001028 <vPortFree>
				vPortFree( pxTCB );
 80050ca:	4620      	mov	r0, r4
 80050cc:	f7fb ffac 	bl	8001028 <vPortFree>
	}
 80050d0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80050d2:	f7fb ffa9 	bl	8001028 <vPortFree>
 80050d6:	e7fb      	b.n	80050d0 <prvDeleteTCB+0x30>

080050d8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005118 <prvCheckTasksWaitingTermination+0x40>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b1d3      	cbz	r3, 8005114 <prvCheckTasksWaitingTermination+0x3c>
{
 80050de:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80050e0:	f7fc f970 	bl	80013c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e4:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <prvCheckTasksWaitingTermination+0x44>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ea:	1d20      	adds	r0, r4, #4
 80050ec:	f7fc f862 	bl	80011b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050f0:	4a0b      	ldr	r2, [pc, #44]	@ (8005120 <prvCheckTasksWaitingTermination+0x48>)
 80050f2:	6813      	ldr	r3, [r2, #0]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050f8:	4a07      	ldr	r2, [pc, #28]	@ (8005118 <prvCheckTasksWaitingTermination+0x40>)
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005100:	f7fc f982 	bl	8001408 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005104:	4620      	mov	r0, r4
 8005106:	f7ff ffcb 	bl	80050a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800510a:	4b03      	ldr	r3, [pc, #12]	@ (8005118 <prvCheckTasksWaitingTermination+0x40>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e6      	bne.n	80050e0 <prvCheckTasksWaitingTermination+0x8>
}
 8005112:	bd10      	pop	{r4, pc}
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20004374 	.word	0x20004374
 800511c:	20004378 	.word	0x20004378
 8005120:	2000435c 	.word	0x2000435c

08005124 <prvIdleTask>:
{
 8005124:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005126:	f7ff ffd7 	bl	80050d8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800512a:	4b07      	ldr	r3, [pc, #28]	@ (8005148 <prvIdleTask+0x24>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d9f9      	bls.n	8005126 <prvIdleTask+0x2>
				taskYIELD();
 8005132:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	e7ee      	b.n	8005126 <prvIdleTask+0x2>
 8005148:	200043d0 	.word	0x200043d0

0800514c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4604      	mov	r4, r0
 8005150:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005152:	4b1d      	ldr	r3, [pc, #116]	@ (80051c8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005154:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005156:	4b1d      	ldr	r3, [pc, #116]	@ (80051cc <prvAddCurrentTaskToDelayedList+0x80>)
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	3004      	adds	r0, #4
 800515c:	f7fc f82a 	bl	80011b4 <uxListRemove>
 8005160:	b948      	cbnz	r0, 8005176 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005162:	4b1a      	ldr	r3, [pc, #104]	@ (80051cc <prvAddCurrentTaskToDelayedList+0x80>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005168:	2201      	movs	r2, #1
 800516a:	409a      	lsls	r2, r3
 800516c:	4918      	ldr	r1, [pc, #96]	@ (80051d0 <prvAddCurrentTaskToDelayedList+0x84>)
 800516e:	680b      	ldr	r3, [r1, #0]
 8005170:	ea23 0302 	bic.w	r3, r3, r2
 8005174:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005176:	f1b4 3fff 	cmp.w	r4, #4294967295
 800517a:	d00d      	beq.n	8005198 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800517c:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800517e:	4b13      	ldr	r3, [pc, #76]	@ (80051cc <prvAddCurrentTaskToDelayedList+0x80>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005184:	42a6      	cmp	r6, r4
 8005186:	d910      	bls.n	80051aa <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005188:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <prvAddCurrentTaskToDelayedList+0x88>)
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	4b0f      	ldr	r3, [pc, #60]	@ (80051cc <prvAddCurrentTaskToDelayedList+0x80>)
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	3104      	adds	r1, #4
 8005192:	f7fb fff6 	bl	8001182 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005196:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005198:	2d00      	cmp	r5, #0
 800519a:	d0ef      	beq.n	800517c <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800519c:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <prvAddCurrentTaskToDelayedList+0x80>)
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	3104      	adds	r1, #4
 80051a2:	480d      	ldr	r0, [pc, #52]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0x8c>)
 80051a4:	f7fb ffe2 	bl	800116c <vListInsertEnd>
 80051a8:	e7f5      	b.n	8005196 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051aa:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <prvAddCurrentTaskToDelayedList+0x90>)
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	4b07      	ldr	r3, [pc, #28]	@ (80051cc <prvAddCurrentTaskToDelayedList+0x80>)
 80051b0:	6819      	ldr	r1, [r3, #0]
 80051b2:	3104      	adds	r1, #4
 80051b4:	f7fb ffe5 	bl	8001182 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051b8:	4b09      	ldr	r3, [pc, #36]	@ (80051e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	42a3      	cmp	r3, r4
 80051be:	d9ea      	bls.n	8005196 <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 80051c0:	4b07      	ldr	r3, [pc, #28]	@ (80051e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80051c2:	601c      	str	r4, [r3, #0]
}
 80051c4:	e7e7      	b.n	8005196 <prvAddCurrentTaskToDelayedList+0x4a>
 80051c6:	bf00      	nop
 80051c8:	20004358 	.word	0x20004358
 80051cc:	2000445c 	.word	0x2000445c
 80051d0:	20004354 	.word	0x20004354
 80051d4:	200043a0 	.word	0x200043a0
 80051d8:	20004360 	.word	0x20004360
 80051dc:	200043a4 	.word	0x200043a4
 80051e0:	2000433c 	.word	0x2000433c

080051e4 <xTaskCreateStatic>:
	{
 80051e4:	b530      	push	{r4, r5, lr}
 80051e6:	b087      	sub	sp, #28
 80051e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80051ea:	b17c      	cbz	r4, 800520c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051ec:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80051ee:	b1b5      	cbz	r5, 800521e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80051f0:	2554      	movs	r5, #84	@ 0x54
 80051f2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051f4:	9d04      	ldr	r5, [sp, #16]
 80051f6:	2d54      	cmp	r5, #84	@ 0x54
 80051f8:	d01a      	beq.n	8005230 <xTaskCreateStatic+0x4c>
 80051fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	e7fe      	b.n	800520a <xTaskCreateStatic+0x26>
 800520c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800521c:	e7fe      	b.n	800521c <xTaskCreateStatic+0x38>
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800522e:	e7fe      	b.n	800522e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005230:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005232:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005234:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005236:	2402      	movs	r4, #2
 8005238:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800523c:	2400      	movs	r4, #0
 800523e:	9403      	str	r4, [sp, #12]
 8005240:	9502      	str	r5, [sp, #8]
 8005242:	ac05      	add	r4, sp, #20
 8005244:	9401      	str	r4, [sp, #4]
 8005246:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005248:	9400      	str	r4, [sp, #0]
 800524a:	f7ff fe53 	bl	8004ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800524e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005250:	f7ff fed2 	bl	8004ff8 <prvAddNewTaskToReadyList>
	}
 8005254:	9805      	ldr	r0, [sp, #20]
 8005256:	b007      	add	sp, #28
 8005258:	bd30      	pop	{r4, r5, pc}

0800525a <xTaskCreate>:
	{
 800525a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800525e:	b085      	sub	sp, #20
 8005260:	4607      	mov	r7, r0
 8005262:	4688      	mov	r8, r1
 8005264:	4614      	mov	r4, r2
 8005266:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005268:	0090      	lsls	r0, r2, #2
 800526a:	f7fb fe5b 	bl	8000f24 <pvPortMalloc>
			if( pxStack != NULL )
 800526e:	b308      	cbz	r0, 80052b4 <xTaskCreate+0x5a>
 8005270:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005272:	2054      	movs	r0, #84	@ 0x54
 8005274:	f7fb fe56 	bl	8000f24 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005278:	4605      	mov	r5, r0
 800527a:	b1a8      	cbz	r0, 80052a8 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800527c:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005280:	2300      	movs	r3, #0
 8005282:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005286:	9303      	str	r3, [sp, #12]
 8005288:	9002      	str	r0, [sp, #8]
 800528a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	4633      	mov	r3, r6
 8005294:	4622      	mov	r2, r4
 8005296:	4641      	mov	r1, r8
 8005298:	4638      	mov	r0, r7
 800529a:	f7ff fe2b 	bl	8004ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800529e:	4628      	mov	r0, r5
 80052a0:	f7ff feaa 	bl	8004ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052a4:	2001      	movs	r0, #1
 80052a6:	e007      	b.n	80052b8 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80052a8:	4648      	mov	r0, r9
 80052aa:	f7fb febd 	bl	8001028 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295
 80052b2:	e001      	b.n	80052b8 <xTaskCreate+0x5e>
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80052b8:	b005      	add	sp, #20
 80052ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080052c0 <vTaskStartScheduler>:
{
 80052c0:	b510      	push	{r4, lr}
 80052c2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052c4:	2400      	movs	r4, #0
 80052c6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052c8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052ca:	aa07      	add	r2, sp, #28
 80052cc:	a906      	add	r1, sp, #24
 80052ce:	a805      	add	r0, sp, #20
 80052d0:	f7fb fcda 	bl	8000c88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052d4:	9b05      	ldr	r3, [sp, #20]
 80052d6:	9302      	str	r3, [sp, #8]
 80052d8:	9b06      	ldr	r3, [sp, #24]
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	9400      	str	r4, [sp, #0]
 80052de:	4623      	mov	r3, r4
 80052e0:	9a07      	ldr	r2, [sp, #28]
 80052e2:	490e      	ldr	r1, [pc, #56]	@ (800531c <vTaskStartScheduler+0x5c>)
 80052e4:	480e      	ldr	r0, [pc, #56]	@ (8005320 <vTaskStartScheduler+0x60>)
 80052e6:	f7ff ff7d 	bl	80051e4 <xTaskCreateStatic>
 80052ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005324 <vTaskStartScheduler+0x64>)
 80052ec:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80052ee:	b190      	cbz	r0, 8005316 <vTaskStartScheduler+0x56>
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005300:	4b09      	ldr	r3, [pc, #36]	@ (8005328 <vTaskStartScheduler+0x68>)
 8005302:	f04f 32ff 	mov.w	r2, #4294967295
 8005306:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005308:	4b08      	ldr	r3, [pc, #32]	@ (800532c <vTaskStartScheduler+0x6c>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800530e:	4b08      	ldr	r3, [pc, #32]	@ (8005330 <vTaskStartScheduler+0x70>)
 8005310:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005312:	f7fc f8f1 	bl	80014f8 <xPortStartScheduler>
}
 8005316:	b008      	add	sp, #32
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	08006210 	.word	0x08006210
 8005320:	08005125 	.word	0x08005125
 8005324:	20004338 	.word	0x20004338
 8005328:	2000433c 	.word	0x2000433c
 800532c:	20004350 	.word	0x20004350
 8005330:	20004358 	.word	0x20004358

08005334 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005334:	4a02      	ldr	r2, [pc, #8]	@ (8005340 <vTaskSuspendAll+0xc>)
 8005336:	6813      	ldr	r3, [r2, #0]
 8005338:	3301      	adds	r3, #1
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20004334 	.word	0x20004334

08005344 <xTaskIncrementTick>:
{
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005346:	4b3a      	ldr	r3, [pc, #232]	@ (8005430 <xTaskIncrementTick+0xec>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d169      	bne.n	8005422 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800534e:	4b39      	ldr	r3, [pc, #228]	@ (8005434 <xTaskIncrementTick+0xf0>)
 8005350:	681d      	ldr	r5, [r3, #0]
 8005352:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005354:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005356:	b9c5      	cbnz	r5, 800538a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005358:	4b37      	ldr	r3, [pc, #220]	@ (8005438 <xTaskIncrementTick+0xf4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	b143      	cbz	r3, 8005372 <xTaskIncrementTick+0x2e>
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	e7fe      	b.n	8005370 <xTaskIncrementTick+0x2c>
 8005372:	4a31      	ldr	r2, [pc, #196]	@ (8005438 <xTaskIncrementTick+0xf4>)
 8005374:	6811      	ldr	r1, [r2, #0]
 8005376:	4b31      	ldr	r3, [pc, #196]	@ (800543c <xTaskIncrementTick+0xf8>)
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	6010      	str	r0, [r2, #0]
 800537c:	6019      	str	r1, [r3, #0]
 800537e:	4a30      	ldr	r2, [pc, #192]	@ (8005440 <xTaskIncrementTick+0xfc>)
 8005380:	6813      	ldr	r3, [r2, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	f7ff fd9f 	bl	8004ec8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800538a:	4b2e      	ldr	r3, [pc, #184]	@ (8005444 <xTaskIncrementTick+0x100>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	42ab      	cmp	r3, r5
 8005390:	d93d      	bls.n	800540e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8005392:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005394:	4b2c      	ldr	r3, [pc, #176]	@ (8005448 <xTaskIncrementTick+0x104>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800539e:	009a      	lsls	r2, r3, #2
 80053a0:	4b2a      	ldr	r3, [pc, #168]	@ (800544c <xTaskIncrementTick+0x108>)
 80053a2:	589b      	ldr	r3, [r3, r2]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d900      	bls.n	80053aa <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80053a8:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80053aa:	4b29      	ldr	r3, [pc, #164]	@ (8005450 <xTaskIncrementTick+0x10c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d03c      	beq.n	800542c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80053b2:	2701      	movs	r7, #1
	return xSwitchRequired;
 80053b4:	e03a      	b.n	800542c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 80053b6:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005438 <xTaskIncrementTick+0xf4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	b343      	cbz	r3, 8005412 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005438 <xTaskIncrementTick+0xf4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053c8:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80053ca:	429d      	cmp	r5, r3
 80053cc:	d326      	bcc.n	800541c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ce:	1d26      	adds	r6, r4, #4
 80053d0:	4630      	mov	r0, r6
 80053d2:	f7fb feef 	bl	80011b4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053d6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80053d8:	b11b      	cbz	r3, 80053e2 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053da:	f104 0018 	add.w	r0, r4, #24
 80053de:	f7fb fee9 	bl	80011b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80053e4:	2201      	movs	r2, #1
 80053e6:	409a      	lsls	r2, r3
 80053e8:	491a      	ldr	r1, [pc, #104]	@ (8005454 <xTaskIncrementTick+0x110>)
 80053ea:	6808      	ldr	r0, [r1, #0]
 80053ec:	4302      	orrs	r2, r0
 80053ee:	600a      	str	r2, [r1, #0]
 80053f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80053f4:	009a      	lsls	r2, r3, #2
 80053f6:	4631      	mov	r1, r6
 80053f8:	4814      	ldr	r0, [pc, #80]	@ (800544c <xTaskIncrementTick+0x108>)
 80053fa:	4410      	add	r0, r2
 80053fc:	f7fb feb6 	bl	800116c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005400:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005402:	4b11      	ldr	r3, [pc, #68]	@ (8005448 <xTaskIncrementTick+0x104>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	429a      	cmp	r2, r3
 800540a:	d2d4      	bcs.n	80053b6 <xTaskIncrementTick+0x72>
 800540c:	e7d4      	b.n	80053b8 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800540e:	2700      	movs	r7, #0
 8005410:	e7d2      	b.n	80053b8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005412:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <xTaskIncrementTick+0x100>)
 8005414:	f04f 32ff 	mov.w	r2, #4294967295
 8005418:	601a      	str	r2, [r3, #0]
					break;
 800541a:	e7bb      	b.n	8005394 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800541c:	4a09      	ldr	r2, [pc, #36]	@ (8005444 <xTaskIncrementTick+0x100>)
 800541e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005420:	e7b8      	b.n	8005394 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8005422:	4a0d      	ldr	r2, [pc, #52]	@ (8005458 <xTaskIncrementTick+0x114>)
 8005424:	6813      	ldr	r3, [r2, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800542a:	2700      	movs	r7, #0
}
 800542c:	4638      	mov	r0, r7
 800542e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005430:	20004334 	.word	0x20004334
 8005434:	20004358 	.word	0x20004358
 8005438:	200043a4 	.word	0x200043a4
 800543c:	200043a0 	.word	0x200043a0
 8005440:	20004344 	.word	0x20004344
 8005444:	2000433c 	.word	0x2000433c
 8005448:	2000445c 	.word	0x2000445c
 800544c:	200043d0 	.word	0x200043d0
 8005450:	20004348 	.word	0x20004348
 8005454:	20004354 	.word	0x20004354
 8005458:	2000434c 	.word	0x2000434c

0800545c <xTaskResumeAll>:
{
 800545c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800545e:	4b35      	ldr	r3, [pc, #212]	@ (8005534 <xTaskResumeAll+0xd8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	b943      	cbnz	r3, 8005476 <xTaskResumeAll+0x1a>
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	e7fe      	b.n	8005474 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005476:	f7fb ffa5 	bl	80013c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800547a:	4b2e      	ldr	r3, [pc, #184]	@ (8005534 <xTaskResumeAll+0xd8>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	3a01      	subs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d14f      	bne.n	8005528 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005488:	4b2b      	ldr	r3, [pc, #172]	@ (8005538 <xTaskResumeAll+0xdc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	b90b      	cbnz	r3, 8005492 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800548e:	2400      	movs	r4, #0
 8005490:	e04b      	b.n	800552a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8005492:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005494:	4b29      	ldr	r3, [pc, #164]	@ (800553c <xTaskResumeAll+0xe0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	b31b      	cbz	r3, 80054e2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549a:	4b28      	ldr	r3, [pc, #160]	@ (800553c <xTaskResumeAll+0xe0>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054a0:	f104 0018 	add.w	r0, r4, #24
 80054a4:	f7fb fe86 	bl	80011b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a8:	1d25      	adds	r5, r4, #4
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7fb fe82 	bl	80011b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80054b2:	2301      	movs	r3, #1
 80054b4:	4083      	lsls	r3, r0
 80054b6:	4a22      	ldr	r2, [pc, #136]	@ (8005540 <xTaskResumeAll+0xe4>)
 80054b8:	6811      	ldr	r1, [r2, #0]
 80054ba:	430b      	orrs	r3, r1
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054c2:	4629      	mov	r1, r5
 80054c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005544 <xTaskResumeAll+0xe8>)
 80054c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80054ca:	f7fb fe4f 	bl	800116c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80054d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005548 <xTaskResumeAll+0xec>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d3dc      	bcc.n	8005494 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80054da:	4b1c      	ldr	r3, [pc, #112]	@ (800554c <xTaskResumeAll+0xf0>)
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e7d8      	b.n	8005494 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80054e2:	b10c      	cbz	r4, 80054e8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80054e4:	f7ff fcf0 	bl	8004ec8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054e8:	4b19      	ldr	r3, [pc, #100]	@ (8005550 <xTaskResumeAll+0xf4>)
 80054ea:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80054ec:	b984      	cbnz	r4, 8005510 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80054ee:	4b17      	ldr	r3, [pc, #92]	@ (800554c <xTaskResumeAll+0xf0>)
 80054f0:	681c      	ldr	r4, [r3, #0]
 80054f2:	b1d4      	cbz	r4, 800552a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80054f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80054f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005508:	2401      	movs	r4, #1
 800550a:	e00e      	b.n	800552a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800550c:	3c01      	subs	r4, #1
 800550e:	d007      	beq.n	8005520 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8005510:	f7ff ff18 	bl	8005344 <xTaskIncrementTick>
 8005514:	2800      	cmp	r0, #0
 8005516:	d0f9      	beq.n	800550c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005518:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <xTaskResumeAll+0xf0>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e7f5      	b.n	800550c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8005520:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <xTaskResumeAll+0xf4>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e7e2      	b.n	80054ee <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005528:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800552a:	f7fb ff6d 	bl	8001408 <vPortExitCritical>
}
 800552e:	4620      	mov	r0, r4
 8005530:	bd38      	pop	{r3, r4, r5, pc}
 8005532:	bf00      	nop
 8005534:	20004334 	.word	0x20004334
 8005538:	2000435c 	.word	0x2000435c
 800553c:	2000438c 	.word	0x2000438c
 8005540:	20004354 	.word	0x20004354
 8005544:	200043d0 	.word	0x200043d0
 8005548:	2000445c 	.word	0x2000445c
 800554c:	20004348 	.word	0x20004348
 8005550:	2000434c 	.word	0x2000434c

08005554 <vTaskDelay>:
	{
 8005554:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005556:	b1a8      	cbz	r0, 8005584 <vTaskDelay+0x30>
 8005558:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800555a:	4b10      	ldr	r3, [pc, #64]	@ (800559c <vTaskDelay+0x48>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	b143      	cbz	r3, 8005572 <vTaskDelay+0x1e>
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	e7fe      	b.n	8005570 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005572:	f7ff fedf 	bl	8005334 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005576:	2100      	movs	r1, #0
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff fde7 	bl	800514c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800557e:	f7ff ff6d 	bl	800545c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005582:	b948      	cbnz	r0, 8005598 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8005584:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800558c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	f3bf 8f6f 	isb	sy
	}
 8005598:	bd10      	pop	{r4, pc}
 800559a:	bf00      	nop
 800559c:	20004334 	.word	0x20004334

080055a0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055a0:	4b20      	ldr	r3, [pc, #128]	@ (8005624 <vTaskSwitchContext+0x84>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b11b      	cbz	r3, 80055ae <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80055a6:	4b20      	ldr	r3, [pc, #128]	@ (8005628 <vTaskSwitchContext+0x88>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80055ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005628 <vTaskSwitchContext+0x88>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b4:	4b1d      	ldr	r3, [pc, #116]	@ (800562c <vTaskSwitchContext+0x8c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055b8:	fab3 f383 	clz	r3, r3
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f1c3 031f 	rsb	r3, r3, #31
 80055c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80055c6:	008a      	lsls	r2, r1, #2
 80055c8:	4919      	ldr	r1, [pc, #100]	@ (8005630 <vTaskSwitchContext+0x90>)
 80055ca:	588a      	ldr	r2, [r1, r2]
 80055cc:	b942      	cbnz	r2, 80055e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	e7fe      	b.n	80055de <vTaskSwitchContext+0x3e>
 80055e0:	4813      	ldr	r0, [pc, #76]	@ (8005630 <vTaskSwitchContext+0x90>)
 80055e2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80055e6:	008a      	lsls	r2, r1, #2
 80055e8:	4402      	add	r2, r0
 80055ea:	6851      	ldr	r1, [r2, #4]
 80055ec:	6849      	ldr	r1, [r1, #4]
 80055ee:	6051      	str	r1, [r2, #4]
 80055f0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80055f4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80055f8:	3208      	adds	r2, #8
 80055fa:	4402      	add	r2, r0
 80055fc:	4291      	cmp	r1, r2
 80055fe:	d009      	beq.n	8005614 <vTaskSwitchContext+0x74>
 8005600:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005604:	009a      	lsls	r2, r3, #2
 8005606:	4b0a      	ldr	r3, [pc, #40]	@ (8005630 <vTaskSwitchContext+0x90>)
 8005608:	4413      	add	r3, r2
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <vTaskSwitchContext+0x94>)
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005614:	6848      	ldr	r0, [r1, #4]
 8005616:	4662      	mov	r2, ip
 8005618:	0091      	lsls	r1, r2, #2
 800561a:	4a05      	ldr	r2, [pc, #20]	@ (8005630 <vTaskSwitchContext+0x90>)
 800561c:	440a      	add	r2, r1
 800561e:	6050      	str	r0, [r2, #4]
 8005620:	e7ee      	b.n	8005600 <vTaskSwitchContext+0x60>
 8005622:	bf00      	nop
 8005624:	20004334 	.word	0x20004334
 8005628:	20004348 	.word	0x20004348
 800562c:	20004354 	.word	0x20004354
 8005630:	200043d0 	.word	0x200043d0
 8005634:	2000445c 	.word	0x2000445c

08005638 <temp_get>:
#define K 273.15f       // 摄氏温度转绝对温度的偏移量
#define T0 (K + 25.0f)  // 25°C 的绝对温度 (K)

void temp_init(void) {}

float temp_get(void) {
 8005638:	b510      	push	{r4, lr}
  // 启动 ADC 并等待转换完成
  HAL_ADC_Start(&hadc3);
 800563a:	4c1a      	ldr	r4, [pc, #104]	@ (80056a4 <temp_get+0x6c>)
 800563c:	4620      	mov	r0, r4
 800563e:	f7fc f9db 	bl	80019f8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc3, 10);
 8005642:	210a      	movs	r1, #10
 8005644:	4620      	mov	r0, r4
 8005646:	f7fc fa79 	bl	8001b3c <HAL_ADC_PollForConversion>
  // 获取 ADC 采样值
  uint32_t adc_value = HAL_ADC_GetValue(&hadc3);
 800564a:	4620      	mov	r0, r4
 800564c:	f7fc fad2 	bl	8001bf4 <HAL_ADC_GetValue>
 8005650:	ee07 0a90 	vmov	s15, r0
  float vr = (float)adc_value / ADC_RESOLUTION * ADC_VOLTAGE_REF;
 8005654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005658:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80056a8 <temp_get+0x70>
 800565c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005660:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80056ac <temp_get+0x74>
 8005664:	ee67 7a87 	vmul.f32	s15, s15, s14
  float rt = vr * R / (ADC_VOLTAGE_REF - vr);
 8005668:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80056b0 <temp_get+0x78>
 800566c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8005670:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005674:	ee86 0a07 	vdiv.f32	s0, s12, s14
  // 根据 B 常数公式计算温度
  float temp_k = 1.0f / (1.0f / T0 + logf(rt / R) / BETA);
 8005678:	ee80 0a26 	vdiv.f32	s0, s0, s13
 800567c:	f000 fae4 	bl	8005c48 <logf>
 8005680:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80056b4 <temp_get+0x7c>
 8005684:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8005688:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80056b8 <temp_get+0x80>
 800568c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005694:	ee87 0a27 	vdiv.f32	s0, s14, s15
  float temp_c = temp_k - K;  // 转换为摄氏温度
  return temp_c;
}
 8005698:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80056bc <temp_get+0x84>
 800569c:	ee30 0a67 	vsub.f32	s0, s0, s15
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	2000007c 	.word	0x2000007c
 80056a8:	39800000 	.word	0x39800000
 80056ac:	40533333 	.word	0x40533333
 80056b0:	461c4000 	.word	0x461c4000
 80056b4:	4557f000 	.word	0x4557f000
 80056b8:	3b5bcf0f 	.word	0x3b5bcf0f
 80056bc:	43889333 	.word	0x43889333

080056c0 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80056c0:	b500      	push	{lr}
 80056c2:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80056c4:	a902      	add	r1, sp, #8
 80056c6:	2300      	movs	r3, #0
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	604b      	str	r3, [r1, #4]
 80056cc:	608b      	str	r3, [r1, #8]
 80056ce:	60cb      	str	r3, [r1, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80056d4:	4811      	ldr	r0, [pc, #68]	@ (800571c <MX_TIM3_Init+0x5c>)
 80056d6:	4a12      	ldr	r2, [pc, #72]	@ (8005720 <MX_TIM3_Init+0x60>)
 80056d8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 16-1;
 80056da:	220f      	movs	r2, #15
 80056dc:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056de:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 80056e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056e4:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056e6:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056e8:	6183      	str	r3, [r0, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 10;
 80056ea:	230a      	movs	r3, #10
 80056ec:	9304      	str	r3, [sp, #16]
  sConfig.Commutation_Delay = 5;
 80056ee:	2305      	movs	r3, #5
 80056f0:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80056f2:	f7fe fd79 	bl	80041e8 <HAL_TIMEx_HallSensor_Init>
 80056f6:	b958      	cbnz	r0, 8005710 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80056f8:	2350      	movs	r3, #80	@ 0x50
 80056fa:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005700:	4669      	mov	r1, sp
 8005702:	4806      	ldr	r0, [pc, #24]	@ (800571c <MX_TIM3_Init+0x5c>)
 8005704:	f7fe fe40 	bl	8004388 <HAL_TIMEx_MasterConfigSynchronization>
 8005708:	b928      	cbnz	r0, 8005716 <MX_TIM3_Init+0x56>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800570a:	b007      	add	sp, #28
 800570c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005710:	f7fb fd70 	bl	80011f4 <Error_Handler>
 8005714:	e7f0      	b.n	80056f8 <MX_TIM3_Init+0x38>
    Error_Handler();
 8005716:	f7fb fd6d 	bl	80011f4 <Error_Handler>
}
 800571a:	e7f6      	b.n	800570a <MX_TIM3_Init+0x4a>
 800571c:	20004460 	.word	0x20004460
 8005720:	40000400 	.word	0x40000400

08005724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005724:	b510      	push	{r4, lr}
 8005726:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005728:	2300      	movs	r3, #0
 800572a:	9303      	str	r3, [sp, #12]
 800572c:	9304      	str	r3, [sp, #16]
 800572e:	9305      	str	r3, [sp, #20]
 8005730:	9306      	str	r3, [sp, #24]
 8005732:	9307      	str	r3, [sp, #28]
  if(tim_baseHandle->Instance==TIM1)
 8005734:	6802      	ldr	r2, [r0, #0]
 8005736:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <HAL_TIM_Base_MspInit+0x94>)
 8005738:	429a      	cmp	r2, r3
 800573a:	d001      	beq.n	8005740 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800573c:	b008      	add	sp, #32
 800573e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005740:	2400      	movs	r4, #0
 8005742:	9401      	str	r4, [sp, #4]
 8005744:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8005748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005752:	f002 0201 	and.w	r2, r2, #1
 8005756:	9201      	str	r2, [sp, #4]
 8005758:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800575a:	9402      	str	r4, [sp, #8]
 800575c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800575e:	f042 0202 	orr.w	r2, r2, #2
 8005762:	631a      	str	r2, [r3, #48]	@ 0x30
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	9302      	str	r3, [sp, #8]
 800576c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800576e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005772:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005774:	2302      	movs	r3, #2
 8005776:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005778:	2301      	movs	r3, #1
 800577a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800577c:	a903      	add	r1, sp, #12
 800577e:	480f      	ldr	r0, [pc, #60]	@ (80057bc <HAL_TIM_Base_MspInit+0x98>)
 8005780:	f7fd f8ae 	bl	80028e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8005784:	4622      	mov	r2, r4
 8005786:	2105      	movs	r1, #5
 8005788:	2018      	movs	r0, #24
 800578a:	f7fc fe35 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800578e:	2018      	movs	r0, #24
 8005790:	f7fc fe42 	bl	8002418 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8005794:	4622      	mov	r2, r4
 8005796:	2105      	movs	r1, #5
 8005798:	2019      	movs	r0, #25
 800579a:	f7fc fe2d 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800579e:	2019      	movs	r0, #25
 80057a0:	f7fc fe3a 	bl	8002418 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80057a4:	4622      	mov	r2, r4
 80057a6:	2105      	movs	r1, #5
 80057a8:	201b      	movs	r0, #27
 80057aa:	f7fc fe25 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80057ae:	201b      	movs	r0, #27
 80057b0:	f7fc fe32 	bl	8002418 <HAL_NVIC_EnableIRQ>
}
 80057b4:	e7c2      	b.n	800573c <HAL_TIM_Base_MspInit+0x18>
 80057b6:	bf00      	nop
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40020400 	.word	0x40020400

080057c0 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c4:	2300      	movs	r3, #0
 80057c6:	9303      	str	r3, [sp, #12]
 80057c8:	9304      	str	r3, [sp, #16]
 80057ca:	9305      	str	r3, [sp, #20]
 80057cc:	9306      	str	r3, [sp, #24]
 80057ce:	9307      	str	r3, [sp, #28]
  if(timex_hallsensorHandle->Instance==TIM3)
 80057d0:	6802      	ldr	r2, [r0, #0]
 80057d2:	4b21      	ldr	r3, [pc, #132]	@ (8005858 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_TIMEx_HallSensor_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80057d8:	b008      	add	sp, #32
 80057da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057dc:	2400      	movs	r4, #0
 80057de:	9400      	str	r4, [sp, #0]
 80057e0:	f503 330d 	add.w	r3, r3, #144384	@ 0x23400
 80057e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057e6:	f042 0202 	orr.w	r2, r2, #2
 80057ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80057ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057ee:	f002 0202 	and.w	r2, r2, #2
 80057f2:	9200      	str	r2, [sp, #0]
 80057f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f6:	9401      	str	r4, [sp, #4]
 80057f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8005800:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005802:	f002 0201 	and.w	r2, r2, #1
 8005806:	9201      	str	r2, [sp, #4]
 8005808:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800580a:	9402      	str	r4, [sp, #8]
 800580c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800580e:	f042 0202 	orr.w	r2, r2, #2
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	9302      	str	r3, [sp, #8]
 800581c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800581e:	23c0      	movs	r3, #192	@ 0xc0
 8005820:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005822:	2502      	movs	r5, #2
 8005824:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005826:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005828:	ae03      	add	r6, sp, #12
 800582a:	4631      	mov	r1, r6
 800582c:	480b      	ldr	r0, [pc, #44]	@ (800585c <HAL_TIMEx_HallSensor_MspInit+0x9c>)
 800582e:	f7fd f857 	bl	80028e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005832:	2301      	movs	r3, #1
 8005834:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005836:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005838:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800583a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800583c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800583e:	4631      	mov	r1, r6
 8005840:	4807      	ldr	r0, [pc, #28]	@ (8005860 <HAL_TIMEx_HallSensor_MspInit+0xa0>)
 8005842:	f7fd f84d 	bl	80028e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005846:	4622      	mov	r2, r4
 8005848:	2105      	movs	r1, #5
 800584a:	201d      	movs	r0, #29
 800584c:	f7fc fdd4 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005850:	201d      	movs	r0, #29
 8005852:	f7fc fde1 	bl	8002418 <HAL_NVIC_EnableIRQ>
}
 8005856:	e7bf      	b.n	80057d8 <HAL_TIMEx_HallSensor_MspInit+0x18>
 8005858:	40000400 	.word	0x40000400
 800585c:	40020000 	.word	0x40020000
 8005860:	40020400 	.word	0x40020400

08005864 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005864:	b500      	push	{lr}
 8005866:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005868:	2300      	movs	r3, #0
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	9303      	str	r3, [sp, #12]
 8005870:	9304      	str	r3, [sp, #16]
 8005872:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8005874:	6802      	ldr	r2, [r0, #0]
 8005876:	4b0f      	ldr	r3, [pc, #60]	@ (80058b4 <HAL_TIM_MspPostInit+0x50>)
 8005878:	429a      	cmp	r2, r3
 800587a:	d002      	beq.n	8005882 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800587c:	b007      	add	sp, #28
 800587e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005882:	2300      	movs	r3, #0
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <HAL_TIM_MspPostInit+0x54>)
 8005888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800589a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800589e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a0:	2302      	movs	r3, #2
 80058a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80058a4:	2301      	movs	r3, #1
 80058a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a8:	a901      	add	r1, sp, #4
 80058aa:	4804      	ldr	r0, [pc, #16]	@ (80058bc <HAL_TIM_MspPostInit+0x58>)
 80058ac:	f7fd f818 	bl	80028e0 <HAL_GPIO_Init>
}
 80058b0:	e7e4      	b.n	800587c <HAL_TIM_MspPostInit+0x18>
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40023800 	.word	0x40023800
 80058bc:	40020000 	.word	0x40020000

080058c0 <MX_TIM1_Init>:
{
 80058c0:	b530      	push	{r4, r5, lr}
 80058c2:	b097      	sub	sp, #92	@ 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058c4:	2400      	movs	r4, #0
 80058c6:	9412      	str	r4, [sp, #72]	@ 0x48
 80058c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80058ca:	9414      	str	r4, [sp, #80]	@ 0x50
 80058cc:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058ce:	9410      	str	r4, [sp, #64]	@ 0x40
 80058d0:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058d2:	9409      	str	r4, [sp, #36]	@ 0x24
 80058d4:	940a      	str	r4, [sp, #40]	@ 0x28
 80058d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058d8:	940c      	str	r4, [sp, #48]	@ 0x30
 80058da:	940d      	str	r4, [sp, #52]	@ 0x34
 80058dc:	940e      	str	r4, [sp, #56]	@ 0x38
 80058de:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80058e0:	2520      	movs	r5, #32
 80058e2:	462a      	mov	r2, r5
 80058e4:	4621      	mov	r1, r4
 80058e6:	a801      	add	r0, sp, #4
 80058e8:	f000 f96d 	bl	8005bc6 <memset>
  htim1.Instance = TIM1;
 80058ec:	4840      	ldr	r0, [pc, #256]	@ (80059f0 <MX_TIM1_Init+0x130>)
 80058ee:	4b41      	ldr	r3, [pc, #260]	@ (80059f4 <MX_TIM1_Init+0x134>)
 80058f0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 1-1;
 80058f2:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80058f4:	6085      	str	r5, [r0, #8]
  htim1.Init.Period = 8000-1;
 80058f6:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 80058fa:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80058fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005900:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 1;
 8005902:	2301      	movs	r3, #1
 8005904:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005906:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005908:	f7fe fa18 	bl	8003d3c <HAL_TIM_Base_Init>
 800590c:	2800      	cmp	r0, #0
 800590e:	d154      	bne.n	80059ba <MX_TIM1_Init+0xfa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005914:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005916:	a912      	add	r1, sp, #72	@ 0x48
 8005918:	4835      	ldr	r0, [pc, #212]	@ (80059f0 <MX_TIM1_Init+0x130>)
 800591a:	f7fe fb58 	bl	8003fce <HAL_TIM_ConfigClockSource>
 800591e:	2800      	cmp	r0, #0
 8005920:	d14e      	bne.n	80059c0 <MX_TIM1_Init+0x100>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005922:	4833      	ldr	r0, [pc, #204]	@ (80059f0 <MX_TIM1_Init+0x130>)
 8005924:	f7fe fa36 	bl	8003d94 <HAL_TIM_PWM_Init>
 8005928:	2800      	cmp	r0, #0
 800592a:	d14c      	bne.n	80059c6 <MX_TIM1_Init+0x106>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800592c:	2300      	movs	r3, #0
 800592e:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005930:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005932:	a910      	add	r1, sp, #64	@ 0x40
 8005934:	482e      	ldr	r0, [pc, #184]	@ (80059f0 <MX_TIM1_Init+0x130>)
 8005936:	f7fe fd27 	bl	8004388 <HAL_TIMEx_MasterConfigSynchronization>
 800593a:	2800      	cmp	r0, #0
 800593c:	d146      	bne.n	80059cc <MX_TIM1_Init+0x10c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800593e:	2360      	movs	r3, #96	@ 0x60
 8005940:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005942:	2200      	movs	r2, #0
 8005944:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005946:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005948:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800594a:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800594c:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800594e:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005950:	a909      	add	r1, sp, #36	@ 0x24
 8005952:	4827      	ldr	r0, [pc, #156]	@ (80059f0 <MX_TIM1_Init+0x130>)
 8005954:	f7fe fa82 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 8005958:	2800      	cmp	r0, #0
 800595a:	d13a      	bne.n	80059d2 <MX_TIM1_Init+0x112>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800595c:	2204      	movs	r2, #4
 800595e:	a909      	add	r1, sp, #36	@ 0x24
 8005960:	4823      	ldr	r0, [pc, #140]	@ (80059f0 <MX_TIM1_Init+0x130>)
 8005962:	f7fe fa7b 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 8005966:	2800      	cmp	r0, #0
 8005968:	d136      	bne.n	80059d8 <MX_TIM1_Init+0x118>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800596a:	2208      	movs	r2, #8
 800596c:	a909      	add	r1, sp, #36	@ 0x24
 800596e:	4820      	ldr	r0, [pc, #128]	@ (80059f0 <MX_TIM1_Init+0x130>)
 8005970:	f7fe fa74 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 8005974:	2800      	cmp	r0, #0
 8005976:	d132      	bne.n	80059de <MX_TIM1_Init+0x11e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8005978:	2370      	movs	r3, #112	@ 0x70
 800597a:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 8000-2;
 800597c:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8005980:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005982:	220c      	movs	r2, #12
 8005984:	a909      	add	r1, sp, #36	@ 0x24
 8005986:	481a      	ldr	r0, [pc, #104]	@ (80059f0 <MX_TIM1_Init+0x130>)
 8005988:	f7fe fa68 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 800598c:	bb50      	cbnz	r0, 80059e4 <MX_TIM1_Init+0x124>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800598e:	2300      	movs	r3, #0
 8005990:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005992:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005994:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005996:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8005998:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800599c:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800599e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80059a2:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80059a4:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80059a6:	a901      	add	r1, sp, #4
 80059a8:	4811      	ldr	r0, [pc, #68]	@ (80059f0 <MX_TIM1_Init+0x130>)
 80059aa:	f7fe fd33 	bl	8004414 <HAL_TIMEx_ConfigBreakDeadTime>
 80059ae:	b9e0      	cbnz	r0, 80059ea <MX_TIM1_Init+0x12a>
  HAL_TIM_MspPostInit(&htim1);
 80059b0:	480f      	ldr	r0, [pc, #60]	@ (80059f0 <MX_TIM1_Init+0x130>)
 80059b2:	f7ff ff57 	bl	8005864 <HAL_TIM_MspPostInit>
}
 80059b6:	b017      	add	sp, #92	@ 0x5c
 80059b8:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80059ba:	f7fb fc1b 	bl	80011f4 <Error_Handler>
 80059be:	e7a7      	b.n	8005910 <MX_TIM1_Init+0x50>
    Error_Handler();
 80059c0:	f7fb fc18 	bl	80011f4 <Error_Handler>
 80059c4:	e7ad      	b.n	8005922 <MX_TIM1_Init+0x62>
    Error_Handler();
 80059c6:	f7fb fc15 	bl	80011f4 <Error_Handler>
 80059ca:	e7af      	b.n	800592c <MX_TIM1_Init+0x6c>
    Error_Handler();
 80059cc:	f7fb fc12 	bl	80011f4 <Error_Handler>
 80059d0:	e7b5      	b.n	800593e <MX_TIM1_Init+0x7e>
    Error_Handler();
 80059d2:	f7fb fc0f 	bl	80011f4 <Error_Handler>
 80059d6:	e7c1      	b.n	800595c <MX_TIM1_Init+0x9c>
    Error_Handler();
 80059d8:	f7fb fc0c 	bl	80011f4 <Error_Handler>
 80059dc:	e7c5      	b.n	800596a <MX_TIM1_Init+0xaa>
    Error_Handler();
 80059de:	f7fb fc09 	bl	80011f4 <Error_Handler>
 80059e2:	e7c9      	b.n	8005978 <MX_TIM1_Init+0xb8>
    Error_Handler();
 80059e4:	f7fb fc06 	bl	80011f4 <Error_Handler>
 80059e8:	e7d1      	b.n	800598e <MX_TIM1_Init+0xce>
    Error_Handler();
 80059ea:	f7fb fc03 	bl	80011f4 <Error_Handler>
 80059ee:	e7df      	b.n	80059b0 <MX_TIM1_Init+0xf0>
 80059f0:	200044a8 	.word	0x200044a8
 80059f4:	40010000 	.word	0x40010000

080059f8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80059f8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80059fa:	480a      	ldr	r0, [pc, #40]	@ (8005a24 <MX_USART3_UART_Init+0x2c>)
 80059fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <MX_USART3_UART_Init+0x30>)
 80059fe:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 921600;
 8005a00:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8005a04:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a06:	2300      	movs	r3, #0
 8005a08:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a0a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a0c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a0e:	220c      	movs	r2, #12
 8005a10:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a12:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a14:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a16:	f7fe fe71 	bl	80046fc <HAL_UART_Init>
 8005a1a:	b900      	cbnz	r0, 8005a1e <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005a1c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005a1e:	f7fb fbe9 	bl	80011f4 <Error_Handler>
}
 8005a22:	e7fb      	b.n	8005a1c <MX_USART3_UART_Init+0x24>
 8005a24:	200045b0 	.word	0x200045b0
 8005a28:	40004800 	.word	0x40004800

08005a2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a30:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a32:	2300      	movs	r3, #0
 8005a34:	9303      	str	r3, [sp, #12]
 8005a36:	9304      	str	r3, [sp, #16]
 8005a38:	9305      	str	r3, [sp, #20]
 8005a3a:	9306      	str	r3, [sp, #24]
 8005a3c:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 8005a3e:	6802      	ldr	r2, [r0, #0]
 8005a40:	4b41      	ldr	r3, [pc, #260]	@ (8005b48 <HAL_UART_MspInit+0x11c>)
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d002      	beq.n	8005a4c <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005a46:	b008      	add	sp, #32
 8005a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4c:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a4e:	2500      	movs	r5, #0
 8005a50:	9500      	str	r5, [sp, #0]
 8005a52:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 8005a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a58:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005a5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a60:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8005a64:	9200      	str	r2, [sp, #0]
 8005a66:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a68:	9501      	str	r5, [sp, #4]
 8005a6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a6c:	f042 0204 	orr.w	r2, r2, #4
 8005a70:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a74:	f002 0204 	and.w	r2, r2, #4
 8005a78:	9201      	str	r2, [sp, #4]
 8005a7a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a7c:	9502      	str	r5, [sp, #8]
 8005a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a80:	f042 0202 	orr.w	r2, r2, #2
 8005a84:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	9302      	str	r3, [sp, #8]
 8005a8e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005a90:	2320      	movs	r3, #32
 8005a92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a94:	f04f 0a02 	mov.w	sl, #2
 8005a98:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a9c:	f04f 0903 	mov.w	r9, #3
 8005aa0:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005aa4:	f04f 0807 	mov.w	r8, #7
 8005aa8:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aac:	af03      	add	r7, sp, #12
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4826      	ldr	r0, [pc, #152]	@ (8005b4c <HAL_UART_MspInit+0x120>)
 8005ab2:	f7fc ff15 	bl	80028e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005ab6:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8005aba:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005abc:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac2:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ac6:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aca:	4639      	mov	r1, r7
 8005acc:	4820      	ldr	r0, [pc, #128]	@ (8005b50 <HAL_UART_MspInit+0x124>)
 8005ace:	f7fc ff07 	bl	80028e0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8005ad2:	4820      	ldr	r0, [pc, #128]	@ (8005b54 <HAL_UART_MspInit+0x128>)
 8005ad4:	4b20      	ldr	r3, [pc, #128]	@ (8005b58 <HAL_UART_MspInit+0x12c>)
 8005ad6:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005ad8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005adc:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ade:	2340      	movs	r3, #64	@ 0x40
 8005ae0:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ae2:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ae4:	6106      	str	r6, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ae6:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ae8:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005aea:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005aec:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005aee:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005af0:	f7fc fd12 	bl	8002518 <HAL_DMA_Init>
 8005af4:	bb10      	cbnz	r0, 8005b3c <HAL_UART_MspInit+0x110>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005af6:	4b17      	ldr	r3, [pc, #92]	@ (8005b54 <HAL_UART_MspInit+0x128>)
 8005af8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005afa:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005afc:	4817      	ldr	r0, [pc, #92]	@ (8005b5c <HAL_UART_MspInit+0x130>)
 8005afe:	4b18      	ldr	r3, [pc, #96]	@ (8005b60 <HAL_UART_MspInit+0x134>)
 8005b00:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005b02:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b06:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b0c:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b12:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b14:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b16:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005b18:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b1a:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b1c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005b1e:	f7fc fcfb 	bl	8002518 <HAL_DMA_Init>
 8005b22:	b970      	cbnz	r0, 8005b42 <HAL_UART_MspInit+0x116>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005b24:	4b0d      	ldr	r3, [pc, #52]	@ (8005b5c <HAL_UART_MspInit+0x130>)
 8005b26:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005b28:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2105      	movs	r1, #5
 8005b2e:	2027      	movs	r0, #39	@ 0x27
 8005b30:	f7fc fc62 	bl	80023f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005b34:	2027      	movs	r0, #39	@ 0x27
 8005b36:	f7fc fc6f 	bl	8002418 <HAL_NVIC_EnableIRQ>
}
 8005b3a:	e784      	b.n	8005a46 <HAL_UART_MspInit+0x1a>
      Error_Handler();
 8005b3c:	f7fb fb5a 	bl	80011f4 <Error_Handler>
 8005b40:	e7d9      	b.n	8005af6 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8005b42:	f7fb fb57 	bl	80011f4 <Error_Handler>
 8005b46:	e7ed      	b.n	8005b24 <HAL_UART_MspInit+0xf8>
 8005b48:	40004800 	.word	0x40004800
 8005b4c:	40020800 	.word	0x40020800
 8005b50:	40020400 	.word	0x40020400
 8005b54:	20004550 	.word	0x20004550
 8005b58:	40026058 	.word	0x40026058
 8005b5c:	200044f0 	.word	0x200044f0
 8005b60:	40026028 	.word	0x40026028

08005b64 <vbus_init>:

static float g_vbus_gain = 0.0f;
static float g_vbus = 0.0f;

void vbus_init(void) {
  g_vbus_gain = ADC_VOLTAGE_REF / ADC_RESOLUTION * (R1 + R2) / R2;
 8005b64:	4b01      	ldr	r3, [pc, #4]	@ (8005b6c <vbus_init+0x8>)
 8005b66:	4a02      	ldr	r2, [pc, #8]	@ (8005b70 <vbus_init+0xc>)
 8005b68:	601a      	str	r2, [r3, #0]
}
 8005b6a:	4770      	bx	lr
 8005b6c:	200045f8 	.word	0x200045f8
 8005b70:	3cab999a 	.word	0x3cab999a

08005b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005bac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005b78:	f7ff f99c 	bl	8004eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b7c:	480c      	ldr	r0, [pc, #48]	@ (8005bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b7e:	490d      	ldr	r1, [pc, #52]	@ (8005bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b80:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b84:	e002      	b.n	8005b8c <LoopCopyDataInit>

08005b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b8a:	3304      	adds	r3, #4

08005b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b90:	d3f9      	bcc.n	8005b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b92:	4a0a      	ldr	r2, [pc, #40]	@ (8005bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b94:	4c0a      	ldr	r4, [pc, #40]	@ (8005bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b98:	e001      	b.n	8005b9e <LoopFillZerobss>

08005b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b9c:	3204      	adds	r2, #4

08005b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ba0:	d3fb      	bcc.n	8005b9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005ba2:	f000 f81f 	bl	8005be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ba6:	f7fb fb7b 	bl	80012a0 <main>
  bx  lr    
 8005baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bb4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8005bb8:	08006248 	.word	0x08006248
  ldr r2, =_sbss
 8005bbc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8005bc0:	20004734 	.word	0x20004734

08005bc4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bc4:	e7fe      	b.n	8005bc4 <CAN1_RX0_IRQHandler>

08005bc6 <memset>:
 8005bc6:	4402      	add	r2, r0
 8005bc8:	4603      	mov	r3, r0
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d100      	bne.n	8005bd0 <memset+0xa>
 8005bce:	4770      	bx	lr
 8005bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd4:	e7f9      	b.n	8005bca <memset+0x4>
	...

08005bd8 <__errno>:
 8005bd8:	4b01      	ldr	r3, [pc, #4]	@ (8005be0 <__errno+0x8>)
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	20000010 	.word	0x20000010

08005be4 <__libc_init_array>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <__libc_init_array+0x38>)
 8005be8:	4d0d      	ldr	r5, [pc, #52]	@ (8005c20 <__libc_init_array+0x3c>)
 8005bea:	1b5b      	subs	r3, r3, r5
 8005bec:	109c      	asrs	r4, r3, #2
 8005bee:	2600      	movs	r6, #0
 8005bf0:	42a6      	cmp	r6, r4
 8005bf2:	d109      	bne.n	8005c08 <__libc_init_array+0x24>
 8005bf4:	f000 fad4 	bl	80061a0 <_init>
 8005bf8:	4d0a      	ldr	r5, [pc, #40]	@ (8005c24 <__libc_init_array+0x40>)
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <__libc_init_array+0x44>)
 8005bfc:	1b5b      	subs	r3, r3, r5
 8005bfe:	109c      	asrs	r4, r3, #2
 8005c00:	2600      	movs	r6, #0
 8005c02:	42a6      	cmp	r6, r4
 8005c04:	d105      	bne.n	8005c12 <__libc_init_array+0x2e>
 8005c06:	bd70      	pop	{r4, r5, r6, pc}
 8005c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c0c:	4798      	blx	r3
 8005c0e:	3601      	adds	r6, #1
 8005c10:	e7ee      	b.n	8005bf0 <__libc_init_array+0xc>
 8005c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c16:	4798      	blx	r3
 8005c18:	3601      	adds	r6, #1
 8005c1a:	e7f2      	b.n	8005c02 <__libc_init_array+0x1e>
 8005c1c:	08006240 	.word	0x08006240
 8005c20:	08006240 	.word	0x08006240
 8005c24:	08006240 	.word	0x08006240
 8005c28:	08006244 	.word	0x08006244

08005c2c <memcpy>:
 8005c2c:	440a      	add	r2, r1
 8005c2e:	4291      	cmp	r1, r2
 8005c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c34:	d100      	bne.n	8005c38 <memcpy+0xc>
 8005c36:	4770      	bx	lr
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c42:	4291      	cmp	r1, r2
 8005c44:	d1f9      	bne.n	8005c3a <memcpy+0xe>
 8005c46:	bd10      	pop	{r4, pc}

08005c48 <logf>:
 8005c48:	b508      	push	{r3, lr}
 8005c4a:	ed2d 8b02 	vpush	{d8}
 8005c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8005c52:	f000 f82f 	bl	8005cb4 <__ieee754_logf>
 8005c56:	eeb4 8a48 	vcmp.f32	s16, s16
 8005c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5e:	d60f      	bvs.n	8005c80 <logf+0x38>
 8005c60:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c68:	dc0a      	bgt.n	8005c80 <logf+0x38>
 8005c6a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c72:	d108      	bne.n	8005c86 <logf+0x3e>
 8005c74:	f7ff ffb0 	bl	8005bd8 <__errno>
 8005c78:	2322      	movs	r3, #34	@ 0x22
 8005c7a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8005ca0 <logf+0x58>
 8005c7e:	6003      	str	r3, [r0, #0]
 8005c80:	ecbd 8b02 	vpop	{d8}
 8005c84:	bd08      	pop	{r3, pc}
 8005c86:	f7ff ffa7 	bl	8005bd8 <__errno>
 8005c8a:	ecbd 8b02 	vpop	{d8}
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2221      	movs	r2, #33	@ 0x21
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	4803      	ldr	r0, [pc, #12]	@ (8005ca4 <logf+0x5c>)
 8005c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005c9a:	f000 b805 	b.w	8005ca8 <nanf>
 8005c9e:	bf00      	nop
 8005ca0:	ff800000 	.word	0xff800000
 8005ca4:	08006214 	.word	0x08006214

08005ca8 <nanf>:
 8005ca8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005cb0 <nanf+0x8>
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	7fc00000 	.word	0x7fc00000

08005cb4 <__ieee754_logf>:
 8005cb4:	ee10 2a10 	vmov	r2, s0
 8005cb8:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 8005cbc:	d02f      	beq.n	8005d1e <__ieee754_logf+0x6a>
 8005cbe:	2a00      	cmp	r2, #0
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	db33      	blt.n	8005d2c <__ieee754_logf+0x78>
 8005cc4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005cc8:	da40      	bge.n	8005d4c <__ieee754_logf+0x98>
 8005cca:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005cce:	db34      	blt.n	8005d3a <__ieee754_logf+0x86>
 8005cd0:	f04f 0c00 	mov.w	ip, #0
 8005cd4:	4864      	ldr	r0, [pc, #400]	@ (8005e68 <__ieee754_logf+0x1b4>)
 8005cd6:	f3c3 0116 	ubfx	r1, r3, #0, #23
 8005cda:	4408      	add	r0, r1
 8005cdc:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 8005ce0:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	15db      	asrs	r3, r3, #23
 8005ce8:	ee00 2a10 	vmov	s0, r2
 8005cec:	3b7f      	subs	r3, #127	@ 0x7f
 8005cee:	4a5f      	ldr	r2, [pc, #380]	@ (8005e6c <__ieee754_logf+0x1b8>)
 8005cf0:	4463      	add	r3, ip
 8005cf2:	f101 0c0f 	add.w	ip, r1, #15
 8005cf6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005cfa:	ea0c 0202 	and.w	r2, ip, r2
 8005cfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005d02:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8005d06:	bb22      	cbnz	r2, 8005d52 <__ieee754_logf+0x9e>
 8005d08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d10:	d162      	bne.n	8005dd8 <__ieee754_logf+0x124>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f040 8090 	bne.w	8005e38 <__ieee754_logf+0x184>
 8005d18:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8005e70 <__ieee754_logf+0x1bc>
 8005d1c:	4770      	bx	lr
 8005d1e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8005e74 <__ieee754_logf+0x1c0>
 8005d22:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8005e70 <__ieee754_logf+0x1bc>
 8005d26:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005d2a:	4770      	bx	lr
 8005d2c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005d30:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005e70 <__ieee754_logf+0x1bc>
 8005d34:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8005d38:	4770      	bx	lr
 8005d3a:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8005e78 <__ieee754_logf+0x1c4>
 8005d3e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005d42:	f06f 0c18 	mvn.w	ip, #24
 8005d46:	ee17 3a90 	vmov	r3, s15
 8005d4a:	e7c3      	b.n	8005cd4 <__ieee754_logf+0x20>
 8005d4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005d50:	4770      	bx	lr
 8005d52:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005d56:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005d5a:	ee07 3a10 	vmov	s14, r3
 8005d5e:	ee80 4a27 	vdiv.f32	s8, s0, s15
 8005d62:	4846      	ldr	r0, [pc, #280]	@ (8005e7c <__ieee754_logf+0x1c8>)
 8005d64:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 8005d68:	4408      	add	r0, r1
 8005d6a:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8005d6e:	4302      	orrs	r2, r0
 8005d70:	2a00      	cmp	r2, #0
 8005d72:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 8005e80 <__ieee754_logf+0x1cc>
 8005d76:	eddf 4a43 	vldr	s9, [pc, #268]	@ 8005e84 <__ieee754_logf+0x1d0>
 8005d7a:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8005e88 <__ieee754_logf+0x1d4>
 8005d7e:	eddf 3a43 	vldr	s7, [pc, #268]	@ 8005e8c <__ieee754_logf+0x1d8>
 8005d82:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 8005e90 <__ieee754_logf+0x1dc>
 8005d86:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8005e94 <__ieee754_logf+0x1e0>
 8005d8a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005e98 <__ieee754_logf+0x1e4>
 8005d8e:	ee24 6a04 	vmul.f32	s12, s8, s8
 8005d92:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 8005d96:	ee26 7a06 	vmul.f32	s14, s12, s12
 8005d9a:	eee7 4a03 	vfma.f32	s9, s14, s6
 8005d9e:	eea7 5a23 	vfma.f32	s10, s14, s7
 8005da2:	eee4 5a87 	vfma.f32	s11, s9, s14
 8005da6:	eee5 6a07 	vfma.f32	s13, s10, s14
 8005daa:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005dae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005db2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005db6:	dd2a      	ble.n	8005e0e <__ieee754_logf+0x15a>
 8005db8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005dbc:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005dc0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005dc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005dcc:	bb3b      	cbnz	r3, 8005e1e <__ieee754_logf+0x16a>
 8005dce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dd2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005dd6:	4770      	bx	lr
 8005dd8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005e9c <__ieee754_logf+0x1e8>
 8005ddc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005de0:	eee0 7a47 	vfms.f32	s15, s0, s14
 8005de4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0f0      	beq.n	8005dd2 <__ieee754_logf+0x11e>
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8005ea0 <__ieee754_logf+0x1ec>
 8005df8:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005ea4 <__ieee754_logf+0x1f0>
 8005dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e00:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8005e04:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005e08:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 8005e0c:	4770      	bx	lr
 8005e0e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005e12:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005e16:	b9e3      	cbnz	r3, 8005e52 <__ieee754_logf+0x19e>
 8005e18:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005e1c:	4770      	bx	lr
 8005e1e:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8005ea0 <__ieee754_logf+0x1ec>
 8005e22:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8005ea4 <__ieee754_logf+0x1f0>
 8005e26:	eee2 7a86 	vfma.f32	s15, s5, s12
 8005e2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e2e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005e32:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 8005e36:	4770      	bx	lr
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8005ea0 <__ieee754_logf+0x1ec>
 8005e40:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005ea4 <__ieee754_logf+0x1f0>
 8005e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e48:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005e4c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8005e50:	4770      	bx	lr
 8005e52:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8005ea0 <__ieee754_logf+0x1ec>
 8005e56:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8005ea4 <__ieee754_logf+0x1f0>
 8005e5a:	eee2 7ae6 	vfms.f32	s15, s5, s13
 8005e5e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005e62:	ee92 0a87 	vfnms.f32	s0, s5, s14
 8005e66:	4770      	bx	lr
 8005e68:	004afb20 	.word	0x004afb20
 8005e6c:	007ffff0 	.word	0x007ffff0
 8005e70:	00000000 	.word	0x00000000
 8005e74:	cc000000 	.word	0xcc000000
 8005e78:	4c000000 	.word	0x4c000000
 8005e7c:	ffcf5c30 	.word	0xffcf5c30
 8005e80:	3e178897 	.word	0x3e178897
 8005e84:	3e3a3325 	.word	0x3e3a3325
 8005e88:	3e924925 	.word	0x3e924925
 8005e8c:	3e1cd04f 	.word	0x3e1cd04f
 8005e90:	3e638e29 	.word	0x3e638e29
 8005e94:	3f2aaaab 	.word	0x3f2aaaab
 8005e98:	3ecccccd 	.word	0x3ecccccd
 8005e9c:	3eaaaaab 	.word	0x3eaaaaab
 8005ea0:	3717f7d1 	.word	0x3717f7d1
 8005ea4:	3f317180 	.word	0x3f317180

08005ea8 <__udivmoddi4>:
 8005ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	9d08      	ldr	r5, [sp, #32]
 8005eae:	460f      	mov	r7, r1
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	468c      	mov	ip, r1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d148      	bne.n	8005f4a <__udivmoddi4+0xa2>
 8005eb8:	428a      	cmp	r2, r1
 8005eba:	4616      	mov	r6, r2
 8005ebc:	d961      	bls.n	8005f82 <__udivmoddi4+0xda>
 8005ebe:	fab2 f382 	clz	r3, r2
 8005ec2:	b14b      	cbz	r3, 8005ed8 <__udivmoddi4+0x30>
 8005ec4:	f1c3 0220 	rsb	r2, r3, #32
 8005ec8:	fa01 fc03 	lsl.w	ip, r1, r3
 8005ecc:	fa20 f202 	lsr.w	r2, r0, r2
 8005ed0:	409e      	lsls	r6, r3
 8005ed2:	ea42 0c0c 	orr.w	ip, r2, ip
 8005ed6:	409c      	lsls	r4, r3
 8005ed8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005edc:	b2b7      	uxth	r7, r6
 8005ede:	fbbc f1fe 	udiv	r1, ip, lr
 8005ee2:	0c22      	lsrs	r2, r4, #16
 8005ee4:	fb0e cc11 	mls	ip, lr, r1, ip
 8005ee8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8005eec:	fb01 f007 	mul.w	r0, r1, r7
 8005ef0:	4290      	cmp	r0, r2
 8005ef2:	d909      	bls.n	8005f08 <__udivmoddi4+0x60>
 8005ef4:	18b2      	adds	r2, r6, r2
 8005ef6:	f101 3cff 	add.w	ip, r1, #4294967295
 8005efa:	f080 80ee 	bcs.w	80060da <__udivmoddi4+0x232>
 8005efe:	4290      	cmp	r0, r2
 8005f00:	f240 80eb 	bls.w	80060da <__udivmoddi4+0x232>
 8005f04:	3902      	subs	r1, #2
 8005f06:	4432      	add	r2, r6
 8005f08:	1a12      	subs	r2, r2, r0
 8005f0a:	b2a4      	uxth	r4, r4
 8005f0c:	fbb2 f0fe 	udiv	r0, r2, lr
 8005f10:	fb0e 2210 	mls	r2, lr, r0, r2
 8005f14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005f18:	fb00 f707 	mul.w	r7, r0, r7
 8005f1c:	42a7      	cmp	r7, r4
 8005f1e:	d909      	bls.n	8005f34 <__udivmoddi4+0x8c>
 8005f20:	1934      	adds	r4, r6, r4
 8005f22:	f100 32ff 	add.w	r2, r0, #4294967295
 8005f26:	f080 80da 	bcs.w	80060de <__udivmoddi4+0x236>
 8005f2a:	42a7      	cmp	r7, r4
 8005f2c:	f240 80d7 	bls.w	80060de <__udivmoddi4+0x236>
 8005f30:	4434      	add	r4, r6
 8005f32:	3802      	subs	r0, #2
 8005f34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005f38:	1be4      	subs	r4, r4, r7
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	b11d      	cbz	r5, 8005f46 <__udivmoddi4+0x9e>
 8005f3e:	40dc      	lsrs	r4, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	e9c5 4300 	strd	r4, r3, [r5]
 8005f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4a:	428b      	cmp	r3, r1
 8005f4c:	d906      	bls.n	8005f5c <__udivmoddi4+0xb4>
 8005f4e:	b10d      	cbz	r5, 8005f54 <__udivmoddi4+0xac>
 8005f50:	e9c5 0100 	strd	r0, r1, [r5]
 8005f54:	2100      	movs	r1, #0
 8005f56:	4608      	mov	r0, r1
 8005f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5c:	fab3 f183 	clz	r1, r3
 8005f60:	2900      	cmp	r1, #0
 8005f62:	d148      	bne.n	8005ff6 <__udivmoddi4+0x14e>
 8005f64:	42bb      	cmp	r3, r7
 8005f66:	d302      	bcc.n	8005f6e <__udivmoddi4+0xc6>
 8005f68:	4282      	cmp	r2, r0
 8005f6a:	f200 8107 	bhi.w	800617c <__udivmoddi4+0x2d4>
 8005f6e:	1a84      	subs	r4, r0, r2
 8005f70:	eb67 0203 	sbc.w	r2, r7, r3
 8005f74:	2001      	movs	r0, #1
 8005f76:	4694      	mov	ip, r2
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	d0e4      	beq.n	8005f46 <__udivmoddi4+0x9e>
 8005f7c:	e9c5 4c00 	strd	r4, ip, [r5]
 8005f80:	e7e1      	b.n	8005f46 <__udivmoddi4+0x9e>
 8005f82:	2a00      	cmp	r2, #0
 8005f84:	f000 8092 	beq.w	80060ac <__udivmoddi4+0x204>
 8005f88:	fab2 f382 	clz	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 80a8 	bne.w	80060e2 <__udivmoddi4+0x23a>
 8005f92:	1a8a      	subs	r2, r1, r2
 8005f94:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005f98:	fa1f fc86 	uxth.w	ip, r6
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	0c20      	lsrs	r0, r4, #16
 8005fa0:	fbb2 f7fe 	udiv	r7, r2, lr
 8005fa4:	fb0e 2217 	mls	r2, lr, r7, r2
 8005fa8:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8005fac:	fb0c f007 	mul.w	r0, ip, r7
 8005fb0:	4290      	cmp	r0, r2
 8005fb2:	d907      	bls.n	8005fc4 <__udivmoddi4+0x11c>
 8005fb4:	18b2      	adds	r2, r6, r2
 8005fb6:	f107 38ff 	add.w	r8, r7, #4294967295
 8005fba:	d202      	bcs.n	8005fc2 <__udivmoddi4+0x11a>
 8005fbc:	4290      	cmp	r0, r2
 8005fbe:	f200 80e2 	bhi.w	8006186 <__udivmoddi4+0x2de>
 8005fc2:	4647      	mov	r7, r8
 8005fc4:	1a12      	subs	r2, r2, r0
 8005fc6:	b2a4      	uxth	r4, r4
 8005fc8:	fbb2 f0fe 	udiv	r0, r2, lr
 8005fcc:	fb0e 2210 	mls	r2, lr, r0, r2
 8005fd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005fd4:	fb0c fc00 	mul.w	ip, ip, r0
 8005fd8:	45a4      	cmp	ip, r4
 8005fda:	d907      	bls.n	8005fec <__udivmoddi4+0x144>
 8005fdc:	1934      	adds	r4, r6, r4
 8005fde:	f100 32ff 	add.w	r2, r0, #4294967295
 8005fe2:	d202      	bcs.n	8005fea <__udivmoddi4+0x142>
 8005fe4:	45a4      	cmp	ip, r4
 8005fe6:	f200 80cb 	bhi.w	8006180 <__udivmoddi4+0x2d8>
 8005fea:	4610      	mov	r0, r2
 8005fec:	eba4 040c 	sub.w	r4, r4, ip
 8005ff0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005ff4:	e7a2      	b.n	8005f3c <__udivmoddi4+0x94>
 8005ff6:	f1c1 0620 	rsb	r6, r1, #32
 8005ffa:	408b      	lsls	r3, r1
 8005ffc:	fa22 fc06 	lsr.w	ip, r2, r6
 8006000:	ea4c 0c03 	orr.w	ip, ip, r3
 8006004:	fa07 f401 	lsl.w	r4, r7, r1
 8006008:	fa20 f306 	lsr.w	r3, r0, r6
 800600c:	40f7      	lsrs	r7, r6
 800600e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006012:	4323      	orrs	r3, r4
 8006014:	fa00 f801 	lsl.w	r8, r0, r1
 8006018:	fa1f fe8c 	uxth.w	lr, ip
 800601c:	fbb7 f0f9 	udiv	r0, r7, r9
 8006020:	0c1c      	lsrs	r4, r3, #16
 8006022:	fb09 7710 	mls	r7, r9, r0, r7
 8006026:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800602a:	fb00 f70e 	mul.w	r7, r0, lr
 800602e:	42a7      	cmp	r7, r4
 8006030:	fa02 f201 	lsl.w	r2, r2, r1
 8006034:	d90a      	bls.n	800604c <__udivmoddi4+0x1a4>
 8006036:	eb1c 0404 	adds.w	r4, ip, r4
 800603a:	f100 3aff 	add.w	sl, r0, #4294967295
 800603e:	f080 809b 	bcs.w	8006178 <__udivmoddi4+0x2d0>
 8006042:	42a7      	cmp	r7, r4
 8006044:	f240 8098 	bls.w	8006178 <__udivmoddi4+0x2d0>
 8006048:	3802      	subs	r0, #2
 800604a:	4464      	add	r4, ip
 800604c:	1be4      	subs	r4, r4, r7
 800604e:	b29f      	uxth	r7, r3
 8006050:	fbb4 f3f9 	udiv	r3, r4, r9
 8006054:	fb09 4413 	mls	r4, r9, r3, r4
 8006058:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800605c:	fb03 fe0e 	mul.w	lr, r3, lr
 8006060:	45a6      	cmp	lr, r4
 8006062:	d909      	bls.n	8006078 <__udivmoddi4+0x1d0>
 8006064:	eb1c 0404 	adds.w	r4, ip, r4
 8006068:	f103 37ff 	add.w	r7, r3, #4294967295
 800606c:	f080 8082 	bcs.w	8006174 <__udivmoddi4+0x2cc>
 8006070:	45a6      	cmp	lr, r4
 8006072:	d97f      	bls.n	8006174 <__udivmoddi4+0x2cc>
 8006074:	3b02      	subs	r3, #2
 8006076:	4464      	add	r4, ip
 8006078:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800607c:	eba4 040e 	sub.w	r4, r4, lr
 8006080:	fba0 e702 	umull	lr, r7, r0, r2
 8006084:	42bc      	cmp	r4, r7
 8006086:	4673      	mov	r3, lr
 8006088:	46b9      	mov	r9, r7
 800608a:	d363      	bcc.n	8006154 <__udivmoddi4+0x2ac>
 800608c:	d060      	beq.n	8006150 <__udivmoddi4+0x2a8>
 800608e:	b15d      	cbz	r5, 80060a8 <__udivmoddi4+0x200>
 8006090:	ebb8 0203 	subs.w	r2, r8, r3
 8006094:	eb64 0409 	sbc.w	r4, r4, r9
 8006098:	fa04 f606 	lsl.w	r6, r4, r6
 800609c:	fa22 f301 	lsr.w	r3, r2, r1
 80060a0:	431e      	orrs	r6, r3
 80060a2:	40cc      	lsrs	r4, r1
 80060a4:	e9c5 6400 	strd	r6, r4, [r5]
 80060a8:	2100      	movs	r1, #0
 80060aa:	e74c      	b.n	8005f46 <__udivmoddi4+0x9e>
 80060ac:	0862      	lsrs	r2, r4, #1
 80060ae:	0848      	lsrs	r0, r1, #1
 80060b0:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 80060b4:	0c0b      	lsrs	r3, r1, #16
 80060b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80060ba:	b28a      	uxth	r2, r1
 80060bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060c0:	fbb3 f1f6 	udiv	r1, r3, r6
 80060c4:	07e4      	lsls	r4, r4, #31
 80060c6:	46b4      	mov	ip, r6
 80060c8:	4637      	mov	r7, r6
 80060ca:	46b6      	mov	lr, r6
 80060cc:	231f      	movs	r3, #31
 80060ce:	fbb0 f0f6 	udiv	r0, r0, r6
 80060d2:	1bd2      	subs	r2, r2, r7
 80060d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80060d8:	e761      	b.n	8005f9e <__udivmoddi4+0xf6>
 80060da:	4661      	mov	r1, ip
 80060dc:	e714      	b.n	8005f08 <__udivmoddi4+0x60>
 80060de:	4610      	mov	r0, r2
 80060e0:	e728      	b.n	8005f34 <__udivmoddi4+0x8c>
 80060e2:	f1c3 0120 	rsb	r1, r3, #32
 80060e6:	fa20 f201 	lsr.w	r2, r0, r1
 80060ea:	409e      	lsls	r6, r3
 80060ec:	fa27 f101 	lsr.w	r1, r7, r1
 80060f0:	409f      	lsls	r7, r3
 80060f2:	433a      	orrs	r2, r7
 80060f4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80060f8:	fa1f fc86 	uxth.w	ip, r6
 80060fc:	fbb1 f7fe 	udiv	r7, r1, lr
 8006100:	fb0e 1017 	mls	r0, lr, r7, r1
 8006104:	0c11      	lsrs	r1, r2, #16
 8006106:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800610a:	fb07 f80c 	mul.w	r8, r7, ip
 800610e:	4588      	cmp	r8, r1
 8006110:	fa04 f403 	lsl.w	r4, r4, r3
 8006114:	d93a      	bls.n	800618c <__udivmoddi4+0x2e4>
 8006116:	1871      	adds	r1, r6, r1
 8006118:	f107 30ff 	add.w	r0, r7, #4294967295
 800611c:	d201      	bcs.n	8006122 <__udivmoddi4+0x27a>
 800611e:	4588      	cmp	r8, r1
 8006120:	d81f      	bhi.n	8006162 <__udivmoddi4+0x2ba>
 8006122:	eba1 0108 	sub.w	r1, r1, r8
 8006126:	fbb1 f8fe 	udiv	r8, r1, lr
 800612a:	fb08 f70c 	mul.w	r7, r8, ip
 800612e:	fb0e 1118 	mls	r1, lr, r8, r1
 8006132:	b292      	uxth	r2, r2
 8006134:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006138:	42ba      	cmp	r2, r7
 800613a:	d22f      	bcs.n	800619c <__udivmoddi4+0x2f4>
 800613c:	18b2      	adds	r2, r6, r2
 800613e:	f108 31ff 	add.w	r1, r8, #4294967295
 8006142:	d2c6      	bcs.n	80060d2 <__udivmoddi4+0x22a>
 8006144:	42ba      	cmp	r2, r7
 8006146:	d2c4      	bcs.n	80060d2 <__udivmoddi4+0x22a>
 8006148:	f1a8 0102 	sub.w	r1, r8, #2
 800614c:	4432      	add	r2, r6
 800614e:	e7c0      	b.n	80060d2 <__udivmoddi4+0x22a>
 8006150:	45f0      	cmp	r8, lr
 8006152:	d29c      	bcs.n	800608e <__udivmoddi4+0x1e6>
 8006154:	ebbe 0302 	subs.w	r3, lr, r2
 8006158:	eb67 070c 	sbc.w	r7, r7, ip
 800615c:	3801      	subs	r0, #1
 800615e:	46b9      	mov	r9, r7
 8006160:	e795      	b.n	800608e <__udivmoddi4+0x1e6>
 8006162:	eba6 0808 	sub.w	r8, r6, r8
 8006166:	4441      	add	r1, r8
 8006168:	1eb8      	subs	r0, r7, #2
 800616a:	fbb1 f8fe 	udiv	r8, r1, lr
 800616e:	fb08 f70c 	mul.w	r7, r8, ip
 8006172:	e7dc      	b.n	800612e <__udivmoddi4+0x286>
 8006174:	463b      	mov	r3, r7
 8006176:	e77f      	b.n	8006078 <__udivmoddi4+0x1d0>
 8006178:	4650      	mov	r0, sl
 800617a:	e767      	b.n	800604c <__udivmoddi4+0x1a4>
 800617c:	4608      	mov	r0, r1
 800617e:	e6fb      	b.n	8005f78 <__udivmoddi4+0xd0>
 8006180:	4434      	add	r4, r6
 8006182:	3802      	subs	r0, #2
 8006184:	e732      	b.n	8005fec <__udivmoddi4+0x144>
 8006186:	3f02      	subs	r7, #2
 8006188:	4432      	add	r2, r6
 800618a:	e71b      	b.n	8005fc4 <__udivmoddi4+0x11c>
 800618c:	eba1 0108 	sub.w	r1, r1, r8
 8006190:	4638      	mov	r0, r7
 8006192:	fbb1 f8fe 	udiv	r8, r1, lr
 8006196:	fb08 f70c 	mul.w	r7, r8, ip
 800619a:	e7c8      	b.n	800612e <__udivmoddi4+0x286>
 800619c:	4641      	mov	r1, r8
 800619e:	e798      	b.n	80060d2 <__udivmoddi4+0x22a>

080061a0 <_init>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	bf00      	nop
 80061a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a6:	bc08      	pop	{r3}
 80061a8:	469e      	mov	lr, r3
 80061aa:	4770      	bx	lr

080061ac <_fini>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr
