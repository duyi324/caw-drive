
build/debug/CawDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f30  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  080060f8  080060f8  000070f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800691c  0800691c  00008024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800691c  0800691c  0000791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006924  08006924  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006924  08006924  00007924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006928  08006928  00007928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800692c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000028  08006950  00008028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08006950  00008660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 12 .comment      000000b2  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028f75  00000000  00000000  00008106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005754  00000000  00000000  0003107b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00011332  00000000  00000000  000367cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001898  00000000  00000000  00047b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001286  00000000  00000000  000493a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eea6  00000000  00000000  0004a626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008027  00000000  00000000  000694cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004150  00000000  00000000  000714f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000018c  00000000  00000000  00075644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  000757d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  000759c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b80c 	b.w	8000b44 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f005 f958 	bl	8005de8 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__do_global_dtors_aux>:
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	4c05      	ldr	r4, [pc, #20]	@ (8000b60 <__do_global_dtors_aux+0x18>)
 8000b4c:	7823      	ldrb	r3, [r4, #0]
 8000b4e:	b933      	cbnz	r3, 8000b5e <__do_global_dtors_aux+0x16>
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <__do_global_dtors_aux+0x1c>)
 8000b52:	b113      	cbz	r3, 8000b5a <__do_global_dtors_aux+0x12>
 8000b54:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <__do_global_dtors_aux+0x20>)
 8000b56:	f3af 8000 	nop.w
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	7023      	strb	r3, [r4, #0]
 8000b5e:	bd10      	pop	{r4, pc}
 8000b60:	20000028 	.word	0x20000028
 8000b64:	00000000 	.word	0x00000000
 8000b68:	080060e0 	.word	0x080060e0

08000b6c <frame_dummy>:
 8000b6c:	b508      	push	{r3, lr}
 8000b6e:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <frame_dummy+0x10>)
 8000b70:	b11b      	cbz	r3, 8000b7a <frame_dummy+0xe>
 8000b72:	4903      	ldr	r1, [pc, #12]	@ (8000b80 <frame_dummy+0x14>)
 8000b74:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <frame_dummy+0x18>)
 8000b76:	f3af 8000 	nop.w
 8000b7a:	bd08      	pop	{r3, pc}
 8000b7c:	00000000 	.word	0x00000000
 8000b80:	2000002c 	.word	0x2000002c
 8000b84:	080060e0 	.word	0x080060e0

08000b88 <VF_step>:
/* External outputs (root outports fed by signals with default storage) */
ExtY rtY;

/* Model step function */
void VF_step(void)
{
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	ed2d 8b06 	vpush	{d8-d10}
  /* Sum: '<S2>/Sum' incorporates:
   *  Gain: '<S2>/Gain'
   *  Inport: '<Root>/Freq'
   *  UnitDelay: '<S2>/Unit Delay'
   */
  rtb_Sum = 0.000628318521F * rtU.Freq + rtDW.UnitDelay_DSTATE;
 8000b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf8 <VF_step+0x170>)
 8000b90:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b94:	eddf 7a59 	vldr	s15, [pc, #356]	@ 8000cfc <VF_step+0x174>
 8000b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b9c:	ee17 0a90 	vmov	r0, s15
 8000ba0:	f7ff fc76 	bl	8000490 <__aeabi_f2d>
 8000ba4:	4b56      	ldr	r3, [pc, #344]	@ (8000d00 <VF_step+0x178>)
 8000ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000baa:	f7ff fb13 	bl	80001d4 <__adddf3>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	460d      	mov	r5, r1
   *  Constant: '<S5>/Constant'
   *  Constant: '<S5>/Constant1'
   *  RelationalOperator: '<S5>/Relational Operator'
   *  RelationalOperator: '<S5>/Relational Operator1'
   */
  if (rtb_Sum > 6.2831853071795862) {
 8000bb2:	a34f      	add	r3, pc, #316	@ (adr r3, 8000cf0 <VF_step+0x168>)
 8000bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb8:	f7ff ff52 	bl	8000a60 <__aeabi_dcmpgt>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	f000 8081 	beq.w	8000cc4 <VF_step+0x13c>
     *  ActionPort: '<S8>/Action Port'
     */
    /* Sum: '<S8>/Sum' incorporates:
     *  Constant: '<S8>/Constant'
     */
    rtb_Sum -= 6.2831853071795862;
 8000bc2:	a34b      	add	r3, pc, #300	@ (adr r3, 8000cf0 <VF_step+0x168>)
 8000bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc8:	4620      	mov	r0, r4
 8000bca:	4629      	mov	r1, r5
 8000bcc:	f7ff fb00 	bl	80001d0 <__aeabi_dsub>
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	460d      	mov	r5, r1
  /* End of If: '<S5>/If' */

  /* Trigonometry: '<S1>/Cos' incorporates:
   *  DataTypeConversion: '<S1>/Data Type Conversion1'
   */
  rtb_Sum_m = arm_cos_f32((real32_T)rtb_Sum);
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	f7ff ff4c 	bl	8000a74 <__aeabi_d2f>
 8000bdc:	ee08 0a10 	vmov	s16, r0
 8000be0:	eeb0 0a48 	vmov.f32	s0, s16
 8000be4:	f005 f810 	bl	8005c08 <arm_cos_f32>
 8000be8:	eeb0 9a40 	vmov.f32	s18, s0

  /* Trigonometry: '<S1>/Sin' incorporates:
   *  DataTypeConversion: '<S1>/Data Type Conversion'
   */
  rtb_Sum1_g = arm_sin_f32((real32_T)rtb_Sum);
 8000bec:	eeb0 0a48 	vmov.f32	s0, s16
 8000bf0:	f004 ffc4 	bl	8005b7c <arm_sin_f32>
   *  Inport: '<Root>/ud'
   *  Inport: '<Root>/uq'
   *  Product: '<S4>/Product'
   *  Product: '<S4>/Product1'
   */
  rtb_Add = rtU.ud * rtb_Sum_m - rtU.uq * rtb_Sum1_g;
 8000bf4:	4e40      	ldr	r6, [pc, #256]	@ (8000cf8 <VF_step+0x170>)
 8000bf6:	edd6 7a00 	vldr	s15, [r6]
 8000bfa:	ee67 8a89 	vmul.f32	s17, s15, s18
 8000bfe:	ed96 7a01 	vldr	s14, [r6, #4]
 8000c02:	ee67 6a00 	vmul.f32	s13, s14, s0
 8000c06:	ee78 8ae6 	vsub.f32	s17, s17, s13

  /* Gain: '<S10>/Gain' */
  rtb_Min = -0.5F * rtb_Add;
 8000c0a:	eebe aa00 	vmov.f32	s20, #224	@ 0xbf000000 -0.5
 8000c0e:	ee28 8a8a 	vmul.f32	s16, s17, s20
   *  Inport: '<Root>/uq'
   *  Product: '<S4>/Product2'
   *  Product: '<S4>/Product3'
   *  Sum: '<S4>/Add1'
   */
  rtb_Sum1_g = (rtU.ud * rtb_Sum1_g + rtU.uq * rtb_Sum_m) * 0.866025388F;
 8000c12:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000c16:	ee27 7a09 	vmul.f32	s14, s14, s18
 8000c1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c1e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000d04 <VF_step+0x17c>
 8000c22:	ee67 7a87 	vmul.f32	s15, s15, s14

  /* Sum: '<S10>/Sum' */
  rtb_Sum_m = rtb_Min + rtb_Sum1_g;
 8000c26:	ee78 9a27 	vadd.f32	s19, s16, s15

  /* Sum: '<S10>/Sum1' */
  rtb_Sum1_g = rtb_Min - rtb_Sum1_g;
 8000c2a:	ee38 8a67 	vsub.f32	s16, s16, s15
  /* Gain: '<S9>/Gain' incorporates:
   *  MinMax: '<S9>/Max'
   *  MinMax: '<S9>/Min'
   *  Sum: '<S9>/Sum'
   */
  rtb_Min = (fminf(fminf(rtb_Add, rtb_Sum_m), rtb_Sum1_g) + fmaxf(fmaxf(rtb_Add,
 8000c2e:	eef0 0a69 	vmov.f32	s1, s19
 8000c32:	eeb0 0a68 	vmov.f32	s0, s17
 8000c36:	f005 f893 	bl	8005d60 <fminf>
 8000c3a:	eef0 0a48 	vmov.f32	s1, s16
 8000c3e:	f005 f88f 	bl	8005d60 <fminf>
 8000c42:	eeb0 9a40 	vmov.f32	s18, s0
 8000c46:	eef0 0a69 	vmov.f32	s1, s19
 8000c4a:	eeb0 0a68 	vmov.f32	s0, s17
 8000c4e:	f005 f85f 	bl	8005d10 <fmaxf>
 8000c52:	eef0 0a48 	vmov.f32	s1, s16
 8000c56:	f005 f85b 	bl	8005d10 <fmaxf>
 8000c5a:	ee39 0a00 	vadd.f32	s0, s18, s0
 8000c5e:	ee20 0a0a 	vmul.f32	s0, s0, s20
   *  Inport: '<Root>/Vbus'
   *  Product: '<S3>/Divide'
   *  Sum: '<S3>/Sum'
   *  Sum: '<S3>/Sum1'
   */
  rtY.tABC[0] = (-(rtb_Min + rtb_Add) / rtU.Vbus + 0.5F) * 8000.0F;
 8000c62:	ee78 8a80 	vadd.f32	s17, s17, s0
 8000c66:	eef1 8a68 	vneg.f32	s17, s17
 8000c6a:	ed96 6a03 	vldr	s12, [r6, #12]
 8000c6e:	eec8 7a86 	vdiv.f32	s15, s17, s12
 8000c72:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8000c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000c7a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000d08 <VF_step+0x180>
 8000c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c82:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <VF_step+0x184>)
 8000c84:	edc3 7a00 	vstr	s15, [r3]
  rtY.tABC[1] = (-(rtb_Min + rtb_Sum_m) / rtU.Vbus + 0.5F) * 8000.0F;
 8000c88:	ee79 9a80 	vadd.f32	s19, s19, s0
 8000c8c:	eef1 9a69 	vneg.f32	s19, s19
 8000c90:	eec9 7a86 	vdiv.f32	s15, s19, s12
 8000c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c9c:	edc3 7a01 	vstr	s15, [r3, #4]
  rtY.tABC[2] = (-(rtb_Min + rtb_Sum1_g) / rtU.Vbus + 0.5F) * 8000.0F;
 8000ca0:	ee38 8a00 	vadd.f32	s16, s16, s0
 8000ca4:	eeb1 8a48 	vneg.f32	s16, s16
 8000ca8:	eec8 7a06 	vdiv.f32	s15, s16, s12
 8000cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb4:	edc3 7a02 	vstr	s15, [r3, #8]

  /* Update for UnitDelay: '<S2>/Unit Delay' */
  rtDW.UnitDelay_DSTATE = rtb_Sum;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <VF_step+0x178>)
 8000cba:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000cbe:	ecbd 8b06 	vpop	{d8-d10}
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
  } else if (rtb_Sum < 0.0) {
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	f7ff feaa 	bl	8000a24 <__aeabi_dcmplt>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	f43f af7f 	beq.w	8000bd4 <VF_step+0x4c>
    rtb_Sum += 6.2831853071795862;
 8000cd6:	a306      	add	r3, pc, #24	@ (adr r3, 8000cf0 <VF_step+0x168>)
 8000cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	f7ff fa78 	bl	80001d4 <__adddf3>
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	e774      	b.n	8000bd4 <VF_step+0x4c>
 8000cea:	bf00      	nop
 8000cec:	f3af 8000 	nop.w
 8000cf0:	54442d18 	.word	0x54442d18
 8000cf4:	401921fb 	.word	0x401921fb
 8000cf8:	20000050 	.word	0x20000050
 8000cfc:	3a24b5be 	.word	0x3a24b5be
 8000d00:	20000060 	.word	0x20000060
 8000d04:	3f5db3d7 	.word	0x3f5db3d7
 8000d08:	45fa0000 	.word	0x45fa0000
 8000d0c:	20000044 	.word	0x20000044

08000d10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d10:	b510      	push	{r4, lr}
 8000d12:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d14:	2400      	movs	r4, #0
 8000d16:	9408      	str	r4, [sp, #32]
 8000d18:	9409      	str	r4, [sp, #36]	@ 0x24
 8000d1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8000d1c:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d1e:	2220      	movs	r2, #32
 8000d20:	4621      	mov	r1, r4
 8000d22:	4668      	mov	r0, sp
 8000d24:	f004 ffba 	bl	8005c9c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d28:	4820      	ldr	r0, [pc, #128]	@ (8000dac <MX_ADC1_Init+0x9c>)
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <MX_ADC1_Init+0xa0>)
 8000d2c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d32:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d34:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d36:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d38:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d3a:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <MX_ADC1_Init+0xa4>)
 8000d42:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d44:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d4a:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d4e:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d50:	f001 f8ee 	bl	8001f30 <HAL_ADC_Init>
 8000d54:	bb00      	cbnz	r0, 8000d98 <MX_ADC1_Init+0x88>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d56:	230a      	movs	r3, #10
 8000d58:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	a908      	add	r1, sp, #32
 8000d64:	4811      	ldr	r0, [pc, #68]	@ (8000dac <MX_ADC1_Init+0x9c>)
 8000d66:	f001 fab5 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000d6a:	b9c0      	cbnz	r0, 8000d9e <MX_ADC1_Init+0x8e>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 8000d70:	2201      	movs	r2, #1
 8000d72:	9201      	str	r2, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000d74:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d76:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000d78:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000d7c:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000d7e:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000d80:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d84:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000d88:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d8a:	4669      	mov	r1, sp
 8000d8c:	4807      	ldr	r0, [pc, #28]	@ (8000dac <MX_ADC1_Init+0x9c>)
 8000d8e:	f001 fbfd 	bl	800258c <HAL_ADCEx_InjectedConfigChannel>
 8000d92:	b938      	cbnz	r0, 8000da4 <MX_ADC1_Init+0x94>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d94:	b00c      	add	sp, #48	@ 0x30
 8000d96:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d98:	f000 fee0 	bl	8001b5c <Error_Handler>
 8000d9c:	e7db      	b.n	8000d56 <MX_ADC1_Init+0x46>
    Error_Handler();
 8000d9e:	f000 fedd 	bl	8001b5c <Error_Handler>
 8000da2:	e7e3      	b.n	8000d6c <MX_ADC1_Init+0x5c>
    Error_Handler();
 8000da4:	f000 feda 	bl	8001b5c <Error_Handler>
}
 8000da8:	e7f4      	b.n	8000d94 <MX_ADC1_Init+0x84>
 8000daa:	bf00      	nop
 8000dac:	200000f8 	.word	0x200000f8
 8000db0:	40012000 	.word	0x40012000
 8000db4:	0f000001 	.word	0x0f000001

08000db8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000db8:	b510      	push	{r4, lr}
 8000dba:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dbc:	2400      	movs	r4, #0
 8000dbe:	9408      	str	r4, [sp, #32]
 8000dc0:	9409      	str	r4, [sp, #36]	@ 0x24
 8000dc2:	940a      	str	r4, [sp, #40]	@ 0x28
 8000dc4:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	4621      	mov	r1, r4
 8000dca:	4668      	mov	r0, sp
 8000dcc:	f004 ff66 	bl	8005c9c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000dd0:	4820      	ldr	r0, [pc, #128]	@ (8000e54 <MX_ADC2_Init+0x9c>)
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_ADC2_Init+0xa0>)
 8000dd4:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dda:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000dde:	6104      	str	r4, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000de0:	7604      	strb	r4, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de2:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de6:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <MX_ADC2_Init+0xa4>)
 8000dea:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dec:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000df2:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df6:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df8:	f001 f89a 	bl	8001f30 <HAL_ADC_Init>
 8000dfc:	bb00      	cbnz	r0, 8000e40 <MX_ADC2_Init+0x88>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dfe:	2309      	movs	r3, #9
 8000e00:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e06:	2300      	movs	r3, #0
 8000e08:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e0a:	a908      	add	r1, sp, #32
 8000e0c:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <MX_ADC2_Init+0x9c>)
 8000e0e:	f001 fa61 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000e12:	b9c0      	cbnz	r0, 8000e46 <MX_ADC2_Init+0x8e>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 8000e18:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000e1a:	9304      	str	r3, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000e20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e24:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000e26:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000e28:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e2c:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000e30:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e32:	4669      	mov	r1, sp
 8000e34:	4807      	ldr	r0, [pc, #28]	@ (8000e54 <MX_ADC2_Init+0x9c>)
 8000e36:	f001 fba9 	bl	800258c <HAL_ADCEx_InjectedConfigChannel>
 8000e3a:	b938      	cbnz	r0, 8000e4c <MX_ADC2_Init+0x94>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e3c:	b00c      	add	sp, #48	@ 0x30
 8000e3e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e40:	f000 fe8c 	bl	8001b5c <Error_Handler>
 8000e44:	e7db      	b.n	8000dfe <MX_ADC2_Init+0x46>
    Error_Handler();
 8000e46:	f000 fe89 	bl	8001b5c <Error_Handler>
 8000e4a:	e7e3      	b.n	8000e14 <MX_ADC2_Init+0x5c>
    Error_Handler();
 8000e4c:	f000 fe86 	bl	8001b5c <Error_Handler>
}
 8000e50:	e7f4      	b.n	8000e3c <MX_ADC2_Init+0x84>
 8000e52:	bf00      	nop
 8000e54:	200000b0 	.word	0x200000b0
 8000e58:	40012100 	.word	0x40012100
 8000e5c:	0f000001 	.word	0x0f000001

08000e60 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e60:	b510      	push	{r4, lr}
 8000e62:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e64:	2400      	movs	r4, #0
 8000e66:	9408      	str	r4, [sp, #32]
 8000e68:	9409      	str	r4, [sp, #36]	@ 0x24
 8000e6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8000e6c:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e6e:	2220      	movs	r2, #32
 8000e70:	4621      	mov	r1, r4
 8000e72:	4668      	mov	r0, sp
 8000e74:	f004 ff12 	bl	8005c9c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e78:	4820      	ldr	r0, [pc, #128]	@ (8000efc <MX_ADC3_Init+0x9c>)
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <MX_ADC3_Init+0xa0>)
 8000e7c:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e82:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	6084      	str	r4, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000e86:	6104      	str	r4, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e88:	7604      	strb	r4, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e8a:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e8e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_ADC3_Init+0xa4>)
 8000e92:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e94:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	61c3      	str	r3, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e9a:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9e:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ea0:	f001 f846 	bl	8001f30 <HAL_ADC_Init>
 8000ea4:	bb08      	cbnz	r0, 8000eea <MX_ADC3_Init+0x8a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eb2:	a908      	add	r1, sp, #32
 8000eb4:	4811      	ldr	r0, [pc, #68]	@ (8000efc <MX_ADC3_Init+0x9c>)
 8000eb6:	f001 fa0d 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000eba:	b9c8      	cbnz	r0, 8000ef0 <MX_ADC3_Init+0x90>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000ec4:	9304      	str	r3, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000eca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ece:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000ed0:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000ed2:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ed6:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000eda:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000edc:	4669      	mov	r1, sp
 8000ede:	4807      	ldr	r0, [pc, #28]	@ (8000efc <MX_ADC3_Init+0x9c>)
 8000ee0:	f001 fb54 	bl	800258c <HAL_ADCEx_InjectedConfigChannel>
 8000ee4:	b938      	cbnz	r0, 8000ef6 <MX_ADC3_Init+0x96>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ee6:	b00c      	add	sp, #48	@ 0x30
 8000ee8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000eea:	f000 fe37 	bl	8001b5c <Error_Handler>
 8000eee:	e7da      	b.n	8000ea6 <MX_ADC3_Init+0x46>
    Error_Handler();
 8000ef0:	f000 fe34 	bl	8001b5c <Error_Handler>
 8000ef4:	e7e2      	b.n	8000ebc <MX_ADC3_Init+0x5c>
    Error_Handler();
 8000ef6:	f000 fe31 	bl	8001b5c <Error_Handler>
}
 8000efa:	e7f4      	b.n	8000ee6 <MX_ADC3_Init+0x86>
 8000efc:	20000068 	.word	0x20000068
 8000f00:	40012200 	.word	0x40012200
 8000f04:	0f000001 	.word	0x0f000001

08000f08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8000f12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000f14:	930c      	str	r3, [sp, #48]	@ 0x30
 8000f16:	930d      	str	r3, [sp, #52]	@ 0x34
  if(adcHandle->Instance==ADC1)
 8000f18:	6803      	ldr	r3, [r0, #0]
 8000f1a:	4a52      	ldr	r2, [pc, #328]	@ (8001064 <HAL_ADC_MspInit+0x15c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d007      	beq.n	8000f30 <HAL_ADC_MspInit+0x28>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000f20:	4a51      	ldr	r2, [pc, #324]	@ (8001068 <HAL_ADC_MspInit+0x160>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d03d      	beq.n	8000fa2 <HAL_ADC_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000f26:	4a51      	ldr	r2, [pc, #324]	@ (800106c <HAL_ADC_MspInit+0x164>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d073      	beq.n	8001014 <HAL_ADC_MspInit+0x10c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f2c:	b00f      	add	sp, #60	@ 0x3c
 8000f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f30:	2400      	movs	r4, #0
 8000f32:	9401      	str	r4, [sp, #4]
 8000f34:	4b4e      	ldr	r3, [pc, #312]	@ (8001070 <HAL_ADC_MspInit+0x168>)
 8000f36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f40:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000f44:	9201      	str	r2, [sp, #4]
 8000f46:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f48:	9402      	str	r4, [sp, #8]
 8000f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f4c:	f042 0204 	orr.w	r2, r2, #4
 8000f50:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f54:	f002 0204 	and.w	r2, r2, #4
 8000f58:	9202      	str	r2, [sp, #8]
 8000f5a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	9403      	str	r4, [sp, #12]
 8000f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f60:	f042 0201 	orr.w	r2, r2, #1
 8000f64:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	9303      	str	r3, [sp, #12]
 8000f6e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f70:	2701      	movs	r7, #1
 8000f72:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f74:	2603      	movs	r6, #3
 8000f76:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f78:	ad09      	add	r5, sp, #36	@ 0x24
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	483d      	ldr	r0, [pc, #244]	@ (8001074 <HAL_ADC_MspInit+0x16c>)
 8000f7e:	f001 ff77 	bl	8002e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f82:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f84:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	4629      	mov	r1, r5
 8000f8a:	483b      	ldr	r0, [pc, #236]	@ (8001078 <HAL_ADC_MspInit+0x170>)
 8000f8c:	f001 ff70 	bl	8002e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f90:	4622      	mov	r2, r4
 8000f92:	4621      	mov	r1, r4
 8000f94:	2012      	movs	r0, #18
 8000f96:	f001 fcf7 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f9a:	2012      	movs	r0, #18
 8000f9c:	f001 fd04 	bl	80029a8 <HAL_NVIC_EnableIRQ>
 8000fa0:	e7c4      	b.n	8000f2c <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	9404      	str	r4, [sp, #16]
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <HAL_ADC_MspInit+0x168>)
 8000fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fae:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000fb2:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000fb6:	9204      	str	r2, [sp, #16]
 8000fb8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	9405      	str	r4, [sp, #20]
 8000fbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fc6:	f002 0201 	and.w	r2, r2, #1
 8000fca:	9205      	str	r2, [sp, #20]
 8000fcc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	9406      	str	r4, [sp, #24]
 8000fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fd2:	f042 0202 	orr.w	r2, r2, #2
 8000fd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	9306      	str	r3, [sp, #24]
 8000fe0:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fe2:	2702      	movs	r7, #2
 8000fe4:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe6:	2603      	movs	r6, #3
 8000fe8:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	ad09      	add	r5, sp, #36	@ 0x24
 8000fec:	4629      	mov	r1, r5
 8000fee:	4822      	ldr	r0, [pc, #136]	@ (8001078 <HAL_ADC_MspInit+0x170>)
 8000ff0:	f001 ff3e 	bl	8002e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ff4:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	481f      	ldr	r0, [pc, #124]	@ (800107c <HAL_ADC_MspInit+0x174>)
 8000ffe:	f001 ff37 	bl	8002e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001002:	4622      	mov	r2, r4
 8001004:	4621      	mov	r1, r4
 8001006:	2012      	movs	r0, #18
 8001008:	f001 fcbe 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800100c:	2012      	movs	r0, #18
 800100e:	f001 fccb 	bl	80029a8 <HAL_NVIC_EnableIRQ>
 8001012:	e78b      	b.n	8000f2c <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001014:	2400      	movs	r4, #0
 8001016:	9407      	str	r4, [sp, #28]
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_ADC_MspInit+0x168>)
 800101a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800101c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001020:	645a      	str	r2, [r3, #68]	@ 0x44
 8001022:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001024:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001028:	9207      	str	r2, [sp, #28]
 800102a:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	9408      	str	r4, [sp, #32]
 800102e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001030:	f042 0201 	orr.w	r2, r2, #1
 8001034:	631a      	str	r2, [r3, #48]	@ 0x30
 8001036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	9308      	str	r3, [sp, #32]
 800103e:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001040:	230c      	movs	r3, #12
 8001042:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001044:	2303      	movs	r3, #3
 8001046:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	a909      	add	r1, sp, #36	@ 0x24
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <HAL_ADC_MspInit+0x170>)
 800104c:	f001 ff10 	bl	8002e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001050:	4622      	mov	r2, r4
 8001052:	4621      	mov	r1, r4
 8001054:	2012      	movs	r0, #18
 8001056:	f001 fc97 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800105a:	2012      	movs	r0, #18
 800105c:	f001 fca4 	bl	80029a8 <HAL_NVIC_EnableIRQ>
}
 8001060:	e764      	b.n	8000f2c <HAL_ADC_MspInit+0x24>
 8001062:	bf00      	nop
 8001064:	40012000 	.word	0x40012000
 8001068:	40012100 	.word	0x40012100
 800106c:	40012200 	.word	0x40012200
 8001070:	40023800 	.word	0x40023800
 8001074:	40020800 	.word	0x40020800
 8001078:	40020000 	.word	0x40020000
 800107c:	40020400 	.word	0x40020400

08001080 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001080:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001082:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <MX_CAN1_Init+0x30>)
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_CAN1_Init+0x34>)
 8001086:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 8001088:	2310      	movs	r3, #16
 800108a:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800108c:	2300      	movs	r3, #0
 800108e:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001090:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001092:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001094:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001096:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001098:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800109a:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800109c:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800109e:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010a0:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010a2:	f001 fb77 	bl	8002794 <HAL_CAN_Init>
 80010a6:	b900      	cbnz	r0, 80010aa <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80010a8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010aa:	f000 fd57 	bl	8001b5c <Error_Handler>
}
 80010ae:	e7fb      	b.n	80010a8 <MX_CAN1_Init+0x28>
 80010b0:	20000140 	.word	0x20000140
 80010b4:	40006400 	.word	0x40006400

080010b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010b8:	b500      	push	{lr}
 80010ba:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	2300      	movs	r3, #0
 80010be:	9303      	str	r3, [sp, #12]
 80010c0:	9304      	str	r3, [sp, #16]
 80010c2:	9305      	str	r3, [sp, #20]
 80010c4:	9306      	str	r3, [sp, #24]
 80010c6:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 80010c8:	6802      	ldr	r2, [r0, #0]
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_CAN_MspInit+0x68>)
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d002      	beq.n	80010d6 <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010d0:	b009      	add	sp, #36	@ 0x24
 80010d2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010d6:	2100      	movs	r1, #0
 80010d8:	9101      	str	r1, [sp, #4]
 80010da:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 80010de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010e0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80010e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80010e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010e8:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 80010ec:	9201      	str	r2, [sp, #4]
 80010ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	9102      	str	r1, [sp, #8]
 80010f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010f4:	f042 0202 	orr.w	r2, r2, #2
 80010f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001104:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001108:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001112:	2309      	movs	r3, #9
 8001114:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	a903      	add	r1, sp, #12
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <HAL_CAN_MspInit+0x6c>)
 800111a:	f001 fea9 	bl	8002e70 <HAL_GPIO_Init>
}
 800111e:	e7d7      	b.n	80010d0 <HAL_CAN_MspInit+0x18>
 8001120:	40006400 	.word	0x40006400
 8001124:	40020400 	.word	0x40020400

08001128 <controller_init>:

float load_data[5];
static uint8_t g_tmp[24] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x7f};

void controller_init(void) {
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	b087      	sub	sp, #28
  /// 初始化串口
  dev_usart_init();
 800112c:	f000 f9f2 	bl	8001514 <dev_usart_init>

  /// 配置DRV8323

  // 使用PWM_MODE_3X控制时将互补引脚拉低
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001130:	4c3b      	ldr	r4, [pc, #236]	@ (8001220 <controller_init+0xf8>)
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001138:	4620      	mov	r0, r4
 800113a:	f001 ff90 	bl	800305e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001144:	4620      	mov	r0, r4
 8001146:	f001 ff8a 	bl	800305e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001150:	4620      	mov	r0, r4
 8001152:	f001 ff84 	bl	800305e <HAL_GPIO_WritePin>

  drv8323_init(&g_driver, &hspi3);
 8001156:	4e33      	ldr	r6, [pc, #204]	@ (8001224 <controller_init+0xfc>)
 8001158:	4933      	ldr	r1, [pc, #204]	@ (8001228 <controller_init+0x100>)
 800115a:	4630      	mov	r0, r6
 800115c:	f000 fa72 	bl	8001644 <drv8323_init>
  drv8323_calibrate(&g_driver);
 8001160:	4630      	mov	r0, r6
 8001162:	f000 fb1b 	bl	800179c <drv8323_calibrate>
  HAL_Delay(10);
 8001166:	200a      	movs	r0, #10
 8001168:	f000 fe34 	bl	8001dd4 <HAL_Delay>
  drv8323_write_dcr(&g_driver, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0,
 800116c:	2501      	movs	r5, #1
 800116e:	9505      	str	r5, [sp, #20]
 8001170:	2400      	movs	r4, #0
 8001172:	9404      	str	r4, [sp, #16]
 8001174:	9403      	str	r4, [sp, #12]
 8001176:	9402      	str	r4, [sp, #8]
 8001178:	9401      	str	r4, [sp, #4]
 800117a:	9500      	str	r5, [sp, #0]
 800117c:	4623      	mov	r3, r4
 800117e:	462a      	mov	r2, r5
 8001180:	4621      	mov	r1, r4
 8001182:	4630      	mov	r0, r6
 8001184:	f000 fa90 	bl	80016a8 <drv8323_write_dcr>
                    0x0, 0x0, 0x1);
  HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f000 fe23 	bl	8001dd4 <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1,
 800118e:	2703      	movs	r7, #3
 8001190:	9705      	str	r7, [sp, #20]
 8001192:	9504      	str	r5, [sp, #16]
 8001194:	9503      	str	r5, [sp, #12]
 8001196:	9502      	str	r5, [sp, #8]
 8001198:	9401      	str	r4, [sp, #4]
 800119a:	9700      	str	r7, [sp, #0]
 800119c:	4623      	mov	r3, r4
 800119e:	462a      	mov	r2, r5
 80011a0:	4621      	mov	r1, r4
 80011a2:	4630      	mov	r0, r6
 80011a4:	f000 fac2 	bl	800172c <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 80011a8:	200a      	movs	r0, #10
 80011aa:	f000 fe13 	bl	8001dd4 <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0,
 80011ae:	9705      	str	r7, [sp, #20]
 80011b0:	9404      	str	r4, [sp, #16]
 80011b2:	9403      	str	r4, [sp, #12]
 80011b4:	9402      	str	r4, [sp, #8]
 80011b6:	9501      	str	r5, [sp, #4]
 80011b8:	9700      	str	r7, [sp, #0]
 80011ba:	4623      	mov	r3, r4
 80011bc:	462a      	mov	r2, r5
 80011be:	4621      	mov	r1, r4
 80011c0:	4630      	mov	r0, r6
 80011c2:	f000 fab3 	bl	800172c <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 80011c6:	200a      	movs	r0, #10
 80011c8:	f000 fe04 	bl	8001dd4 <HAL_Delay>
  drv8323_write_ocpcr(&g_driver, TRETRY_50US, DEADTIME_50NS, OCP_NONE,
 80011cc:	230f      	movs	r3, #15
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	9700      	str	r7, [sp, #0]
 80011d2:	463b      	mov	r3, r7
 80011d4:	4622      	mov	r2, r4
 80011d6:	4629      	mov	r1, r5
 80011d8:	4630      	mov	r0, r6
 80011da:	f000 fa90 	bl	80016fe <drv8323_write_ocpcr>
                      OCP_DEG_8US, VDS_LVL_1_88);
  drv8323_enable_gd(&g_driver);
 80011de:	4630      	mov	r0, r6
 80011e0:	f000 facf 	bl	8001782 <drv8323_enable_gd>

  HAL_Delay(10);
 80011e4:	200a      	movs	r0, #10
 80011e6:	f000 fdf5 	bl	8001dd4 <HAL_Delay>

  // rtU.SpeedRef = 800;

  rtU.Vbus = vbus_get();
 80011ea:	f004 fc7d 	bl	8005ae8 <vbus_get>
 80011ee:	4c0f      	ldr	r4, [pc, #60]	@ (800122c <controller_init+0x104>)
 80011f0:	ed84 0a03 	vstr	s0, [r4, #12]

  current_init();
 80011f4:	f000 f950 	bl	8001498 <current_init>
  vbus_init();
 80011f8:	f004 fc6e 	bl	8005ad8 <vbus_init>
  hall_init();
 80011fc:	f000 fb76 	bl	80018ec <hall_init>
  pwm_init();
 8001200:	f000 fd26 	bl	8001c50 <pwm_init>

  // rtU.Motor_OnOff = 1;

  rtU.ud = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	6023      	str	r3, [r4, #0]
  rtU.uq = 12;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <controller_init+0x108>)
 800120a:	6063      	str	r3, [r4, #4]
  rtU.Freq = 4;
 800120c:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001210:	60a3      	str	r3, [r4, #8]

  pwm_start();
 8001212:	f000 fd33 	bl	8001c7c <pwm_start>

  state_set(STATE_RUN);
 8001216:	2002      	movs	r0, #2
 8001218:	f000 fdaa 	bl	8001d70 <state_set>
}
 800121c:	b007      	add	sp, #28
 800121e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001220:	40020400 	.word	0x40020400
 8001224:	2000017c 	.word	0x2000017c
 8001228:	20000418 	.word	0x20000418
 800122c:	20000050 	.word	0x20000050
 8001230:	41400000 	.word	0x41400000

08001234 <controller_step>:

void controller_step(void) {
 8001234:	b508      	push	{r3, lr}
  // float temp = temp_get();
  rtU.Vbus = vbus_get();
 8001236:	f004 fc57 	bl	8005ae8 <vbus_get>
 800123a:	4b02      	ldr	r3, [pc, #8]	@ (8001244 <controller_step+0x10>)
 800123c:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8001240:	bd08      	pop	{r3, pc}
 8001242:	bf00      	nop
 8001244:	20000050 	.word	0x20000050

08001248 <core_callback>:

void core_callback() {
 8001248:	b510      	push	{r4, lr}
 800124a:	b084      	sub	sp, #16
  // rtU.theta = hall_get_theta();
  // rtU.SpeedFd = hall_get_speed();

  float current[3];

  current_get(current);
 800124c:	a801      	add	r0, sp, #4
 800124e:	f000 f93b 	bl	80014c8 <current_get>

  // rtU.ia = current[0];
  // rtU.ib = current[1];
  // rtU.ic = current[2];
  VF_step();
 8001252:	f7ff fc99 	bl	8000b88 <VF_step>

  TIM1->CCR1 = rtY.tABC[0];
 8001256:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <core_callback+0x70>)
 8001258:	edd2 6a00 	vldr	s13, [r2]
 800125c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <core_callback+0x74>)
 8001262:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  TIM1->CCR2 = rtY.tABC[1];
 8001266:	ed92 7a01 	vldr	s14, [r2, #4]
 800126a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800126e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  TIM1->CCR3 = rtY.tABC[2];
 8001272:	edd2 7a02 	vldr	s15, [r2, #8]
 8001276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  load_data[0] = current[0];
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <core_callback+0x78>)
 8001280:	9a01      	ldr	r2, [sp, #4]
 8001282:	601a      	str	r2, [r3, #0]
  load_data[1] = current[1];
 8001284:	9a02      	ldr	r2, [sp, #8]
 8001286:	605a      	str	r2, [r3, #4]
  load_data[2] = current[2];
 8001288:	9a03      	ldr	r2, [sp, #12]
 800128a:	609a      	str	r2, [r3, #8]
  load_data[3] = rtY.tABC[0];
 800128c:	edc3 6a03 	vstr	s13, [r3, #12]
  load_data[4] = rtY.tABC[1];
 8001290:	ed83 7a04 	vstr	s14, [r3, #16]
  memcpy(g_tmp, (uint8_t *)load_data, sizeof(load_data));
 8001294:	4c0b      	ldr	r4, [pc, #44]	@ (80012c4 <core_callback+0x7c>)
 8001296:	46a6      	mov	lr, r4
 8001298:	469c      	mov	ip, r3
 800129a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800129e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80012a2:	f8dc 3000 	ldr.w	r3, [ip]
 80012a6:	f8ce 3000 	str.w	r3, [lr]

  dev_usart_write(g_tmp, sizeof(g_tmp));
 80012aa:	2118      	movs	r1, #24
 80012ac:	4620      	mov	r0, r4
 80012ae:	f000 f93d 	bl	800152c <dev_usart_write>
 80012b2:	b004      	add	sp, #16
 80012b4:	bd10      	pop	{r4, pc}
 80012b6:	bf00      	nop
 80012b8:	20000044 	.word	0x20000044
 80012bc:	40010000 	.word	0x40010000
 80012c0:	20000168 	.word	0x20000168
 80012c4:	20000000 	.word	0x20000000

080012c8 <HAL_ADCEx_InjectedConvCpltCallback>:
static uint8_t g_tmp[16] = {0, 0, 0, 0, 0, 0, 0,    0,
                            0, 0, 0, 0, 0, 0, 0x80, 0x7f};

__weak void core_callback() {}

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80012c8:	b508      	push	{r3, lr}
  static int16_t adc1_cnt = 0;
  static int16_t adc2_cnt = 0;
  static int16_t adc3_cnd = 0;

  if (ADC1 == hadc->Instance) {
 80012ca:	6803      	ldr	r3, [r0, #0]
 80012cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_ADCEx_InjectedConvCpltCallback+0x32>
        g_adc1_state = 1;
      }
    } else {
      g_ia = (adc1_in0 - g_ia_offset) * g_gain;
    }
  } else if (ADC2 == hadc->Instance) {
 80012d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001444 <HAL_ADCEx_InjectedConvCpltCallback+0x17c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d040      	beq.n	800135a <HAL_ADCEx_InjectedConvCpltCallback+0x92>
        g_adc2_state = 1;
      }
    } else {
      g_ib = (adc2_in1 - g_ib_offset) * g_gain;
    }
  } else if (ADC3 == hadc->Instance) {
 80012d8:	4a5b      	ldr	r2, [pc, #364]	@ (8001448 <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d06d      	beq.n	80013ba <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
    } else {
      g_ic = (adc3_in2 - g_ic_offset) * g_gain;
    }
  }

  if (!g_adc1_state || !g_adc2_state || !g_adc3_state) {
 80012de:	4a5b      	ldr	r2, [pc, #364]	@ (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	b14a      	cbz	r2, 80012f8 <HAL_ADCEx_InjectedConvCpltCallback+0x30>
 80012e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	b132      	cbz	r2, 80012f8 <HAL_ADCEx_InjectedConvCpltCallback+0x30>
 80012ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	b11a      	cbz	r2, 80012f8 <HAL_ADCEx_InjectedConvCpltCallback+0x30>
    return;
  }

  if (ADC1 == hadc->Instance) {
 80012f0:	4a53      	ldr	r2, [pc, #332]	@ (8001440 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	f000 8092 	beq.w	800141c <HAL_ADCEx_InjectedConvCpltCallback+0x154>
    g_current[1] = g_ib;
    g_current[2] = g_ic;

    core_callback();
  }
}
 80012f8:	bd08      	pop	{r3, pc}
    float adc1_in0 = hadc1.Instance->JDR1;
 80012fa:	4a57      	ldr	r2, [pc, #348]	@ (8001458 <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8001302:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (0 == g_adc1_state) {
 8001306:	4a51      	ldr	r2, [pc, #324]	@ (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	b9c2      	cbnz	r2, 800133e <HAL_ADCEx_InjectedConvCpltCallback+0x76>
      g_ia_offset += adc1_in0;
 800130c:	4a53      	ldr	r2, [pc, #332]	@ (800145c <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 800130e:	ed92 7a00 	vldr	s14, [r2]
 8001312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001316:	edc2 7a00 	vstr	s15, [r2]
      if (100 == ++adc1_cnt) {
 800131a:	4951      	ldr	r1, [pc, #324]	@ (8001460 <HAL_ADCEx_InjectedConvCpltCallback+0x198>)
 800131c:	880a      	ldrh	r2, [r1, #0]
 800131e:	3201      	adds	r2, #1
 8001320:	b212      	sxth	r2, r2
 8001322:	800a      	strh	r2, [r1, #0]
 8001324:	2a64      	cmp	r2, #100	@ 0x64
 8001326:	d1da      	bne.n	80012de <HAL_ADCEx_InjectedConvCpltCallback+0x16>
        g_ia_offset /= 100.0f;
 8001328:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001464 <HAL_ADCEx_InjectedConvCpltCallback+0x19c>
 800132c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001330:	4a4a      	ldr	r2, [pc, #296]	@ (800145c <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 8001332:	ed82 7a00 	vstr	s14, [r2]
        g_adc1_state = 1;
 8001336:	4a45      	ldr	r2, [pc, #276]	@ (800144c <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8001338:	2101      	movs	r1, #1
 800133a:	7011      	strb	r1, [r2, #0]
 800133c:	e7cf      	b.n	80012de <HAL_ADCEx_InjectedConvCpltCallback+0x16>
      g_ia = (adc1_in0 - g_ia_offset) * g_gain;
 800133e:	4a47      	ldr	r2, [pc, #284]	@ (800145c <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 8001340:	ed92 7a00 	vldr	s14, [r2]
 8001344:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001348:	4a47      	ldr	r2, [pc, #284]	@ (8001468 <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 800134a:	ed92 7a00 	vldr	s14, [r2]
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001352:	4a46      	ldr	r2, [pc, #280]	@ (800146c <HAL_ADCEx_InjectedConvCpltCallback+0x1a4>)
 8001354:	edc2 7a00 	vstr	s15, [r2]
 8001358:	e7c1      	b.n	80012de <HAL_ADCEx_InjectedConvCpltCallback+0x16>
    float adc2_in1 = hadc2.Instance->JDR1;
 800135a:	4a45      	ldr	r2, [pc, #276]	@ (8001470 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (0 == g_adc2_state) {
 8001366:	4a3a      	ldr	r2, [pc, #232]	@ (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	b9c2      	cbnz	r2, 800139e <HAL_ADCEx_InjectedConvCpltCallback+0xd6>
      g_ib_offset += adc2_in1;
 800136c:	4a41      	ldr	r2, [pc, #260]	@ (8001474 <HAL_ADCEx_InjectedConvCpltCallback+0x1ac>)
 800136e:	ed92 7a00 	vldr	s14, [r2]
 8001372:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001376:	edc2 7a00 	vstr	s15, [r2]
      if (100 == ++adc2_cnt) {
 800137a:	493f      	ldr	r1, [pc, #252]	@ (8001478 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 800137c:	880a      	ldrh	r2, [r1, #0]
 800137e:	3201      	adds	r2, #1
 8001380:	b212      	sxth	r2, r2
 8001382:	800a      	strh	r2, [r1, #0]
 8001384:	2a64      	cmp	r2, #100	@ 0x64
 8001386:	d1aa      	bne.n	80012de <HAL_ADCEx_InjectedConvCpltCallback+0x16>
        g_ib_offset /= 100.0f;
 8001388:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001464 <HAL_ADCEx_InjectedConvCpltCallback+0x19c>
 800138c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001390:	4a38      	ldr	r2, [pc, #224]	@ (8001474 <HAL_ADCEx_InjectedConvCpltCallback+0x1ac>)
 8001392:	ed82 7a00 	vstr	s14, [r2]
        g_adc2_state = 1;
 8001396:	4a2e      	ldr	r2, [pc, #184]	@ (8001450 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 8001398:	2101      	movs	r1, #1
 800139a:	7011      	strb	r1, [r2, #0]
 800139c:	e79f      	b.n	80012de <HAL_ADCEx_InjectedConvCpltCallback+0x16>
      g_ib = (adc2_in1 - g_ib_offset) * g_gain;
 800139e:	4a35      	ldr	r2, [pc, #212]	@ (8001474 <HAL_ADCEx_InjectedConvCpltCallback+0x1ac>)
 80013a0:	ed92 7a00 	vldr	s14, [r2]
 80013a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001468 <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 80013aa:	ed92 7a00 	vldr	s14, [r2]
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	4a32      	ldr	r2, [pc, #200]	@ (800147c <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 80013b4:	edc2 7a00 	vstr	s15, [r2]
 80013b8:	e791      	b.n	80012de <HAL_ADCEx_InjectedConvCpltCallback+0x16>
    float adc3_in2 = hadc3.Instance->JDR1;
 80013ba:	4a31      	ldr	r2, [pc, #196]	@ (8001480 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80013c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (0 == g_adc3_state) {
 80013c6:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	b9ca      	cbnz	r2, 8001400 <HAL_ADCEx_InjectedConvCpltCallback+0x138>
      g_ic_offset += adc3_in2;
 80013cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001484 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 80013ce:	ed92 7a00 	vldr	s14, [r2]
 80013d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d6:	edc2 7a00 	vstr	s15, [r2]
      if (100 == ++adc3_cnd) {
 80013da:	492b      	ldr	r1, [pc, #172]	@ (8001488 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 80013dc:	880a      	ldrh	r2, [r1, #0]
 80013de:	3201      	adds	r2, #1
 80013e0:	b212      	sxth	r2, r2
 80013e2:	800a      	strh	r2, [r1, #0]
 80013e4:	2a64      	cmp	r2, #100	@ 0x64
 80013e6:	f47f af7a 	bne.w	80012de <HAL_ADCEx_InjectedConvCpltCallback+0x16>
        g_ic_offset /= 100.0f;
 80013ea:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001464 <HAL_ADCEx_InjectedConvCpltCallback+0x19c>
 80013ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013f2:	4a24      	ldr	r2, [pc, #144]	@ (8001484 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 80013f4:	ed82 7a00 	vstr	s14, [r2]
        g_adc3_state = 1;
 80013f8:	4a16      	ldr	r2, [pc, #88]	@ (8001454 <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 80013fa:	2101      	movs	r1, #1
 80013fc:	7011      	strb	r1, [r2, #0]
 80013fe:	e76e      	b.n	80012de <HAL_ADCEx_InjectedConvCpltCallback+0x16>
      g_ic = (adc3_in2 - g_ic_offset) * g_gain;
 8001400:	4a20      	ldr	r2, [pc, #128]	@ (8001484 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 8001402:	ed92 7a00 	vldr	s14, [r2]
 8001406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 800140c:	ed92 7a00 	vldr	s14, [r2]
 8001410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8001416:	edc2 7a00 	vstr	s15, [r2]
 800141a:	e760      	b.n	80012de <HAL_ADCEx_InjectedConvCpltCallback+0x16>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800141c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001420:	481b      	ldr	r0, [pc, #108]	@ (8001490 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 8001422:	f001 fe22 	bl	800306a <HAL_GPIO_TogglePin>
    g_current[0] = g_ia;
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 8001428:	4a10      	ldr	r2, [pc, #64]	@ (800146c <HAL_ADCEx_InjectedConvCpltCallback+0x1a4>)
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	601a      	str	r2, [r3, #0]
    g_current[1] = g_ib;
 800142e:	4a13      	ldr	r2, [pc, #76]	@ (800147c <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	605a      	str	r2, [r3, #4]
    g_current[2] = g_ic;
 8001434:	4a15      	ldr	r2, [pc, #84]	@ (800148c <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	609a      	str	r2, [r3, #8]
    core_callback();
 800143a:	f7ff ff05 	bl	8001248 <core_callback>
 800143e:	e75b      	b.n	80012f8 <HAL_ADCEx_InjectedConvCpltCallback+0x30>
 8001440:	40012000 	.word	0x40012000
 8001444:	40012100 	.word	0x40012100
 8001448:	40012200 	.word	0x40012200
 800144c:	20000196 	.word	0x20000196
 8001450:	20000195 	.word	0x20000195
 8001454:	20000194 	.word	0x20000194
 8001458:	200000f8 	.word	0x200000f8
 800145c:	200001b0 	.word	0x200001b0
 8001460:	20000184 	.word	0x20000184
 8001464:	42c80000 	.word	0x42c80000
 8001468:	200001a4 	.word	0x200001a4
 800146c:	200001a0 	.word	0x200001a0
 8001470:	200000b0 	.word	0x200000b0
 8001474:	200001ac 	.word	0x200001ac
 8001478:	20000182 	.word	0x20000182
 800147c:	2000019c 	.word	0x2000019c
 8001480:	20000068 	.word	0x20000068
 8001484:	200001a8 	.word	0x200001a8
 8001488:	20000180 	.word	0x20000180
 800148c:	20000198 	.word	0x20000198
 8001490:	40020800 	.word	0x40020800
 8001494:	20000188 	.word	0x20000188

08001498 <current_init>:

void current_init(void) {
 8001498:	b508      	push	{r3, lr}
  // 计算增益(计算出电压值 除以 采样电阻值 除以 放大倍数)
  g_gain = (ADC_VOLTAGE_REF / ADC_RESOLUTION) / (SHUNT_RESISTANCE * AMP_GAIN);
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <current_init+0x1c>)
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <current_init+0x20>)
 800149e:	601a      	str	r2, [r3, #0]

  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80014a0:	4806      	ldr	r0, [pc, #24]	@ (80014bc <current_init+0x24>)
 80014a2:	f000 ffed 	bl	8002480 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc2);
 80014a6:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <current_init+0x28>)
 80014a8:	f000 ffea 	bl	8002480 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc3);
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <current_init+0x2c>)
 80014ae:	f000 ffe7 	bl	8002480 <HAL_ADCEx_InjectedStart_IT>
}
 80014b2:	bd08      	pop	{r3, pc}
 80014b4:	200001a4 	.word	0x200001a4
 80014b8:	3b840000 	.word	0x3b840000
 80014bc:	200000f8 	.word	0x200000f8
 80014c0:	200000b0 	.word	0x200000b0
 80014c4:	20000068 	.word	0x20000068

080014c8 <current_get>:

int current_get(float* arr) {
  if (!g_adc1_state || !g_adc2_state || !g_adc3_state) {
 80014c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001504 <current_get+0x3c>)
 80014ca:	7812      	ldrb	r2, [r2, #0]
 80014cc:	b182      	cbz	r2, 80014f0 <current_get+0x28>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <current_get+0x40>)
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	b17a      	cbz	r2, 80014f6 <current_get+0x2e>
 80014d6:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <current_get+0x44>)
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	b17a      	cbz	r2, 80014fc <current_get+0x34>
int current_get(float* arr) {
 80014dc:	b410      	push	{r4}
    return -1;
  }
  memcpy(arr, g_current, sizeof(g_current));
 80014de:	4c0c      	ldr	r4, [pc, #48]	@ (8001510 <current_get+0x48>)
 80014e0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80014e2:	6018      	str	r0, [r3, #0]
 80014e4:	6059      	str	r1, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
  return 0;
 80014e8:	2000      	movs	r0, #0
 80014ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014ee:	4770      	bx	lr
    return -1;
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	4770      	bx	lr
 80014f6:	f04f 30ff 	mov.w	r0, #4294967295
 80014fa:	4770      	bx	lr
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000196 	.word	0x20000196
 8001508:	20000195 	.word	0x20000195
 800150c:	20000194 	.word	0x20000194
 8001510:	20000188 	.word	0x20000188

08001514 <dev_usart_init>:
extern DMA_HandleTypeDef hdma_usart3_rx;

uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t rx_buffer[RX_BUFFER_SIZE];

int dev_usart_init(void) {
 8001514:	b508      	push	{r3, lr}
  HAL_UART_Receive_DMA(&huart3, rx_buffer, RX_BUFFER_SIZE);
 8001516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800151a:	4902      	ldr	r1, [pc, #8]	@ (8001524 <dev_usart_init+0x10>)
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <dev_usart_init+0x14>)
 800151e:	f003 ffd3 	bl	80054c8 <HAL_UART_Receive_DMA>
}
 8001522:	bd08      	pop	{r3, pc}
 8001524:	200001b4 	.word	0x200001b4
 8001528:	20000610 	.word	0x20000610

0800152c <dev_usart_write>:

int dev_usart_write(const uint8_t* buf, uint16_t size) {
  if (size > TX_BUFFER_SIZE) {
 800152c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001530:	d80d      	bhi.n	800154e <dev_usart_write+0x22>
int dev_usart_write(const uint8_t* buf, uint16_t size) {
 8001532:	b538      	push	{r3, r4, r5, lr}
 8001534:	460c      	mov	r4, r1
    return -1;  // 错误：数据长度超过缓冲区限制
  }
  memcpy(tx_buffer, buf, size);
 8001536:	4d07      	ldr	r5, [pc, #28]	@ (8001554 <dev_usart_write+0x28>)
 8001538:	460a      	mov	r2, r1
 800153a:	4601      	mov	r1, r0
 800153c:	4628      	mov	r0, r5
 800153e:	f004 fbd9 	bl	8005cf4 <memcpy>
  return HAL_UART_Transmit_DMA(&huart3, tx_buffer, size);
 8001542:	4622      	mov	r2, r4
 8001544:	4629      	mov	r1, r5
 8001546:	4804      	ldr	r0, [pc, #16]	@ (8001558 <dev_usart_write+0x2c>)
 8001548:	f003 fcae 	bl	8004ea8 <HAL_UART_Transmit_DMA>
}
 800154c:	bd38      	pop	{r3, r4, r5, pc}
    return -1;  // 错误：数据长度超过缓冲区限制
 800154e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001552:	4770      	bx	lr
 8001554:	200002b4 	.word	0x200002b4
 8001558:	20000610 	.word	0x20000610

0800155c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t size) {
  if (huart->Instance == USART3) {
  }
}
 800155c:	4770      	bx	lr
	...

08001560 <HAL_UART_ErrorCallback>:

/// 下面错误处理函数中把奇偶校验错误以及数据溢出错误标志清除
/// 可以直接在调试时打断点查看huart->ErrorCode的值
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
  if (huart->Instance == USART3) {
 8001560:	6803      	ldr	r3, [r0, #0]
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <HAL_UART_ErrorCallback+0x4c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d000      	beq.n	800156a <HAL_UART_ErrorCallback+0xa>
 8001568:	4770      	bx	lr
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 800156a:	b500      	push	{lr}
 800156c:	b083      	sub	sp, #12
    __HAL_UART_CLEAR_OREFLAG(huart);
 800156e:	2200      	movs	r2, #0
 8001570:	9200      	str	r2, [sp, #0]
 8001572:	6819      	ldr	r1, [r3, #0]
 8001574:	9100      	str	r1, [sp, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	9100      	str	r1, [sp, #0]
 800157a:	9900      	ldr	r1, [sp, #0]
    __HAL_UART_CLEAR_PEFLAG(huart);
 800157c:	9201      	str	r2, [sp, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	9b01      	ldr	r3, [sp, #4]
    huart->RxState = HAL_UART_STATE_READY;
 8001588:	2320      	movs	r3, #32
 800158a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buffer, RX_BUFFER_SIZE);
 800158e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001592:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <HAL_UART_ErrorCallback+0x50>)
 8001594:	f003 ffaa 	bl	80054ec <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_UART_ErrorCallback+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	6813      	ldr	r3, [r2, #0]
 800159e:	f023 0308 	bic.w	r3, r3, #8
 80015a2:	6013      	str	r3, [r2, #0]
  }
 80015a4:	b003      	add	sp, #12
 80015a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015aa:	bf00      	nop
 80015ac:	40004800 	.word	0x40004800
 80015b0:	200001b4 	.word	0x200001b4
 80015b4:	20000550 	.word	0x20000550

080015b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015b8:	b510      	push	{r4, lr}
 80015ba:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015bc:	2400      	movs	r4, #0
 80015be:	9401      	str	r4, [sp, #4]
 80015c0:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <MX_DMA_Init+0x40>)
 80015c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015c4:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80015c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015d4:	4622      	mov	r2, r4
 80015d6:	4621      	mov	r1, r4
 80015d8:	200c      	movs	r0, #12
 80015da:	f001 f9d5 	bl	8002988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015de:	200c      	movs	r0, #12
 80015e0:	f001 f9e2 	bl	80029a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80015e4:	4622      	mov	r2, r4
 80015e6:	4621      	mov	r1, r4
 80015e8:	200e      	movs	r0, #14
 80015ea:	f001 f9cd 	bl	8002988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015ee:	200e      	movs	r0, #14
 80015f0:	f001 f9da 	bl	80029a8 <HAL_NVIC_EnableIRQ>

}
 80015f4:	b002      	add	sp, #8
 80015f6:	bd10      	pop	{r4, pc}
 80015f8:	40023800 	.word	0x40023800

080015fc <_SPI_WRITE>:
#define _CAL(x) HAL_GPIO_WritePin(DRV_CAL_GPIO_Port, DRV_CAL_Pin, x)

// SPI通讯NSS
#define _NSS(x) HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, x)

uint16_t _SPI_WRITE(drv8323_t* self, uint16_t data) {
 80015fc:	b530      	push	{r4, r5, lr}
 80015fe:	b087      	sub	sp, #28
 8001600:	4604      	mov	r4, r0
 8001602:	f8ad 100e 	strh.w	r1, [sp, #14]
  uint16_t ret;
  _NSS(0);
 8001606:	4d0e      	ldr	r5, [pc, #56]	@ (8001640 <_SPI_WRITE+0x44>)
 8001608:	2200      	movs	r2, #0
 800160a:	2104      	movs	r1, #4
 800160c:	4628      	mov	r0, r5
 800160e:	f001 fd26 	bl	800305e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001612:	200a      	movs	r0, #10
 8001614:	f000 fbde 	bl	8001dd4 <HAL_Delay>
  HAL_StatusTypeDef sta = HAL_SPI_TransmitReceive(
 8001618:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	f10d 0216 	add.w	r2, sp, #22
 8001624:	f10d 010e 	add.w	r1, sp, #14
 8001628:	6820      	ldr	r0, [r4, #0]
 800162a:	f002 fafc 	bl	8003c26 <HAL_SPI_TransmitReceive>
      self->hspi, (uint8_t*)&data, (uint8_t*)&ret, 1, DRV8323_SPI_TIMEOUT);
  if (HAL_OK != sta) {
    // warn("_SPI_WRITE FAILED: %d", sta);
  }
  _NSS(1);
 800162e:	2201      	movs	r2, #1
 8001630:	2104      	movs	r1, #4
 8001632:	4628      	mov	r0, r5
 8001634:	f001 fd13 	bl	800305e <HAL_GPIO_WritePin>
  return ret;
}
 8001638:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800163c:	b007      	add	sp, #28
 800163e:	bd30      	pop	{r4, r5, pc}
 8001640:	40020c00 	.word	0x40020c00

08001644 <drv8323_init>:

int drv8323_init(drv8323_t* self, SPI_HandleTypeDef* spi) {
 8001644:	b510      	push	{r4, lr}
  self->hspi = spi;
 8001646:	6001      	str	r1, [r0, #0]
  _ENABLE(0);
 8001648:	4c0e      	ldr	r4, [pc, #56]	@ (8001684 <drv8323_init+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001650:	4620      	mov	r0, r4
 8001652:	f001 fd04 	bl	800305e <HAL_GPIO_WritePin>
  _CAL(1);
 8001656:	2201      	movs	r2, #1
 8001658:	2180      	movs	r1, #128	@ 0x80
 800165a:	4620      	mov	r0, r4
 800165c:	f001 fcff 	bl	800305e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001660:	200a      	movs	r0, #10
 8001662:	f000 fbb7 	bl	8001dd4 <HAL_Delay>
  _ENABLE(1);
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800166c:	4620      	mov	r0, r4
 800166e:	f001 fcf6 	bl	800305e <HAL_GPIO_WritePin>
  _CAL(0);
 8001672:	2200      	movs	r2, #0
 8001674:	2180      	movs	r1, #128	@ 0x80
 8001676:	4620      	mov	r0, r4
 8001678:	f001 fcf1 	bl	800305e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800167c:	200a      	movs	r0, #10
 800167e:	f000 fba9 	bl	8001dd4 <HAL_Delay>
}
 8001682:	bd10      	pop	{r4, pc}
 8001684:	40020800 	.word	0x40020800

08001688 <drv8323_read_register>:
uint16_t drv8323_read_fsr2(drv8323_t* self) {
  uint16_t val = (1 << 15) | (FSR2 << 11);
  return _SPI_WRITE(self, val);
}

uint16_t drv8323_read_register(drv8323_t* self, uint16_t reg) {
 8001688:	b508      	push	{r3, lr}
  uint16_t ret = _SPI_WRITE(self, (1 << 15) | (reg << 11));
 800168a:	ea6f 7101 	mvn.w	r1, r1, lsl #28
 800168e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001692:	b289      	uxth	r1, r1
 8001694:	f7ff ffb2 	bl	80015fc <_SPI_WRITE>
  return ret;
}
 8001698:	bd08      	pop	{r3, pc}

0800169a <drv8323_write_register>:

void drv8323_write_register(drv8323_t* self, uint16_t reg, uint16_t val) {
 800169a:	b508      	push	{r3, lr}
  _SPI_WRITE(self, (reg << 11) | val);
 800169c:	ea42 21c1 	orr.w	r1, r2, r1, lsl #11
 80016a0:	b289      	uxth	r1, r1
 80016a2:	f7ff ffab 	bl	80015fc <_SPI_WRITE>
}
 80016a6:	bd08      	pop	{r3, pc}

080016a8 <drv8323_write_dcr>:

void drv8323_write_dcr(drv8323_t* self, uint16_t dis_cpuv, uint16_t dis_gdf,
                       uint16_t otw_rep, uint16_t pwm_mode, uint16_t pwm_com,
                       uint16_t pwm_dir, uint16_t coast, uint16_t brake,
                       uint16_t clr_flt) {
 80016a8:	b508      	push	{r3, lr}
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 80016aa:	0249      	lsls	r1, r1, #9
 80016ac:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 80016b0:	b209      	sxth	r1, r1
 80016b2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80016b6:	b209      	sxth	r1, r1
 80016b8:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 80016bc:	b21b      	sxth	r3, r3
                 (otw_rep << 7) | (pwm_mode << 5) | (pwm_com << 4) |
 80016be:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80016c2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80016cc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80016d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016da:	b21b      	sxth	r3, r3
                 (pwm_dir << 3) | (coast << 2) | (brake << 1) | clr_flt;
 80016dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80016e0:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80016ea:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80016ee:	b21b      	sxth	r3, r3
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 80016f0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80016f4:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 80016f6:	b289      	uxth	r1, r1
 80016f8:	f7ff ff80 	bl	80015fc <_SPI_WRITE>
}
 80016fc:	bd08      	pop	{r3, pc}

080016fe <drv8323_write_ocpcr>:
  _SPI_WRITE(self, val);
}

void drv8323_write_ocpcr(drv8323_t* self, uint16_t tretry, uint16_t dead_time,
                         uint16_t ocp_mode, uint16_t ocp_deg,
                         uint16_t vds_lvl) {
 80016fe:	b508      	push	{r3, lr}
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 8001700:	0289      	lsls	r1, r1, #10
 8001702:	f441 5120 	orr.w	r1, r1, #10240	@ 0x2800
 8001706:	b209      	sxth	r1, r1
 8001708:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800170c:	b209      	sxth	r1, r1
 800170e:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 8001712:	b21b      	sxth	r3, r3
                 (ocp_mode << 6) | (ocp_deg << 4) | vds_lvl;
 8001714:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8001718:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800171c:	b21b      	sxth	r3, r3
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 800171e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001722:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 8001724:	b289      	uxth	r1, r1
 8001726:	f7ff ff69 	bl	80015fc <_SPI_WRITE>
}
 800172a:	bd08      	pop	{r3, pc}

0800172c <drv8323_write_csacr>:

void drv8323_write_csacr(drv8323_t* self, uint16_t csa_fet, uint16_t vref_div,
                         uint16_t ls_ref, uint16_t csa_gain, uint16_t dis_sen,
                         uint16_t csa_cal_a, uint16_t csa_cal_b,
                         uint16_t csa_cal_c, uint16_t sen_lvl) {
 800172c:	b508      	push	{r3, lr}
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 800172e:	0289      	lsls	r1, r1, #10
 8001730:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 8001734:	b209      	sxth	r1, r1
 8001736:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 800173a:	b209      	sxth	r1, r1
 800173c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001740:	b21b      	sxth	r3, r3
                 (ls_ref << 8) | (csa_gain << 6) | (dis_sen << 5) |
 8001742:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8001746:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800174a:	b21b      	sxth	r3, r3
 800174c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8001750:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8001754:	b21b      	sxth	r3, r3
 8001756:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800175a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800175e:	b21b      	sxth	r3, r3
                 (csa_cal_a << 4) | (csa_cal_b << 3) | (csa_cal_c << 2) |
 8001760:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001764:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001768:	b21b      	sxth	r3, r3
 800176a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800176e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8001772:	b21b      	sxth	r3, r3
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 8001774:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8001778:	4319      	orrs	r1, r3
                 sen_lvl;
  _SPI_WRITE(self, val);
 800177a:	b289      	uxth	r1, r1
 800177c:	f7ff ff3e 	bl	80015fc <_SPI_WRITE>
}
 8001780:	bd08      	pop	{r3, pc}

08001782 <drv8323_enable_gd>:

void drv8323_enable_gd(drv8323_t* self) {
 8001782:	b510      	push	{r4, lr}
 8001784:	4604      	mov	r4, r0
  uint16_t val = (drv8323_read_register(self, DCR)) & (~(0x1 << 2));
 8001786:	2102      	movs	r1, #2
 8001788:	f7ff ff7e 	bl	8001688 <drv8323_read_register>
 800178c:	f020 0204 	bic.w	r2, r0, #4
 8001790:	b292      	uxth	r2, r2
  drv8323_write_register(self, DCR, val);
 8001792:	2102      	movs	r1, #2
 8001794:	4620      	mov	r0, r4
 8001796:	f7ff ff80 	bl	800169a <drv8323_write_register>
}
 800179a:	bd10      	pop	{r4, pc}

0800179c <drv8323_calibrate>:
void drv8323_disable_gd(drv8323_t* self) {
  uint16_t val = (drv8323_read_register(self, DCR)) | (0x1 << 2);
  drv8323_write_register(self, DCR, val);
}

void drv8323_calibrate(drv8323_t* self) {
 800179c:	b508      	push	{r3, lr}
  uint16_t val = 0x1 << 4 + 0x1 << 3 + 0x1 << 2;
  drv8323_write_register(self, CSACR, val);
 800179e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017a2:	2106      	movs	r1, #6
 80017a4:	f7ff ff79 	bl	800169a <drv8323_write_register>
}
 80017a8:	bd08      	pop	{r3, pc}
	...

080017ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017b0:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	ad05      	add	r5, sp, #20
 80017b4:	2400      	movs	r4, #0
 80017b6:	9405      	str	r4, [sp, #20]
 80017b8:	9406      	str	r4, [sp, #24]
 80017ba:	9407      	str	r4, [sp, #28]
 80017bc:	9408      	str	r4, [sp, #32]
 80017be:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c0:	9400      	str	r4, [sp, #0]
 80017c2:	4b45      	ldr	r3, [pc, #276]	@ (80018d8 <MX_GPIO_Init+0x12c>)
 80017c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017c6:	f042 0204 	orr.w	r2, r2, #4
 80017ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80017cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017ce:	f002 0204 	and.w	r2, r2, #4
 80017d2:	9200      	str	r2, [sp, #0]
 80017d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	9401      	str	r4, [sp, #4]
 80017d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30
 80017e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017e2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80017e6:	9201      	str	r2, [sp, #4]
 80017e8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	9402      	str	r4, [sp, #8]
 80017ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80017f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017f6:	f002 0201 	and.w	r2, r2, #1
 80017fa:	9202      	str	r2, [sp, #8]
 80017fc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	9403      	str	r4, [sp, #12]
 8001800:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001802:	f042 0202 	orr.w	r2, r2, #2
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30
 8001808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800180a:	f002 0202 	and.w	r2, r2, #2
 800180e:	9203      	str	r2, [sp, #12]
 8001810:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	9404      	str	r4, [sp, #16]
 8001814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001816:	f042 0208 	orr.w	r2, r2, #8
 800181a:	631a      	str	r2, [r3, #48]	@ 0x30
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	9304      	str	r3, [sp, #16]
 8001824:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 8001826:	4f2d      	ldr	r7, [pc, #180]	@ (80018dc <MX_GPIO_Init+0x130>)
 8001828:	4622      	mov	r2, r4
 800182a:	f242 11ce 	movw	r1, #8654	@ 0x21ce
 800182e:	4638      	mov	r0, r7
 8001830:	f001 fc15 	bl	800305e <HAL_GPIO_WritePin>
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|ENCODER_CAL_Pin, GPIO_PIN_RESET);
 8001834:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 80018e0 <MX_GPIO_Init+0x134>
 8001838:	4622      	mov	r2, r4
 800183a:	f248 0120 	movw	r1, #32800	@ 0x8020
 800183e:	4650      	mov	r0, sl
 8001840:	f001 fc0d 	bl	800305e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|CAN_STB_Pin, GPIO_PIN_RESET);
 8001844:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 80018e4 <MX_GPIO_Init+0x138>
 8001848:	4622      	mov	r2, r4
 800184a:	f24e 0120 	movw	r1, #57376	@ 0xe020
 800184e:	4640      	mov	r0, r8
 8001850:	f001 fc05 	bl	800305e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_SET);
 8001854:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80018e8 <MX_GPIO_Init+0x13c>
 8001858:	2201      	movs	r2, #1
 800185a:	2104      	movs	r1, #4
 800185c:	4648      	mov	r0, r9
 800185e:	f001 fbfe 	bl	800305e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_SPI_NSS_GPIO_Port, ENCODER_SPI_NSS_Pin, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	2108      	movs	r1, #8
 8001866:	4640      	mov	r0, r8
 8001868:	f001 fbf9 	bl	800305e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 LED_3_Pin LED_2_Pin LED_1_Pin
                           TIM1_BREAK_Pin DRV_CAL_Pin DRV_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 800186c:	f242 13ce 	movw	r3, #8654	@ 0x21ce
 8001870:	9305      	str	r3, [sp, #20]
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2601      	movs	r6, #1
 8001874:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	4629      	mov	r1, r5
 800187c:	4638      	mov	r0, r7
 800187e:	f001 faf7 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 ENCODER_CAL_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|ENCODER_CAL_Pin;
 8001882:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001886:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	4629      	mov	r1, r5
 8001890:	4650      	mov	r0, sl
 8001892:	f001 faed 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 ENCODER_SPI_NSS_Pin
                           CAN_STB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|ENCODER_SPI_NSS_Pin
 8001896:	f24e 0328 	movw	r3, #57384	@ 0xe028
 800189a:	9305      	str	r3, [sp, #20]
                          |CAN_STB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	4629      	mov	r1, r5
 80018a4:	4640      	mov	r0, r8
 80018a6:	f001 fae3 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 80018aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018b4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 80018b8:	4629      	mov	r1, r5
 80018ba:	4638      	mov	r0, r7
 80018bc:	f001 fad8 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = DRV_SPI_NSS_Pin;
 80018c0:	2304      	movs	r3, #4
 80018c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DRV_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 80018ca:	4629      	mov	r1, r5
 80018cc:	4648      	mov	r0, r9
 80018ce:	f001 facf 	bl	8002e70 <HAL_GPIO_Init>

}
 80018d2:	b00a      	add	sp, #40	@ 0x28
 80018d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020c00 	.word	0x40020c00

080018ec <hall_init>:
static float g_theta = 0.0;
static float g_speed = 0.0;

static float g_hall_value = 0.0;

void hall_init(void) { HAL_TIMEx_HallSensor_Start_IT(&htim3); }
 80018ec:	b508      	push	{r3, lr}
 80018ee:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <hall_init+0xc>)
 80018f0:	f003 f812 	bl	8004918 <HAL_TIMEx_HallSensor_Start_IT>
 80018f4:	bd08      	pop	{r3, pc}
 80018f6:	bf00      	nop
 80018f8:	200004c0 	.word	0x200004c0
 80018fc:	00000000 	.word	0x00000000

08001900 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001900:	b538      	push	{r3, r4, r5, lr}
  if (TIM3 == htim->Instance) {
 8001902:	6802      	ldr	r2, [r0, #0]
 8001904:	4b54      	ldr	r3, [pc, #336]	@ (8001a58 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001906:	429a      	cmp	r2, r3
 8001908:	d000      	beq.n	800190c <HAL_TIM_IC_CaptureCallback+0xc>
      g_theta += 2.0f * PI;
    } else if (g_theta > (2.0f * PI)) {
      g_theta -= 2.0f * PI;
    }
  }
}
 800190a:	bd38      	pop	{r3, r4, r5, pc}
    g_hall_value = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 800190c:	2100      	movs	r1, #0
 800190e:	4853      	ldr	r0, [pc, #332]	@ (8001a5c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001910:	f002 fbfb 	bl	800410a <HAL_TIM_ReadCapturedValue>
 8001914:	ee07 0a90 	vmov	s15, r0
 8001918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800191c:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <HAL_TIM_IC_CaptureCallback+0x160>)
 800191e:	edc3 7a00 	vstr	s15, [r3]
    g_theta_delta = (PI / 3) / (g_hall_value / 10000000) / 10000;
 8001922:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001a64 <HAL_TIM_IC_CaptureCallback+0x164>
 8001926:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800192a:	ee17 0a90 	vmov	r0, s15
 800192e:	f7fe fdaf 	bl	8000490 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	a140      	add	r1, pc, #256	@ (adr r1, 8001a38 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800193c:	f7fe ff2a 	bl	8000794 <__aeabi_ddiv>
 8001940:	4604      	mov	r4, r0
 8001942:	460d      	mov	r5, r1
 8001944:	a33e      	add	r3, pc, #248	@ (adr r3, 8001a40 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe ff23 	bl	8000794 <__aeabi_ddiv>
 800194e:	f7ff f891 	bl	8000a74 <__aeabi_d2f>
 8001952:	4b45      	ldr	r3, [pc, #276]	@ (8001a68 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001954:	6018      	str	r0, [r3, #0]
    g_speed = (PI / 3) / (g_hall_value / 10000000) * 30 / (4 * PI);
 8001956:	2200      	movs	r2, #0
 8001958:	4b44      	ldr	r3, [pc, #272]	@ (8001a6c <HAL_TIM_IC_CaptureCallback+0x16c>)
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7fe fdef 	bl	8000540 <__aeabi_dmul>
 8001962:	a339      	add	r3, pc, #228	@ (adr r3, 8001a48 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe ff14 	bl	8000794 <__aeabi_ddiv>
 800196c:	f7ff f882 	bl	8000a74 <__aeabi_d2f>
 8001970:	4b3f      	ldr	r3, [pc, #252]	@ (8001a70 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001972:	6018      	str	r0, [r3, #0]
    uint8_t state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8001974:	2101      	movs	r1, #1
 8001976:	483f      	ldr	r0, [pc, #252]	@ (8001a74 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001978:	f001 fb6a 	bl	8003050 <HAL_GPIO_ReadPin>
 800197c:	4604      	mov	r4, r0
    state |= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) << 1;
 800197e:	4d3e      	ldr	r5, [pc, #248]	@ (8001a78 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001980:	2180      	movs	r1, #128	@ 0x80
 8001982:	4628      	mov	r0, r5
 8001984:	f001 fb64 	bl	8003050 <HAL_GPIO_ReadPin>
 8001988:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 800198c:	b264      	sxtb	r4, r4
    state |= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) << 2;
 800198e:	2140      	movs	r1, #64	@ 0x40
 8001990:	4628      	mov	r0, r5
 8001992:	f001 fb5d 	bl	8003050 <HAL_GPIO_ReadPin>
 8001996:	ea44 0380 	orr.w	r3, r4, r0, lsl #2
 800199a:	b25b      	sxtb	r3, r3
    if (state == 0x05) {
 800199c:	3b01      	subs	r3, #1
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d807      	bhi.n	80019b2 <HAL_TIM_IC_CaptureCallback+0xb2>
 80019a2:	e8df f003 	tbb	[pc, r3]
 80019a6:	2f37      	.short	0x2f37
 80019a8:	2b032733 	.word	0x2b032733
      g_theta = 0.0 + g_phase_shift_angle;
 80019ac:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019ae:	4a34      	ldr	r2, [pc, #208]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x180>)
 80019b0:	601a      	str	r2, [r3, #0]
    if (g_theta < 0.0f) {
 80019b2:	4b32      	ldr	r3, [pc, #200]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	d42c      	bmi.n	8001a1c <HAL_TIM_IC_CaptureCallback+0x11c>
    } else if (g_theta > (2.0f * PI)) {
 80019c2:	ee17 0a90 	vmov	r0, s15
 80019c6:	f7fe fd63 	bl	8000490 <__aeabi_f2d>
 80019ca:	4604      	mov	r4, r0
 80019cc:	460d      	mov	r5, r1
 80019ce:	a320      	add	r3, pc, #128	@ (adr r3, 8001a50 <HAL_TIM_IC_CaptureCallback+0x150>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7ff f844 	bl	8000a60 <__aeabi_dcmpgt>
 80019d8:	2800      	cmp	r0, #0
 80019da:	d096      	beq.n	800190a <HAL_TIM_IC_CaptureCallback+0xa>
      g_theta -= 2.0f * PI;
 80019dc:	a31c      	add	r3, pc, #112	@ (adr r3, 8001a50 <HAL_TIM_IC_CaptureCallback+0x150>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	4620      	mov	r0, r4
 80019e4:	4629      	mov	r1, r5
 80019e6:	f7fe fbf3 	bl	80001d0 <__aeabi_dsub>
 80019ea:	f7ff f843 	bl	8000a74 <__aeabi_d2f>
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019f0:	6018      	str	r0, [r3, #0]
}
 80019f2:	e78a      	b.n	800190a <HAL_TIM_IC_CaptureCallback+0xa>
      g_theta = (PI / 3.0) + g_phase_shift_angle;
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019f6:	4a23      	ldr	r2, [pc, #140]	@ (8001a84 <HAL_TIM_IC_CaptureCallback+0x184>)
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e7da      	b.n	80019b2 <HAL_TIM_IC_CaptureCallback+0xb2>
      g_theta = (PI * 2.0 / 3.0f) + g_phase_shift_angle;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019fe:	4a22      	ldr	r2, [pc, #136]	@ (8001a88 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e7d6      	b.n	80019b2 <HAL_TIM_IC_CaptureCallback+0xb2>
      g_theta = PI + g_phase_shift_angle;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001a06:	4a21      	ldr	r2, [pc, #132]	@ (8001a8c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e7d2      	b.n	80019b2 <HAL_TIM_IC_CaptureCallback+0xb2>
      g_theta = (PI * 4.0f / 3.0f) + g_phase_shift_angle;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001a0e:	4a20      	ldr	r2, [pc, #128]	@ (8001a90 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	e7ce      	b.n	80019b2 <HAL_TIM_IC_CaptureCallback+0xb2>
      g_theta = (PI * 5.0 / 3.0f) + g_phase_shift_angle;
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001a16:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e7ca      	b.n	80019b2 <HAL_TIM_IC_CaptureCallback+0xb2>
      g_theta += 2.0f * PI;
 8001a1c:	ee17 0a90 	vmov	r0, s15
 8001a20:	f7fe fd36 	bl	8000490 <__aeabi_f2d>
 8001a24:	a30a      	add	r3, pc, #40	@ (adr r3, 8001a50 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe fbd3 	bl	80001d4 <__adddf3>
 8001a2e:	f7ff f821 	bl	8000a74 <__aeabi_d2f>
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001a34:	6018      	str	r0, [r3, #0]
 8001a36:	e768      	b.n	800190a <HAL_TIM_IC_CaptureCallback+0xa>
 8001a38:	382d7361 	.word	0x382d7361
 8001a3c:	3ff0c152 	.word	0x3ff0c152
 8001a40:	00000000 	.word	0x00000000
 8001a44:	40c38800 	.word	0x40c38800
 8001a48:	54442d11 	.word	0x54442d11
 8001a4c:	402921fb 	.word	0x402921fb
 8001a50:	54442d11 	.word	0x54442d11
 8001a54:	401921fb 	.word	0x401921fb
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	200004c0 	.word	0x200004c0
 8001a60:	200003b4 	.word	0x200003b4
 8001a64:	4b189680 	.word	0x4b189680
 8001a68:	200003c0 	.word	0x200003c0
 8001a6c:	403e0000 	.word	0x403e0000
 8001a70:	200003b8 	.word	0x200003b8
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	200003bc 	.word	0x200003bc
 8001a80:	40860a92 	.word	0x40860a92
 8001a84:	40a78d36 	.word	0x40a78d36
 8001a88:	40c90fdb 	.word	0x40c90fdb
 8001a8c:	40ea927f 	.word	0x40ea927f
 8001a90:	41060a92 	.word	0x41060a92
 8001a94:	4116cbe4 	.word	0x4116cbe4

08001a98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a98:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a9a:	480b      	ldr	r0, [pc, #44]	@ (8001ac8 <MX_I2C1_Init+0x30>)
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <MX_I2C1_Init+0x34>)
 8001a9e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <MX_I2C1_Init+0x38>)
 8001aa2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aa8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aae:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab8:	f001 fae0 	bl	800307c <HAL_I2C_Init>
 8001abc:	b900      	cbnz	r0, 8001ac0 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001abe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ac0:	f000 f84c 	bl	8001b5c <Error_Handler>
}
 8001ac4:	e7fb      	b.n	8001abe <MX_I2C1_Init+0x26>
 8001ac6:	bf00      	nop
 8001ac8:	200003c4 	.word	0x200003c4
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	000186a0 	.word	0x000186a0

08001ad4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ad4:	b530      	push	{r4, r5, lr}
 8001ad6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	9304      	str	r3, [sp, #16]
 8001ade:	9305      	str	r3, [sp, #20]
 8001ae0:	9306      	str	r3, [sp, #24]
 8001ae2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8001ae4:	6802      	ldr	r2, [r0, #0]
 8001ae6:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <HAL_I2C_MspInit+0x64>)
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001aec:	b009      	add	sp, #36	@ 0x24
 8001aee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af0:	2500      	movs	r5, #0
 8001af2:	9501      	str	r5, [sp, #4]
 8001af4:	4c11      	ldr	r4, [pc, #68]	@ (8001b3c <HAL_I2C_MspInit+0x68>)
 8001af6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6323      	str	r3, [r4, #48]	@ 0x30
 8001afe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b08:	23c0      	movs	r3, #192	@ 0xc0
 8001b0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b14:	2304      	movs	r3, #4
 8001b16:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	a903      	add	r1, sp, #12
 8001b1a:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <HAL_I2C_MspInit+0x6c>)
 8001b1c:	f001 f9a8 	bl	8002e70 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b20:	9502      	str	r5, [sp, #8]
 8001b22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b28:	6423      	str	r3, [r4, #64]	@ 0x40
 8001b2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b30:	9302      	str	r3, [sp, #8]
 8001b32:	9b02      	ldr	r3, [sp, #8]
}
 8001b34:	e7da      	b.n	8001aec <HAL_I2C_MspInit+0x18>
 8001b36:	bf00      	nop
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020400 	.word	0x40020400

08001b44 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b46:	6802      	ldr	r2, [r0, #0]
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d000      	beq.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b4e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001b50:	f000 f92e 	bl	8001db0 <HAL_IncTick>
}
 8001b54:	e7fb      	b.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0xa>
 8001b56:	bf00      	nop
 8001b58:	40001000 	.word	0x40001000

08001b5c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
 */
void Error_Handler(void) {
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001b5e:	e7fe      	b.n	8001b5e <Error_Handler+0x2>

08001b60 <SystemClock_Config>:
void SystemClock_Config(void) {
 8001b60:	b510      	push	{r4, lr}
 8001b62:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b64:	ac07      	add	r4, sp, #28
 8001b66:	2234      	movs	r2, #52	@ 0x34
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f004 f896 	bl	8005c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	2300      	movs	r3, #0
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	9303      	str	r3, [sp, #12]
 8001b76:	9304      	str	r3, [sp, #16]
 8001b78:	9305      	str	r3, [sp, #20]
 8001b7a:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <SystemClock_Config+0xa0>)
 8001b80:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001b82:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001b86:	6411      	str	r1, [r2, #64]	@ 0x40
 8001b88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b8a:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001b8e:	9200      	str	r2, [sp, #0]
 8001b90:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <SystemClock_Config+0xa4>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bb0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001bba:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001bc0:	22a0      	movs	r2, #160	@ 0xa0
 8001bc2:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc4:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bc6:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bc8:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f001 fd06 	bl	80035dc <HAL_RCC_OscConfig>
 8001bd0:	b990      	cbnz	r0, 8001bf8 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bde:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001be2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001bea:	2105      	movs	r1, #5
 8001bec:	a802      	add	r0, sp, #8
 8001bee:	f001 fb3f 	bl	8003270 <HAL_RCC_ClockConfig>
 8001bf2:	b918      	cbnz	r0, 8001bfc <SystemClock_Config+0x9c>
}
 8001bf4:	b014      	add	sp, #80	@ 0x50
 8001bf6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001bf8:	f7ff ffb0 	bl	8001b5c <Error_Handler>
    Error_Handler();
 8001bfc:	f7ff ffae 	bl	8001b5c <Error_Handler>
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000

08001c08 <main>:
int main(void) {
 8001c08:	b508      	push	{r3, lr}
  HAL_Init();
 8001c0a:	f000 f8b7 	bl	8001d7c <HAL_Init>
  SystemClock_Config();
 8001c0e:	f7ff ffa7 	bl	8001b60 <SystemClock_Config>
  MX_GPIO_Init();
 8001c12:	f7ff fdcb 	bl	80017ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001c16:	f7ff fccf 	bl	80015b8 <MX_DMA_Init>
  MX_CAN1_Init();
 8001c1a:	f7ff fa31 	bl	8001080 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001c1e:	f003 fe09 	bl	8005834 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001c22:	f7ff f875 	bl	8000d10 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c26:	f7ff f8c7 	bl	8000db8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001c2a:	f7ff f919 	bl	8000e60 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001c2e:	f7ff ff33 	bl	8001a98 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001c32:	f000 f841 	bl	8001cb8 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001c36:	f003 fe99 	bl	800596c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001c3a:	f003 fcef 	bl	800561c <MX_TIM3_Init>
  HAL_Delay(10);
 8001c3e:	200a      	movs	r0, #10
 8001c40:	f000 f8c8 	bl	8001dd4 <HAL_Delay>
  controller_init();
 8001c44:	f7ff fa70 	bl	8001128 <controller_init>
    controller_step();
 8001c48:	f7ff faf4 	bl	8001234 <controller_step>
  while (1) {
 8001c4c:	e7fc      	b.n	8001c48 <main+0x40>
	...

08001c50 <pwm_init>:
#include "./pwm.h"

void pwm_init(void) {
 8001c50:	b510      	push	{r4, lr}
  TIM1->ARR = 8000 - 1;
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <pwm_init+0x24>)
 8001c54:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001c58:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 8001c5a:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim1);
 8001c60:	4c05      	ldr	r4, [pc, #20]	@ (8001c78 <pwm_init+0x28>)
 8001c62:	4620      	mov	r0, r4
 8001c64:	f002 f9d0 	bl	8004008 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001c68:	210c      	movs	r1, #12
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f002 fd5c 	bl	8004728 <HAL_TIM_PWM_Start>
}
 8001c70:	bd10      	pop	{r4, pc}
 8001c72:	bf00      	nop
 8001c74:	40010000 	.word	0x40010000
 8001c78:	20000508 	.word	0x20000508

08001c7c <pwm_start>:

void pwm_start(void) {
 8001c7c:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c7e:	4c0d      	ldr	r4, [pc, #52]	@ (8001cb4 <pwm_start+0x38>)
 8001c80:	2100      	movs	r1, #0
 8001c82:	4620      	mov	r0, r4
 8001c84:	f002 fd50 	bl	8004728 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c88:	2104      	movs	r1, #4
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f002 fd4c 	bl	8004728 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c90:	2108      	movs	r1, #8
 8001c92:	4620      	mov	r0, r4
 8001c94:	f002 fd48 	bl	8004728 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f002 fea2 	bl	80049e4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f002 fe9e 	bl	80049e4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001ca8:	2108      	movs	r1, #8
 8001caa:	4620      	mov	r0, r4
 8001cac:	f002 fe9a 	bl	80049e4 <HAL_TIMEx_PWMN_Start>
}
 8001cb0:	bd10      	pop	{r4, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000508 	.word	0x20000508

08001cb8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001cb8:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001cba:	480f      	ldr	r0, [pc, #60]	@ (8001cf8 <MX_SPI3_Init+0x40>)
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <MX_SPI3_Init+0x44>)
 8001cbe:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cc0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001cc4:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001cca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cce:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd0:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	6142      	str	r2, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cda:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cdc:	2218      	movs	r2, #24
 8001cde:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce0:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce2:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce4:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001cea:	f001 ff3d 	bl	8003b68 <HAL_SPI_Init>
 8001cee:	b900      	cbnz	r0, 8001cf2 <MX_SPI3_Init+0x3a>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001cf0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001cf2:	f7ff ff33 	bl	8001b5c <Error_Handler>
}
 8001cf6:	e7fb      	b.n	8001cf0 <MX_SPI3_Init+0x38>
 8001cf8:	20000418 	.word	0x20000418
 8001cfc:	40003c00 	.word	0x40003c00

08001d00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d00:	b500      	push	{lr}
 8001d02:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	2300      	movs	r3, #0
 8001d06:	9303      	str	r3, [sp, #12]
 8001d08:	9304      	str	r3, [sp, #16]
 8001d0a:	9305      	str	r3, [sp, #20]
 8001d0c:	9306      	str	r3, [sp, #24]
 8001d0e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 8001d10:	6802      	ldr	r2, [r0, #0]
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_SPI_MspInit+0x68>)
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d002      	beq.n	8001d1e <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001d18:	b009      	add	sp, #36	@ 0x24
 8001d1a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d1e:	2100      	movs	r1, #0
 8001d20:	9101      	str	r1, [sp, #4]
 8001d22:	f503 33fe 	add.w	r3, r3, #130048	@ 0x1fc00
 8001d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d30:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8001d34:	9201      	str	r2, [sp, #4]
 8001d36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d38:	9102      	str	r1, [sp, #8]
 8001d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d3c:	f042 0204 	orr.w	r2, r2, #4
 8001d40:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	9302      	str	r3, [sp, #8]
 8001d4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d4c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5e:	a903      	add	r1, sp, #12
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <HAL_SPI_MspInit+0x6c>)
 8001d62:	f001 f885 	bl	8002e70 <HAL_GPIO_Init>
}
 8001d66:	e7d7      	b.n	8001d18 <HAL_SPI_MspInit+0x18>
 8001d68:	40003c00 	.word	0x40003c00
 8001d6c:	40020800 	.word	0x40020800

08001d70 <state_set>:
#include "gpio.h"

static state_e g_state = STATE_INIT;
static uint8_t g_led_state = 0x01;

void state_set(state_e state) { g_state = state; }
 8001d70:	4b01      	ldr	r3, [pc, #4]	@ (8001d78 <state_set+0x8>)
 8001d72:	7018      	strb	r0, [r3, #0]
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000470 	.word	0x20000470

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_Init+0x30>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d86:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d8e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 fde3 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9e:	200f      	movs	r0, #15
 8001da0:	f002 ff0a 	bl	8004bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da4:	f001 fa48 	bl	8003238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001da8:	2000      	movs	r0, #0
 8001daa:	bd08      	pop	{r3, pc}
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001db0:	4a03      	ldr	r2, [pc, #12]	@ (8001dc0 <HAL_IncTick+0x10>)
 8001db2:	6811      	ldr	r1, [r2, #0]
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <HAL_IncTick+0x14>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	440b      	add	r3, r1
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000474 	.word	0x20000474
 8001dc4:	20000018 	.word	0x20000018

08001dc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001dc8:	4b01      	ldr	r3, [pc, #4]	@ (8001dd0 <HAL_GetTick+0x8>)
 8001dca:	6818      	ldr	r0, [r3, #0]
}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000474 	.word	0x20000474

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff fff6 	bl	8001dc8 <HAL_GetTick>
 8001ddc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001de2:	d002      	beq.n	8001dea <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <HAL_Delay+0x24>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dea:	f7ff ffed 	bl	8001dc8 <HAL_GetTick>
 8001dee:	1b40      	subs	r0, r0, r5
 8001df0:	42a0      	cmp	r0, r4
 8001df2:	d3fa      	bcc.n	8001dea <HAL_Delay+0x16>
  {
  }
}
 8001df4:	bd38      	pop	{r3, r4, r5, pc}
 8001df6:	bf00      	nop
 8001df8:	20000018 	.word	0x20000018

08001dfc <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <ADC_Init+0x12c>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001e04:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	6841      	ldr	r1, [r0, #4]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e0e:	6802      	ldr	r2, [r0, #0]
 8001e10:	6853      	ldr	r3, [r2, #4]
 8001e12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e16:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e18:	6802      	ldr	r2, [r0, #0]
 8001e1a:	6853      	ldr	r3, [r2, #4]
 8001e1c:	6901      	ldr	r1, [r0, #16]
 8001e1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e22:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e24:	6802      	ldr	r2, [r0, #0]
 8001e26:	6853      	ldr	r3, [r2, #4]
 8001e28:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001e2c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e2e:	6802      	ldr	r2, [r0, #0]
 8001e30:	6853      	ldr	r3, [r2, #4]
 8001e32:	6881      	ldr	r1, [r0, #8]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e38:	6802      	ldr	r2, [r0, #0]
 8001e3a:	6893      	ldr	r3, [r2, #8]
 8001e3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e40:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e42:	6802      	ldr	r2, [r0, #0]
 8001e44:	6893      	ldr	r3, [r2, #8]
 8001e46:	68c1      	ldr	r1, [r0, #12]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e4c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001e4e:	4b37      	ldr	r3, [pc, #220]	@ (8001f2c <ADC_Init+0x130>)
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d057      	beq.n	8001f04 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e54:	6802      	ldr	r2, [r0, #0]
 8001e56:	6893      	ldr	r3, [r2, #8]
 8001e58:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001e5c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e5e:	6802      	ldr	r2, [r0, #0]
 8001e60:	6893      	ldr	r3, [r2, #8]
 8001e62:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e68:	6802      	ldr	r2, [r0, #0]
 8001e6a:	6893      	ldr	r3, [r2, #8]
 8001e6c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001e70:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e72:	6802      	ldr	r2, [r0, #0]
 8001e74:	6893      	ldr	r3, [r2, #8]
 8001e76:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e7c:	6802      	ldr	r2, [r0, #0]
 8001e7e:	6893      	ldr	r3, [r2, #8]
 8001e80:	f023 0302 	bic.w	r3, r3, #2
 8001e84:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e86:	6802      	ldr	r2, [r0, #0]
 8001e88:	6893      	ldr	r3, [r2, #8]
 8001e8a:	7e01      	ldrb	r1, [r0, #24]
 8001e8c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001e90:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e92:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d03f      	beq.n	8001f1a <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e9a:	6802      	ldr	r2, [r0, #0]
 8001e9c:	6853      	ldr	r3, [r2, #4]
 8001e9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ea2:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ea4:	6802      	ldr	r2, [r0, #0]
 8001ea6:	6853      	ldr	r3, [r2, #4]
 8001ea8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001eac:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eae:	6801      	ldr	r1, [r0, #0]
 8001eb0:	684b      	ldr	r3, [r1, #4]
 8001eb2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001eb4:	3a01      	subs	r2, #1
 8001eb6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001eba:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ebc:	6802      	ldr	r2, [r0, #0]
 8001ebe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001ec0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ec6:	6801      	ldr	r1, [r0, #0]
 8001ec8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8001eca:	69c2      	ldr	r2, [r0, #28]
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ed4:	6802      	ldr	r2, [r0, #0]
 8001ed6:	6893      	ldr	r3, [r2, #8]
 8001ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001edc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ede:	6802      	ldr	r2, [r0, #0]
 8001ee0:	6893      	ldr	r3, [r2, #8]
 8001ee2:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001ee6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001eea:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001eec:	6802      	ldr	r2, [r0, #0]
 8001eee:	6893      	ldr	r3, [r2, #8]
 8001ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ef4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ef6:	6802      	ldr	r2, [r0, #0]
 8001ef8:	6893      	ldr	r3, [r2, #8]
 8001efa:	6941      	ldr	r1, [r0, #20]
 8001efc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001f00:	6093      	str	r3, [r2, #8]
}
 8001f02:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f04:	6802      	ldr	r2, [r0, #0]
 8001f06:	6893      	ldr	r3, [r2, #8]
 8001f08:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001f0c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f0e:	6802      	ldr	r2, [r0, #0]
 8001f10:	6893      	ldr	r3, [r2, #8]
 8001f12:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001f16:	6093      	str	r3, [r2, #8]
 8001f18:	e7b0      	b.n	8001e7c <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f1a:	6802      	ldr	r2, [r0, #0]
 8001f1c:	6853      	ldr	r3, [r2, #4]
 8001f1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001f22:	6053      	str	r3, [r2, #4]
 8001f24:	e7ca      	b.n	8001ebc <ADC_Init+0xc0>
 8001f26:	bf00      	nop
 8001f28:	40012300 	.word	0x40012300
 8001f2c:	0f000001 	.word	0x0f000001

08001f30 <HAL_ADC_Init>:
  if (hadc == NULL)
 8001f30:	b338      	cbz	r0, 8001f82 <HAL_ADC_Init+0x52>
{
 8001f32:	b510      	push	{r4, lr}
 8001f34:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f36:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f38:	b143      	cbz	r3, 8001f4c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f3c:	f013 0f10 	tst.w	r3, #16
 8001f40:	d00b      	beq.n	8001f5a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001f44:	2300      	movs	r3, #0
 8001f46:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001f4a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001f4c:	f7fe ffdc 	bl	8000f08 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	2300      	movs	r3, #0
 8001f52:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001f54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001f58:	e7ef      	b.n	8001f3a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001f5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f60:	f023 0302 	bic.w	r3, r3, #2
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f7ff ff46 	bl	8001dfc <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001f70:	2000      	movs	r0, #0
 8001f72:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6423      	str	r3, [r4, #64]	@ 0x40
 8001f80:	e7e0      	b.n	8001f44 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001f82:	2001      	movs	r0, #1
}
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_ADC_Start>:
{
 8001f88:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001f8e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	f000 8089 	beq.w	80020aa <HAL_ADC_Start+0x122>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f9e:	6803      	ldr	r3, [r0, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	f012 0f01 	tst.w	r2, #1
 8001fa6:	d113      	bne.n	8001fd0 <HAL_ADC_Start+0x48>
    __HAL_ADC_ENABLE(hadc);
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb0:	4b41      	ldr	r3, [pc, #260]	@ (80020b8 <HAL_ADC_Start+0x130>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a41      	ldr	r2, [pc, #260]	@ (80020bc <HAL_ADC_Start+0x134>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001fc0:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001fc2:	e002      	b.n	8001fca <HAL_ADC_Start+0x42>
      counter--;
 8001fc4:	9b01      	ldr	r3, [sp, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001fca:	9b01      	ldr	r3, [sp, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f9      	bne.n	8001fc4 <HAL_ADC_Start+0x3c>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fd0:	6802      	ldr	r2, [r0, #0]
 8001fd2:	6893      	ldr	r3, [r2, #8]
 8001fd4:	f013 0f01 	tst.w	r3, #1
 8001fd8:	d05c      	beq.n	8002094 <HAL_ADC_Start+0x10c>
    ADC_STATE_CLR_SET(hadc->State,
 8001fda:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001fdc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe8:	6403      	str	r3, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fea:	6853      	ldr	r3, [r2, #4]
 8001fec:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001ff0:	d005      	beq.n	8001ffe <HAL_ADC_Start+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ff2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001ff4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ff8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ffc:	6403      	str	r3, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ffe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002000:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002004:	d01b      	beq.n	800203e <HAL_ADC_Start+0xb6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002006:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002008:	f023 0306 	bic.w	r3, r3, #6
 800200c:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 800200e:	2300      	movs	r3, #0
 8002010:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002014:	f06f 0322 	mvn.w	r3, #34	@ 0x22
 8002018:	6013      	str	r3, [r2, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800201a:	4b29      	ldr	r3, [pc, #164]	@ (80020c0 <HAL_ADC_Start+0x138>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f013 0f1f 	tst.w	r3, #31
 8002022:	d127      	bne.n	8002074 <HAL_ADC_Start+0xec>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002024:	6803      	ldr	r3, [r0, #0]
 8002026:	4a27      	ldr	r2, [pc, #156]	@ (80020c4 <HAL_ADC_Start+0x13c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d011      	beq.n	8002050 <HAL_ADC_Start+0xc8>
 800202c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <HAL_ADC_Start+0xbc>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002034:	4a24      	ldr	r2, [pc, #144]	@ (80020c8 <HAL_ADC_Start+0x140>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d014      	beq.n	8002064 <HAL_ADC_Start+0xdc>
  return HAL_OK;
 800203a:	2000      	movs	r0, #0
 800203c:	e033      	b.n	80020a6 <HAL_ADC_Start+0x11e>
      ADC_CLEAR_ERRORCODE(hadc);
 800203e:	2300      	movs	r3, #0
 8002040:	6443      	str	r3, [r0, #68]	@ 0x44
 8002042:	e7e4      	b.n	800200e <HAL_ADC_Start+0x86>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002044:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8002048:	6852      	ldr	r2, [r2, #4]
 800204a:	f012 0f1f 	tst.w	r2, #31
 800204e:	d1f1      	bne.n	8002034 <HAL_ADC_Start+0xac>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002056:	d12a      	bne.n	80020ae <HAL_ADC_Start+0x126>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800205e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002060:	2000      	movs	r0, #0
 8002062:	e020      	b.n	80020a6 <HAL_ADC_Start+0x11e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002064:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002068:	6852      	ldr	r2, [r2, #4]
 800206a:	f012 0f10 	tst.w	r2, #16
 800206e:	d0ef      	beq.n	8002050 <HAL_ADC_Start+0xc8>
  return HAL_OK;
 8002070:	2000      	movs	r0, #0
 8002072:	e018      	b.n	80020a6 <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002074:	6803      	ldr	r3, [r0, #0]
 8002076:	4a13      	ldr	r2, [pc, #76]	@ (80020c4 <HAL_ADC_Start+0x13c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d001      	beq.n	8002080 <HAL_ADC_Start+0xf8>
  return HAL_OK;
 800207c:	2000      	movs	r0, #0
 800207e:	e012      	b.n	80020a6 <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002086:	d114      	bne.n	80020b2 <HAL_ADC_Start+0x12a>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800208e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002090:	2000      	movs	r0, #0
 8002092:	e008      	b.n	80020a6 <HAL_ADC_Start+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002094:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002096:	f043 0310 	orr.w	r3, r3, #16
 800209a:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 80020a4:	2000      	movs	r0, #0
}
 80020a6:	b002      	add	sp, #8
 80020a8:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80020aa:	2002      	movs	r0, #2
 80020ac:	e7fb      	b.n	80020a6 <HAL_ADC_Start+0x11e>
  return HAL_OK;
 80020ae:	2000      	movs	r0, #0
 80020b0:	e7f9      	b.n	80020a6 <HAL_ADC_Start+0x11e>
 80020b2:	2000      	movs	r0, #0
 80020b4:	e7f7      	b.n	80020a6 <HAL_ADC_Start+0x11e>
 80020b6:	bf00      	nop
 80020b8:	20000020 	.word	0x20000020
 80020bc:	431bde83 	.word	0x431bde83
 80020c0:	40012300 	.word	0x40012300
 80020c4:	40012000 	.word	0x40012000
 80020c8:	40012200 	.word	0x40012200

080020cc <HAL_ADC_PollForConversion>:
{
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	4604      	mov	r4, r0
 80020d0:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020d2:	6803      	ldr	r3, [r0, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80020da:	d003      	beq.n	80020e4 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020dc:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020de:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80020e2:	d119      	bne.n	8002118 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 80020e4:	f7ff fe70 	bl	8001dc8 <HAL_GetTick>
 80020e8:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	f012 0f02 	tst.w	r2, #2
 80020f2:	d120      	bne.n	8002136 <HAL_ADC_PollForConversion+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80020f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80020f8:	d0f7      	beq.n	80020ea <HAL_ADC_PollForConversion+0x1e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020fa:	b9b5      	cbnz	r5, 800212a <HAL_ADC_PollForConversion+0x5e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f013 0f02 	tst.w	r3, #2
 8002104:	d1f1      	bne.n	80020ea <HAL_ADC_PollForConversion+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002106:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 800210e:	2300      	movs	r3, #0
 8002110:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8002114:	2003      	movs	r0, #3
 8002116:	e032      	b.n	800217e <HAL_ADC_PollForConversion+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002118:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800211a:	f043 0320 	orr.w	r3, r3, #32
 800211e:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 8002120:	2300      	movs	r3, #0
 8002122:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8002126:	2001      	movs	r0, #1
 8002128:	e029      	b.n	800217e <HAL_ADC_PollForConversion+0xb2>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800212a:	f7ff fe4d 	bl	8001dc8 <HAL_GetTick>
 800212e:	1b80      	subs	r0, r0, r6
 8002130:	42a8      	cmp	r0, r5
 8002132:	d9da      	bls.n	80020ea <HAL_ADC_PollForConversion+0x1e>
 8002134:	e7e2      	b.n	80020fc <HAL_ADC_PollForConversion+0x30>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002136:	f06f 0212 	mvn.w	r2, #18
 800213a:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800213c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800213e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002142:	6423      	str	r3, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800214c:	d116      	bne.n	800217c <HAL_ADC_PollForConversion+0xb0>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214e:	7e20      	ldrb	r0, [r4, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002150:	b9b0      	cbnz	r0, 8002180 <HAL_ADC_PollForConversion+0xb4>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002154:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8002158:	d003      	beq.n	8002162 <HAL_ADC_PollForConversion+0x96>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800215a:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800215c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002160:	d10d      	bne.n	800217e <HAL_ADC_PollForConversion+0xb2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002162:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002168:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800216a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800216c:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002170:	d105      	bne.n	800217e <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002172:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6423      	str	r3, [r4, #64]	@ 0x40
 800217a:	e000      	b.n	800217e <HAL_ADC_PollForConversion+0xb2>
  return HAL_OK;
 800217c:	2000      	movs	r0, #0
}
 800217e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002180:	2000      	movs	r0, #0
 8002182:	e7fc      	b.n	800217e <HAL_ADC_PollForConversion+0xb2>

08002184 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8002188:	4770      	bx	lr

0800218a <HAL_ADC_ConvCpltCallback>:
}
 800218a:	4770      	bx	lr

0800218c <HAL_ADC_LevelOutOfWindowCallback>:
}
 800218c:	4770      	bx	lr

0800218e <HAL_ADC_ErrorCallback>:
}
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_IRQHandler>:
{
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 8002194:	6803      	ldr	r3, [r0, #0]
 8002196:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002198:	685d      	ldr	r5, [r3, #4]
  if (tmp1 && tmp2)
 800219a:	f016 0f02 	tst.w	r6, #2
 800219e:	d02f      	beq.n	8002200 <HAL_ADC_IRQHandler+0x70>
 80021a0:	f005 0220 	and.w	r2, r5, #32
 80021a4:	b362      	cbz	r2, 8002200 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80021a8:	f012 0f10 	tst.w	r2, #16
 80021ac:	d103      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80021b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b4:	6402      	str	r2, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80021bc:	d119      	bne.n	80021f2 <HAL_ADC_IRQHandler+0x62>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021be:	7e22      	ldrb	r2, [r4, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021c0:	b9ba      	cbnz	r2, 80021f2 <HAL_ADC_IRQHandler+0x62>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021c4:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80021c8:	d003      	beq.n	80021d2 <HAL_ADC_IRQHandler+0x42>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80021ca:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021cc:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80021d0:	d10f      	bne.n	80021f2 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	f022 0220 	bic.w	r2, r2, #32
 80021d8:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021e0:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021e4:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80021e8:	d103      	bne.n	80021f2 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff ffc9 	bl	800218a <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	f06f 0212 	mvn.w	r2, #18
 80021fe:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002200:	f005 0380 	and.w	r3, r5, #128	@ 0x80
  if (tmp1 && tmp2)
 8002204:	f016 0f04 	tst.w	r6, #4
 8002208:	d037      	beq.n	800227a <HAL_ADC_IRQHandler+0xea>
 800220a:	2b00      	cmp	r3, #0
 800220c:	d035      	beq.n	800227a <HAL_ADC_IRQHandler+0xea>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800220e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002210:	f013 0f10 	tst.w	r3, #16
 8002214:	d103      	bne.n	800221e <HAL_ADC_IRQHandler+0x8e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002216:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002218:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800221c:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 8002226:	d121      	bne.n	800226c <HAL_ADC_IRQHandler+0xdc>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800222a:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 800222e:	d003      	beq.n	8002238 <HAL_ADC_IRQHandler+0xa8>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002230:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002232:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002236:	d119      	bne.n	800226c <HAL_ADC_IRQHandler+0xdc>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002238:	685a      	ldr	r2, [r3, #4]
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800223a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800223e:	d115      	bne.n	800226c <HAL_ADC_IRQHandler+0xdc>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002240:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002242:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002246:	d111      	bne.n	800226c <HAL_ADC_IRQHandler+0xdc>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002248:	7e22      	ldrb	r2, [r4, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800224a:	b97a      	cbnz	r2, 800226c <HAL_ADC_IRQHandler+0xdc>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002252:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002254:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800225a:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800225c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800225e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002262:	d103      	bne.n	800226c <HAL_ADC_IRQHandler+0xdc>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002264:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800226c:	4620      	mov	r0, r4
 800226e:	f7ff f82b 	bl	80012c8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	f06f 020c 	mvn.w	r2, #12
 8002278:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800227a:	f005 0340 	and.w	r3, r5, #64	@ 0x40
  if (tmp1 && tmp2)
 800227e:	f016 0f01 	tst.w	r6, #1
 8002282:	d005      	beq.n	8002290 <HAL_ADC_IRQHandler+0x100>
 8002284:	b123      	cbz	r3, 8002290 <HAL_ADC_IRQHandler+0x100>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f013 0f01 	tst.w	r3, #1
 800228e:	d106      	bne.n	800229e <HAL_ADC_IRQHandler+0x10e>
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002290:	f005 6580 	and.w	r5, r5, #67108864	@ 0x4000000
  if (tmp1 && tmp2)
 8002294:	f016 0f20 	tst.w	r6, #32
 8002298:	d000      	beq.n	800229c <HAL_ADC_IRQHandler+0x10c>
 800229a:	b965      	cbnz	r5, 80022b6 <HAL_ADC_IRQHandler+0x126>
}
 800229c:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800229e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a4:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff ff70 	bl	800218c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	f06f 0201 	mvn.w	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e7ec      	b.n	8002290 <HAL_ADC_IRQHandler+0x100>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	f06f 0520 	mvn.w	r5, #32
 80022c4:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 80022c6:	4620      	mov	r0, r4
 80022c8:	f7ff ff61 	bl	800218e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	601d      	str	r5, [r3, #0]
}
 80022d0:	e7e4      	b.n	800229c <HAL_ADC_IRQHandler+0x10c>
	...

080022d4 <HAL_ADC_ConfigChannel>:
{
 80022d4:	b430      	push	{r4, r5}
 80022d6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80022d8:	2200      	movs	r2, #0
 80022da:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80022dc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80022e0:	2a01      	cmp	r2, #1
 80022e2:	f000 80c0 	beq.w	8002466 <HAL_ADC_ConfigChannel+0x192>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2201      	movs	r2, #1
 80022ea:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022ee:	680a      	ldr	r2, [r1, #0]
 80022f0:	2a09      	cmp	r2, #9
 80022f2:	d940      	bls.n	8002376 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022f4:	6804      	ldr	r4, [r0, #0]
 80022f6:	68e0      	ldr	r0, [r4, #12]
 80022f8:	b292      	uxth	r2, r2
 80022fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80022fe:	3a1e      	subs	r2, #30
 8002300:	f04f 0c07 	mov.w	ip, #7
 8002304:	fa0c f202 	lsl.w	r2, ip, r2
 8002308:	ea20 0202 	bic.w	r2, r0, r2
 800230c:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800230e:	681c      	ldr	r4, [r3, #0]
 8002310:	68e0      	ldr	r0, [r4, #12]
 8002312:	880a      	ldrh	r2, [r1, #0]
 8002314:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002318:	3a1e      	subs	r2, #30
 800231a:	688d      	ldr	r5, [r1, #8]
 800231c:	fa05 f202 	lsl.w	r2, r5, r2
 8002320:	4302      	orrs	r2, r0
 8002322:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8002324:	684a      	ldr	r2, [r1, #4]
 8002326:	2a06      	cmp	r2, #6
 8002328:	d83c      	bhi.n	80023a4 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800232a:	681c      	ldr	r4, [r3, #0]
 800232c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800232e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002332:	3a05      	subs	r2, #5
 8002334:	f04f 0c1f 	mov.w	ip, #31
 8002338:	fa0c f202 	lsl.w	r2, ip, r2
 800233c:	ea20 0202 	bic.w	r2, r0, r2
 8002340:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002342:	681c      	ldr	r4, [r3, #0]
 8002344:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002346:	684a      	ldr	r2, [r1, #4]
 8002348:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800234c:	3a05      	subs	r2, #5
 800234e:	f8b1 c000 	ldrh.w	ip, [r1]
 8002352:	fa0c f202 	lsl.w	r2, ip, r2
 8002356:	4302      	orrs	r2, r0
 8002358:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	4a43      	ldr	r2, [pc, #268]	@ (800246c <HAL_ADC_ConfigChannel+0x198>)
 800235e:	4290      	cmp	r0, r2
 8002360:	d050      	beq.n	8002404 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	4a41      	ldr	r2, [pc, #260]	@ (800246c <HAL_ADC_ConfigChannel+0x198>)
 8002366:	4290      	cmp	r0, r2
 8002368:	d059      	beq.n	800241e <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 800236a:	2000      	movs	r0, #0
 800236c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8002370:	b002      	add	sp, #8
 8002372:	bc30      	pop	{r4, r5}
 8002374:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002376:	6804      	ldr	r4, [r0, #0]
 8002378:	6920      	ldr	r0, [r4, #16]
 800237a:	b292      	uxth	r2, r2
 800237c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002380:	f04f 0c07 	mov.w	ip, #7
 8002384:	fa0c f202 	lsl.w	r2, ip, r2
 8002388:	ea20 0202 	bic.w	r2, r0, r2
 800238c:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800238e:	681c      	ldr	r4, [r3, #0]
 8002390:	6920      	ldr	r0, [r4, #16]
 8002392:	880a      	ldrh	r2, [r1, #0]
 8002394:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002398:	688d      	ldr	r5, [r1, #8]
 800239a:	fa05 f202 	lsl.w	r2, r5, r2
 800239e:	4302      	orrs	r2, r0
 80023a0:	6122      	str	r2, [r4, #16]
 80023a2:	e7bf      	b.n	8002324 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80023a4:	2a0c      	cmp	r2, #12
 80023a6:	d816      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023a8:	681d      	ldr	r5, [r3, #0]
 80023aa:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80023ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80023b0:	3a23      	subs	r2, #35	@ 0x23
 80023b2:	241f      	movs	r4, #31
 80023b4:	fa04 f202 	lsl.w	r2, r4, r2
 80023b8:	ea20 0202 	bic.w	r2, r0, r2
 80023bc:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023be:	681d      	ldr	r5, [r3, #0]
 80023c0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80023c2:	684a      	ldr	r2, [r1, #4]
 80023c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80023c8:	3a23      	subs	r2, #35	@ 0x23
 80023ca:	880c      	ldrh	r4, [r1, #0]
 80023cc:	fa04 f202 	lsl.w	r2, r4, r2
 80023d0:	4302      	orrs	r2, r0
 80023d2:	632a      	str	r2, [r5, #48]	@ 0x30
 80023d4:	e7c1      	b.n	800235a <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023d6:	681d      	ldr	r5, [r3, #0]
 80023d8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80023da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80023de:	3a41      	subs	r2, #65	@ 0x41
 80023e0:	241f      	movs	r4, #31
 80023e2:	fa04 f202 	lsl.w	r2, r4, r2
 80023e6:	ea20 0202 	bic.w	r2, r0, r2
 80023ea:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023ec:	681d      	ldr	r5, [r3, #0]
 80023ee:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80023f0:	684a      	ldr	r2, [r1, #4]
 80023f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80023f6:	3a41      	subs	r2, #65	@ 0x41
 80023f8:	880c      	ldrh	r4, [r1, #0]
 80023fa:	fa04 f202 	lsl.w	r2, r4, r2
 80023fe:	4302      	orrs	r2, r0
 8002400:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8002402:	e7aa      	b.n	800235a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002404:	680a      	ldr	r2, [r1, #0]
 8002406:	2a12      	cmp	r2, #18
 8002408:	d1ab      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800240a:	4a19      	ldr	r2, [pc, #100]	@ (8002470 <HAL_ADC_ConfigChannel+0x19c>)
 800240c:	6850      	ldr	r0, [r2, #4]
 800240e:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8002412:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002414:	6850      	ldr	r0, [r2, #4]
 8002416:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 800241a:	6050      	str	r0, [r2, #4]
 800241c:	e7a1      	b.n	8002362 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800241e:	680a      	ldr	r2, [r1, #0]
 8002420:	4814      	ldr	r0, [pc, #80]	@ (8002474 <HAL_ADC_ConfigChannel+0x1a0>)
 8002422:	4282      	cmp	r2, r0
 8002424:	d001      	beq.n	800242a <HAL_ADC_ConfigChannel+0x156>
 8002426:	2a11      	cmp	r2, #17
 8002428:	d19f      	bne.n	800236a <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800242a:	4a11      	ldr	r2, [pc, #68]	@ (8002470 <HAL_ADC_ConfigChannel+0x19c>)
 800242c:	6850      	ldr	r0, [r2, #4]
 800242e:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8002432:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002434:	6850      	ldr	r0, [r2, #4]
 8002436:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800243a:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800243c:	6809      	ldr	r1, [r1, #0]
 800243e:	4a0d      	ldr	r2, [pc, #52]	@ (8002474 <HAL_ADC_ConfigChannel+0x1a0>)
 8002440:	4291      	cmp	r1, r2
 8002442:	d192      	bne.n	800236a <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002444:	4a0c      	ldr	r2, [pc, #48]	@ (8002478 <HAL_ADC_ConfigChannel+0x1a4>)
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	490c      	ldr	r1, [pc, #48]	@ (800247c <HAL_ADC_ConfigChannel+0x1a8>)
 800244a:	fba1 1202 	umull	r1, r2, r1, r2
 800244e:	0c92      	lsrs	r2, r2, #18
 8002450:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002454:	0052      	lsls	r2, r2, #1
 8002456:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8002458:	9a01      	ldr	r2, [sp, #4]
 800245a:	2a00      	cmp	r2, #0
 800245c:	d085      	beq.n	800236a <HAL_ADC_ConfigChannel+0x96>
        counter--;
 800245e:	9a01      	ldr	r2, [sp, #4]
 8002460:	3a01      	subs	r2, #1
 8002462:	9201      	str	r2, [sp, #4]
 8002464:	e7f8      	b.n	8002458 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8002466:	2002      	movs	r0, #2
 8002468:	e782      	b.n	8002370 <HAL_ADC_ConfigChannel+0x9c>
 800246a:	bf00      	nop
 800246c:	40012000 	.word	0x40012000
 8002470:	40012300 	.word	0x40012300
 8002474:	10000012 	.word	0x10000012
 8002478:	20000020 	.word	0x20000020
 800247c:	431bde83 	.word	0x431bde83

08002480 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8002480:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	9301      	str	r3, [sp, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8002486:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800248a:	2b01      	cmp	r3, #1
 800248c:	d06c      	beq.n	8002568 <HAL_ADCEx_InjectedStart_IT+0xe8>
 800248e:	2301      	movs	r3, #1
 8002490:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002494:	6803      	ldr	r3, [r0, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	f012 0f01 	tst.w	r2, #1
 800249c:	d113      	bne.n	80024c6 <HAL_ADCEx_InjectedStart_IT+0x46>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b35      	ldr	r3, [pc, #212]	@ (800257c <HAL_ADCEx_InjectedStart_IT+0xfc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a35      	ldr	r2, [pc, #212]	@ (8002580 <HAL_ADCEx_InjectedStart_IT+0x100>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80024b6:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 80024b8:	e002      	b.n	80024c0 <HAL_ADCEx_InjectedStart_IT+0x40>
    {
      counter--;
 80024ba:	9b01      	ldr	r3, [sp, #4]
 80024bc:	3b01      	subs	r3, #1
 80024be:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 80024c0:	9b01      	ldr	r3, [sp, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f9      	bne.n	80024ba <HAL_ADCEx_InjectedStart_IT+0x3a>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024c6:	6802      	ldr	r2, [r0, #0]
 80024c8:	6893      	ldr	r3, [r2, #8]
 80024ca:	f013 0f01 	tst.w	r3, #1
 80024ce:	d040      	beq.n	8002552 <HAL_ADCEx_InjectedStart_IT+0xd2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80024d0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80024d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024de:	6403      	str	r3, [r0, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024e0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80024e2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80024e6:	d101      	bne.n	80024ec <HAL_ADCEx_InjectedStart_IT+0x6c>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024e8:	2300      	movs	r3, #0
 80024ea:	6443      	str	r3, [r0, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024ec:	2300      	movs	r3, #0
 80024ee:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80024f2:	f06f 0304 	mvn.w	r3, #4
 80024f6:	6013      	str	r3, [r2, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80024f8:	6802      	ldr	r2, [r0, #0]
 80024fa:	6853      	ldr	r3, [r2, #4]
 80024fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002500:	6053      	str	r3, [r2, #4]
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002502:	4b20      	ldr	r3, [pc, #128]	@ (8002584 <HAL_ADCEx_InjectedStart_IT+0x104>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f013 0f1f 	tst.w	r3, #31
 800250a:	d10e      	bne.n	800252a <HAL_ADCEx_InjectedStart_IT+0xaa>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800250c:	6802      	ldr	r2, [r0, #0]
 800250e:	6891      	ldr	r1, [r2, #8]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002510:	6853      	ldr	r3, [r2, #4]
 8002512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if (tmp1 && tmp2)
 8002516:	f411 1f40 	tst.w	r1, #3145728	@ 0x300000
 800251a:	d127      	bne.n	800256c <HAL_ADCEx_InjectedStart_IT+0xec>
 800251c:	bb43      	cbnz	r3, 8002570 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800251e:	6893      	ldr	r3, [r2, #8]
 8002520:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002524:	6093      	str	r3, [r2, #8]
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2000      	movs	r0, #0
 8002528:	e01c      	b.n	8002564 <HAL_ADCEx_InjectedStart_IT+0xe4>
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800252a:	6803      	ldr	r3, [r0, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8002538:	4813      	ldr	r0, [pc, #76]	@ (8002588 <HAL_ADCEx_InjectedStart_IT+0x108>)
 800253a:	4283      	cmp	r3, r0
 800253c:	d001      	beq.n	8002542 <HAL_ADCEx_InjectedStart_IT+0xc2>
  return HAL_OK;
 800253e:	2000      	movs	r0, #0
 8002540:	e010      	b.n	8002564 <HAL_ADCEx_InjectedStart_IT+0xe4>
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8002542:	b9ba      	cbnz	r2, 8002574 <HAL_ADCEx_InjectedStart_IT+0xf4>
 8002544:	b9c1      	cbnz	r1, 8002578 <HAL_ADCEx_InjectedStart_IT+0xf8>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800254c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800254e:	2000      	movs	r0, #0
 8002550:	e008      	b.n	8002564 <HAL_ADCEx_InjectedStart_IT+0xe4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002552:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002554:	f043 0310 	orr.w	r3, r3, #16
 8002558:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 8002562:	2000      	movs	r0, #0
}
 8002564:	b002      	add	sp, #8
 8002566:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8002568:	2002      	movs	r0, #2
 800256a:	e7fb      	b.n	8002564 <HAL_ADCEx_InjectedStart_IT+0xe4>
  return HAL_OK;
 800256c:	2000      	movs	r0, #0
 800256e:	e7f9      	b.n	8002564 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8002570:	2000      	movs	r0, #0
 8002572:	e7f7      	b.n	8002564 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8002574:	2000      	movs	r0, #0
 8002576:	e7f5      	b.n	8002564 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8002578:	2000      	movs	r0, #0
 800257a:	e7f3      	b.n	8002564 <HAL_ADCEx_InjectedStart_IT+0xe4>
 800257c:	20000020 	.word	0x20000020
 8002580:	431bde83 	.word	0x431bde83
 8002584:	40012300 	.word	0x40012300
 8002588:	40012000 	.word	0x40012000

0800258c <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800258c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002590:	2a01      	cmp	r2, #1
 8002592:	f000 80f4 	beq.w	800277e <HAL_ADCEx_InjectedConfigChannel+0x1f2>
{
 8002596:	b430      	push	{r4, r5}
 8002598:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800259a:	2201      	movs	r2, #1
 800259c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80025a0:	680a      	ldr	r2, [r1, #0]
 80025a2:	2a09      	cmp	r2, #9
 80025a4:	f240 8089 	bls.w	80026ba <HAL_ADCEx_InjectedConfigChannel+0x12e>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80025a8:	6805      	ldr	r5, [r0, #0]
 80025aa:	68e8      	ldr	r0, [r5, #12]
 80025ac:	b292      	uxth	r2, r2
 80025ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80025b2:	3a1e      	subs	r2, #30
 80025b4:	2407      	movs	r4, #7
 80025b6:	fa04 f202 	lsl.w	r2, r4, r2
 80025ba:	ea20 0202 	bic.w	r2, r0, r2
 80025be:	60ea      	str	r2, [r5, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80025c0:	681d      	ldr	r5, [r3, #0]
 80025c2:	68e8      	ldr	r0, [r5, #12]
 80025c4:	688c      	ldr	r4, [r1, #8]
 80025c6:	880a      	ldrh	r2, [r1, #0]
 80025c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80025cc:	3a1e      	subs	r2, #30
 80025ce:	4094      	lsls	r4, r2
 80025d0:	4320      	orrs	r0, r4
 80025d2:	60e8      	str	r0, [r5, #12]
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80025d8:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80025dc:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80025de:	681c      	ldr	r4, [r3, #0]
 80025e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80025e2:	6908      	ldr	r0, [r1, #16]
 80025e4:	3801      	subs	r0, #1
 80025e6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 80025ea:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80025ec:	681c      	ldr	r4, [r3, #0]
 80025ee:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80025f0:	684a      	ldr	r2, [r1, #4]
 80025f2:	690d      	ldr	r5, [r1, #16]
 80025f4:	1b52      	subs	r2, r2, r5
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	3203      	adds	r2, #3
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002600:	f04f 0c1f 	mov.w	ip, #31
 8002604:	fa0c f202 	lsl.w	r2, ip, r2
 8002608:	ea20 0202 	bic.w	r2, r0, r2
 800260c:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800260e:	681c      	ldr	r4, [r3, #0]
 8002610:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002612:	684a      	ldr	r2, [r1, #4]
 8002614:	690d      	ldr	r5, [r1, #16]
 8002616:	1b52      	subs	r2, r2, r5
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	3203      	adds	r2, #3
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002622:	f8b1 c000 	ldrh.w	ip, [r1]
 8002626:	fa0c f202 	lsl.w	r2, ip, r2
 800262a:	4302      	orrs	r2, r0
 800262c:	63a2      	str	r2, [r4, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800262e:	6988      	ldr	r0, [r1, #24]
 8002630:	4a54      	ldr	r2, [pc, #336]	@ (8002784 <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 8002632:	4290      	cmp	r0, r2
 8002634:	d056      	beq.n	80026e4 <HAL_ADCEx_InjectedConfigChannel+0x158>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	6882      	ldr	r2, [r0, #8]
 800263a:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800263e:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	6882      	ldr	r2, [r0, #8]
 8002644:	698c      	ldr	r4, [r1, #24]
 8002646:	4322      	orrs	r2, r4
 8002648:	6082      	str	r2, [r0, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	6882      	ldr	r2, [r0, #8]
 800264e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002652:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	6882      	ldr	r2, [r0, #8]
 8002658:	69cc      	ldr	r4, [r1, #28]
 800265a:	4322      	orrs	r2, r4
 800265c:	6082      	str	r2, [r0, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800265e:	7d4a      	ldrb	r2, [r1, #21]
 8002660:	2a00      	cmp	r2, #0
 8002662:	d04a      	beq.n	80026fa <HAL_ADCEx_InjectedConfigChannel+0x16e>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	6842      	ldr	r2, [r0, #4]
 8002668:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800266c:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800266e:	7d0a      	ldrb	r2, [r1, #20]
 8002670:	2a00      	cmp	r2, #0
 8002672:	d048      	beq.n	8002706 <HAL_ADCEx_InjectedConfigChannel+0x17a>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	6842      	ldr	r2, [r0, #4]
 8002678:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800267c:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 800267e:	684a      	ldr	r2, [r1, #4]
 8002680:	2a02      	cmp	r2, #2
 8002682:	d046      	beq.n	8002712 <HAL_ADCEx_InjectedConfigChannel+0x186>
 8002684:	2a03      	cmp	r2, #3
 8002686:	d04f      	beq.n	8002728 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 8002688:	2a01      	cmp	r2, #1
 800268a:	d158      	bne.n	800273e <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	6942      	ldr	r2, [r0, #20]
 8002690:	f36f 020b 	bfc	r2, #0, #12
 8002694:	6142      	str	r2, [r0, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	6942      	ldr	r2, [r0, #20]
 800269a:	68cc      	ldr	r4, [r1, #12]
 800269c:	4322      	orrs	r2, r4
 800269e:	6142      	str	r2, [r0, #20]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	4a39      	ldr	r2, [pc, #228]	@ (8002788 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 80026a4:	4290      	cmp	r0, r2
 80026a6:	d055      	beq.n	8002754 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	4a37      	ldr	r2, [pc, #220]	@ (8002788 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 80026ac:	4290      	cmp	r0, r2
 80026ae:	d05a      	beq.n	8002766 <HAL_ADCEx_InjectedConfigChannel+0x1da>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 80026b6:	bc30      	pop	{r4, r5}
 80026b8:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80026ba:	6805      	ldr	r5, [r0, #0]
 80026bc:	6928      	ldr	r0, [r5, #16]
 80026be:	b292      	uxth	r2, r2
 80026c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80026c4:	2407      	movs	r4, #7
 80026c6:	fa04 f202 	lsl.w	r2, r4, r2
 80026ca:	ea20 0202 	bic.w	r2, r0, r2
 80026ce:	612a      	str	r2, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80026d0:	681d      	ldr	r5, [r3, #0]
 80026d2:	6928      	ldr	r0, [r5, #16]
 80026d4:	688c      	ldr	r4, [r1, #8]
 80026d6:	880a      	ldrh	r2, [r1, #0]
 80026d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80026dc:	4094      	lsls	r4, r2
 80026de:	4320      	orrs	r0, r4
 80026e0:	6128      	str	r0, [r5, #16]
 80026e2:	e777      	b.n	80025d4 <HAL_ADCEx_InjectedConfigChannel+0x48>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	6882      	ldr	r2, [r0, #8]
 80026e8:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80026ec:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	6882      	ldr	r2, [r0, #8]
 80026f2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80026f6:	6082      	str	r2, [r0, #8]
 80026f8:	e7b1      	b.n	800265e <HAL_ADCEx_InjectedConfigChannel+0xd2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	6842      	ldr	r2, [r0, #4]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002702:	6042      	str	r2, [r0, #4]
 8002704:	e7b3      	b.n	800266e <HAL_ADCEx_InjectedConfigChannel+0xe2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	6842      	ldr	r2, [r0, #4]
 800270a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800270e:	6042      	str	r2, [r0, #4]
 8002710:	e7b5      	b.n	800267e <HAL_ADCEx_InjectedConfigChannel+0xf2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	6982      	ldr	r2, [r0, #24]
 8002716:	f36f 020b 	bfc	r2, #0, #12
 800271a:	6182      	str	r2, [r0, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	6982      	ldr	r2, [r0, #24]
 8002720:	68cc      	ldr	r4, [r1, #12]
 8002722:	4322      	orrs	r2, r4
 8002724:	6182      	str	r2, [r0, #24]
      break;
 8002726:	e7bb      	b.n	80026a0 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	69c2      	ldr	r2, [r0, #28]
 800272c:	f36f 020b 	bfc	r2, #0, #12
 8002730:	61c2      	str	r2, [r0, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	69c2      	ldr	r2, [r0, #28]
 8002736:	68cc      	ldr	r4, [r1, #12]
 8002738:	4322      	orrs	r2, r4
 800273a:	61c2      	str	r2, [r0, #28]
      break;
 800273c:	e7b0      	b.n	80026a0 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	6a02      	ldr	r2, [r0, #32]
 8002742:	f36f 020b 	bfc	r2, #0, #12
 8002746:	6202      	str	r2, [r0, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	6a02      	ldr	r2, [r0, #32]
 800274c:	68cc      	ldr	r4, [r1, #12]
 800274e:	4322      	orrs	r2, r4
 8002750:	6202      	str	r2, [r0, #32]
      break;
 8002752:	e7a5      	b.n	80026a0 <HAL_ADCEx_InjectedConfigChannel+0x114>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002754:	680a      	ldr	r2, [r1, #0]
 8002756:	2a12      	cmp	r2, #18
 8002758:	d1a6      	bne.n	80026a8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800275a:	480c      	ldr	r0, [pc, #48]	@ (800278c <HAL_ADCEx_InjectedConfigChannel+0x200>)
 800275c:	6842      	ldr	r2, [r0, #4]
 800275e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002762:	6042      	str	r2, [r0, #4]
 8002764:	e7a0      	b.n	80026a8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002766:	680a      	ldr	r2, [r1, #0]
 8002768:	4909      	ldr	r1, [pc, #36]	@ (8002790 <HAL_ADCEx_InjectedConfigChannel+0x204>)
 800276a:	428a      	cmp	r2, r1
 800276c:	d001      	beq.n	8002772 <HAL_ADCEx_InjectedConfigChannel+0x1e6>
 800276e:	2a11      	cmp	r2, #17
 8002770:	d19e      	bne.n	80026b0 <HAL_ADCEx_InjectedConfigChannel+0x124>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002772:	4906      	ldr	r1, [pc, #24]	@ (800278c <HAL_ADCEx_InjectedConfigChannel+0x200>)
 8002774:	684a      	ldr	r2, [r1, #4]
 8002776:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800277a:	604a      	str	r2, [r1, #4]
 800277c:	e798      	b.n	80026b0 <HAL_ADCEx_InjectedConfigChannel+0x124>
  __HAL_LOCK(hadc);
 800277e:	2002      	movs	r0, #2
}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	000f0001 	.word	0x000f0001
 8002788:	40012000 	.word	0x40012000
 800278c:	40012300 	.word	0x40012300
 8002790:	10000012 	.word	0x10000012

08002794 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002794:	2800      	cmp	r0, #0
 8002796:	f000 80a1 	beq.w	80028dc <HAL_CAN_Init+0x148>
{
 800279a:	b538      	push	{r3, r4, r5, lr}
 800279c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800279e:	f890 3020 	ldrb.w	r3, [r0, #32]
 80027a2:	b1d3      	cbz	r3, 80027da <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027a4:	6822      	ldr	r2, [r4, #0]
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ae:	f7ff fb0b 	bl	8001dc8 <HAL_GetTick>
 80027b2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	f012 0f01 	tst.w	r2, #1
 80027bc:	d110      	bne.n	80027e0 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027be:	f7ff fb03 	bl	8001dc8 <HAL_GetTick>
 80027c2:	1b40      	subs	r0, r0, r5
 80027c4:	280a      	cmp	r0, #10
 80027c6:	d9f5      	bls.n	80027b4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ce:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027d0:	2305      	movs	r3, #5
 80027d2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80027d6:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80027d8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80027da:	f7fe fc6d 	bl	80010b8 <HAL_CAN_MspInit>
 80027de:	e7e1      	b.n	80027a4 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f022 0202 	bic.w	r2, r2, #2
 80027e6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80027e8:	f7ff faee 	bl	8001dc8 <HAL_GetTick>
 80027ec:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	f012 0f02 	tst.w	r2, #2
 80027f6:	d00d      	beq.n	8002814 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027f8:	f7ff fae6 	bl	8001dc8 <HAL_GetTick>
 80027fc:	1b40      	subs	r0, r0, r5
 80027fe:	280a      	cmp	r0, #10
 8002800:	d9f5      	bls.n	80027ee <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002802:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002808:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800280a:	2305      	movs	r3, #5
 800280c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8002810:	2001      	movs	r0, #1
 8002812:	e7e1      	b.n	80027d8 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002814:	7e22      	ldrb	r2, [r4, #24]
 8002816:	2a01      	cmp	r2, #1
 8002818:	d03d      	beq.n	8002896 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002820:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8002822:	7e63      	ldrb	r3, [r4, #25]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d03b      	beq.n	80028a0 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002828:	6822      	ldr	r2, [r4, #0]
 800282a:	6813      	ldr	r3, [r2, #0]
 800282c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002830:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002832:	7ea3      	ldrb	r3, [r4, #26]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d039      	beq.n	80028ac <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	6813      	ldr	r3, [r2, #0]
 800283c:	f023 0320 	bic.w	r3, r3, #32
 8002840:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002842:	7ee3      	ldrb	r3, [r4, #27]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d037      	beq.n	80028b8 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	6813      	ldr	r3, [r2, #0]
 800284c:	f043 0310 	orr.w	r3, r3, #16
 8002850:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002852:	7f23      	ldrb	r3, [r4, #28]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d035      	beq.n	80028c4 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002858:	6822      	ldr	r2, [r4, #0]
 800285a:	6813      	ldr	r3, [r2, #0]
 800285c:	f023 0308 	bic.w	r3, r3, #8
 8002860:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002862:	7f63      	ldrb	r3, [r4, #29]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d033      	beq.n	80028d0 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002868:	6822      	ldr	r2, [r4, #0]
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002872:	68a3      	ldr	r3, [r4, #8]
 8002874:	68e2      	ldr	r2, [r4, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	6922      	ldr	r2, [r4, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	6962      	ldr	r2, [r4, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	6862      	ldr	r2, [r4, #4]
 8002882:	3a01      	subs	r2, #1
 8002884:	6821      	ldr	r1, [r4, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800288a:	2000      	movs	r0, #0
 800288c:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800288e:	2301      	movs	r3, #1
 8002890:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002894:	e7a0      	b.n	80027d8 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e7c0      	b.n	8002822 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	6813      	ldr	r3, [r2, #0]
 80028a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e7c2      	b.n	8002832 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ac:	6822      	ldr	r2, [r4, #0]
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	f043 0320 	orr.w	r3, r3, #32
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e7c4      	b.n	8002842 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028b8:	6822      	ldr	r2, [r4, #0]
 80028ba:	6813      	ldr	r3, [r2, #0]
 80028bc:	f023 0310 	bic.w	r3, r3, #16
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e7c6      	b.n	8002852 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028c4:	6822      	ldr	r2, [r4, #0]
 80028c6:	6813      	ldr	r3, [r2, #0]
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e7c8      	b.n	8002862 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028d0:	6822      	ldr	r2, [r4, #0]
 80028d2:	6813      	ldr	r3, [r2, #0]
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e7ca      	b.n	8002872 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
}
 80028de:	4770      	bx	lr

080028e0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80028e0:	2800      	cmp	r0, #0
 80028e2:	db07      	blt.n	80028f4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e4:	f000 021f 	and.w	r2, r0, #31
 80028e8:	0940      	lsrs	r0, r0, #5
 80028ea:	2301      	movs	r3, #1
 80028ec:	4093      	lsls	r3, r2
 80028ee:	4a02      	ldr	r2, [pc, #8]	@ (80028f8 <__NVIC_EnableIRQ+0x18>)
 80028f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80028fc:	2800      	cmp	r0, #0
 80028fe:	db08      	blt.n	8002912 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	0109      	lsls	r1, r1, #4
 8002902:	b2c9      	uxtb	r1, r1
 8002904:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002908:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800290c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002910:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	f000 000f 	and.w	r0, r0, #15
 8002916:	0109      	lsls	r1, r1, #4
 8002918:	b2c9      	uxtb	r1, r1
 800291a:	4b01      	ldr	r3, [pc, #4]	@ (8002920 <__NVIC_SetPriority+0x24>)
 800291c:	5419      	strb	r1, [r3, r0]
  }
}
 800291e:	4770      	bx	lr
 8002920:	e000ed14 	.word	0xe000ed14

08002924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002924:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002926:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292a:	f1c0 0c07 	rsb	ip, r0, #7
 800292e:	f1bc 0f04 	cmp.w	ip, #4
 8002932:	bf28      	it	cs
 8002934:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002938:	1d03      	adds	r3, r0, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d90f      	bls.n	800295e <NVIC_EncodePriority+0x3a>
 800293e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 3eff 	mov.w	lr, #4294967295
 8002944:	fa0e f00c 	lsl.w	r0, lr, ip
 8002948:	ea21 0100 	bic.w	r1, r1, r0
 800294c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294e:	fa0e fe03 	lsl.w	lr, lr, r3
 8002952:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002956:	ea41 0002 	orr.w	r0, r1, r2
 800295a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	2300      	movs	r3, #0
 8002960:	e7ee      	b.n	8002940 <NVIC_EncodePriority+0x1c>
	...

08002964 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002966:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002968:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002970:	0200      	lsls	r0, r0, #8
 8002972:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002976:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002980:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002988:	b510      	push	{r4, lr}
 800298a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_NVIC_SetPriority+0x1c>)
 800298e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002990:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002994:	f7ff ffc6 	bl	8002924 <NVIC_EncodePriority>
 8002998:	4601      	mov	r1, r0
 800299a:	4620      	mov	r0, r4
 800299c:	f7ff ffae 	bl	80028fc <__NVIC_SetPriority>
}
 80029a0:	bd10      	pop	{r4, pc}
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029aa:	f7ff ff99 	bl	80028e0 <__NVIC_EnableIRQ>
}
 80029ae:	bd08      	pop	{r3, pc}

080029b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029b2:	6805      	ldr	r5, [r0, #0]
 80029b4:	682c      	ldr	r4, [r5, #0]
 80029b6:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80029ba:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029bc:	6804      	ldr	r4, [r0, #0]
 80029be:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c0:	6883      	ldr	r3, [r0, #8]
 80029c2:	2b40      	cmp	r3, #64	@ 0x40
 80029c4:	d005      	beq.n	80029d2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80029c6:	6803      	ldr	r3, [r0, #0]
 80029c8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80029ca:	6803      	ldr	r3, [r0, #0]
 80029cc:	60da      	str	r2, [r3, #12]
  }
}
 80029ce:	bc30      	pop	{r4, r5}
 80029d0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80029d2:	6803      	ldr	r3, [r0, #0]
 80029d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80029d6:	6803      	ldr	r3, [r0, #0]
 80029d8:	60d9      	str	r1, [r3, #12]
 80029da:	e7f8      	b.n	80029ce <DMA_SetConfig+0x1e>

080029dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029dc:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029de:	6803      	ldr	r3, [r0, #0]
 80029e0:	b2d9      	uxtb	r1, r3
 80029e2:	3910      	subs	r1, #16
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <DMA_CalcBaseAndBitshift+0x34>)
 80029e6:	fba2 4201 	umull	r4, r2, r2, r1
 80029ea:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ec:	4c09      	ldr	r4, [pc, #36]	@ (8002a14 <DMA_CalcBaseAndBitshift+0x38>)
 80029ee:	5ca2      	ldrb	r2, [r4, r2]
 80029f0:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029f2:	295f      	cmp	r1, #95	@ 0x5f
 80029f4:	d907      	bls.n	8002a06 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029f6:	f36f 0309 	bfc	r3, #0, #10
 80029fa:	3304      	adds	r3, #4
 80029fc:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80029fe:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8002a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a04:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a06:	f36f 0309 	bfc	r3, #0, #10
 8002a0a:	6583      	str	r3, [r0, #88]	@ 0x58
 8002a0c:	e7f7      	b.n	80029fe <DMA_CalcBaseAndBitshift+0x22>
 8002a0e:	bf00      	nop
 8002a10:	aaaaaaab 	.word	0xaaaaaaab
 8002a14:	080060f8 	.word	0x080060f8

08002a18 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a18:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a1a:	6982      	ldr	r2, [r0, #24]
 8002a1c:	b992      	cbnz	r2, 8002a44 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00a      	beq.n	8002a38 <DMA_CheckFifoParam+0x20>
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d002      	beq.n	8002a2c <DMA_CheckFifoParam+0x14>
 8002a26:	b10b      	cbz	r3, 8002a2c <DMA_CheckFifoParam+0x14>
 8002a28:	2000      	movs	r0, #0
 8002a2a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a2c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002a2e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002a32:	d128      	bne.n	8002a86 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2000      	movs	r0, #0
 8002a36:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a38:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a3e:	d024      	beq.n	8002a8a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2000      	movs	r0, #0
 8002a42:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a44:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002a48:	d009      	beq.n	8002a5e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d925      	bls.n	8002a9a <DMA_CheckFifoParam+0x82>
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d125      	bne.n	8002a9e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a52:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002a54:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002a58:	d123      	bne.n	8002aa2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	4770      	bx	lr
    switch (tmp)
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d803      	bhi.n	8002a6a <DMA_CheckFifoParam+0x52>
 8002a62:	e8df f003 	tbb	[pc, r3]
 8002a66:	0414      	.short	0x0414
 8002a68:	0a14      	.short	0x0a14
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a6e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002a70:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002a74:	d10d      	bne.n	8002a92 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	2000      	movs	r0, #0
 8002a78:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a80:	d009      	beq.n	8002a96 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2000      	movs	r0, #0
 8002a84:	4770      	bx	lr
        status = HAL_ERROR;
 8002a86:	2001      	movs	r0, #1
 8002a88:	4770      	bx	lr
        status = HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	4770      	bx	lr
      status = HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	4770      	bx	lr
        status = HAL_ERROR;
 8002a92:	2001      	movs	r0, #1
 8002a94:	4770      	bx	lr
        status = HAL_ERROR;
 8002a96:	2001      	movs	r0, #1
 8002a98:	4770      	bx	lr
      status = HAL_ERROR;
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	4770      	bx	lr
    switch (tmp)
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8002aa2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_DMA_Init>:
{
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff f98c 	bl	8001dc8 <HAL_GetTick>
  if(hdma == NULL)
 8002ab0:	2c00      	cmp	r4, #0
 8002ab2:	d05b      	beq.n	8002b6c <HAL_DMA_Init+0xc4>
 8002ab4:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8002abc:	2300      	movs	r3, #0
 8002abe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002ac2:	6822      	ldr	r2, [r4, #0]
 8002ac4:	6813      	ldr	r3, [r2, #0]
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	f012 0f01 	tst.w	r2, #1
 8002ad4:	d00a      	beq.n	8002aec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad6:	f7ff f977 	bl	8001dc8 <HAL_GetTick>
 8002ada:	1b43      	subs	r3, r0, r5
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d9f5      	bls.n	8002acc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002aec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aee:	4920      	ldr	r1, [pc, #128]	@ (8002b70 <HAL_DMA_Init+0xc8>)
 8002af0:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af2:	6862      	ldr	r2, [r4, #4]
 8002af4:	68a0      	ldr	r0, [r4, #8]
 8002af6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afc:	6920      	ldr	r0, [r4, #16]
 8002afe:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b00:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b02:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b04:	69a0      	ldr	r0, [r4, #24]
 8002b06:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b08:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0c:	6a20      	ldr	r0, [r4, #32]
 8002b0e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b10:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b12:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002b14:	2904      	cmp	r1, #4
 8002b16:	d01e      	beq.n	8002b56 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002b18:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002b1a:	6826      	ldr	r6, [r4, #0]
 8002b1c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b1e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002b22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b24:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d107      	bne.n	8002b3a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002b2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b2c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002b30:	b11b      	cbz	r3, 8002b3a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7ff ff70 	bl	8002a18 <DMA_CheckFifoParam>
 8002b38:	b990      	cbnz	r0, 8002b60 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002b3a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7ff ff4d 	bl	80029dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b42:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002b44:	233f      	movs	r3, #63	@ 0x3f
 8002b46:	4093      	lsls	r3, r2
 8002b48:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002b54:	e7c9      	b.n	8002aea <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002b58:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002b5a:	4301      	orrs	r1, r0
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	e7db      	b.n	8002b18 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b60:	2340      	movs	r3, #64	@ 0x40
 8002b62:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002b64:	2001      	movs	r0, #1
 8002b66:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8002b6a:	e7be      	b.n	8002aea <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	e7bc      	b.n	8002aea <HAL_DMA_Init+0x42>
 8002b70:	f010803f 	.word	0xf010803f

08002b74 <HAL_DMA_Start_IT>:
{
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b78:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8002b7a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8002b7e:	2801      	cmp	r0, #1
 8002b80:	d02a      	beq.n	8002bd8 <HAL_DMA_Start_IT+0x64>
 8002b82:	2001      	movs	r0, #1
 8002b84:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b88:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8002b8c:	2801      	cmp	r0, #1
 8002b8e:	d004      	beq.n	8002b9a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002b90:	2300      	movs	r3, #0
 8002b92:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8002b96:	2002      	movs	r0, #2
}
 8002b98:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9a:	2002      	movs	r0, #2
 8002b9c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7ff ff03 	bl	80029b0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002baa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002bac:	233f      	movs	r3, #63	@ 0x3f
 8002bae:	4093      	lsls	r3, r2
 8002bb0:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	6813      	ldr	r3, [r2, #0]
 8002bb6:	f043 0316 	orr.w	r3, r3, #22
 8002bba:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002bbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bbe:	b123      	cbz	r3, 8002bca <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bc0:	6822      	ldr	r2, [r4, #0]
 8002bc2:	6813      	ldr	r3, [r2, #0]
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002bca:	6822      	ldr	r2, [r4, #0]
 8002bcc:	6813      	ldr	r3, [r2, #0]
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	e7df      	b.n	8002b98 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002bd8:	2002      	movs	r0, #2
 8002bda:	e7dd      	b.n	8002b98 <HAL_DMA_Start_IT+0x24>

08002bdc <HAL_DMA_Abort>:
{
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be0:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8002be2:	f7ff f8f1 	bl	8001dc8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be6:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d006      	beq.n	8002bfc <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002bf8:	2001      	movs	r0, #1
}
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfe:	6822      	ldr	r2, [r4, #0]
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	f023 0316 	bic.w	r3, r3, #22
 8002c06:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c08:	6822      	ldr	r2, [r4, #0]
 8002c0a:	6953      	ldr	r3, [r2, #20]
 8002c0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c10:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c14:	b1e3      	cbz	r3, 8002c50 <HAL_DMA_Abort+0x74>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	f023 0308 	bic.w	r3, r3, #8
 8002c1e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002c20:	6822      	ldr	r2, [r4, #0]
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f013 0f01 	tst.w	r3, #1
 8002c32:	d011      	beq.n	8002c58 <HAL_DMA_Abort+0x7c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c34:	f7ff f8c8 	bl	8001dc8 <HAL_GetTick>
 8002c38:	1b43      	subs	r3, r0, r5
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d9f5      	bls.n	8002c2a <HAL_DMA_Abort+0x4e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c42:	2003      	movs	r0, #3
 8002c44:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8002c4e:	e7d4      	b.n	8002bfa <HAL_DMA_Abort+0x1e>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c50:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1df      	bne.n	8002c16 <HAL_DMA_Abort+0x3a>
 8002c56:	e7e3      	b.n	8002c20 <HAL_DMA_Abort+0x44>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c58:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002c5a:	233f      	movs	r3, #63	@ 0x3f
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8002c6c:	e7c5      	b.n	8002bfa <HAL_DMA_Abort+0x1e>

08002c6e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c6e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d003      	beq.n	8002c7e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c7e:	2305      	movs	r3, #5
 8002c80:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002c84:	6802      	ldr	r2, [r0, #0]
 8002c86:	6813      	ldr	r3, [r2, #0]
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002c8e:	2000      	movs	r0, #0
}
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_DMA_IRQHandler>:
{
 8002c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c96:	b083      	sub	sp, #12
 8002c98:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c9e:	4b72      	ldr	r3, [pc, #456]	@ (8002e68 <HAL_DMA_IRQHandler+0x1d4>)
 8002ca0:	681d      	ldr	r5, [r3, #0]
 8002ca2:	4b72      	ldr	r3, [pc, #456]	@ (8002e6c <HAL_DMA_IRQHandler+0x1d8>)
 8002ca4:	fba3 3505 	umull	r3, r5, r3, r5
 8002ca8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002caa:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8002cac:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cae:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	4093      	lsls	r3, r2
 8002cb4:	4233      	tst	r3, r6
 8002cb6:	d010      	beq.n	8002cda <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cb8:	6803      	ldr	r3, [r0, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	f012 0f04 	tst.w	r2, #4
 8002cc0:	d00b      	beq.n	8002cda <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	f022 0204 	bic.w	r2, r2, #4
 8002cc8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cca:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002ccc:	2308      	movs	r3, #8
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cd2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cda:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002cdc:	2301      	movs	r3, #1
 8002cde:	4093      	lsls	r3, r2
 8002ce0:	4233      	tst	r3, r6
 8002ce2:	d009      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ce4:	6822      	ldr	r2, [r4, #0]
 8002ce6:	6952      	ldr	r2, [r2, #20]
 8002ce8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002cec:	d004      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cee:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cf0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	4233      	tst	r3, r6
 8002d00:	d009      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	f012 0f02 	tst.w	r2, #2
 8002d0a:	d004      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d0c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d16:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002d18:	2310      	movs	r3, #16
 8002d1a:	4093      	lsls	r3, r2
 8002d1c:	4233      	tst	r3, r6
 8002d1e:	d024      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d20:	6822      	ldr	r2, [r4, #0]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	f012 0f08 	tst.w	r2, #8
 8002d28:	d01f      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d2a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002d34:	d00d      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002d3c:	d104      	bne.n	8002d48 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002d3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d40:	b19b      	cbz	r3, 8002d6a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002d42:	4620      	mov	r0, r4
 8002d44:	4798      	blx	r3
 8002d46:	e010      	b.n	8002d6a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d48:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002d4a:	b173      	cbz	r3, 8002d6a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	4798      	blx	r3
 8002d50:	e00b      	b.n	8002d6a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002d58:	d103      	bne.n	8002d62 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	f022 0208 	bic.w	r2, r2, #8
 8002d60:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002d62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d64:	b10b      	cbz	r3, 8002d6a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002d66:	4620      	mov	r0, r4
 8002d68:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	4233      	tst	r3, r6
 8002d72:	d054      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d74:	6822      	ldr	r2, [r4, #0]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	f012 0f10 	tst.w	r2, #16
 8002d7c:	d04f      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d7e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d80:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002d84:	2b05      	cmp	r3, #5
 8002d86:	d00e      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002d90:	d033      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002d98:	d12a      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8002d9a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03e      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8002da0:	4620      	mov	r0, r4
 8002da2:	4798      	blx	r3
 8002da4:	e03b      	b.n	8002e1e <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	6813      	ldr	r3, [r2, #0]
 8002daa:	f023 0316 	bic.w	r3, r3, #22
 8002dae:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	6953      	ldr	r3, [r2, #20]
 8002db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002db8:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002dbc:	b1a3      	cbz	r3, 8002de8 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	f023 0308 	bic.w	r3, r3, #8
 8002dc6:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002dca:	233f      	movs	r3, #63	@ 0x3f
 8002dcc:	4093      	lsls	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002ddc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03f      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8002de2:	4620      	mov	r0, r4
 8002de4:	4798      	blx	r3
        return;
 8002de6:	e03c      	b.n	8002e62 <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002de8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e7      	bne.n	8002dbe <HAL_DMA_IRQHandler+0x12a>
 8002dee:	e7eb      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8002df0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002df2:	b1a3      	cbz	r3, 8002e1e <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8002df4:	4620      	mov	r0, r4
 8002df6:	4798      	blx	r3
 8002df8:	e011      	b.n	8002e1e <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002e00:	d109      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	f022 0210 	bic.w	r2, r2, #16
 8002e08:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8002e10:	2300      	movs	r3, #0
 8002e12:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8002e16:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002e18:	b10b      	cbz	r3, 8002e1e <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e1e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002e20:	b1fb      	cbz	r3, 8002e62 <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e22:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002e24:	f013 0f01 	tst.w	r3, #1
 8002e28:	d017      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002e3a:	9b01      	ldr	r3, [sp, #4]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	42ab      	cmp	r3, r5
 8002e42:	d804      	bhi.n	8002e4e <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f013 0f01 	tst.w	r3, #1
 8002e4c:	d1f5      	bne.n	8002e3a <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002e54:	2300      	movs	r3, #0
 8002e56:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002e5a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002e5c:	b10b      	cbz	r3, 8002e62 <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4798      	blx	r3
}
 8002e62:	b003      	add	sp, #12
 8002e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000020 	.word	0x20000020
 8002e6c:	1b4e81b5 	.word	0x1b4e81b5

08002e70 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	2b0f      	cmp	r3, #15
 8002e74:	f200 80e3 	bhi.w	800303e <HAL_GPIO_Init+0x1ce>
{
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	e065      	b.n	8002f4a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e80:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002e84:	2403      	movs	r4, #3
 8002e86:	fa04 f40e 	lsl.w	r4, r4, lr
 8002e8a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8e:	68cc      	ldr	r4, [r1, #12]
 8002e90:	fa04 f40e 	lsl.w	r4, r4, lr
 8002e94:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002e96:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e98:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e9a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e9e:	684a      	ldr	r2, [r1, #4]
 8002ea0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002ea8:	6042      	str	r2, [r0, #4]
 8002eaa:	e05c      	b.n	8002f66 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eac:	08dc      	lsrs	r4, r3, #3
 8002eae:	3408      	adds	r4, #8
 8002eb0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb4:	f003 0507 	and.w	r5, r3, #7
 8002eb8:	00ad      	lsls	r5, r5, #2
 8002eba:	f04f 0e0f 	mov.w	lr, #15
 8002ebe:	fa0e fe05 	lsl.w	lr, lr, r5
 8002ec2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec6:	690a      	ldr	r2, [r1, #16]
 8002ec8:	40aa      	lsls	r2, r5
 8002eca:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002ece:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002ed2:	e05c      	b.n	8002f8e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed4:	2206      	movs	r2, #6
 8002ed6:	e000      	b.n	8002eda <HAL_GPIO_Init+0x6a>
 8002ed8:	2200      	movs	r2, #0
 8002eda:	fa02 f20e 	lsl.w	r2, r2, lr
 8002ede:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee0:	3402      	adds	r4, #2
 8002ee2:	4d57      	ldr	r5, [pc, #348]	@ (8003040 <HAL_GPIO_Init+0x1d0>)
 8002ee4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee8:	4a56      	ldr	r2, [pc, #344]	@ (8003044 <HAL_GPIO_Init+0x1d4>)
 8002eea:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	ea6f 020c 	mvn.w	r2, ip
 8002ef0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef4:	684e      	ldr	r6, [r1, #4]
 8002ef6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8002efa:	d001      	beq.n	8002f00 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8002efc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002f00:	4c50      	ldr	r4, [pc, #320]	@ (8003044 <HAL_GPIO_Init+0x1d4>)
 8002f02:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002f04:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f0a:	684e      	ldr	r6, [r1, #4]
 8002f0c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8002f10:	d001      	beq.n	8002f16 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8002f12:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002f16:	4c4b      	ldr	r4, [pc, #300]	@ (8003044 <HAL_GPIO_Init+0x1d4>)
 8002f18:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8002f1a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002f1c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f20:	684e      	ldr	r6, [r1, #4]
 8002f22:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8002f26:	d001      	beq.n	8002f2c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002f28:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002f2c:	4c45      	ldr	r4, [pc, #276]	@ (8003044 <HAL_GPIO_Init+0x1d4>)
 8002f2e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f30:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f34:	684d      	ldr	r5, [r1, #4]
 8002f36:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8002f3a:	d001      	beq.n	8002f40 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8002f3c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8002f40:	4c40      	ldr	r4, [pc, #256]	@ (8003044 <HAL_GPIO_Init+0x1d4>)
 8002f42:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f44:	3301      	adds	r3, #1
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	d877      	bhi.n	800303a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4e:	680c      	ldr	r4, [r1, #0]
 8002f50:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002f54:	ea32 0404 	bics.w	r4, r2, r4
 8002f58:	d1f4      	bne.n	8002f44 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5a:	684c      	ldr	r4, [r1, #4]
 8002f5c:	f004 0403 	and.w	r4, r4, #3
 8002f60:	3c01      	subs	r4, #1
 8002f62:	2c01      	cmp	r4, #1
 8002f64:	d98b      	bls.n	8002e7e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f66:	684a      	ldr	r2, [r1, #4]
 8002f68:	f002 0203 	and.w	r2, r2, #3
 8002f6c:	2a03      	cmp	r2, #3
 8002f6e:	d009      	beq.n	8002f84 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002f70:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f72:	005d      	lsls	r5, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	40aa      	lsls	r2, r5
 8002f78:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f7c:	688a      	ldr	r2, [r1, #8]
 8002f7e:	40aa      	lsls	r2, r5
 8002f80:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002f82:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f84:	684a      	ldr	r2, [r1, #4]
 8002f86:	f002 0203 	and.w	r2, r2, #3
 8002f8a:	2a02      	cmp	r2, #2
 8002f8c:	d08e      	beq.n	8002eac <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8002f8e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f90:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002f94:	2203      	movs	r2, #3
 8002f96:	fa02 f20e 	lsl.w	r2, r2, lr
 8002f9a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f9e:	684a      	ldr	r2, [r1, #4]
 8002fa0:	f002 0203 	and.w	r2, r2, #3
 8002fa4:	fa02 f20e 	lsl.w	r2, r2, lr
 8002fa8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002faa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fac:	684a      	ldr	r2, [r1, #4]
 8002fae:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8002fb2:	d0c7      	beq.n	8002f44 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	9201      	str	r2, [sp, #4]
 8002fb8:	4a23      	ldr	r2, [pc, #140]	@ (8003048 <HAL_GPIO_Init+0x1d8>)
 8002fba:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002fbc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002fc0:	6454      	str	r4, [r2, #68]	@ 0x44
 8002fc2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002fc4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002fc8:	9201      	str	r2, [sp, #4]
 8002fca:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002fcc:	089c      	lsrs	r4, r3, #2
 8002fce:	1ca5      	adds	r5, r4, #2
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003040 <HAL_GPIO_Init+0x1d0>)
 8002fd2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd6:	f003 0e03 	and.w	lr, r3, #3
 8002fda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002fde:	220f      	movs	r2, #15
 8002fe0:	fa02 f20e 	lsl.w	r2, r2, lr
 8002fe4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fe8:	4a18      	ldr	r2, [pc, #96]	@ (800304c <HAL_GPIO_Init+0x1dc>)
 8002fea:	4290      	cmp	r0, r2
 8002fec:	f43f af74 	beq.w	8002ed8 <HAL_GPIO_Init+0x68>
 8002ff0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ff4:	4290      	cmp	r0, r2
 8002ff6:	d016      	beq.n	8003026 <HAL_GPIO_Init+0x1b6>
 8002ff8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ffc:	4290      	cmp	r0, r2
 8002ffe:	d014      	beq.n	800302a <HAL_GPIO_Init+0x1ba>
 8003000:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003004:	4290      	cmp	r0, r2
 8003006:	d012      	beq.n	800302e <HAL_GPIO_Init+0x1be>
 8003008:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800300c:	4290      	cmp	r0, r2
 800300e:	d010      	beq.n	8003032 <HAL_GPIO_Init+0x1c2>
 8003010:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003014:	4290      	cmp	r0, r2
 8003016:	d00e      	beq.n	8003036 <HAL_GPIO_Init+0x1c6>
 8003018:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800301c:	4290      	cmp	r0, r2
 800301e:	f43f af59 	beq.w	8002ed4 <HAL_GPIO_Init+0x64>
 8003022:	2207      	movs	r2, #7
 8003024:	e759      	b.n	8002eda <HAL_GPIO_Init+0x6a>
 8003026:	2201      	movs	r2, #1
 8003028:	e757      	b.n	8002eda <HAL_GPIO_Init+0x6a>
 800302a:	2202      	movs	r2, #2
 800302c:	e755      	b.n	8002eda <HAL_GPIO_Init+0x6a>
 800302e:	2203      	movs	r2, #3
 8003030:	e753      	b.n	8002eda <HAL_GPIO_Init+0x6a>
 8003032:	2204      	movs	r2, #4
 8003034:	e751      	b.n	8002eda <HAL_GPIO_Init+0x6a>
 8003036:	2205      	movs	r2, #5
 8003038:	e74f      	b.n	8002eda <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800303a:	b002      	add	sp, #8
 800303c:	bd70      	pop	{r4, r5, r6, pc}
 800303e:	4770      	bx	lr
 8003040:	40013800 	.word	0x40013800
 8003044:	40013c00 	.word	0x40013c00
 8003048:	40023800 	.word	0x40023800
 800304c:	40020000 	.word	0x40020000

08003050 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003050:	6903      	ldr	r3, [r0, #16]
 8003052:	4219      	tst	r1, r3
 8003054:	d001      	beq.n	800305a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003056:	2001      	movs	r0, #1
 8003058:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800305a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800305c:	4770      	bx	lr

0800305e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800305e:	b10a      	cbz	r2, 8003064 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003060:	6181      	str	r1, [r0, #24]
 8003062:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003064:	0409      	lsls	r1, r1, #16
 8003066:	6181      	str	r1, [r0, #24]
  }
}
 8003068:	4770      	bx	lr

0800306a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800306a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800306c:	ea01 0203 	and.w	r2, r1, r3
 8003070:	ea21 0103 	bic.w	r1, r1, r3
 8003074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003078:	6181      	str	r1, [r0, #24]
}
 800307a:	4770      	bx	lr

0800307c <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800307c:	2800      	cmp	r0, #0
 800307e:	f000 80cc 	beq.w	800321a <HAL_I2C_Init+0x19e>
{
 8003082:	b570      	push	{r4, r5, r6, lr}
 8003084:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003086:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800308a:	2b00      	cmp	r3, #0
 800308c:	d077      	beq.n	800317e <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800308e:	2324      	movs	r3, #36	@ 0x24
 8003090:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	6813      	ldr	r3, [r2, #0]
 80030a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030a6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030a8:	6822      	ldr	r2, [r4, #0]
 80030aa:	6813      	ldr	r3, [r2, #0]
 80030ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80030b0:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030b2:	f000 f993 	bl	80033dc <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030b6:	6862      	ldr	r2, [r4, #4]
 80030b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003224 <HAL_I2C_Init+0x1a8>)
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d864      	bhi.n	8003188 <HAL_I2C_Init+0x10c>
 80030be:	4b5a      	ldr	r3, [pc, #360]	@ (8003228 <HAL_I2C_Init+0x1ac>)
 80030c0:	4298      	cmp	r0, r3
 80030c2:	bf8c      	ite	hi
 80030c4:	2300      	movhi	r3, #0
 80030c6:	2301      	movls	r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f040 80a8 	bne.w	800321e <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ce:	4957      	ldr	r1, [pc, #348]	@ (800322c <HAL_I2C_Init+0x1b0>)
 80030d0:	fba1 3100 	umull	r3, r1, r1, r0
 80030d4:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030d6:	6825      	ldr	r5, [r4, #0]
 80030d8:	686a      	ldr	r2, [r5, #4]
 80030da:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80030de:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80030e2:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030e4:	6821      	ldr	r1, [r4, #0]
 80030e6:	6a0a      	ldr	r2, [r1, #32]
 80030e8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80030ec:	6866      	ldr	r6, [r4, #4]
 80030ee:	4d4d      	ldr	r5, [pc, #308]	@ (8003224 <HAL_I2C_Init+0x1a8>)
 80030f0:	42ae      	cmp	r6, r5
 80030f2:	d84f      	bhi.n	8003194 <HAL_I2C_Init+0x118>
 80030f4:	3301      	adds	r3, #1
 80030f6:	4313      	orrs	r3, r2
 80030f8:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030fa:	6821      	ldr	r1, [r4, #0]
 80030fc:	69ca      	ldr	r2, [r1, #28]
 80030fe:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8003102:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003106:	6865      	ldr	r5, [r4, #4]
 8003108:	4b46      	ldr	r3, [pc, #280]	@ (8003224 <HAL_I2C_Init+0x1a8>)
 800310a:	429d      	cmp	r5, r3
 800310c:	d84c      	bhi.n	80031a8 <HAL_I2C_Init+0x12c>
 800310e:	1e43      	subs	r3, r0, #1
 8003110:	006d      	lsls	r5, r5, #1
 8003112:	fbb3 f3f5 	udiv	r3, r3, r5
 8003116:	3301      	adds	r3, #1
 8003118:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800311c:	4203      	tst	r3, r0
 800311e:	d078      	beq.n	8003212 <HAL_I2C_Init+0x196>
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	431a      	orrs	r2, r3
 8003126:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003128:	6821      	ldr	r1, [r4, #0]
 800312a:	680b      	ldr	r3, [r1, #0]
 800312c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003130:	69e2      	ldr	r2, [r4, #28]
 8003132:	6a20      	ldr	r0, [r4, #32]
 8003134:	4302      	orrs	r2, r0
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800313a:	6821      	ldr	r1, [r4, #0]
 800313c:	688b      	ldr	r3, [r1, #8]
 800313e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003142:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003146:	6922      	ldr	r2, [r4, #16]
 8003148:	68e0      	ldr	r0, [r4, #12]
 800314a:	4302      	orrs	r2, r0
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003150:	6821      	ldr	r1, [r4, #0]
 8003152:	68cb      	ldr	r3, [r1, #12]
 8003154:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003158:	6962      	ldr	r2, [r4, #20]
 800315a:	69a0      	ldr	r0, [r4, #24]
 800315c:	4302      	orrs	r2, r0
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800316c:	2000      	movs	r0, #0
 800316e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003170:	2320      	movs	r3, #32
 8003172:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003176:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 800317c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800317e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8003182:	f7fe fca7 	bl	8001ad4 <HAL_I2C_MspInit>
 8003186:	e782      	b.n	800308e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003188:	4b29      	ldr	r3, [pc, #164]	@ (8003230 <HAL_I2C_Init+0x1b4>)
 800318a:	4298      	cmp	r0, r3
 800318c:	bf8c      	ite	hi
 800318e:	2300      	movhi	r3, #0
 8003190:	2301      	movls	r3, #1
 8003192:	e799      	b.n	80030c8 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003194:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8003198:	fb05 f303 	mul.w	r3, r5, r3
 800319c:	4d25      	ldr	r5, [pc, #148]	@ (8003234 <HAL_I2C_Init+0x1b8>)
 800319e:	fba5 5303 	umull	r5, r3, r5, r3
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	3301      	adds	r3, #1
 80031a6:	e7a6      	b.n	80030f6 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031a8:	68a6      	ldr	r6, [r4, #8]
 80031aa:	b9be      	cbnz	r6, 80031dc <HAL_I2C_Init+0x160>
 80031ac:	1e43      	subs	r3, r0, #1
 80031ae:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80031b2:	fbb3 f3fc 	udiv	r3, r3, ip
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	bb43      	cbnz	r3, 8003216 <HAL_I2C_Init+0x19a>
 80031c4:	b9c6      	cbnz	r6, 80031f8 <HAL_I2C_Init+0x17c>
 80031c6:	1e43      	subs	r3, r0, #1
 80031c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031cc:	fbb3 f3f5 	udiv	r3, r3, r5
 80031d0:	3301      	adds	r3, #1
 80031d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031da:	e7a3      	b.n	8003124 <HAL_I2C_Init+0xa8>
 80031dc:	1e43      	subs	r3, r0, #1
 80031de:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80031e2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80031e6:	fbb3 f3fc 	udiv	r3, r3, ip
 80031ea:	3301      	adds	r3, #1
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	e7e4      	b.n	80031c2 <HAL_I2C_Init+0x146>
 80031f8:	1e43      	subs	r3, r0, #1
 80031fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80031fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003202:	fbb3 f3f5 	udiv	r3, r3, r5
 8003206:	3301      	adds	r3, #1
 8003208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003210:	e788      	b.n	8003124 <HAL_I2C_Init+0xa8>
 8003212:	2304      	movs	r3, #4
 8003214:	e786      	b.n	8003124 <HAL_I2C_Init+0xa8>
 8003216:	2301      	movs	r3, #1
 8003218:	e784      	b.n	8003124 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800321a:	2001      	movs	r0, #1
}
 800321c:	4770      	bx	lr
    return HAL_ERROR;
 800321e:	2001      	movs	r0, #1
 8003220:	e7ac      	b.n	800317c <HAL_I2C_Init+0x100>
 8003222:	bf00      	nop
 8003224:	000186a0 	.word	0x000186a0
 8003228:	001e847f 	.word	0x001e847f
 800322c:	431bde83 	.word	0x431bde83
 8003230:	003d08ff 	.word	0x003d08ff
 8003234:	10624dd3 	.word	0x10624dd3

08003238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003238:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	2100      	movs	r1, #0
 800323c:	9100      	str	r1, [sp, #0]
 800323e:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_MspInit+0x34>)
 8003240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003242:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003246:	645a      	str	r2, [r3, #68]	@ 0x44
 8003248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800324a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800324e:	9200      	str	r2, [sp, #0]
 8003250:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003252:	9101      	str	r1, [sp, #4]
 8003254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003256:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003266:	b002      	add	sp, #8
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800

08003270 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003270:	2800      	cmp	r0, #0
 8003272:	f000 809b 	beq.w	80033ac <HAL_RCC_ClockConfig+0x13c>
{
 8003276:	b570      	push	{r4, r5, r6, lr}
 8003278:	460d      	mov	r5, r1
 800327a:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b4f      	ldr	r3, [pc, #316]	@ (80033bc <HAL_RCC_ClockConfig+0x14c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	428b      	cmp	r3, r1
 8003286:	d208      	bcs.n	800329a <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003288:	b2cb      	uxtb	r3, r1
 800328a:	4a4c      	ldr	r2, [pc, #304]	@ (80033bc <HAL_RCC_ClockConfig+0x14c>)
 800328c:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	428b      	cmp	r3, r1
 8003296:	f040 808b 	bne.w	80033b0 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	f013 0f02 	tst.w	r3, #2
 80032a0:	d017      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a2:	f013 0f04 	tst.w	r3, #4
 80032a6:	d004      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4a45      	ldr	r2, [pc, #276]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 80032aa:	6893      	ldr	r3, [r2, #8]
 80032ac:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032b0:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	f013 0f08 	tst.w	r3, #8
 80032b8:	d004      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ba:	4a41      	ldr	r2, [pc, #260]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 80032bc:	6893      	ldr	r3, [r2, #8]
 80032be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4a3e      	ldr	r2, [pc, #248]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 80032c6:	6893      	ldr	r3, [r2, #8]
 80032c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032cc:	68a1      	ldr	r1, [r4, #8]
 80032ce:	430b      	orrs	r3, r1
 80032d0:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	f013 0f01 	tst.w	r3, #1
 80032d8:	d032      	beq.n	8003340 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032da:	6863      	ldr	r3, [r4, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d021      	beq.n	8003324 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e0:	1e9a      	subs	r2, r3, #2
 80032e2:	2a01      	cmp	r2, #1
 80032e4:	d925      	bls.n	8003332 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	4a36      	ldr	r2, [pc, #216]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	f012 0f02 	tst.w	r2, #2
 80032ee:	d061      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f0:	4933      	ldr	r1, [pc, #204]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 80032f2:	688a      	ldr	r2, [r1, #8]
 80032f4:	f022 0203 	bic.w	r2, r2, #3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fc:	f7fe fd64 	bl	8001dc8 <HAL_GetTick>
 8003300:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2f      	ldr	r3, [pc, #188]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	6862      	ldr	r2, [r4, #4]
 800330c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003310:	d016      	beq.n	8003340 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003312:	f7fe fd59 	bl	8001dc8 <HAL_GetTick>
 8003316:	1b80      	subs	r0, r0, r6
 8003318:	f241 3388 	movw	r3, #5000	@ 0x1388
 800331c:	4298      	cmp	r0, r3
 800331e:	d9f0      	bls.n	8003302 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8003320:	2003      	movs	r0, #3
 8003322:	e042      	b.n	80033aa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003324:	4a26      	ldr	r2, [pc, #152]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800332c:	d1e0      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800332e:	2001      	movs	r0, #1
 8003330:	e03b      	b.n	80033aa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	4a23      	ldr	r2, [pc, #140]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800333a:	d1d9      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800333c:	2001      	movs	r0, #1
 800333e:	e034      	b.n	80033aa <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003340:	4b1e      	ldr	r3, [pc, #120]	@ (80033bc <HAL_RCC_ClockConfig+0x14c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	42ab      	cmp	r3, r5
 800334a:	d907      	bls.n	800335c <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334c:	b2ea      	uxtb	r2, r5
 800334e:	4b1b      	ldr	r3, [pc, #108]	@ (80033bc <HAL_RCC_ClockConfig+0x14c>)
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	42ab      	cmp	r3, r5
 800335a:	d12d      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	f013 0f04 	tst.w	r3, #4
 8003362:	d006      	beq.n	8003372 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003364:	4a16      	ldr	r2, [pc, #88]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 8003366:	6893      	ldr	r3, [r2, #8]
 8003368:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800336c:	68e1      	ldr	r1, [r4, #12]
 800336e:	430b      	orrs	r3, r1
 8003370:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	f013 0f08 	tst.w	r3, #8
 8003378:	d007      	beq.n	800338a <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337a:	4a11      	ldr	r2, [pc, #68]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 800337c:	6893      	ldr	r3, [r2, #8]
 800337e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003382:	6921      	ldr	r1, [r4, #16]
 8003384:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003388:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800338a:	f000 f865 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 800338e:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_RCC_ClockConfig+0x150>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003396:	4a0b      	ldr	r2, [pc, #44]	@ (80033c4 <HAL_RCC_ClockConfig+0x154>)
 8003398:	5cd3      	ldrb	r3, [r2, r3]
 800339a:	40d8      	lsrs	r0, r3
 800339c:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <HAL_RCC_ClockConfig+0x158>)
 800339e:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033a0:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <HAL_RCC_ClockConfig+0x15c>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	f001 fc08 	bl	8004bb8 <HAL_InitTick>

  return HAL_OK;
 80033a8:	2000      	movs	r0, #0
}
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
}
 80033ae:	4770      	bx	lr
      return HAL_ERROR;
 80033b0:	2001      	movs	r0, #1
 80033b2:	e7fa      	b.n	80033aa <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80033b4:	2001      	movs	r0, #1
 80033b6:	e7f8      	b.n	80033aa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80033b8:	2001      	movs	r0, #1
 80033ba:	e7f6      	b.n	80033aa <HAL_RCC_ClockConfig+0x13a>
 80033bc:	40023c00 	.word	0x40023c00
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08006108 	.word	0x08006108
 80033c8:	20000020 	.word	0x20000020
 80033cc:	2000001c 	.word	0x2000001c

080033d0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80033d0:	4b01      	ldr	r3, [pc, #4]	@ (80033d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000020 	.word	0x20000020

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033de:	f7ff fff7 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80033ea:	4a03      	ldr	r2, [pc, #12]	@ (80033f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
}
 80033ee:	40d8      	lsrs	r0, r3
 80033f0:	bd08      	pop	{r3, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08006100 	.word	0x08006100

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033fe:	f7ff ffe7 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8003402:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800340a:	4a03      	ldr	r2, [pc, #12]	@ (8003418 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800340c:	5cd3      	ldrb	r3, [r2, r3]
}
 800340e:	40d8      	lsrs	r0, r3
 8003410:	bd08      	pop	{r3, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	08006100 	.word	0x08006100

0800341c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800341c:	230f      	movs	r3, #15
 800341e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_GetClockConfig+0x34>)
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	f002 0203 	and.w	r2, r2, #3
 8003428:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003430:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8003438:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003442:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003444:	4b03      	ldr	r3, [pc, #12]	@ (8003454 <HAL_RCC_GetClockConfig+0x38>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	600b      	str	r3, [r1, #0]
}
 800344e:	4770      	bx	lr
 8003450:	40023800 	.word	0x40023800
 8003454:	40023c00 	.word	0x40023c00

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345a:	4b5e      	ldr	r3, [pc, #376]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x17c>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b08      	cmp	r3, #8
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x16>
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d05b      	beq.n	8003522 <HAL_RCC_GetSysClockFreq+0xca>
 800346a:	485b      	ldr	r0, [pc, #364]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800346c:	e033      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x7e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346e:	4b59      	ldr	r3, [pc, #356]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x17c>)
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800347c:	d02c      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b55      	ldr	r3, [pc, #340]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x17c>)
 8003480:	6858      	ldr	r0, [r3, #4]
 8003482:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003486:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800348a:	ebbc 0c00 	subs.w	ip, ip, r0
 800348e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003492:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003496:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800349a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800349e:	ebb1 010c 	subs.w	r1, r1, ip
 80034a2:	eb63 030e 	sbc.w	r3, r3, lr
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ac:	00c9      	lsls	r1, r1, #3
 80034ae:	eb11 0c00 	adds.w	ip, r1, r0
 80034b2:	f143 0300 	adc.w	r3, r3, #0
 80034b6:	0299      	lsls	r1, r3, #10
 80034b8:	2300      	movs	r3, #0
 80034ba:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80034be:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80034c2:	f7fd fb27 	bl	8000b14 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034c6:	4b43      	ldr	r3, [pc, #268]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x17c>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80034d2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80034d6:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d8:	4b3e      	ldr	r3, [pc, #248]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x17c>)
 80034da:	6858      	ldr	r0, [r3, #4]
 80034dc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80034e0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80034e4:	ebbc 0c00 	subs.w	ip, ip, r0
 80034e8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80034ec:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80034f0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80034f4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80034f8:	ebb1 010c 	subs.w	r1, r1, ip
 80034fc:	eb63 030e 	sbc.w	r3, r3, lr
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003506:	00c9      	lsls	r1, r1, #3
 8003508:	eb11 0c00 	adds.w	ip, r1, r0
 800350c:	f143 0300 	adc.w	r3, r3, #0
 8003510:	0299      	lsls	r1, r3, #10
 8003512:	2300      	movs	r3, #0
 8003514:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003518:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800351c:	f7fd fafa 	bl	8000b14 <__aeabi_uldivmod>
 8003520:	e7d1      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x6e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003522:	4b2c      	ldr	r3, [pc, #176]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x17c>)
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003530:	d02a      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x130>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b28      	ldr	r3, [pc, #160]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x17c>)
 8003534:	6858      	ldr	r0, [r3, #4]
 8003536:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800353a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800353e:	ebbc 0c00 	subs.w	ip, ip, r0
 8003542:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003546:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800354a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800354e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003552:	ebb1 010c 	subs.w	r1, r1, ip
 8003556:	eb63 030e 	sbc.w	r3, r3, lr
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003560:	00c9      	lsls	r1, r1, #3
 8003562:	eb11 0c00 	adds.w	ip, r1, r0
 8003566:	f143 0300 	adc.w	r3, r3, #0
 800356a:	0299      	lsls	r1, r3, #10
 800356c:	2300      	movs	r3, #0
 800356e:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003572:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003576:	f7fd facd 	bl	8000b14 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800357a:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x17c>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8003582:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003586:	e7a6      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x7e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003588:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x17c>)
 800358a:	6858      	ldr	r0, [r3, #4]
 800358c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003590:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003594:	ebbc 0c00 	subs.w	ip, ip, r0
 8003598:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800359c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80035a0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80035a4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80035a8:	ebb1 010c 	subs.w	r1, r1, ip
 80035ac:	eb63 030e 	sbc.w	r3, r3, lr
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b6:	00c9      	lsls	r1, r1, #3
 80035b8:	eb11 0c00 	adds.w	ip, r1, r0
 80035bc:	f143 0300 	adc.w	r3, r3, #0
 80035c0:	0299      	lsls	r1, r3, #10
 80035c2:	2300      	movs	r3, #0
 80035c4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80035c8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80035cc:	f7fd faa2 	bl	8000b14 <__aeabi_uldivmod>
 80035d0:	e7d3      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x122>
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	00f42400 	.word	0x00f42400

080035dc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035dc:	2800      	cmp	r0, #0
 80035de:	f000 8201 	beq.w	80039e4 <HAL_RCC_OscConfig+0x408>
{
 80035e2:	b570      	push	{r4, r5, r6, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e8:	6803      	ldr	r3, [r0, #0]
 80035ea:	f013 0f01 	tst.w	r3, #1
 80035ee:	d041      	beq.n	8003674 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035f0:	4b99      	ldr	r3, [pc, #612]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d032      	beq.n	8003662 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035fc:	4b96      	ldr	r3, [pc, #600]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
        || \
 8003604:	2b08      	cmp	r3, #8
 8003606:	d027      	beq.n	8003658 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003608:	4b93      	ldr	r3, [pc, #588]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003610:	2b0c      	cmp	r3, #12
 8003612:	d059      	beq.n	80036c8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003614:	6863      	ldr	r3, [r4, #4]
 8003616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800361a:	d05b      	beq.n	80036d4 <HAL_RCC_OscConfig+0xf8>
 800361c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003620:	d05e      	beq.n	80036e0 <HAL_RCC_OscConfig+0x104>
 8003622:	4b8d      	ldr	r3, [pc, #564]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003632:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003634:	6863      	ldr	r3, [r4, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d05c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fe fbc5 	bl	8001dc8 <HAL_GetTick>
 800363e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003640:	4b85      	ldr	r3, [pc, #532]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003648:	d114      	bne.n	8003674 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364a:	f7fe fbbd 	bl	8001dc8 <HAL_GetTick>
 800364e:	1b40      	subs	r0, r0, r5
 8003650:	2864      	cmp	r0, #100	@ 0x64
 8003652:	d9f5      	bls.n	8003640 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8003654:	2003      	movs	r0, #3
 8003656:	e1cc      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003658:	4b7f      	ldr	r3, [pc, #508]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003660:	d0d2      	beq.n	8003608 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003662:	4b7d      	ldr	r3, [pc, #500]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800366a:	d003      	beq.n	8003674 <HAL_RCC_OscConfig+0x98>
 800366c:	6863      	ldr	r3, [r4, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 81ba 	beq.w	80039e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	f013 0f02 	tst.w	r3, #2
 800367a:	d060      	beq.n	800373e <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800367c:	4b76      	ldr	r3, [pc, #472]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f013 0f0c 	tst.w	r3, #12
 8003684:	d04a      	beq.n	800371c <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003686:	4b74      	ldr	r3, [pc, #464]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
        || \
 800368e:	2b08      	cmp	r3, #8
 8003690:	d03f      	beq.n	8003712 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b71      	ldr	r3, [pc, #452]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d069      	beq.n	8003772 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800369e:	68e3      	ldr	r3, [r4, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d075      	beq.n	8003790 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a4:	4b6d      	ldr	r3, [pc, #436]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fe fb8d 	bl	8001dc8 <HAL_GetTick>
 80036ae:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	4b69      	ldr	r3, [pc, #420]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f013 0f02 	tst.w	r3, #2
 80036b8:	d161      	bne.n	800377e <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ba:	f7fe fb85 	bl	8001dc8 <HAL_GetTick>
 80036be:	1b40      	subs	r0, r0, r5
 80036c0:	2802      	cmp	r0, #2
 80036c2:	d9f5      	bls.n	80036b0 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80036c4:	2003      	movs	r0, #3
 80036c6:	e194      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c8:	4b63      	ldr	r3, [pc, #396]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80036d0:	d0a0      	beq.n	8003614 <HAL_RCC_OscConfig+0x38>
 80036d2:	e7c6      	b.n	8003662 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d4:	4a60      	ldr	r2, [pc, #384]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e7a9      	b.n	8003634 <HAL_RCC_OscConfig+0x58>
 80036e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e79f      	b.n	8003634 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 80036f4:	f7fe fb68 	bl	8001dc8 <HAL_GetTick>
 80036f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fa:	4b57      	ldr	r3, [pc, #348]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003702:	d0b7      	beq.n	8003674 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe fb60 	bl	8001dc8 <HAL_GetTick>
 8003708:	1b40      	subs	r0, r0, r5
 800370a:	2864      	cmp	r0, #100	@ 0x64
 800370c:	d9f5      	bls.n	80036fa <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800370e:	2003      	movs	r0, #3
 8003710:	e16f      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003712:	4b51      	ldr	r3, [pc, #324]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800371a:	d1ba      	bne.n	8003692 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371c:	4b4e      	ldr	r3, [pc, #312]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f013 0f02 	tst.w	r3, #2
 8003724:	d003      	beq.n	800372e <HAL_RCC_OscConfig+0x152>
 8003726:	68e3      	ldr	r3, [r4, #12]
 8003728:	2b01      	cmp	r3, #1
 800372a:	f040 815f 	bne.w	80039ec <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372e:	4a4a      	ldr	r2, [pc, #296]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003736:	6921      	ldr	r1, [r4, #16]
 8003738:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800373c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	f013 0f08 	tst.w	r3, #8
 8003744:	d049      	beq.n	80037da <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003746:	6963      	ldr	r3, [r4, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d033      	beq.n	80037b4 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374c:	4b43      	ldr	r3, [pc, #268]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800374e:	2201      	movs	r2, #1
 8003750:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe fb38 	bl	8001dc8 <HAL_GetTick>
 8003758:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	4b3f      	ldr	r3, [pc, #252]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 800375c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375e:	f013 0f02 	tst.w	r3, #2
 8003762:	d13a      	bne.n	80037da <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003764:	f7fe fb30 	bl	8001dc8 <HAL_GetTick>
 8003768:	1b40      	subs	r0, r0, r5
 800376a:	2802      	cmp	r0, #2
 800376c:	d9f5      	bls.n	800375a <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 800376e:	2003      	movs	r0, #3
 8003770:	e13f      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b39      	ldr	r3, [pc, #228]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800377a:	d190      	bne.n	800369e <HAL_RCC_OscConfig+0xc2>
 800377c:	e7ce      	b.n	800371c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377e:	4a36      	ldr	r2, [pc, #216]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 8003780:	6813      	ldr	r3, [r2, #0]
 8003782:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003786:	6921      	ldr	r1, [r4, #16]
 8003788:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e7d6      	b.n	800373e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003790:	4b32      	ldr	r3, [pc, #200]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003796:	f7fe fb17 	bl	8001dc8 <HAL_GetTick>
 800379a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379c:	4b2e      	ldr	r3, [pc, #184]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f013 0f02 	tst.w	r3, #2
 80037a4:	d0cb      	beq.n	800373e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe fb0f 	bl	8001dc8 <HAL_GetTick>
 80037aa:	1b40      	subs	r0, r0, r5
 80037ac:	2802      	cmp	r0, #2
 80037ae:	d9f5      	bls.n	800379c <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 80037b0:	2003      	movs	r0, #3
 80037b2:	e11e      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b4:	4b29      	ldr	r3, [pc, #164]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe fb04 	bl	8001dc8 <HAL_GetTick>
 80037c0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c2:	4b25      	ldr	r3, [pc, #148]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80037c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c6:	f013 0f02 	tst.w	r3, #2
 80037ca:	d006      	beq.n	80037da <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fe fafc 	bl	8001dc8 <HAL_GetTick>
 80037d0:	1b40      	subs	r0, r0, r5
 80037d2:	2802      	cmp	r0, #2
 80037d4:	d9f5      	bls.n	80037c2 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 80037d6:	2003      	movs	r0, #3
 80037d8:	e10b      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	f013 0f04 	tst.w	r3, #4
 80037e0:	d076      	beq.n	80038d0 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80037ea:	d133      	bne.n	8003854 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ec:	2300      	movs	r3, #0
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80037f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003804:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b16      	ldr	r3, [pc, #88]	@ (8003860 <HAL_RCC_OscConfig+0x284>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800380e:	d029      	beq.n	8003864 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003810:	68a3      	ldr	r3, [r4, #8]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d03a      	beq.n	800388c <HAL_RCC_OscConfig+0x2b0>
 8003816:	2b05      	cmp	r3, #5
 8003818:	d03e      	beq.n	8003898 <HAL_RCC_OscConfig+0x2bc>
 800381a:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 800381c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	671a      	str	r2, [r3, #112]	@ 0x70
 8003824:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003826:	f022 0204 	bic.w	r2, r2, #4
 800382a:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800382c:	68a3      	ldr	r3, [r4, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d03c      	beq.n	80038ac <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fe fac9 	bl	8001dc8 <HAL_GetTick>
 8003836:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <HAL_RCC_OscConfig+0x27c>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	f013 0f02 	tst.w	r3, #2
 8003840:	d145      	bne.n	80038ce <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fe fac1 	bl	8001dc8 <HAL_GetTick>
 8003846:	1b80      	subs	r0, r0, r6
 8003848:	f241 3388 	movw	r3, #5000	@ 0x1388
 800384c:	4298      	cmp	r0, r3
 800384e:	d9f3      	bls.n	8003838 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8003850:	2003      	movs	r0, #3
 8003852:	e0ce      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003854:	2500      	movs	r5, #0
 8003856:	e7d6      	b.n	8003806 <HAL_RCC_OscConfig+0x22a>
 8003858:	40023800 	.word	0x40023800
 800385c:	42470000 	.word	0x42470000
 8003860:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003864:	4a6b      	ldr	r2, [pc, #428]	@ (8003a14 <HAL_RCC_OscConfig+0x438>)
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800386c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800386e:	f7fe faab 	bl	8001dc8 <HAL_GetTick>
 8003872:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	4b67      	ldr	r3, [pc, #412]	@ (8003a14 <HAL_RCC_OscConfig+0x438>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800387c:	d1c8      	bne.n	8003810 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387e:	f7fe faa3 	bl	8001dc8 <HAL_GetTick>
 8003882:	1b80      	subs	r0, r0, r6
 8003884:	2802      	cmp	r0, #2
 8003886:	d9f5      	bls.n	8003874 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8003888:	2003      	movs	r0, #3
 800388a:	e0b2      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	4a62      	ldr	r2, [pc, #392]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 800388e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	@ 0x70
 8003896:	e7c9      	b.n	800382c <HAL_RCC_OscConfig+0x250>
 8003898:	4b5f      	ldr	r3, [pc, #380]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 800389a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800389c:	f042 0204 	orr.w	r2, r2, #4
 80038a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80038a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80038aa:	e7bf      	b.n	800382c <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fe fa8c 	bl	8001dc8 <HAL_GetTick>
 80038b0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b2:	4b59      	ldr	r3, [pc, #356]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b6:	f013 0f02 	tst.w	r3, #2
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe fa84 	bl	8001dc8 <HAL_GetTick>
 80038c0:	1b80      	subs	r0, r0, r6
 80038c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80038c6:	4298      	cmp	r0, r3
 80038c8:	d9f3      	bls.n	80038b2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80038ca:	2003      	movs	r0, #3
 80038cc:	e091      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ce:	b9ed      	cbnz	r5, 800390c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d0:	69a3      	ldr	r3, [r4, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 808c 	beq.w	80039f0 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 80038da:	6892      	ldr	r2, [r2, #8]
 80038dc:	f002 020c 	and.w	r2, r2, #12
 80038e0:	2a08      	cmp	r2, #8
 80038e2:	d054      	beq.n	800398e <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d017      	beq.n	8003918 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e8:	4b4c      	ldr	r3, [pc, #304]	@ (8003a1c <HAL_RCC_OscConfig+0x440>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fe fa6b 	bl	8001dc8 <HAL_GetTick>
 80038f2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f4:	4b48      	ldr	r3, [pc, #288]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80038fc:	d045      	beq.n	800398a <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fe:	f7fe fa63 	bl	8001dc8 <HAL_GetTick>
 8003902:	1b00      	subs	r0, r0, r4
 8003904:	2802      	cmp	r0, #2
 8003906:	d9f5      	bls.n	80038f4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003908:	2003      	movs	r0, #3
 800390a:	e072      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800390c:	4a42      	ldr	r2, [pc, #264]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 800390e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003914:	6413      	str	r3, [r2, #64]	@ 0x40
 8003916:	e7db      	b.n	80038d0 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8003918:	4b40      	ldr	r3, [pc, #256]	@ (8003a1c <HAL_RCC_OscConfig+0x440>)
 800391a:	2200      	movs	r2, #0
 800391c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800391e:	f7fe fa53 	bl	8001dc8 <HAL_GetTick>
 8003922:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003924:	4b3c      	ldr	r3, [pc, #240]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800392c:	d006      	beq.n	800393c <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fa4b 	bl	8001dc8 <HAL_GetTick>
 8003932:	1b40      	subs	r0, r0, r5
 8003934:	2802      	cmp	r0, #2
 8003936:	d9f5      	bls.n	8003924 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8003938:	2003      	movs	r0, #3
 800393a:	e05a      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393c:	69e3      	ldr	r3, [r4, #28]
 800393e:	6a22      	ldr	r2, [r4, #32]
 8003940:	4313      	orrs	r3, r2
 8003942:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003944:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003948:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800394a:	0852      	lsrs	r2, r2, #1
 800394c:	3a01      	subs	r2, #1
 800394e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003952:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003954:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003958:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800395a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800395e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 8003960:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003962:	4b2e      	ldr	r3, [pc, #184]	@ (8003a1c <HAL_RCC_OscConfig+0x440>)
 8003964:	2201      	movs	r2, #1
 8003966:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003968:	f7fe fa2e 	bl	8001dc8 <HAL_GetTick>
 800396c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003976:	d106      	bne.n	8003986 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe fa26 	bl	8001dc8 <HAL_GetTick>
 800397c:	1b00      	subs	r0, r0, r4
 800397e:	2802      	cmp	r0, #2
 8003980:	d9f5      	bls.n	800396e <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8003982:	2003      	movs	r0, #3
 8003984:	e035      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003986:	2000      	movs	r0, #0
 8003988:	e033      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
 800398a:	2000      	movs	r0, #0
 800398c:	e031      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398e:	2b01      	cmp	r3, #1
 8003990:	d031      	beq.n	80039f6 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8003992:	4b21      	ldr	r3, [pc, #132]	@ (8003a18 <HAL_RCC_OscConfig+0x43c>)
 8003994:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800399a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399c:	4291      	cmp	r1, r2
 800399e:	d12c      	bne.n	80039fa <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039a4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	428a      	cmp	r2, r1
 80039a8:	d129      	bne.n	80039fe <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ac:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80039b0:	401a      	ands	r2, r3
 80039b2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80039b6:	d124      	bne.n	8003a02 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b8:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80039bc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80039be:	0852      	lsrs	r2, r2, #1
 80039c0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80039c6:	d11e      	bne.n	8003a06 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039cc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ce:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80039d2:	d11a      	bne.n	8003a0a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039d4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80039d8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039da:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80039de:	d116      	bne.n	8003a0e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80039e0:	2000      	movs	r0, #0
 80039e2:	e006      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80039e4:	2001      	movs	r0, #1
}
 80039e6:	4770      	bx	lr
        return HAL_ERROR;
 80039e8:	2001      	movs	r0, #1
 80039ea:	e002      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80039ec:	2001      	movs	r0, #1
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80039f0:	2000      	movs	r0, #0
}
 80039f2:	b002      	add	sp, #8
 80039f4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80039f6:	2001      	movs	r0, #1
 80039f8:	e7fb      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80039fa:	2001      	movs	r0, #1
 80039fc:	e7f9      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
 80039fe:	2001      	movs	r0, #1
 8003a00:	e7f7      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
 8003a02:	2001      	movs	r0, #1
 8003a04:	e7f5      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
 8003a06:	2001      	movs	r0, #1
 8003a08:	e7f3      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	e7f1      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
 8003a0e:	2001      	movs	r0, #1
 8003a10:	e7ef      	b.n	80039f2 <HAL_RCC_OscConfig+0x416>
 8003a12:	bf00      	nop
 8003a14:	40007000 	.word	0x40007000
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470000 	.word	0x42470000

08003a20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	4605      	mov	r5, r0
 8003a28:	4688      	mov	r8, r1
 8003a2a:	4617      	mov	r7, r2
 8003a2c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a2e:	f7fe f9cb 	bl	8001dc8 <HAL_GetTick>
 8003a32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a34:	1a1b      	subs	r3, r3, r0
 8003a36:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003a3a:	f7fe f9c5 	bl	8001dc8 <HAL_GetTick>
 8003a3e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a40:	4b28      	ldr	r3, [pc, #160]	@ (8003ae4 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003a48:	fb09 f303 	mul.w	r3, r9, r3
 8003a4c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	689c      	ldr	r4, [r3, #8]
 8003a52:	ea38 0404 	bics.w	r4, r8, r4
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	42bb      	cmp	r3, r7
 8003a5e:	d03d      	beq.n	8003adc <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a60:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003a64:	d0f3      	beq.n	8003a4e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a66:	f7fe f9af 	bl	8001dc8 <HAL_GetTick>
 8003a6a:	eba0 000a 	sub.w	r0, r0, sl
 8003a6e:	4548      	cmp	r0, r9
 8003a70:	d207      	bcs.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a72:	9a01      	ldr	r2, [sp, #4]
 8003a74:	b102      	cbz	r2, 8003a78 <SPI_WaitFlagStateUntilTimeout+0x58>
 8003a76:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003a78:	9b01      	ldr	r3, [sp, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	4691      	mov	r9, r2
 8003a80:	e7e5      	b.n	8003a4e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a82:	682a      	ldr	r2, [r5, #0]
 8003a84:	6853      	ldr	r3, [r2, #4]
 8003a86:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003a8a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a8c:	686b      	ldr	r3, [r5, #4]
 8003a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a92:	d00b      	beq.n	8003aac <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a94:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9a:	d014      	beq.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003aa8:	2003      	movs	r0, #3
 8003aaa:	e018      	b.n	8003ade <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aac:	68ab      	ldr	r3, [r5, #8]
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab2:	d002      	beq.n	8003aba <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab8:	d1ec      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8003aba:	682a      	ldr	r2, [r5, #0]
 8003abc:	6813      	ldr	r3, [r2, #0]
 8003abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e7e6      	b.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8003ac6:	682a      	ldr	r2, [r5, #0]
 8003ac8:	6813      	ldr	r3, [r2, #0]
 8003aca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	682a      	ldr	r2, [r5, #0]
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e7df      	b.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8003adc:	2000      	movs	r0, #0
}
 8003ade:	b002      	add	sp, #8
 8003ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae4:	20000020 	.word	0x20000020

08003ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	4604      	mov	r4, r0
 8003aee:	460d      	mov	r5, r1
 8003af0:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003af2:	9200      	str	r2, [sp, #0]
 8003af4:	460b      	mov	r3, r1
 8003af6:	2201      	movs	r2, #1
 8003af8:	2102      	movs	r1, #2
 8003afa:	f7ff ff91 	bl	8003a20 <SPI_WaitFlagStateUntilTimeout>
 8003afe:	b9d0      	cbnz	r0, 8003b36 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b00:	4b17      	ldr	r3, [pc, #92]	@ (8003b60 <SPI_EndRxTxTransaction+0x78>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a17      	ldr	r2, [pc, #92]	@ (8003b64 <SPI_EndRxTxTransaction+0x7c>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0d5b      	lsrs	r3, r3, #21
 8003b0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b16:	6863      	ldr	r3, [r4, #4]
 8003b18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b1c:	d011      	beq.n	8003b42 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b1e:	9b03      	ldr	r3, [sp, #12]
 8003b20:	b13b      	cbz	r3, 8003b32 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8003b22:	9b03      	ldr	r3, [sp, #12]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b30:	d1f5      	bne.n	8003b1e <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8003b32:	b004      	add	sp, #16
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003b38:	f043 0320 	orr.w	r3, r3, #32
 8003b3c:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003b3e:	2003      	movs	r0, #3
 8003b40:	e7f7      	b.n	8003b32 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b42:	9600      	str	r6, [sp, #0]
 8003b44:	462b      	mov	r3, r5
 8003b46:	2200      	movs	r2, #0
 8003b48:	2180      	movs	r1, #128	@ 0x80
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f7ff ff68 	bl	8003a20 <SPI_WaitFlagStateUntilTimeout>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d0ee      	beq.n	8003b32 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003b56:	f043 0320 	orr.w	r3, r3, #32
 8003b5a:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	e7e8      	b.n	8003b32 <SPI_EndRxTxTransaction+0x4a>
 8003b60:	20000020 	.word	0x20000020
 8003b64:	165e9f81 	.word	0x165e9f81

08003b68 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d05a      	beq.n	8003c22 <HAL_SPI_Init+0xba>
{
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b70:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003b72:	b933      	cbnz	r3, 8003b82 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b74:	6843      	ldr	r3, [r0, #4]
 8003b76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b7a:	d005      	beq.n	8003b88 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61c3      	str	r3, [r0, #28]
 8003b80:	e002      	b.n	8003b88 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b82:	2300      	movs	r3, #0
 8003b84:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b86:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b8c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d040      	beq.n	8003c16 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003b94:	2302      	movs	r3, #2
 8003b96:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8003b9a:	6822      	ldr	r2, [r4, #0]
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ba4:	6863      	ldr	r3, [r4, #4]
 8003ba6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8003baa:	68a2      	ldr	r2, [r4, #8]
 8003bac:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	68e2      	ldr	r2, [r4, #12]
 8003bb4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	6922      	ldr	r2, [r4, #16]
 8003bbc:	f002 0202 	and.w	r2, r2, #2
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	6962      	ldr	r2, [r4, #20]
 8003bc4:	f002 0201 	and.w	r2, r2, #1
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	69a2      	ldr	r2, [r4, #24]
 8003bcc:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	69e2      	ldr	r2, [r4, #28]
 8003bd4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	6a22      	ldr	r2, [r4, #32]
 8003bdc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8003be0:	4313      	orrs	r3, r2
 8003be2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003be4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003be8:	6821      	ldr	r1, [r4, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bee:	8b63      	ldrh	r3, [r4, #26]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003bf6:	f002 0210 	and.w	r2, r2, #16
 8003bfa:	6821      	ldr	r1, [r4, #0]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	69d3      	ldr	r3, [r2, #28]
 8003c04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c08:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8003c14:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003c16:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7fe f870 	bl	8001d00 <HAL_SPI_MspInit>
 8003c20:	e7b8      	b.n	8003b94 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003c22:	2001      	movs	r0, #1
}
 8003c24:	4770      	bx	lr

08003c26 <HAL_SPI_TransmitReceive>:
{
 8003c26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	4688      	mov	r8, r1
 8003c30:	4691      	mov	r9, r2
 8003c32:	461f      	mov	r7, r3
 8003c34:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8003c36:	f7fe f8c7 	bl	8001dc8 <HAL_GetTick>
 8003c3a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003c3c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8003c40:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d00b      	beq.n	8003c5e <HAL_SPI_TransmitReceive+0x38>
 8003c46:	b2d9      	uxtb	r1, r3
 8003c48:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003c4c:	f040 8104 	bne.w	8003e58 <HAL_SPI_TransmitReceive+0x232>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c50:	68a3      	ldr	r3, [r4, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 8104 	bne.w	8003e60 <HAL_SPI_TransmitReceive+0x23a>
 8003c58:	2904      	cmp	r1, #4
 8003c5a:	f040 8103 	bne.w	8003e64 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c5e:	f1b8 0f00 	cmp.w	r8, #0
 8003c62:	f000 8101 	beq.w	8003e68 <HAL_SPI_TransmitReceive+0x242>
 8003c66:	f1b9 0f00 	cmp.w	r9, #0
 8003c6a:	f000 80ff 	beq.w	8003e6c <HAL_SPI_TransmitReceive+0x246>
 8003c6e:	2f00      	cmp	r7, #0
 8003c70:	f000 80fe 	beq.w	8003e70 <HAL_SPI_TransmitReceive+0x24a>
  __HAL_LOCK(hspi);
 8003c74:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	f000 80fb 	beq.w	8003e74 <HAL_SPI_TransmitReceive+0x24e>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c84:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d002      	beq.n	8003c92 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c8c:	2305      	movs	r3, #5
 8003c8e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c96:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003c9a:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003c9c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003c9e:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003ca2:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003ca4:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8003ca6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ca8:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003cb2:	d103      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x96>
    __HAL_SPI_ENABLE(hspi);
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cba:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cbc:	68e3      	ldr	r3, [r4, #12]
 8003cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc2:	d011      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0xc2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc4:	6863      	ldr	r3, [r4, #4]
 8003cc6:	b10b      	cbz	r3, 8003ccc <HAL_SPI_TransmitReceive+0xa6>
 8003cc8:	2f01      	cmp	r7, #1
 8003cca:	d10b      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ccc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cda:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003ce4:	2701      	movs	r7, #1
 8003ce6:	e071      	b.n	8003dcc <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	b10b      	cbz	r3, 8003cf0 <HAL_SPI_TransmitReceive+0xca>
 8003cec:	2f01      	cmp	r7, #1
 8003cee:	d10b      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0xe2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cf0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cfe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003d08:	2701      	movs	r7, #1
 8003d0a:	e01b      	b.n	8003d44 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	f012 0f01 	tst.w	r2, #1
 8003d14:	d00e      	beq.n	8003d34 <HAL_SPI_TransmitReceive+0x10e>
 8003d16:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003d18:	b292      	uxth	r2, r2
 8003d1a:	b15a      	cbz	r2, 8003d34 <HAL_SPI_TransmitReceive+0x10e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003d20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d22:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003d24:	3302      	adds	r3, #2
 8003d26:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d28:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003d32:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d34:	f7fe f848 	bl	8001dc8 <HAL_GetTick>
 8003d38:	1b80      	subs	r0, r0, r6
 8003d3a:	42a8      	cmp	r0, r5
 8003d3c:	d302      	bcc.n	8003d44 <HAL_SPI_TransmitReceive+0x11e>
 8003d3e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003d42:	d11e      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d44:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b91b      	cbnz	r3, 8003d52 <HAL_SPI_TransmitReceive+0x12c>
 8003d4a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d062      	beq.n	8003e18 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	f012 0f02 	tst.w	r2, #2
 8003d5a:	d0d7      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0xe6>
 8003d5c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003d5e:	b292      	uxth	r2, r2
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	d0d3      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0xe6>
 8003d64:	2f00      	cmp	r7, #0
 8003d66:	d0d1      	beq.n	8003d0c <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d68:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003d6a:	8812      	ldrh	r2, [r2, #0]
 8003d6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003d70:	3302      	adds	r3, #2
 8003d72:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d74:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003d7e:	2700      	movs	r7, #0
 8003d80:	e7c4      	b.n	8003d0c <HAL_SPI_TransmitReceive+0xe6>
        hspi->State = HAL_SPI_STATE_READY;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003d8e:	2003      	movs	r0, #3
 8003d90:	e063      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	f012 0f01 	tst.w	r2, #1
 8003d9a:	d00e      	beq.n	8003dba <HAL_SPI_TransmitReceive+0x194>
 8003d9c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	b15a      	cbz	r2, 8003dba <HAL_SPI_TransmitReceive+0x194>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003da6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003da8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003daa:	3301      	adds	r3, #1
 8003dac:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003db8:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003dba:	f7fe f805 	bl	8001dc8 <HAL_GetTick>
 8003dbe:	1b83      	subs	r3, r0, r6
 8003dc0:	42ab      	cmp	r3, r5
 8003dc2:	d302      	bcc.n	8003dca <HAL_SPI_TransmitReceive+0x1a4>
 8003dc4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003dc8:	d11e      	bne.n	8003e08 <HAL_SPI_TransmitReceive+0x1e2>
 8003dca:	b1ed      	cbz	r5, 8003e08 <HAL_SPI_TransmitReceive+0x1e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dcc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	b913      	cbnz	r3, 8003dd8 <HAL_SPI_TransmitReceive+0x1b2>
 8003dd2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b1fb      	cbz	r3, 8003e18 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	f012 0f02 	tst.w	r2, #2
 8003de0:	d0d7      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x16c>
 8003de2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003de4:	b292      	uxth	r2, r2
 8003de6:	2a00      	cmp	r2, #0
 8003de8:	d0d3      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x16c>
 8003dea:	2f00      	cmp	r7, #0
 8003dec:	d0d1      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x16c>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003df0:	7812      	ldrb	r2, [r2, #0]
 8003df2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003df4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003df6:	3301      	adds	r3, #1
 8003df8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dfa:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003e04:	2700      	movs	r7, #0
 8003e06:	e7c4      	b.n	8003d92 <HAL_SPI_TransmitReceive+0x16c>
        hspi->State = HAL_SPI_STATE_READY;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e14:	2003      	movs	r0, #3
 8003e16:	e020      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e18:	4632      	mov	r2, r6
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f7ff fe63 	bl	8003ae8 <SPI_EndRxTxTransaction>
 8003e22:	b990      	cbnz	r0, 8003e4a <HAL_SPI_TransmitReceive+0x224>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e24:	68a3      	ldr	r3, [r4, #8]
 8003e26:	b933      	cbnz	r3, 8003e36 <HAL_SPI_TransmitReceive+0x210>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	9201      	str	r2, [sp, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e42:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e44:	b14b      	cbz	r3, 8003e5a <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 8003e46:	2001      	movs	r0, #1
 8003e48:	e007      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8003e54:	2001      	movs	r0, #1
 8003e56:	e000      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>
    return HAL_BUSY;
 8003e58:	2002      	movs	r0, #2
}
 8003e5a:	b003      	add	sp, #12
 8003e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8003e60:	2002      	movs	r0, #2
 8003e62:	e7fa      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>
 8003e64:	2002      	movs	r0, #2
 8003e66:	e7f8      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 8003e68:	2001      	movs	r0, #1
 8003e6a:	e7f6      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	e7f4      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>
 8003e70:	2001      	movs	r0, #1
 8003e72:	e7f2      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>
  __HAL_LOCK(hspi);
 8003e74:	2002      	movs	r0, #2
 8003e76:	e7f0      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x234>

08003e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7c:	6a02      	ldr	r2, [r0, #32]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e84:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e86:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e88:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e8c:	680c      	ldr	r4, [r1, #0]
 8003e8e:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e92:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e96:	688b      	ldr	r3, [r1, #8]
 8003e98:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e9c:	4d11      	ldr	r5, [pc, #68]	@ (8003ee4 <TIM_OC1_SetConfig+0x6c>)
 8003e9e:	42a8      	cmp	r0, r5
 8003ea0:	d003      	beq.n	8003eaa <TIM_OC1_SetConfig+0x32>
 8003ea2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003ea6:	42a8      	cmp	r0, r5
 8003ea8:	d105      	bne.n	8003eb6 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eaa:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eae:	68cd      	ldr	r5, [r1, #12]
 8003eb0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eb2:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	4d0b      	ldr	r5, [pc, #44]	@ (8003ee4 <TIM_OC1_SetConfig+0x6c>)
 8003eb8:	42a8      	cmp	r0, r5
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC1_SetConfig+0x4c>
 8003ebc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003ec0:	42a8      	cmp	r0, r5
 8003ec2:	d107      	bne.n	8003ed4 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ec8:	694d      	ldr	r5, [r1, #20]
 8003eca:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ece:	698a      	ldr	r2, [r1, #24]
 8003ed0:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed6:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ed8:	684a      	ldr	r2, [r1, #4]
 8003eda:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003edc:	6203      	str	r3, [r0, #32]
}
 8003ede:	bc30      	pop	{r4, r5}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40010000 	.word	0x40010000

08003ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eec:	6a02      	ldr	r2, [r0, #32]
 8003eee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ef2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef8:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efc:	680c      	ldr	r4, [r1, #0]
 8003efe:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f02:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f06:	688c      	ldr	r4, [r1, #8]
 8003f08:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f0c:	4c11      	ldr	r4, [pc, #68]	@ (8003f54 <TIM_OC3_SetConfig+0x6c>)
 8003f0e:	42a0      	cmp	r0, r4
 8003f10:	d003      	beq.n	8003f1a <TIM_OC3_SetConfig+0x32>
 8003f12:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003f16:	42a0      	cmp	r0, r4
 8003f18:	d106      	bne.n	8003f28 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f1e:	68cc      	ldr	r4, [r1, #12]
 8003f20:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f28:	4c0a      	ldr	r4, [pc, #40]	@ (8003f54 <TIM_OC3_SetConfig+0x6c>)
 8003f2a:	42a0      	cmp	r0, r4
 8003f2c:	d003      	beq.n	8003f36 <TIM_OC3_SetConfig+0x4e>
 8003f2e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003f32:	42a0      	cmp	r0, r4
 8003f34:	d107      	bne.n	8003f46 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f36:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f3a:	694c      	ldr	r4, [r1, #20]
 8003f3c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f40:	698c      	ldr	r4, [r1, #24]
 8003f42:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f46:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f48:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f4a:	684a      	ldr	r2, [r1, #4]
 8003f4c:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4e:	6203      	str	r3, [r0, #32]
}
 8003f50:	bc30      	pop	{r4, r5}
 8003f52:	4770      	bx	lr
 8003f54:	40010000 	.word	0x40010000

08003f58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f5c:	6a02      	ldr	r2, [r0, #32]
 8003f5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f62:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f64:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f68:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f6c:	680d      	ldr	r5, [r1, #0]
 8003f6e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f76:	688d      	ldr	r5, [r1, #8]
 8003f78:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7c:	4d09      	ldr	r5, [pc, #36]	@ (8003fa4 <TIM_OC4_SetConfig+0x4c>)
 8003f7e:	42a8      	cmp	r0, r5
 8003f80:	d003      	beq.n	8003f8a <TIM_OC4_SetConfig+0x32>
 8003f82:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003f86:	42a8      	cmp	r0, r5
 8003f88:	d104      	bne.n	8003f94 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f8a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f8e:	694d      	ldr	r5, [r1, #20]
 8003f90:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f96:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f98:	684a      	ldr	r2, [r1, #4]
 8003f9a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9c:	6203      	str	r3, [r0, #32]
}
 8003f9e:	bc30      	pop	{r4, r5}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000

08003fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003faa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fac:	6a04      	ldr	r4, [r0, #32]
 8003fae:	f024 0401 	bic.w	r4, r4, #1
 8003fb2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb6:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fba:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fbe:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003fc2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003fc6:	6203      	str	r3, [r0, #32]
}
 8003fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fce:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fd0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd2:	6a04      	ldr	r4, [r0, #32]
 8003fd4:	f024 0410 	bic.w	r4, r4, #16
 8003fd8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fda:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fdc:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe0:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fe8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003fee:	6203      	str	r3, [r0, #32]
}
 8003ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ff6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004002:	6083      	str	r3, [r0, #8]
}
 8004004:	4770      	bx	lr
	...

08004008 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004008:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800400c:	2b01      	cmp	r3, #1
 800400e:	d132      	bne.n	8004076 <HAL_TIM_Base_Start+0x6e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	2302      	movs	r3, #2
 8004012:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004016:	6803      	ldr	r3, [r0, #0]
 8004018:	4a19      	ldr	r2, [pc, #100]	@ (8004080 <HAL_TIM_Base_Start+0x78>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d020      	beq.n	8004060 <HAL_TIM_Base_Start+0x58>
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004022:	d01d      	beq.n	8004060 <HAL_TIM_Base_Start+0x58>
 8004024:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004028:	4293      	cmp	r3, r2
 800402a:	d019      	beq.n	8004060 <HAL_TIM_Base_Start+0x58>
 800402c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004030:	4293      	cmp	r3, r2
 8004032:	d015      	beq.n	8004060 <HAL_TIM_Base_Start+0x58>
 8004034:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004038:	4293      	cmp	r3, r2
 800403a:	d011      	beq.n	8004060 <HAL_TIM_Base_Start+0x58>
 800403c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004040:	4293      	cmp	r3, r2
 8004042:	d00d      	beq.n	8004060 <HAL_TIM_Base_Start+0x58>
 8004044:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004048:	4293      	cmp	r3, r2
 800404a:	d009      	beq.n	8004060 <HAL_TIM_Base_Start+0x58>
 800404c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004050:	4293      	cmp	r3, r2
 8004052:	d005      	beq.n	8004060 <HAL_TIM_Base_Start+0x58>
    __HAL_TIM_ENABLE(htim);
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800405c:	2000      	movs	r0, #0
 800405e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004066:	2a06      	cmp	r2, #6
 8004068:	d007      	beq.n	800407a <HAL_TIM_Base_Start+0x72>
      __HAL_TIM_ENABLE(htim);
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004072:	2000      	movs	r0, #0
 8004074:	4770      	bx	lr
    return HAL_ERROR;
 8004076:	2001      	movs	r0, #1
 8004078:	4770      	bx	lr
  return HAL_OK;
 800407a:	2000      	movs	r0, #0
}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000

08004084 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004084:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004088:	2b01      	cmp	r3, #1
 800408a:	d137      	bne.n	80040fc <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	2302      	movs	r3, #2
 800408e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004092:	6802      	ldr	r2, [r0, #0]
 8004094:	68d3      	ldr	r3, [r2, #12]
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409c:	6803      	ldr	r3, [r0, #0]
 800409e:	4a19      	ldr	r2, [pc, #100]	@ (8004104 <HAL_TIM_Base_Start_IT+0x80>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d020      	beq.n	80040e6 <HAL_TIM_Base_Start_IT+0x62>
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a8:	d01d      	beq.n	80040e6 <HAL_TIM_Base_Start_IT+0x62>
 80040aa:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d019      	beq.n	80040e6 <HAL_TIM_Base_Start_IT+0x62>
 80040b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d015      	beq.n	80040e6 <HAL_TIM_Base_Start_IT+0x62>
 80040ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80040be:	4293      	cmp	r3, r2
 80040c0:	d011      	beq.n	80040e6 <HAL_TIM_Base_Start_IT+0x62>
 80040c2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00d      	beq.n	80040e6 <HAL_TIM_Base_Start_IT+0x62>
 80040ca:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_TIM_Base_Start_IT+0x62>
 80040d2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d005      	beq.n	80040e6 <HAL_TIM_Base_Start_IT+0x62>
    __HAL_TIM_ENABLE(htim);
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80040e2:	2000      	movs	r0, #0
 80040e4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	2a06      	cmp	r2, #6
 80040ee:	d007      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80040f8:	2000      	movs	r0, #0
 80040fa:	4770      	bx	lr
    return HAL_ERROR;
 80040fc:	2001      	movs	r0, #1
 80040fe:	4770      	bx	lr
  return HAL_OK;
 8004100:	2000      	movs	r0, #0
}
 8004102:	4770      	bx	lr
 8004104:	40010000 	.word	0x40010000

08004108 <HAL_TIM_PWM_MspInit>:
}
 8004108:	4770      	bx	lr

0800410a <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 800410a:	290c      	cmp	r1, #12
 800410c:	d814      	bhi.n	8004138 <HAL_TIM_ReadCapturedValue+0x2e>
 800410e:	e8df f001 	tbb	[pc, r1]
 8004112:	1307      	.short	0x1307
 8004114:	130a1313 	.word	0x130a1313
 8004118:	130d1313 	.word	0x130d1313
 800411c:	1313      	.short	0x1313
 800411e:	10          	.byte	0x10
 800411f:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8004120:	6803      	ldr	r3, [r0, #0]
 8004122:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8004124:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8004126:	6803      	ldr	r3, [r0, #0]
 8004128:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 800412a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800412c:	6803      	ldr	r3, [r0, #0]
 800412e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8004130:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8004132:	6803      	ldr	r3, [r0, #0]
 8004134:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8004136:	4770      	bx	lr
  switch (Channel)
 8004138:	2000      	movs	r0, #0
}
 800413a:	4770      	bx	lr

0800413c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800413c:	4770      	bx	lr

0800413e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800413e:	4770      	bx	lr

08004140 <HAL_TIM_TriggerCallback>:
}
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_IRQHandler>:
{
 8004142:	b570      	push	{r4, r5, r6, lr}
 8004144:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004146:	6803      	ldr	r3, [r0, #0]
 8004148:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800414a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800414c:	f015 0f02 	tst.w	r5, #2
 8004150:	d010      	beq.n	8004174 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004152:	f016 0f02 	tst.w	r6, #2
 8004156:	d00d      	beq.n	8004174 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004158:	f06f 0202 	mvn.w	r2, #2
 800415c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415e:	2301      	movs	r3, #1
 8004160:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004162:	6803      	ldr	r3, [r0, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f013 0f03 	tst.w	r3, #3
 800416a:	d05e      	beq.n	800422a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 800416c:	f7fd fbc8 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004170:	2300      	movs	r3, #0
 8004172:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004174:	f015 0f04 	tst.w	r5, #4
 8004178:	d012      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800417a:	f016 0f04 	tst.w	r6, #4
 800417e:	d00f      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	f06f 0204 	mvn.w	r2, #4
 8004186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004188:	2302      	movs	r3, #2
 800418a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004194:	d04f      	beq.n	8004236 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	4620      	mov	r0, r4
 8004198:	f7fd fbb2 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419c:	2300      	movs	r3, #0
 800419e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041a0:	f015 0f08 	tst.w	r5, #8
 80041a4:	d012      	beq.n	80041cc <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041a6:	f016 0f08 	tst.w	r6, #8
 80041aa:	d00f      	beq.n	80041cc <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	f06f 0208 	mvn.w	r2, #8
 80041b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b4:	2304      	movs	r3, #4
 80041b6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f013 0f03 	tst.w	r3, #3
 80041c0:	d040      	beq.n	8004244 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7fd fb9c 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c8:	2300      	movs	r3, #0
 80041ca:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041cc:	f015 0f10 	tst.w	r5, #16
 80041d0:	d012      	beq.n	80041f8 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041d2:	f016 0f10 	tst.w	r6, #16
 80041d6:	d00f      	beq.n	80041f8 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	f06f 0210 	mvn.w	r2, #16
 80041de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e0:	2308      	movs	r3, #8
 80041e2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80041ec:	d031      	beq.n	8004252 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	4620      	mov	r0, r4
 80041f0:	f7fd fb86 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f4:	2300      	movs	r3, #0
 80041f6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041f8:	f015 0f01 	tst.w	r5, #1
 80041fc:	d002      	beq.n	8004204 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041fe:	f016 0f01 	tst.w	r6, #1
 8004202:	d12d      	bne.n	8004260 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004204:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8004208:	d002      	beq.n	8004210 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800420a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800420e:	d12f      	bne.n	8004270 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004210:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004214:	d002      	beq.n	800421c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004216:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800421a:	d131      	bne.n	8004280 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800421c:	f015 0f20 	tst.w	r5, #32
 8004220:	d002      	beq.n	8004228 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004222:	f016 0f20 	tst.w	r6, #32
 8004226:	d133      	bne.n	8004290 <HAL_TIM_IRQHandler+0x14e>
}
 8004228:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	f7ff ff87 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff ff85 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
 8004234:	e79c      	b.n	8004170 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004236:	4620      	mov	r0, r4
 8004238:	f7ff ff80 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423c:	4620      	mov	r0, r4
 800423e:	f7ff ff7e 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
 8004242:	e7ab      	b.n	800419c <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004244:	4620      	mov	r0, r4
 8004246:	f7ff ff79 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424a:	4620      	mov	r0, r4
 800424c:	f7ff ff77 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
 8004250:	e7ba      	b.n	80041c8 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	4620      	mov	r0, r4
 8004254:	f7ff ff72 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	4620      	mov	r0, r4
 800425a:	f7ff ff70 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
 800425e:	e7c9      	b.n	80041f4 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	f06f 0201 	mvn.w	r2, #1
 8004266:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004268:	4620      	mov	r0, r4
 800426a:	f7fd fc6b 	bl	8001b44 <HAL_TIM_PeriodElapsedCallback>
 800426e:	e7c9      	b.n	8004204 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004276:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004278:	4620      	mov	r0, r4
 800427a:	f000 fc9b 	bl	8004bb4 <HAL_TIMEx_BreakCallback>
 800427e:	e7c7      	b.n	8004210 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004286:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004288:	4620      	mov	r0, r4
 800428a:	f7ff ff59 	bl	8004140 <HAL_TIM_TriggerCallback>
 800428e:	e7c5      	b.n	800421c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	f06f 0220 	mvn.w	r2, #32
 8004296:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fc8a 	bl	8004bb2 <HAL_TIMEx_CommutCallback>
}
 800429e:	e7c3      	b.n	8004228 <HAL_TIM_IRQHandler+0xe6>

080042a0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80042a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a2:	4a34      	ldr	r2, [pc, #208]	@ (8004374 <TIM_Base_SetConfig+0xd4>)
 80042a4:	4290      	cmp	r0, r2
 80042a6:	d012      	beq.n	80042ce <TIM_Base_SetConfig+0x2e>
 80042a8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80042ac:	d00f      	beq.n	80042ce <TIM_Base_SetConfig+0x2e>
 80042ae:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80042b2:	4290      	cmp	r0, r2
 80042b4:	d00b      	beq.n	80042ce <TIM_Base_SetConfig+0x2e>
 80042b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042ba:	4290      	cmp	r0, r2
 80042bc:	d007      	beq.n	80042ce <TIM_Base_SetConfig+0x2e>
 80042be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042c2:	4290      	cmp	r0, r2
 80042c4:	d003      	beq.n	80042ce <TIM_Base_SetConfig+0x2e>
 80042c6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80042ca:	4290      	cmp	r0, r2
 80042cc:	d103      	bne.n	80042d6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80042d2:	684a      	ldr	r2, [r1, #4]
 80042d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d6:	4a27      	ldr	r2, [pc, #156]	@ (8004374 <TIM_Base_SetConfig+0xd4>)
 80042d8:	4290      	cmp	r0, r2
 80042da:	d02a      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 80042dc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80042e0:	d027      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 80042e2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80042e6:	4290      	cmp	r0, r2
 80042e8:	d023      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 80042ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042ee:	4290      	cmp	r0, r2
 80042f0:	d01f      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 80042f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042f6:	4290      	cmp	r0, r2
 80042f8:	d01b      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 80042fa:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80042fe:	4290      	cmp	r0, r2
 8004300:	d017      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 8004302:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004306:	4290      	cmp	r0, r2
 8004308:	d013      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 800430a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800430e:	4290      	cmp	r0, r2
 8004310:	d00f      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 8004312:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004316:	4290      	cmp	r0, r2
 8004318:	d00b      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 800431a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800431e:	4290      	cmp	r0, r2
 8004320:	d007      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 8004322:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004326:	4290      	cmp	r0, r2
 8004328:	d003      	beq.n	8004332 <TIM_Base_SetConfig+0x92>
 800432a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800432e:	4290      	cmp	r0, r2
 8004330:	d103      	bne.n	800433a <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004336:	68ca      	ldr	r2, [r1, #12]
 8004338:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800433a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800433e:	694a      	ldr	r2, [r1, #20]
 8004340:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004342:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004344:	688b      	ldr	r3, [r1, #8]
 8004346:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004348:	680b      	ldr	r3, [r1, #0]
 800434a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800434c:	4b09      	ldr	r3, [pc, #36]	@ (8004374 <TIM_Base_SetConfig+0xd4>)
 800434e:	4298      	cmp	r0, r3
 8004350:	d003      	beq.n	800435a <TIM_Base_SetConfig+0xba>
 8004352:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004356:	4298      	cmp	r0, r3
 8004358:	d101      	bne.n	800435e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800435a:	690b      	ldr	r3, [r1, #16]
 800435c:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800435e:	2301      	movs	r3, #1
 8004360:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004362:	6903      	ldr	r3, [r0, #16]
 8004364:	f013 0f01 	tst.w	r3, #1
 8004368:	d003      	beq.n	8004372 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800436a:	6903      	ldr	r3, [r0, #16]
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	6103      	str	r3, [r0, #16]
}
 8004372:	4770      	bx	lr
 8004374:	40010000 	.word	0x40010000

08004378 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004378:	b340      	cbz	r0, 80043cc <HAL_TIM_Base_Init+0x54>
{
 800437a:	b510      	push	{r4, lr}
 800437c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004382:	b1f3      	cbz	r3, 80043c2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	2302      	movs	r3, #2
 8004386:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438a:	4621      	mov	r1, r4
 800438c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004390:	f7ff ff86 	bl	80042a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004394:	2301      	movs	r3, #1
 8004396:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800439e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80043a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80043a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043aa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80043b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80043ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80043be:	2000      	movs	r0, #0
}
 80043c0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80043c2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80043c6:	f001 f975 	bl	80056b4 <HAL_TIM_Base_MspInit>
 80043ca:	e7db      	b.n	8004384 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80043cc:	2001      	movs	r0, #1
}
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80043d0:	b340      	cbz	r0, 8004424 <HAL_TIM_PWM_Init+0x54>
{
 80043d2:	b510      	push	{r4, lr}
 80043d4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80043d6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80043da:	b1f3      	cbz	r3, 800441a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80043dc:	2302      	movs	r3, #2
 80043de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e2:	4621      	mov	r1, r4
 80043e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80043e8:	f7ff ff5a 	bl	80042a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80043f6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80043fa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80043fe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004402:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800440a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800440e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004412:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004416:	2000      	movs	r0, #0
}
 8004418:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800441a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800441e:	f7ff fe73 	bl	8004108 <HAL_TIM_PWM_MspInit>
 8004422:	e7db      	b.n	80043dc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004424:	2001      	movs	r0, #1
}
 8004426:	4770      	bx	lr

08004428 <TIM_OC2_SetConfig>:
{
 8004428:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800442a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800442c:	6a02      	ldr	r2, [r0, #32]
 800442e:	f022 0210 	bic.w	r2, r2, #16
 8004432:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004434:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004436:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004438:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800443c:	680d      	ldr	r5, [r1, #0]
 800443e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004442:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004446:	688d      	ldr	r5, [r1, #8]
 8004448:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800444c:	4d11      	ldr	r5, [pc, #68]	@ (8004494 <TIM_OC2_SetConfig+0x6c>)
 800444e:	42a8      	cmp	r0, r5
 8004450:	d003      	beq.n	800445a <TIM_OC2_SetConfig+0x32>
 8004452:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004456:	42a8      	cmp	r0, r5
 8004458:	d106      	bne.n	8004468 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 800445a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800445e:	68cd      	ldr	r5, [r1, #12]
 8004460:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	4d0a      	ldr	r5, [pc, #40]	@ (8004494 <TIM_OC2_SetConfig+0x6c>)
 800446a:	42a8      	cmp	r0, r5
 800446c:	d003      	beq.n	8004476 <TIM_OC2_SetConfig+0x4e>
 800446e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004472:	42a8      	cmp	r0, r5
 8004474:	d107      	bne.n	8004486 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004476:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800447a:	694d      	ldr	r5, [r1, #20]
 800447c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004480:	698d      	ldr	r5, [r1, #24]
 8004482:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004486:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004488:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800448a:	684a      	ldr	r2, [r1, #4]
 800448c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800448e:	6203      	str	r3, [r0, #32]
}
 8004490:	bc30      	pop	{r4, r5}
 8004492:	4770      	bx	lr
 8004494:	40010000 	.word	0x40010000

08004498 <HAL_TIM_PWM_ConfigChannel>:
{
 8004498:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800449a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d066      	beq.n	8004570 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80044a2:	4604      	mov	r4, r0
 80044a4:	460d      	mov	r5, r1
 80044a6:	2301      	movs	r3, #1
 80044a8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80044ac:	2a0c      	cmp	r2, #12
 80044ae:	d85a      	bhi.n	8004566 <HAL_TIM_PWM_ConfigChannel+0xce>
 80044b0:	e8df f002 	tbb	[pc, r2]
 80044b4:	59595907 	.word	0x59595907
 80044b8:	5959591b 	.word	0x5959591b
 80044bc:	59595930 	.word	0x59595930
 80044c0:	44          	.byte	0x44
 80044c1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044c2:	6800      	ldr	r0, [r0, #0]
 80044c4:	f7ff fcd8 	bl	8003e78 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c8:	6822      	ldr	r2, [r4, #0]
 80044ca:	6993      	ldr	r3, [r2, #24]
 80044cc:	f043 0308 	orr.w	r3, r3, #8
 80044d0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d2:	6822      	ldr	r2, [r4, #0]
 80044d4:	6993      	ldr	r3, [r2, #24]
 80044d6:	f023 0304 	bic.w	r3, r3, #4
 80044da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044dc:	6822      	ldr	r2, [r4, #0]
 80044de:	6993      	ldr	r3, [r2, #24]
 80044e0:	6929      	ldr	r1, [r5, #16]
 80044e2:	430b      	orrs	r3, r1
 80044e4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80044e6:	2000      	movs	r0, #0
      break;
 80044e8:	e03e      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044ea:	6800      	ldr	r0, [r0, #0]
 80044ec:	f7ff ff9c 	bl	8004428 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f0:	6822      	ldr	r2, [r4, #0]
 80044f2:	6993      	ldr	r3, [r2, #24]
 80044f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80044f8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	6993      	ldr	r3, [r2, #24]
 80044fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004502:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	6993      	ldr	r3, [r2, #24]
 8004508:	6929      	ldr	r1, [r5, #16]
 800450a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800450e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004510:	2000      	movs	r0, #0
      break;
 8004512:	e029      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004514:	6800      	ldr	r0, [r0, #0]
 8004516:	f7ff fce7 	bl	8003ee8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	69d3      	ldr	r3, [r2, #28]
 800451e:	f043 0308 	orr.w	r3, r3, #8
 8004522:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004524:	6822      	ldr	r2, [r4, #0]
 8004526:	69d3      	ldr	r3, [r2, #28]
 8004528:	f023 0304 	bic.w	r3, r3, #4
 800452c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	69d3      	ldr	r3, [r2, #28]
 8004532:	6929      	ldr	r1, [r5, #16]
 8004534:	430b      	orrs	r3, r1
 8004536:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	2000      	movs	r0, #0
      break;
 800453a:	e015      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800453c:	6800      	ldr	r0, [r0, #0]
 800453e:	f7ff fd0b 	bl	8003f58 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004542:	6822      	ldr	r2, [r4, #0]
 8004544:	69d3      	ldr	r3, [r2, #28]
 8004546:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800454a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	69d3      	ldr	r3, [r2, #28]
 8004550:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004554:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	69d3      	ldr	r3, [r2, #28]
 800455a:	6929      	ldr	r1, [r5, #16]
 800455c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004560:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004562:	2000      	movs	r0, #0
      break;
 8004564:	e000      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8004566:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004568:	2300      	movs	r3, #0
 800456a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800456e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004570:	2002      	movs	r0, #2
 8004572:	e7fc      	b.n	800456e <HAL_TIM_PWM_ConfigChannel+0xd6>

08004574 <TIM_TI1_SetConfig>:
{
 8004574:	b470      	push	{r4, r5, r6}
 8004576:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 8004578:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457a:	6a04      	ldr	r4, [r0, #32]
 800457c:	f024 0401 	bic.w	r4, r4, #1
 8004580:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004582:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004584:	4d18      	ldr	r5, [pc, #96]	@ (80045e8 <TIM_TI1_SetConfig+0x74>)
 8004586:	42a8      	cmp	r0, r5
 8004588:	d01c      	beq.n	80045c4 <TIM_TI1_SetConfig+0x50>
 800458a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800458e:	d019      	beq.n	80045c4 <TIM_TI1_SetConfig+0x50>
 8004590:	4a16      	ldr	r2, [pc, #88]	@ (80045ec <TIM_TI1_SetConfig+0x78>)
 8004592:	4290      	cmp	r0, r2
 8004594:	d016      	beq.n	80045c4 <TIM_TI1_SetConfig+0x50>
 8004596:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800459a:	4290      	cmp	r0, r2
 800459c:	d012      	beq.n	80045c4 <TIM_TI1_SetConfig+0x50>
 800459e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80045a2:	4290      	cmp	r0, r2
 80045a4:	d00e      	beq.n	80045c4 <TIM_TI1_SetConfig+0x50>
 80045a6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80045aa:	4290      	cmp	r0, r2
 80045ac:	d00a      	beq.n	80045c4 <TIM_TI1_SetConfig+0x50>
 80045ae:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80045b2:	4290      	cmp	r0, r2
 80045b4:	d006      	beq.n	80045c4 <TIM_TI1_SetConfig+0x50>
 80045b6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80045ba:	4290      	cmp	r0, r2
 80045bc:	d002      	beq.n	80045c4 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045be:	f044 0201 	orr.w	r2, r4, #1
 80045c2:	e003      	b.n	80045cc <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045c4:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80045c8:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045cc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045d6:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045da:	f001 010a 	and.w	r1, r1, #10
 80045de:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80045e0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80045e2:	6201      	str	r1, [r0, #32]
}
 80045e4:	bc70      	pop	{r4, r5, r6}
 80045e6:	4770      	bx	lr
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40000400 	.word	0x40000400

080045f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045f0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045f2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f4:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045f8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80045fc:	430a      	orrs	r2, r1
 80045fe:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004602:	6082      	str	r2, [r0, #8]
}
 8004604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800460a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d078      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0xfa>
{
 8004612:	b510      	push	{r4, lr}
 8004614:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004616:	2301      	movs	r3, #1
 8004618:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	2302      	movs	r3, #2
 800461e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004622:	6802      	ldr	r2, [r0, #0]
 8004624:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800462a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800462e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004630:	680b      	ldr	r3, [r1, #0]
 8004632:	2b60      	cmp	r3, #96	@ 0x60
 8004634:	d04c      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0xc6>
 8004636:	d823      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x76>
 8004638:	2b40      	cmp	r3, #64	@ 0x40
 800463a:	d054      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0xdc>
 800463c:	d811      	bhi.n	8004662 <HAL_TIM_ConfigClockSource+0x58>
 800463e:	2b20      	cmp	r3, #32
 8004640:	d003      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x40>
 8004642:	d80a      	bhi.n	800465a <HAL_TIM_ConfigClockSource+0x50>
 8004644:	b10b      	cbz	r3, 800464a <HAL_TIM_ConfigClockSource+0x40>
 8004646:	2b10      	cmp	r3, #16
 8004648:	d105      	bne.n	8004656 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800464a:	4619      	mov	r1, r3
 800464c:	6820      	ldr	r0, [r4, #0]
 800464e:	f7ff fcd2 	bl	8003ff6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2000      	movs	r0, #0
      break;
 8004654:	e028      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8004656:	2001      	movs	r0, #1
 8004658:	e026      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800465a:	2b30      	cmp	r3, #48	@ 0x30
 800465c:	d0f5      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 800465e:	2001      	movs	r0, #1
 8004660:	e022      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004662:	2b50      	cmp	r3, #80	@ 0x50
 8004664:	d10a      	bne.n	800467c <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004666:	68ca      	ldr	r2, [r1, #12]
 8004668:	6849      	ldr	r1, [r1, #4]
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	f7ff fc9c 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004670:	2150      	movs	r1, #80	@ 0x50
 8004672:	6820      	ldr	r0, [r4, #0]
 8004674:	f7ff fcbf 	bl	8003ff6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004678:	2000      	movs	r0, #0
      break;
 800467a:	e015      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800467c:	2001      	movs	r0, #1
 800467e:	e013      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004684:	d03a      	beq.n	80046fc <HAL_TIM_ConfigClockSource+0xf2>
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800468a:	d014      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xac>
 800468c:	2b70      	cmp	r3, #112	@ 0x70
 800468e:	d137      	bne.n	8004700 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004690:	68cb      	ldr	r3, [r1, #12]
 8004692:	684a      	ldr	r2, [r1, #4]
 8004694:	6889      	ldr	r1, [r1, #8]
 8004696:	6800      	ldr	r0, [r0, #0]
 8004698:	f7ff ffaa 	bl	80045f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80046a4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	2301      	movs	r3, #1
 80046aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80046ae:	2300      	movs	r3, #0
 80046b0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80046b4:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80046b6:	68cb      	ldr	r3, [r1, #12]
 80046b8:	684a      	ldr	r2, [r1, #4]
 80046ba:	6889      	ldr	r1, [r1, #8]
 80046bc:	6800      	ldr	r0, [r0, #0]
 80046be:	f7ff ff97 	bl	80045f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	6893      	ldr	r3, [r2, #8]
 80046c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046ca:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046cc:	2000      	movs	r0, #0
      break;
 80046ce:	e7eb      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d0:	68ca      	ldr	r2, [r1, #12]
 80046d2:	6849      	ldr	r1, [r1, #4]
 80046d4:	6800      	ldr	r0, [r0, #0]
 80046d6:	f7ff fc7a 	bl	8003fce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046da:	2160      	movs	r1, #96	@ 0x60
 80046dc:	6820      	ldr	r0, [r4, #0]
 80046de:	f7ff fc8a 	bl	8003ff6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2000      	movs	r0, #0
      break;
 80046e4:	e7e0      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e6:	68ca      	ldr	r2, [r1, #12]
 80046e8:	6849      	ldr	r1, [r1, #4]
 80046ea:	6800      	ldr	r0, [r0, #0]
 80046ec:	f7ff fc5c 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046f0:	2140      	movs	r1, #64	@ 0x40
 80046f2:	6820      	ldr	r0, [r4, #0]
 80046f4:	f7ff fc7f 	bl	8003ff6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2000      	movs	r0, #0
      break;
 80046fa:	e7d5      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80046fc:	2000      	movs	r0, #0
 80046fe:	e7d3      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8004700:	2001      	movs	r0, #1
 8004702:	e7d1      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8004704:	2002      	movs	r0, #2
}
 8004706:	4770      	bx	lr

08004708 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004708:	f001 011f 	and.w	r1, r1, #31
 800470c:	f04f 0c01 	mov.w	ip, #1
 8004710:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004714:	6a03      	ldr	r3, [r0, #32]
 8004716:	ea23 030c 	bic.w	r3, r3, ip
 800471a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800471c:	6a03      	ldr	r3, [r0, #32]
 800471e:	408a      	lsls	r2, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	6203      	str	r3, [r0, #32]
}
 8004724:	4770      	bx	lr
	...

08004728 <HAL_TIM_PWM_Start>:
{
 8004728:	b510      	push	{r4, lr}
 800472a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800472c:	4608      	mov	r0, r1
 800472e:	2900      	cmp	r1, #0
 8004730:	d141      	bne.n	80047b6 <HAL_TIM_PWM_Start+0x8e>
 8004732:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004736:	3b01      	subs	r3, #1
 8004738:	bf18      	it	ne
 800473a:	2301      	movne	r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d16b      	bne.n	8004818 <HAL_TIM_PWM_Start+0xf0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004740:	2800      	cmp	r0, #0
 8004742:	d14e      	bne.n	80047e2 <HAL_TIM_PWM_Start+0xba>
 8004744:	2302      	movs	r3, #2
 8004746:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800474a:	2201      	movs	r2, #1
 800474c:	4601      	mov	r1, r0
 800474e:	6820      	ldr	r0, [r4, #0]
 8004750:	f7ff ffda 	bl	8004708 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	4a32      	ldr	r2, [pc, #200]	@ (8004820 <HAL_TIM_PWM_Start+0xf8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <HAL_TIM_PWM_Start+0x3c>
 800475c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004760:	4293      	cmp	r3, r2
 8004762:	d103      	bne.n	800476c <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8004764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004766:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800476a:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	4a2c      	ldr	r2, [pc, #176]	@ (8004820 <HAL_TIM_PWM_Start+0xf8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d046      	beq.n	8004802 <HAL_TIM_PWM_Start+0xda>
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004778:	d043      	beq.n	8004802 <HAL_TIM_PWM_Start+0xda>
 800477a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800477e:	4293      	cmp	r3, r2
 8004780:	d03f      	beq.n	8004802 <HAL_TIM_PWM_Start+0xda>
 8004782:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004786:	4293      	cmp	r3, r2
 8004788:	d03b      	beq.n	8004802 <HAL_TIM_PWM_Start+0xda>
 800478a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800478e:	4293      	cmp	r3, r2
 8004790:	d037      	beq.n	8004802 <HAL_TIM_PWM_Start+0xda>
 8004792:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004796:	4293      	cmp	r3, r2
 8004798:	d033      	beq.n	8004802 <HAL_TIM_PWM_Start+0xda>
 800479a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02f      	beq.n	8004802 <HAL_TIM_PWM_Start+0xda>
 80047a2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d02b      	beq.n	8004802 <HAL_TIM_PWM_Start+0xda>
    __HAL_TIM_ENABLE(htim);
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80047b2:	2000      	movs	r0, #0
 80047b4:	e02f      	b.n	8004816 <HAL_TIM_PWM_Start+0xee>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047b6:	2904      	cmp	r1, #4
 80047b8:	d007      	beq.n	80047ca <HAL_TIM_PWM_Start+0xa2>
 80047ba:	2908      	cmp	r1, #8
 80047bc:	d00b      	beq.n	80047d6 <HAL_TIM_PWM_Start+0xae>
 80047be:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80047c2:	3b01      	subs	r3, #1
 80047c4:	bf18      	it	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	e7b8      	b.n	800473c <HAL_TIM_PWM_Start+0x14>
 80047ca:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80047ce:	3b01      	subs	r3, #1
 80047d0:	bf18      	it	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	e7b2      	b.n	800473c <HAL_TIM_PWM_Start+0x14>
 80047d6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80047da:	3b01      	subs	r3, #1
 80047dc:	bf18      	it	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	e7ac      	b.n	800473c <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e2:	2804      	cmp	r0, #4
 80047e4:	d005      	beq.n	80047f2 <HAL_TIM_PWM_Start+0xca>
 80047e6:	2808      	cmp	r0, #8
 80047e8:	d007      	beq.n	80047fa <HAL_TIM_PWM_Start+0xd2>
 80047ea:	2302      	movs	r3, #2
 80047ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80047f0:	e7ab      	b.n	800474a <HAL_TIM_PWM_Start+0x22>
 80047f2:	2302      	movs	r3, #2
 80047f4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80047f8:	e7a7      	b.n	800474a <HAL_TIM_PWM_Start+0x22>
 80047fa:	2302      	movs	r3, #2
 80047fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004800:	e7a3      	b.n	800474a <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004808:	2a06      	cmp	r2, #6
 800480a:	d007      	beq.n	800481c <HAL_TIM_PWM_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004814:	2000      	movs	r0, #0
}
 8004816:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004818:	2001      	movs	r0, #1
 800481a:	e7fc      	b.n	8004816 <HAL_TIM_PWM_Start+0xee>
  return HAL_OK;
 800481c:	2000      	movs	r0, #0
 800481e:	e7fa      	b.n	8004816 <HAL_TIM_PWM_Start+0xee>
 8004820:	40010000 	.word	0x40010000

08004824 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004824:	f001 010f 	and.w	r1, r1, #15
 8004828:	f04f 0c04 	mov.w	ip, #4
 800482c:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004830:	6a03      	ldr	r3, [r0, #32]
 8004832:	ea23 030c 	bic.w	r3, r3, ip
 8004836:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004838:	6a03      	ldr	r3, [r0, #32]
 800483a:	408a      	lsls	r2, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	6203      	str	r3, [r0, #32]
}
 8004840:	4770      	bx	lr

08004842 <HAL_TIMEx_HallSensor_MspInit>:
}
 8004842:	4770      	bx	lr

08004844 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8004844:	2800      	cmp	r0, #0
 8004846:	d065      	beq.n	8004914 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	460e      	mov	r6, r1
 800484e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004850:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004854:	2b00      	cmp	r3, #0
 8004856:	d058      	beq.n	800490a <HAL_TIMEx_HallSensor_Init+0xc6>
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	2302      	movs	r3, #2
 800485a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485e:	4621      	mov	r1, r4
 8004860:	f851 0b04 	ldr.w	r0, [r1], #4
 8004864:	f7ff fd1c 	bl	80042a0 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004868:	68b3      	ldr	r3, [r6, #8]
 800486a:	2203      	movs	r2, #3
 800486c:	6831      	ldr	r1, [r6, #0]
 800486e:	6820      	ldr	r0, [r4, #0]
 8004870:	f7ff fe80 	bl	8004574 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	6993      	ldr	r3, [r2, #24]
 8004878:	f023 030c 	bic.w	r3, r3, #12
 800487c:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	6993      	ldr	r3, [r2, #24]
 8004882:	6871      	ldr	r1, [r6, #4]
 8004884:	430b      	orrs	r3, r1
 8004886:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004888:	6822      	ldr	r2, [r4, #0]
 800488a:	6853      	ldr	r3, [r2, #4]
 800488c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004890:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	6893      	ldr	r3, [r2, #8]
 8004896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	6893      	ldr	r3, [r2, #8]
 80048a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048a4:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	6893      	ldr	r3, [r2, #8]
 80048aa:	f023 0307 	bic.w	r3, r3, #7
 80048ae:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80048b0:	6822      	ldr	r2, [r4, #0]
 80048b2:	6893      	ldr	r3, [r2, #8]
 80048b4:	f043 0304 	orr.w	r3, r3, #4
 80048b8:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80048ba:	2500      	movs	r5, #0
 80048bc:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048be:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80048c0:	2370      	movs	r3, #112	@ 0x70
 80048c2:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048c4:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048c6:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048c8:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80048ca:	68f3      	ldr	r3, [r6, #12]
 80048cc:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80048ce:	a901      	add	r1, sp, #4
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	f7ff fda9 	bl	8004428 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	6853      	ldr	r3, [r2, #4]
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	6853      	ldr	r3, [r2, #4]
 80048e4:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80048e8:	6053      	str	r3, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ea:	2301      	movs	r3, #1
 80048ec:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8004900:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004904:	4628      	mov	r0, r5
}
 8004906:	b008      	add	sp, #32
 8004908:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800490a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800490e:	f7ff ff98 	bl	8004842 <HAL_TIMEx_HallSensor_MspInit>
 8004912:	e7a1      	b.n	8004858 <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 8004914:	2001      	movs	r0, #1
}
 8004916:	4770      	bx	lr

08004918 <HAL_TIMEx_HallSensor_Start_IT>:
{
 8004918:	b510      	push	{r4, lr}
 800491a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800491c:	f890 c03e 	ldrb.w	ip, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004920:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004924:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004928:	f890 1043 	ldrb.w	r1, [r0, #67]	@ 0x43
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800492c:	f1bc 0f01 	cmp.w	ip, #1
 8004930:	d14f      	bne.n	80049d2 <HAL_TIMEx_HallSensor_Start_IT+0xba>
 8004932:	fa5f f08c 	uxtb.w	r0, ip
 8004936:	b2db      	uxtb	r3, r3
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	b2c9      	uxtb	r1, r1
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800493c:	2b01      	cmp	r3, #1
 800493e:	d149      	bne.n	80049d4 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004940:	2a01      	cmp	r2, #1
 8004942:	d148      	bne.n	80049d6 <HAL_TIMEx_HallSensor_Start_IT+0xbe>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004944:	2901      	cmp	r1, #1
 8004946:	d001      	beq.n	800494c <HAL_TIMEx_HallSensor_Start_IT+0x34>
    return HAL_ERROR;
 8004948:	4610      	mov	r0, r2
 800494a:	e043      	b.n	80049d4 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800494c:	2302      	movs	r3, #2
 800494e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004952:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800495a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800495e:	6822      	ldr	r2, [r4, #0]
 8004960:	68d3      	ldr	r3, [r2, #12]
 8004962:	f043 0302 	orr.w	r3, r3, #2
 8004966:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004968:	2201      	movs	r2, #1
 800496a:	2100      	movs	r1, #0
 800496c:	6820      	ldr	r0, [r4, #0]
 800496e:	f7ff fecb 	bl	8004708 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	4a1a      	ldr	r2, [pc, #104]	@ (80049e0 <HAL_TIMEx_HallSensor_Start_IT+0xc8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d020      	beq.n	80049bc <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497e:	d01d      	beq.n	80049bc <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 8004980:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004984:	4293      	cmp	r3, r2
 8004986:	d019      	beq.n	80049bc <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 8004988:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800498c:	4293      	cmp	r3, r2
 800498e:	d015      	beq.n	80049bc <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 8004990:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004994:	4293      	cmp	r3, r2
 8004996:	d011      	beq.n	80049bc <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 8004998:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800499c:	4293      	cmp	r3, r2
 800499e:	d00d      	beq.n	80049bc <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 80049a0:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_TIMEx_HallSensor_Start_IT+0xa4>
 80049a8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d005      	beq.n	80049bc <HAL_TIMEx_HallSensor_Start_IT+0xa4>
    __HAL_TIM_ENABLE(htim);
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80049b8:	2000      	movs	r0, #0
 80049ba:	e00b      	b.n	80049d4 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	2a06      	cmp	r2, #6
 80049c4:	d009      	beq.n	80049da <HAL_TIMEx_HallSensor_Start_IT+0xc2>
      __HAL_TIM_ENABLE(htim);
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80049ce:	2000      	movs	r0, #0
 80049d0:	e000      	b.n	80049d4 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
    return HAL_ERROR;
 80049d2:	2001      	movs	r0, #1
}
 80049d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80049d6:	4618      	mov	r0, r3
 80049d8:	e7fc      	b.n	80049d4 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
  return HAL_OK;
 80049da:	2000      	movs	r0, #0
 80049dc:	e7fa      	b.n	80049d4 <HAL_TIMEx_HallSensor_Start_IT+0xbc>
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000

080049e4 <HAL_TIMEx_PWMN_Start>:
{
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e8:	4608      	mov	r0, r1
 80049ea:	2900      	cmp	r1, #0
 80049ec:	d13a      	bne.n	8004a64 <HAL_TIMEx_PWMN_Start+0x80>
 80049ee:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80049f2:	3b01      	subs	r3, #1
 80049f4:	bf18      	it	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d164      	bne.n	8004ac6 <HAL_TIMEx_PWMN_Start+0xe2>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d147      	bne.n	8004a90 <HAL_TIMEx_PWMN_Start+0xac>
 8004a00:	2302      	movs	r3, #2
 8004a02:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004a06:	2204      	movs	r2, #4
 8004a08:	4601      	mov	r1, r0
 8004a0a:	6820      	ldr	r0, [r4, #0]
 8004a0c:	f7ff ff0a 	bl	8004824 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8004a10:	6822      	ldr	r2, [r4, #0]
 8004a12:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8004a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a18:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad0 <HAL_TIMEx_PWMN_Start+0xec>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d046      	beq.n	8004ab0 <HAL_TIMEx_PWMN_Start+0xcc>
 8004a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a26:	d043      	beq.n	8004ab0 <HAL_TIMEx_PWMN_Start+0xcc>
 8004a28:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d03f      	beq.n	8004ab0 <HAL_TIMEx_PWMN_Start+0xcc>
 8004a30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d03b      	beq.n	8004ab0 <HAL_TIMEx_PWMN_Start+0xcc>
 8004a38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d037      	beq.n	8004ab0 <HAL_TIMEx_PWMN_Start+0xcc>
 8004a40:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d033      	beq.n	8004ab0 <HAL_TIMEx_PWMN_Start+0xcc>
 8004a48:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d02f      	beq.n	8004ab0 <HAL_TIMEx_PWMN_Start+0xcc>
 8004a50:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d02b      	beq.n	8004ab0 <HAL_TIMEx_PWMN_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004a60:	2000      	movs	r0, #0
 8004a62:	e02f      	b.n	8004ac4 <HAL_TIMEx_PWMN_Start+0xe0>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a64:	2904      	cmp	r1, #4
 8004a66:	d007      	beq.n	8004a78 <HAL_TIMEx_PWMN_Start+0x94>
 8004a68:	2908      	cmp	r1, #8
 8004a6a:	d00b      	beq.n	8004a84 <HAL_TIMEx_PWMN_Start+0xa0>
 8004a6c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004a70:	3b01      	subs	r3, #1
 8004a72:	bf18      	it	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	e7bf      	b.n	80049f8 <HAL_TIMEx_PWMN_Start+0x14>
 8004a78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	bf18      	it	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	e7b9      	b.n	80049f8 <HAL_TIMEx_PWMN_Start+0x14>
 8004a84:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	bf18      	it	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	e7b3      	b.n	80049f8 <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a90:	2804      	cmp	r0, #4
 8004a92:	d005      	beq.n	8004aa0 <HAL_TIMEx_PWMN_Start+0xbc>
 8004a94:	2808      	cmp	r0, #8
 8004a96:	d007      	beq.n	8004aa8 <HAL_TIMEx_PWMN_Start+0xc4>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004a9e:	e7b2      	b.n	8004a06 <HAL_TIMEx_PWMN_Start+0x22>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aa6:	e7ae      	b.n	8004a06 <HAL_TIMEx_PWMN_Start+0x22>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004aae:	e7aa      	b.n	8004a06 <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab6:	2a06      	cmp	r2, #6
 8004ab8:	d007      	beq.n	8004aca <HAL_TIMEx_PWMN_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ac2:	2000      	movs	r0, #0
}
 8004ac4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	e7fc      	b.n	8004ac4 <HAL_TIMEx_PWMN_Start+0xe0>
  return HAL_OK;
 8004aca:	2000      	movs	r0, #0
 8004acc:	e7fa      	b.n	8004ac4 <HAL_TIMEx_PWMN_Start+0xe0>
 8004ace:	bf00      	nop
 8004ad0:	40010000 	.word	0x40010000

08004ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004ad4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004ad8:	2a01      	cmp	r2, #1
 8004ada:	d03d      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8004adc:	b410      	push	{r4}
 8004ade:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004aec:	6802      	ldr	r2, [r0, #0]
 8004aee:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004af0:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af2:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af6:	6808      	ldr	r0, [r1, #0]
 8004af8:	ea40 000c 	orr.w	r0, r0, ip
  htim->Instance->CR2 = tmpcr2;
 8004afc:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4816      	ldr	r0, [pc, #88]	@ (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004b02:	4282      	cmp	r2, r0
 8004b04:	d01a      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004b06:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004b0a:	d017      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004b0c:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8004b10:	4282      	cmp	r2, r0
 8004b12:	d013      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004b14:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004b18:	4282      	cmp	r2, r0
 8004b1a:	d00f      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004b1c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004b20:	4282      	cmp	r2, r0
 8004b22:	d00b      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004b24:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8004b28:	4282      	cmp	r2, r0
 8004b2a:	d007      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004b2c:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8004b30:	4282      	cmp	r2, r0
 8004b32:	d003      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004b34:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004b38:	4282      	cmp	r2, r0
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b40:	6849      	ldr	r1, [r1, #4]
 8004b42:	4321      	orrs	r1, r4
    htim->Instance->SMCR = tmpsmcr;
 8004b44:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8004b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b56:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b58:	2002      	movs	r0, #2
}
 8004b5a:	4770      	bx	lr
 8004b5c:	40010000 	.word	0x40010000

08004b60 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8004b60:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8004b62:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d021      	beq.n	8004bae <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b70:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b76:	6888      	ldr	r0, [r1, #8]
 8004b78:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b7e:	6848      	ldr	r0, [r1, #4]
 8004b80:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b86:	6808      	ldr	r0, [r1, #0]
 8004b88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b8e:	6908      	ldr	r0, [r1, #16]
 8004b90:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b96:	6948      	ldr	r0, [r1, #20]
 8004b98:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b9e:	69c9      	ldr	r1, [r1, #28]
 8004ba0:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8004ba2:	6811      	ldr	r1, [r2, #0]
 8004ba4:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  return HAL_OK;
 8004bac:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004bae:	2002      	movs	r0, #2
}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIMEx_CommutCallback>:
}
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIMEx_BreakCallback>:
}
 8004bb4:	4770      	bx	lr
	...

08004bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bb8:	b530      	push	{r4, r5, lr}
 8004bba:	b089      	sub	sp, #36	@ 0x24
 8004bbc:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	4b21      	ldr	r3, [pc, #132]	@ (8004c48 <HAL_InitTick+0x90>)
 8004bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bc6:	f042 0210 	orr.w	r2, r2, #16
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004bd6:	a902      	add	r1, sp, #8
 8004bd8:	a803      	add	r0, sp, #12
 8004bda:	f7fe fc1f 	bl	800341c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004bde:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004be0:	b9cb      	cbnz	r3, 8004c16 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004be2:	f7fe fbfb 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004be6:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004be8:	4a18      	ldr	r2, [pc, #96]	@ (8004c4c <HAL_InitTick+0x94>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	0c9b      	lsrs	r3, r3, #18
 8004bf0:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004bf2:	4817      	ldr	r0, [pc, #92]	@ (8004c50 <HAL_InitTick+0x98>)
 8004bf4:	4a17      	ldr	r2, [pc, #92]	@ (8004c54 <HAL_InitTick+0x9c>)
 8004bf6:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004bf8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004bfc:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004bfe:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c04:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c06:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004c08:	f7ff fbb6 	bl	8004378 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	b130      	cbz	r0, 8004c1e <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8004c10:	4628      	mov	r0, r5
 8004c12:	b009      	add	sp, #36	@ 0x24
 8004c14:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c16:	f7fe fbe1 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004c1a:	0043      	lsls	r3, r0, #1
 8004c1c:	e7e4      	b.n	8004be8 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004c1e:	480c      	ldr	r0, [pc, #48]	@ (8004c50 <HAL_InitTick+0x98>)
 8004c20:	f7ff fa30 	bl	8004084 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004c24:	4605      	mov	r5, r0
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d1f2      	bne.n	8004c10 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c2a:	2036      	movs	r0, #54	@ 0x36
 8004c2c:	f7fd febc 	bl	80029a8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c30:	2c0f      	cmp	r4, #15
 8004c32:	d901      	bls.n	8004c38 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8004c34:	2501      	movs	r5, #1
 8004c36:	e7eb      	b.n	8004c10 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	2036      	movs	r0, #54	@ 0x36
 8004c3e:	f7fd fea3 	bl	8002988 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c42:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_InitTick+0xa0>)
 8004c44:	601c      	str	r4, [r3, #0]
 8004c46:	e7e3      	b.n	8004c10 <HAL_InitTick+0x58>
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	431bde83 	.word	0x431bde83
 8004c50:	20000478 	.word	0x20000478
 8004c54:	40001000 	.word	0x40001000
 8004c58:	2000001c 	.word	0x2000001c

08004c5c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	f102 030c 	add.w	r3, r2, #12
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	320c      	adds	r2, #12
 8004c6c:	e842 3100 	strex	r1, r3, [r2]
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d1f3      	bne.n	8004c5c <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c74:	2320      	movs	r3, #32
 8004c76:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8004c7a:	4770      	bx	lr

08004c7c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	f102 030c 	add.w	r3, r2, #12
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	320c      	adds	r2, #12
 8004c8c:	e842 3100 	strex	r1, r3, [r2]
 8004c90:	2900      	cmp	r1, #0
 8004c92:	d1f3      	bne.n	8004c7c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	f102 0314 	add.w	r3, r2, #20
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	3214      	adds	r2, #20
 8004ca4:	e842 3100 	strex	r1, r3, [r2]
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d1f3      	bne.n	8004c94 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d005      	beq.n	8004cbe <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004cbc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	f102 030c 	add.w	r3, r2, #12
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	320c      	adds	r2, #12
 8004cce:	e842 3100 	strex	r1, r3, [r2]
 8004cd2:	2900      	cmp	r1, #0
 8004cd4:	d1f3      	bne.n	8004cbe <UART_EndRxTransfer+0x42>
 8004cd6:	e7ec      	b.n	8004cb2 <UART_EndRxTransfer+0x36>

08004cd8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cd8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004cdc:	2b21      	cmp	r3, #33	@ 0x21
 8004cde:	d001      	beq.n	8004ce4 <UART_Transmit_IT+0xc>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004ce0:	2002      	movs	r0, #2
  }
}
 8004ce2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce4:	6883      	ldr	r3, [r0, #8]
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	d017      	beq.n	8004d1c <UART_Transmit_IT+0x44>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cec:	6a03      	ldr	r3, [r0, #32]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	6202      	str	r2, [r0, #32]
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	6803      	ldr	r3, [r0, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004cf8:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8004d02:	b94b      	cbnz	r3, 8004d18 <UART_Transmit_IT+0x40>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d04:	6802      	ldr	r2, [r0, #0]
 8004d06:	68d3      	ldr	r3, [r2, #12]
 8004d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d0c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d0e:	6802      	ldr	r2, [r0, #0]
 8004d10:	68d3      	ldr	r3, [r2, #12]
 8004d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d16:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8004d18:	2000      	movs	r0, #0
 8004d1a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1c:	6903      	ldr	r3, [r0, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e4      	bne.n	8004cec <UART_Transmit_IT+0x14>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d22:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	6802      	ldr	r2, [r0, #0]
 8004d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2c:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004d2e:	6a03      	ldr	r3, [r0, #32]
 8004d30:	3302      	adds	r3, #2
 8004d32:	6203      	str	r3, [r0, #32]
 8004d34:	e7e0      	b.n	8004cf8 <UART_Transmit_IT+0x20>
	...

08004d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d3c:	6802      	ldr	r2, [r0, #0]
 8004d3e:	6913      	ldr	r3, [r2, #16]
 8004d40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d44:	68c1      	ldr	r1, [r0, #12]
 8004d46:	430b      	orrs	r3, r1
 8004d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d4a:	6883      	ldr	r3, [r0, #8]
 8004d4c:	6902      	ldr	r2, [r0, #16]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	6943      	ldr	r3, [r0, #20]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	69c3      	ldr	r3, [r0, #28]
 8004d56:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004d58:	6801      	ldr	r1, [r0, #0]
 8004d5a:	68cb      	ldr	r3, [r1, #12]
 8004d5c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004d60:	f023 030c 	bic.w	r3, r3, #12
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d68:	6802      	ldr	r2, [r0, #0]
 8004d6a:	6953      	ldr	r3, [r2, #20]
 8004d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d70:	6981      	ldr	r1, [r0, #24]
 8004d72:	430b      	orrs	r3, r1
 8004d74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d76:	6803      	ldr	r3, [r0, #0]
 8004d78:	4a31      	ldr	r2, [pc, #196]	@ (8004e40 <UART_SetConfig+0x108>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d006      	beq.n	8004d8c <UART_SetConfig+0x54>
 8004d7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d002      	beq.n	8004d8c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d86:	f7fe fb29 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004d8a:	e001      	b.n	8004d90 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fe fb36 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d90:	69e3      	ldr	r3, [r4, #28]
 8004d92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d96:	d029      	beq.n	8004dec <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d98:	2100      	movs	r1, #0
 8004d9a:	1803      	adds	r3, r0, r0
 8004d9c:	4149      	adcs	r1, r1
 8004d9e:	181b      	adds	r3, r3, r0
 8004da0:	f141 0100 	adc.w	r1, r1, #0
 8004da4:	00c9      	lsls	r1, r1, #3
 8004da6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	1818      	adds	r0, r3, r0
 8004dae:	6863      	ldr	r3, [r4, #4]
 8004db0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004db4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8004db8:	f141 0100 	adc.w	r1, r1, #0
 8004dbc:	f7fb feaa 	bl	8000b14 <__aeabi_uldivmod>
 8004dc0:	4a20      	ldr	r2, [pc, #128]	@ (8004e44 <UART_SetConfig+0x10c>)
 8004dc2:	fba2 3100 	umull	r3, r1, r2, r0
 8004dc6:	0949      	lsrs	r1, r1, #5
 8004dc8:	2364      	movs	r3, #100	@ 0x64
 8004dca:	fb03 0311 	mls	r3, r3, r1, r0
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	3332      	adds	r3, #50	@ 0x32
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ddc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	6821      	ldr	r1, [r4, #0]
 8004de6:	4413      	add	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }
}
 8004dea:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dec:	2300      	movs	r3, #0
 8004dee:	1802      	adds	r2, r0, r0
 8004df0:	eb43 0103 	adc.w	r1, r3, r3
 8004df4:	1812      	adds	r2, r2, r0
 8004df6:	f141 0100 	adc.w	r1, r1, #0
 8004dfa:	00c9      	lsls	r1, r1, #3
 8004dfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e00:	00d2      	lsls	r2, r2, #3
 8004e02:	1810      	adds	r0, r2, r0
 8004e04:	f141 0100 	adc.w	r1, r1, #0
 8004e08:	6862      	ldr	r2, [r4, #4]
 8004e0a:	1892      	adds	r2, r2, r2
 8004e0c:	415b      	adcs	r3, r3
 8004e0e:	f7fb fe81 	bl	8000b14 <__aeabi_uldivmod>
 8004e12:	4a0c      	ldr	r2, [pc, #48]	@ (8004e44 <UART_SetConfig+0x10c>)
 8004e14:	fba2 3100 	umull	r3, r1, r2, r0
 8004e18:	0949      	lsrs	r1, r1, #5
 8004e1a:	2364      	movs	r3, #100	@ 0x64
 8004e1c:	fb03 0311 	mls	r3, r3, r1, r0
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	3332      	adds	r3, #50	@ 0x32
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	005a      	lsls	r2, r3, #1
 8004e2c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8004e30:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	6821      	ldr	r1, [r4, #0]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
 8004e3e:	e7d4      	b.n	8004dea <UART_SetConfig+0xb2>
 8004e40:	40011000 	.word	0x40011000
 8004e44:	51eb851f 	.word	0x51eb851f

08004e48 <HAL_UART_Init>:
  if (huart == NULL)
 8004e48:	b360      	cbz	r0, 8004ea4 <HAL_UART_Init+0x5c>
{
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004e4e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004e52:	b313      	cbz	r3, 8004e9a <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004e54:	2324      	movs	r3, #36	@ 0x24
 8004e56:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	68d3      	ldr	r3, [r2, #12]
 8004e5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e62:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff ff67 	bl	8004d38 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	6913      	ldr	r3, [r2, #16]
 8004e6e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004e72:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e74:	6822      	ldr	r2, [r4, #0]
 8004e76:	6953      	ldr	r3, [r2, #20]
 8004e78:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004e7c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004e7e:	6822      	ldr	r2, [r4, #0]
 8004e80:	68d3      	ldr	r3, [r2, #12]
 8004e82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e86:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	2000      	movs	r0, #0
 8004e8a:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e92:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e96:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004e98:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004e9a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004e9e:	f000 fd7f 	bl	80059a0 <HAL_UART_MspInit>
 8004ea2:	e7d7      	b.n	8004e54 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004ea4:	2001      	movs	r0, #1
}
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_Transmit_DMA>:
{
 8004ea8:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8004eaa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d130      	bne.n	8004f14 <HAL_UART_Transmit_DMA+0x6c>
 8004eb2:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	d02f      	beq.n	8004f18 <HAL_UART_Transmit_DMA+0x70>
 8004eb8:	b90a      	cbnz	r2, 8004ebe <HAL_UART_Transmit_DMA+0x16>
      return HAL_ERROR;
 8004eba:	2001      	movs	r0, #1
}
 8004ebc:	bd38      	pop	{r3, r4, r5, pc}
    huart->pTxBuffPtr = pData;
 8004ebe:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8004ec0:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ec2:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec8:	2021      	movs	r0, #33	@ 0x21
 8004eca:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ece:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ed0:	4d12      	ldr	r5, [pc, #72]	@ (8004f1c <HAL_UART_Transmit_DMA+0x74>)
 8004ed2:	63c5      	str	r5, [r0, #60]	@ 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ed4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ed6:	4d12      	ldr	r5, [pc, #72]	@ (8004f20 <HAL_UART_Transmit_DMA+0x78>)
 8004ed8:	6405      	str	r5, [r0, #64]	@ 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004eda:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004edc:	4d11      	ldr	r5, [pc, #68]	@ (8004f24 <HAL_UART_Transmit_DMA+0x7c>)
 8004ede:	64c5      	str	r5, [r0, #76]	@ 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8004ee0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ee2:	6503      	str	r3, [r0, #80]	@ 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	1d02      	adds	r2, r0, #4
 8004eea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004eec:	f7fd fe42 	bl	8002b74 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ef6:	601a      	str	r2, [r3, #0]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ef8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	f102 0314 	add.w	r3, r2, #20
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	3214      	adds	r2, #20
 8004f08:	e842 3100 	strex	r1, r3, [r2]
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	d1f3      	bne.n	8004ef8 <HAL_UART_Transmit_DMA+0x50>
    return HAL_OK;
 8004f10:	2000      	movs	r0, #0
 8004f12:	e7d3      	b.n	8004ebc <HAL_UART_Transmit_DMA+0x14>
    return HAL_BUSY;
 8004f14:	2002      	movs	r0, #2
 8004f16:	e7d1      	b.n	8004ebc <HAL_UART_Transmit_DMA+0x14>
      return HAL_ERROR;
 8004f18:	2001      	movs	r0, #1
 8004f1a:	e7cf      	b.n	8004ebc <HAL_UART_Transmit_DMA+0x14>
 8004f1c:	08004f2b 	.word	0x08004f2b
 8004f20:	08004f93 	.word	0x08004f93
 8004f24:	08004fa1 	.word	0x08004fa1

08004f28 <HAL_UART_TxCpltCallback>:
}
 8004f28:	4770      	bx	lr

08004f2a <UART_DMATransmitCplt>:
{
 8004f2a:	b508      	push	{r3, lr}
 8004f2c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f2e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004f38:	d11a      	bne.n	8004f70 <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	84c3      	strh	r3, [r0, #38]	@ 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f102 0314 	add.w	r3, r2, #20
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	3214      	adds	r2, #20
 8004f4e:	e842 3100 	strex	r1, r3, [r2]
 8004f52:	2900      	cmp	r1, #0
 8004f54:	d1f3      	bne.n	8004f3e <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f56:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	f102 030c 	add.w	r3, r2, #12
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	320c      	adds	r2, #12
 8004f66:	e842 3100 	strex	r1, r3, [r2]
 8004f6a:	2900      	cmp	r1, #0
 8004f6c:	d1f3      	bne.n	8004f56 <UART_DMATransmitCplt+0x2c>
}
 8004f6e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004f70:	f7ff ffda 	bl	8004f28 <HAL_UART_TxCpltCallback>
}
 8004f74:	e7fb      	b.n	8004f6e <UART_DMATransmitCplt+0x44>

08004f76 <UART_EndTransmit_IT>:
{
 8004f76:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f78:	6801      	ldr	r1, [r0, #0]
 8004f7a:	68ca      	ldr	r2, [r1, #12]
 8004f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f80:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004f82:	2220      	movs	r2, #32
 8004f84:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004f88:	f7ff ffce 	bl	8004f28 <HAL_UART_TxCpltCallback>
}
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	bd08      	pop	{r3, pc}

08004f90 <HAL_UART_TxHalfCpltCallback>:
}
 8004f90:	4770      	bx	lr

08004f92 <UART_DMATxHalfCplt>:
{
 8004f92:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004f94:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8004f96:	f7ff fffb 	bl	8004f90 <HAL_UART_TxHalfCpltCallback>
}
 8004f9a:	bd08      	pop	{r3, pc}

08004f9c <HAL_UART_RxCpltCallback>:
}
 8004f9c:	4770      	bx	lr

08004f9e <HAL_UART_RxHalfCpltCallback>:
}
 8004f9e:	4770      	bx	lr

08004fa0 <UART_DMAError>:
{
 8004fa0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fa8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8004fac:	2a21      	cmp	r2, #33	@ 0x21
 8004fae:	d00f      	beq.n	8004fd0 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fb8:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8004fbc:	2a22      	cmp	r2, #34	@ 0x22
 8004fbe:	d011      	beq.n	8004fe4 <UART_DMAError+0x44>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fc0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004fc2:	f043 0310 	orr.w	r3, r3, #16
 8004fc6:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7fc fac9 	bl	8001560 <HAL_UART_ErrorCallback>
}
 8004fce:	bd10      	pop	{r4, pc}
 8004fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0eb      	beq.n	8004fb0 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7ff fe3d 	bl	8004c5c <UART_EndTxTransfer>
 8004fe2:	e7e5      	b.n	8004fb0 <UART_DMAError+0x10>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0eb      	beq.n	8004fc0 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7ff fe45 	bl	8004c7c <UART_EndRxTransfer>
 8004ff2:	e7e5      	b.n	8004fc0 <UART_DMAError+0x20>

08004ff4 <UART_DMAAbortOnError>:
{
 8004ff4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ffc:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8004ffe:	f7fc faaf 	bl	8001560 <HAL_UART_ErrorCallback>
}
 8005002:	bd08      	pop	{r3, pc}

08005004 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005004:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8005008:	2b22      	cmp	r3, #34	@ 0x22
 800500a:	d169      	bne.n	80050e0 <UART_Receive_IT+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500c:	6883      	ldr	r3, [r0, #8]
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005012:	d04f      	beq.n	80050b4 <UART_Receive_IT+0xb0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005014:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501a:	d004      	beq.n	8005026 <UART_Receive_IT+0x22>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d156      	bne.n	80050ce <UART_Receive_IT+0xca>
 8005020:	6903      	ldr	r3, [r0, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d153      	bne.n	80050ce <UART_Receive_IT+0xca>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005026:	6803      	ldr	r3, [r0, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800502c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800502e:	3301      	adds	r3, #1
 8005030:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8005032:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29b      	uxth	r3, r3
 800503a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800503c:	2b00      	cmp	r3, #0
 800503e:	d151      	bne.n	80050e4 <UART_Receive_IT+0xe0>
{
 8005040:	b500      	push	{lr}
 8005042:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005044:	6802      	ldr	r2, [r0, #0]
 8005046:	68d3      	ldr	r3, [r2, #12]
 8005048:	f023 0320 	bic.w	r3, r3, #32
 800504c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800504e:	6802      	ldr	r2, [r0, #0]
 8005050:	68d3      	ldr	r3, [r2, #12]
 8005052:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005056:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005058:	6802      	ldr	r2, [r0, #0]
 800505a:	6953      	ldr	r3, [r2, #20]
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005062:	2320      	movs	r3, #32
 8005064:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005068:	2300      	movs	r3, #0
 800506a:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800506e:	2b01      	cmp	r3, #1
 8005070:	d133      	bne.n	80050da <UART_Receive_IT+0xd6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	2300      	movs	r3, #0
 8005074:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005076:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	f102 030c 	add.w	r3, r2, #12
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	320c      	adds	r2, #12
 8005086:	e842 3100 	strex	r1, r3, [r2]
 800508a:	2900      	cmp	r1, #0
 800508c:	d1f3      	bne.n	8005076 <UART_Receive_IT+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800508e:	6803      	ldr	r3, [r0, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	f012 0f10 	tst.w	r2, #16
 8005096:	d006      	beq.n	80050a6 <UART_Receive_IT+0xa2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005098:	2200      	movs	r2, #0
 800509a:	9201      	str	r2, [sp, #4]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	9201      	str	r2, [sp, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050a6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80050a8:	f7fc fa58 	bl	800155c <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80050ac:	2000      	movs	r0, #0
}
 80050ae:	b003      	add	sp, #12
 80050b0:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b4:	6902      	ldr	r2, [r0, #16]
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	d1ac      	bne.n	8005014 <UART_Receive_IT+0x10>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ba:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050bc:	6803      	ldr	r3, [r0, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80050c6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80050c8:	3302      	adds	r3, #2
 80050ca:	6283      	str	r3, [r0, #40]	@ 0x28
 80050cc:	e7b1      	b.n	8005032 <UART_Receive_IT+0x2e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ce:	6803      	ldr	r3, [r0, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d6:	7013      	strb	r3, [r2, #0]
 80050d8:	e7a8      	b.n	800502c <UART_Receive_IT+0x28>
        HAL_UART_RxCpltCallback(huart);
 80050da:	f7ff ff5f 	bl	8004f9c <HAL_UART_RxCpltCallback>
 80050de:	e7e5      	b.n	80050ac <UART_Receive_IT+0xa8>
    return HAL_BUSY;
 80050e0:	2002      	movs	r0, #2
 80050e2:	4770      	bx	lr
    return HAL_OK;
 80050e4:	2000      	movs	r0, #0
}
 80050e6:	4770      	bx	lr

080050e8 <HAL_UART_IRQHandler>:
{
 80050e8:	b510      	push	{r4, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050ee:	6802      	ldr	r2, [r0, #0]
 80050f0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050f2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050f4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80050f6:	f013 0f0f 	tst.w	r3, #15
 80050fa:	d109      	bne.n	8005110 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050fc:	f013 0f20 	tst.w	r3, #32
 8005100:	d00c      	beq.n	800511c <HAL_UART_IRQHandler+0x34>
 8005102:	f010 0f20 	tst.w	r0, #32
 8005106:	d009      	beq.n	800511c <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8005108:	4620      	mov	r0, r4
 800510a:	f7ff ff7b 	bl	8005004 <UART_Receive_IT>
      return;
 800510e:	e016      	b.n	800513e <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005110:	f011 0101 	ands.w	r1, r1, #1
 8005114:	d115      	bne.n	8005142 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005116:	f410 7f90 	tst.w	r0, #288	@ 0x120
 800511a:	d112      	bne.n	8005142 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800511e:	2901      	cmp	r1, #1
 8005120:	d079      	beq.n	8005216 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005122:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005126:	d003      	beq.n	8005130 <HAL_UART_IRQHandler+0x48>
 8005128:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800512c:	f040 8114 	bne.w	8005358 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005130:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005134:	d003      	beq.n	800513e <HAL_UART_IRQHandler+0x56>
 8005136:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800513a:	f040 8111 	bne.w	8005360 <HAL_UART_IRQHandler+0x278>
}
 800513e:	b002      	add	sp, #8
 8005140:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005142:	f013 0f01 	tst.w	r3, #1
 8005146:	d006      	beq.n	8005156 <HAL_UART_IRQHandler+0x6e>
 8005148:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800514c:	d003      	beq.n	8005156 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800514e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005156:	f013 0f04 	tst.w	r3, #4
 800515a:	d004      	beq.n	8005166 <HAL_UART_IRQHandler+0x7e>
 800515c:	b119      	cbz	r1, 8005166 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800515e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005160:	f042 0202 	orr.w	r2, r2, #2
 8005164:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005166:	f013 0f02 	tst.w	r3, #2
 800516a:	d004      	beq.n	8005176 <HAL_UART_IRQHandler+0x8e>
 800516c:	b119      	cbz	r1, 8005176 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800516e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005170:	f042 0204 	orr.w	r2, r2, #4
 8005174:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005176:	f013 0f08 	tst.w	r3, #8
 800517a:	d007      	beq.n	800518c <HAL_UART_IRQHandler+0xa4>
 800517c:	f010 0f20 	tst.w	r0, #32
 8005180:	d100      	bne.n	8005184 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005182:	b119      	cbz	r1, 800518c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005184:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005186:	f042 0208 	orr.w	r2, r2, #8
 800518a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800518c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800518e:	2a00      	cmp	r2, #0
 8005190:	d0d5      	beq.n	800513e <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005192:	f013 0f20 	tst.w	r3, #32
 8005196:	d002      	beq.n	800519e <HAL_UART_IRQHandler+0xb6>
 8005198:	f010 0f20 	tst.w	r0, #32
 800519c:	d129      	bne.n	80051f2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051a6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80051a8:	f012 0f08 	tst.w	r2, #8
 80051ac:	d100      	bne.n	80051b0 <HAL_UART_IRQHandler+0xc8>
 80051ae:	b363      	cbz	r3, 800520a <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 80051b0:	4620      	mov	r0, r4
 80051b2:	f7ff fd63 	bl	8004c7c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80051be:	d020      	beq.n	8005202 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	f102 0314 	add.w	r3, r2, #20
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	3214      	adds	r2, #20
 80051d0:	e842 3100 	strex	r1, r3, [r2]
 80051d4:	2900      	cmp	r1, #0
 80051d6:	d1f3      	bne.n	80051c0 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80051d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80051da:	b173      	cbz	r3, 80051fa <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051dc:	4a62      	ldr	r2, [pc, #392]	@ (8005368 <HAL_UART_IRQHandler+0x280>)
 80051de:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051e0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80051e2:	f7fd fd44 	bl	8002c6e <HAL_DMA_Abort_IT>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d0a9      	beq.n	800513e <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80051ec:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80051ee:	4798      	blx	r3
 80051f0:	e7a5      	b.n	800513e <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80051f2:	4620      	mov	r0, r4
 80051f4:	f7ff ff06 	bl	8005004 <UART_Receive_IT>
 80051f8:	e7d1      	b.n	800519e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7fc f9b0 	bl	8001560 <HAL_UART_ErrorCallback>
 8005200:	e79d      	b.n	800513e <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8005202:	4620      	mov	r0, r4
 8005204:	f7fc f9ac 	bl	8001560 <HAL_UART_ErrorCallback>
 8005208:	e799      	b.n	800513e <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 800520a:	4620      	mov	r0, r4
 800520c:	f7fc f9a8 	bl	8001560 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	2300      	movs	r3, #0
 8005212:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8005214:	e793      	b.n	800513e <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005216:	f013 0f10 	tst.w	r3, #16
 800521a:	d082      	beq.n	8005122 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800521c:	f010 0f10 	tst.w	r0, #16
 8005220:	f43f af7f 	beq.w	8005122 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005224:	2300      	movs	r3, #0
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	6813      	ldr	r3, [r2, #0]
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	6853      	ldr	r3, [r2, #4]
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005232:	6953      	ldr	r3, [r2, #20]
 8005234:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005238:	d052      	beq.n	80052e0 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800523a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800523c:	6813      	ldr	r3, [r2, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005242:	2b00      	cmp	r3, #0
 8005244:	f43f af7b 	beq.w	800513e <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005248:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800524a:	4299      	cmp	r1, r3
 800524c:	f67f af77 	bls.w	800513e <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8005250:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005252:	69d3      	ldr	r3, [r2, #28]
 8005254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005258:	d037      	beq.n	80052ca <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	f102 030c 	add.w	r3, r2, #12
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	320c      	adds	r2, #12
 800526a:	e842 3100 	strex	r1, r3, [r2]
 800526e:	2900      	cmp	r1, #0
 8005270:	d1f3      	bne.n	800525a <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	f102 0314 	add.w	r3, r2, #20
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	3214      	adds	r2, #20
 8005282:	e842 3100 	strex	r1, r3, [r2]
 8005286:	2900      	cmp	r1, #0
 8005288:	d1f3      	bne.n	8005272 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800528a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	f102 0314 	add.w	r3, r2, #20
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	3214      	adds	r2, #20
 800529a:	e842 3100 	strex	r1, r3, [r2]
 800529e:	2900      	cmp	r1, #0
 80052a0:	d1f3      	bne.n	800528a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 80052a2:	2320      	movs	r3, #32
 80052a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a8:	2300      	movs	r3, #0
 80052aa:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	f102 030c 	add.w	r3, r2, #12
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	320c      	adds	r2, #12
 80052bc:	e842 3100 	strex	r1, r3, [r2]
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d1f3      	bne.n	80052ac <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052c4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80052c6:	f7fd fc89 	bl	8002bdc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ca:	2302      	movs	r3, #2
 80052cc:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ce:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80052d0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	1ac9      	subs	r1, r1, r3
 80052d6:	b289      	uxth	r1, r1
 80052d8:	4620      	mov	r0, r4
 80052da:	f7fc f93f 	bl	800155c <HAL_UARTEx_RxEventCallback>
      return;
 80052de:	e72e      	b.n	800513e <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052e0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80052e2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	1ac9      	subs	r1, r1, r3
 80052e8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80052ea:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f43f af25 	beq.w	800513e <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80052f4:	2900      	cmp	r1, #0
 80052f6:	f43f af22 	beq.w	800513e <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	f102 030c 	add.w	r3, r2, #12
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	320c      	adds	r2, #12
 800530a:	e842 3000 	strex	r0, r3, [r2]
 800530e:	2800      	cmp	r0, #0
 8005310:	d1f3      	bne.n	80052fa <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005312:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	f102 0314 	add.w	r3, r2, #20
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	3214      	adds	r2, #20
 8005322:	e842 3000 	strex	r0, r3, [r2]
 8005326:	2800      	cmp	r0, #0
 8005328:	d1f3      	bne.n	8005312 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 800532a:	2320      	movs	r3, #32
 800532c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005330:	2300      	movs	r3, #0
 8005332:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005334:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	f102 030c 	add.w	r3, r2, #12
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	320c      	adds	r2, #12
 8005344:	e842 3000 	strex	r0, r3, [r2]
 8005348:	2800      	cmp	r0, #0
 800534a:	d1f3      	bne.n	8005334 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800534c:	2302      	movs	r3, #2
 800534e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005350:	4620      	mov	r0, r4
 8005352:	f7fc f903 	bl	800155c <HAL_UARTEx_RxEventCallback>
      return;
 8005356:	e6f2      	b.n	800513e <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8005358:	4620      	mov	r0, r4
 800535a:	f7ff fcbd 	bl	8004cd8 <UART_Transmit_IT>
    return;
 800535e:	e6ee      	b.n	800513e <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8005360:	4620      	mov	r0, r4
 8005362:	f7ff fe08 	bl	8004f76 <UART_EndTransmit_IT>
    return;
 8005366:	e6ea      	b.n	800513e <HAL_UART_IRQHandler+0x56>
 8005368:	08004ff5 	.word	0x08004ff5

0800536c <UART_DMARxHalfCplt>:
{
 800536c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005370:	2301      	movs	r3, #1
 8005372:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005376:	2b01      	cmp	r3, #1
 8005378:	d002      	beq.n	8005380 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800537a:	f7ff fe10 	bl	8004f9e <HAL_UART_RxHalfCpltCallback>
}
 800537e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005380:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8005382:	0849      	lsrs	r1, r1, #1
 8005384:	f7fc f8ea 	bl	800155c <HAL_UARTEx_RxEventCallback>
 8005388:	e7f9      	b.n	800537e <UART_DMARxHalfCplt+0x12>

0800538a <UART_DMAReceiveCplt>:
{
 800538a:	b508      	push	{r3, lr}
 800538c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005398:	d12b      	bne.n	80053f2 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800539e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	f102 030c 	add.w	r3, r2, #12
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	320c      	adds	r2, #12
 80053ae:	e842 3100 	strex	r1, r3, [r2]
 80053b2:	2900      	cmp	r1, #0
 80053b4:	d1f3      	bne.n	800539e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	f102 0314 	add.w	r3, r2, #20
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	3214      	adds	r2, #20
 80053c6:	e842 3100 	strex	r1, r3, [r2]
 80053ca:	2900      	cmp	r1, #0
 80053cc:	d1f3      	bne.n	80053b6 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	f102 0314 	add.w	r3, r2, #20
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	3214      	adds	r2, #20
 80053de:	e842 3100 	strex	r1, r3, [r2]
 80053e2:	2900      	cmp	r1, #0
 80053e4:	d1f3      	bne.n	80053ce <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80053e6:	2320      	movs	r3, #32
 80053e8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d007      	beq.n	8005402 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f2:	2300      	movs	r3, #0
 80053f4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d00f      	beq.n	800541c <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80053fc:	f7ff fdce 	bl	8004f9c <HAL_UART_RxCpltCallback>
}
 8005400:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005402:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	f102 030c 	add.w	r3, r2, #12
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	320c      	adds	r2, #12
 8005412:	e842 3100 	strex	r1, r3, [r2]
 8005416:	2900      	cmp	r1, #0
 8005418:	d1f3      	bne.n	8005402 <UART_DMAReceiveCplt+0x78>
 800541a:	e7ea      	b.n	80053f2 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800541c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800541e:	f7fc f89d 	bl	800155c <HAL_UARTEx_RxEventCallback>
 8005422:	e7ed      	b.n	8005400 <UART_DMAReceiveCplt+0x76>

08005424 <UART_Start_Receive_DMA>:
{
 8005424:	b530      	push	{r4, r5, lr}
 8005426:	b083      	sub	sp, #12
 8005428:	4604      	mov	r4, r0
 800542a:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800542c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800542e:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	2500      	movs	r5, #0
 8005432:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005434:	2222      	movs	r2, #34	@ 0x22
 8005436:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800543a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800543c:	481f      	ldr	r0, [pc, #124]	@ (80054bc <UART_Start_Receive_DMA+0x98>)
 800543e:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005440:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005442:	481f      	ldr	r0, [pc, #124]	@ (80054c0 <UART_Start_Receive_DMA+0x9c>)
 8005444:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005446:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005448:	481e      	ldr	r0, [pc, #120]	@ (80054c4 <UART_Start_Receive_DMA+0xa0>)
 800544a:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 800544c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800544e:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005450:	6820      	ldr	r0, [r4, #0]
 8005452:	460a      	mov	r2, r1
 8005454:	1d01      	adds	r1, r0, #4
 8005456:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005458:	f7fd fb8c 	bl	8002b74 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800545c:	9501      	str	r5, [sp, #4]
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	9201      	str	r2, [sp, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800546a:	6923      	ldr	r3, [r4, #16]
 800546c:	b15b      	cbz	r3, 8005486 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800546e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	f102 030c 	add.w	r3, r2, #12
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	320c      	adds	r2, #12
 800547e:	e842 3100 	strex	r1, r3, [r2]
 8005482:	2900      	cmp	r1, #0
 8005484:	d1f3      	bne.n	800546e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005486:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	f102 0314 	add.w	r3, r2, #20
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	3214      	adds	r2, #20
 8005496:	e842 3100 	strex	r1, r3, [r2]
 800549a:	2900      	cmp	r1, #0
 800549c:	d1f3      	bne.n	8005486 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800549e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	f102 0314 	add.w	r3, r2, #20
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	3214      	adds	r2, #20
 80054ae:	e842 3100 	strex	r1, r3, [r2]
 80054b2:	2900      	cmp	r1, #0
 80054b4:	d1f3      	bne.n	800549e <UART_Start_Receive_DMA+0x7a>
}
 80054b6:	2000      	movs	r0, #0
 80054b8:	b003      	add	sp, #12
 80054ba:	bd30      	pop	{r4, r5, pc}
 80054bc:	0800538b 	.word	0x0800538b
 80054c0:	0800536d 	.word	0x0800536d
 80054c4:	08004fa1 	.word	0x08004fa1

080054c8 <HAL_UART_Receive_DMA>:
{
 80054c8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ca:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d108      	bne.n	80054e4 <HAL_UART_Receive_DMA+0x1c>
    if ((pData == NULL) || (Size == 0U))
 80054d2:	b149      	cbz	r1, 80054e8 <HAL_UART_Receive_DMA+0x20>
 80054d4:	b90a      	cbnz	r2, 80054da <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 80054d6:	2001      	movs	r0, #1
}
 80054d8:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054da:	2300      	movs	r3, #0
 80054dc:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054de:	f7ff ffa1 	bl	8005424 <UART_Start_Receive_DMA>
 80054e2:	e7f9      	b.n	80054d8 <HAL_UART_Receive_DMA+0x10>
    return HAL_BUSY;
 80054e4:	2002      	movs	r0, #2
 80054e6:	e7f7      	b.n	80054d8 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 80054e8:	2001      	movs	r0, #1
 80054ea:	e7f5      	b.n	80054d8 <HAL_UART_Receive_DMA+0x10>

080054ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ec:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d129      	bne.n	8005548 <HAL_UARTEx_ReceiveToIdle_DMA+0x5c>
{
 80054f4:	b510      	push	{r4, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80054fa:	b339      	cbz	r1, 800554c <HAL_UARTEx_ReceiveToIdle_DMA+0x60>
 80054fc:	b912      	cbnz	r2, 8005504 <HAL_UARTEx_ReceiveToIdle_DMA+0x18>
      return HAL_ERROR;
 80054fe:	2001      	movs	r0, #1
}
 8005500:	b002      	add	sp, #8
 8005502:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005504:	2301      	movs	r3, #1
 8005506:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005508:	2300      	movs	r3, #0
 800550a:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800550c:	f7ff ff8a 	bl	8005424 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8005510:	2800      	cmp	r0, #0
 8005512:	d1f5      	bne.n	8005500 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005514:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005516:	2b01      	cmp	r3, #1
 8005518:	d001      	beq.n	800551e <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
        status = HAL_ERROR;
 800551a:	2001      	movs	r0, #1
    return status;
 800551c:	e7f0      	b.n	8005500 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800551e:	2300      	movs	r3, #0
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	9201      	str	r2, [sp, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	f102 030c 	add.w	r3, r2, #12
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	320c      	adds	r2, #12
 800553e:	e842 3100 	strex	r1, r3, [r2]
 8005542:	2900      	cmp	r1, #0
 8005544:	d1f3      	bne.n	800552e <HAL_UARTEx_ReceiveToIdle_DMA+0x42>
 8005546:	e7db      	b.n	8005500 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    return HAL_BUSY;
 8005548:	2002      	movs	r0, #2
}
 800554a:	4770      	bx	lr
      return HAL_ERROR;
 800554c:	2001      	movs	r0, #1
 800554e:	e7d7      	b.n	8005500 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>

08005550 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005550:	e7fe      	b.n	8005550 <NMI_Handler>

08005552 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005552:	e7fe      	b.n	8005552 <HardFault_Handler>

08005554 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005554:	e7fe      	b.n	8005554 <MemManage_Handler>

08005556 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005556:	e7fe      	b.n	8005556 <BusFault_Handler>

08005558 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005558:	e7fe      	b.n	8005558 <UsageFault_Handler>

0800555a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800555a:	4770      	bx	lr

0800555c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800555c:	4770      	bx	lr

0800555e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800555e:	4770      	bx	lr

08005560 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005560:	4770      	bx	lr
	...

08005564 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005564:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005566:	4802      	ldr	r0, [pc, #8]	@ (8005570 <DMA1_Stream1_IRQHandler+0xc>)
 8005568:	f7fd fb94 	bl	8002c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800556c:	bd08      	pop	{r3, pc}
 800556e:	bf00      	nop
 8005570:	20000550 	.word	0x20000550

08005574 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005574:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005576:	4802      	ldr	r0, [pc, #8]	@ (8005580 <DMA1_Stream3_IRQHandler+0xc>)
 8005578:	f7fd fb8c 	bl	8002c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800557c:	bd08      	pop	{r3, pc}
 800557e:	bf00      	nop
 8005580:	200005b0 	.word	0x200005b0

08005584 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8005584:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005586:	4805      	ldr	r0, [pc, #20]	@ (800559c <ADC_IRQHandler+0x18>)
 8005588:	f7fc fe02 	bl	8002190 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800558c:	4804      	ldr	r0, [pc, #16]	@ (80055a0 <ADC_IRQHandler+0x1c>)
 800558e:	f7fc fdff 	bl	8002190 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8005592:	4804      	ldr	r0, [pc, #16]	@ (80055a4 <ADC_IRQHandler+0x20>)
 8005594:	f7fc fdfc 	bl	8002190 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005598:	bd08      	pop	{r3, pc}
 800559a:	bf00      	nop
 800559c:	200000f8 	.word	0x200000f8
 80055a0:	200000b0 	.word	0x200000b0
 80055a4:	20000068 	.word	0x20000068

080055a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80055a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80055aa:	4802      	ldr	r0, [pc, #8]	@ (80055b4 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 80055ac:	f7fe fdc9 	bl	8004142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80055b0:	bd08      	pop	{r3, pc}
 80055b2:	bf00      	nop
 80055b4:	20000508 	.word	0x20000508

080055b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80055b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80055ba:	4802      	ldr	r0, [pc, #8]	@ (80055c4 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80055bc:	f7fe fdc1 	bl	8004142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80055c0:	bd08      	pop	{r3, pc}
 80055c2:	bf00      	nop
 80055c4:	20000508 	.word	0x20000508

080055c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80055c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80055ca:	4802      	ldr	r0, [pc, #8]	@ (80055d4 <TIM1_CC_IRQHandler+0xc>)
 80055cc:	f7fe fdb9 	bl	8004142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80055d0:	bd08      	pop	{r3, pc}
 80055d2:	bf00      	nop
 80055d4:	20000508 	.word	0x20000508

080055d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80055d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80055da:	4802      	ldr	r0, [pc, #8]	@ (80055e4 <TIM3_IRQHandler+0xc>)
 80055dc:	f7fe fdb1 	bl	8004142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80055e0:	bd08      	pop	{r3, pc}
 80055e2:	bf00      	nop
 80055e4:	200004c0 	.word	0x200004c0

080055e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80055e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80055ea:	4802      	ldr	r0, [pc, #8]	@ (80055f4 <USART3_IRQHandler+0xc>)
 80055ec:	f7ff fd7c 	bl	80050e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80055f0:	bd08      	pop	{r3, pc}
 80055f2:	bf00      	nop
 80055f4:	20000610 	.word	0x20000610

080055f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80055f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80055fa:	4802      	ldr	r0, [pc, #8]	@ (8005604 <TIM6_DAC_IRQHandler+0xc>)
 80055fc:	f7fe fda1 	bl	8004142 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005600:	bd08      	pop	{r3, pc}
 8005602:	bf00      	nop
 8005604:	20000478 	.word	0x20000478

08005608 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005608:	4a03      	ldr	r2, [pc, #12]	@ (8005618 <SystemInit+0x10>)
 800560a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800560e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005612:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005616:	4770      	bx	lr
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800561c:	b500      	push	{lr}
 800561e:	b08b      	sub	sp, #44	@ 0x2c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005620:	2300      	movs	r3, #0
 8005622:	9306      	str	r3, [sp, #24]
 8005624:	9307      	str	r3, [sp, #28]
 8005626:	9308      	str	r3, [sp, #32]
 8005628:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800562a:	9302      	str	r3, [sp, #8]
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005636:	481d      	ldr	r0, [pc, #116]	@ (80056ac <MX_TIM3_Init+0x90>)
 8005638:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <MX_TIM3_Init+0x94>)
 800563a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 8-1;
 800563c:	2207      	movs	r2, #7
 800563e:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005640:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8005642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005646:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005648:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800564a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800564c:	f7fe fe94 	bl	8004378 <HAL_TIM_Base_Init>
 8005650:	b9f8      	cbnz	r0, 8005692 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005656:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005658:	a906      	add	r1, sp, #24
 800565a:	4814      	ldr	r0, [pc, #80]	@ (80056ac <MX_TIM3_Init+0x90>)
 800565c:	f7fe ffd5 	bl	800460a <HAL_TIM_ConfigClockSource>
 8005660:	b9d0      	cbnz	r0, 8005698 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005662:	2300      	movs	r3, #0
 8005664:	9302      	str	r3, [sp, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005666:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 10;
 8005668:	230a      	movs	r3, #10
 800566a:	9304      	str	r3, [sp, #16]
  sConfig.Commutation_Delay = 5;
 800566c:	2305      	movs	r3, #5
 800566e:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8005670:	a902      	add	r1, sp, #8
 8005672:	480e      	ldr	r0, [pc, #56]	@ (80056ac <MX_TIM3_Init+0x90>)
 8005674:	f7ff f8e6 	bl	8004844 <HAL_TIMEx_HallSensor_Init>
 8005678:	b988      	cbnz	r0, 800569e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800567a:	2350      	movs	r3, #80	@ 0x50
 800567c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800567e:	2300      	movs	r3, #0
 8005680:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005682:	4669      	mov	r1, sp
 8005684:	4809      	ldr	r0, [pc, #36]	@ (80056ac <MX_TIM3_Init+0x90>)
 8005686:	f7ff fa25 	bl	8004ad4 <HAL_TIMEx_MasterConfigSynchronization>
 800568a:	b958      	cbnz	r0, 80056a4 <MX_TIM3_Init+0x88>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800568c:	b00b      	add	sp, #44	@ 0x2c
 800568e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005692:	f7fc fa63 	bl	8001b5c <Error_Handler>
 8005696:	e7dc      	b.n	8005652 <MX_TIM3_Init+0x36>
    Error_Handler();
 8005698:	f7fc fa60 	bl	8001b5c <Error_Handler>
 800569c:	e7e1      	b.n	8005662 <MX_TIM3_Init+0x46>
    Error_Handler();
 800569e:	f7fc fa5d 	bl	8001b5c <Error_Handler>
 80056a2:	e7ea      	b.n	800567a <MX_TIM3_Init+0x5e>
    Error_Handler();
 80056a4:	f7fc fa5a 	bl	8001b5c <Error_Handler>
}
 80056a8:	e7f0      	b.n	800568c <MX_TIM3_Init+0x70>
 80056aa:	bf00      	nop
 80056ac:	200004c0 	.word	0x200004c0
 80056b0:	40000400 	.word	0x40000400

080056b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056b8:	2300      	movs	r3, #0
 80056ba:	9305      	str	r3, [sp, #20]
 80056bc:	9306      	str	r3, [sp, #24]
 80056be:	9307      	str	r3, [sp, #28]
 80056c0:	9308      	str	r3, [sp, #32]
 80056c2:	9309      	str	r3, [sp, #36]	@ 0x24
  if(tim_baseHandle->Instance==TIM1)
 80056c4:	6803      	ldr	r3, [r0, #0]
 80056c6:	4a3f      	ldr	r2, [pc, #252]	@ (80057c4 <HAL_TIM_Base_MspInit+0x110>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 80056cc:	4a3e      	ldr	r2, [pc, #248]	@ (80057c8 <HAL_TIM_Base_MspInit+0x114>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d03b      	beq.n	800574a <HAL_TIM_Base_MspInit+0x96>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80056d2:	b00a      	add	sp, #40	@ 0x28
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056d6:	2400      	movs	r4, #0
 80056d8:	9400      	str	r4, [sp, #0]
 80056da:	4b3c      	ldr	r3, [pc, #240]	@ (80057cc <HAL_TIM_Base_MspInit+0x118>)
 80056dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80056e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056e6:	f002 0201 	and.w	r2, r2, #1
 80056ea:	9200      	str	r2, [sp, #0]
 80056ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ee:	9401      	str	r4, [sp, #4]
 80056f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056f2:	f042 0202 	orr.w	r2, r2, #2
 80056f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005706:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005708:	2302      	movs	r3, #2
 800570a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800570c:	2301      	movs	r3, #1
 800570e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005710:	a905      	add	r1, sp, #20
 8005712:	482f      	ldr	r0, [pc, #188]	@ (80057d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005714:	f7fd fbac 	bl	8002e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005718:	4622      	mov	r2, r4
 800571a:	4621      	mov	r1, r4
 800571c:	2018      	movs	r0, #24
 800571e:	f7fd f933 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005722:	2018      	movs	r0, #24
 8005724:	f7fd f940 	bl	80029a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005728:	4622      	mov	r2, r4
 800572a:	4621      	mov	r1, r4
 800572c:	2019      	movs	r0, #25
 800572e:	f7fd f92b 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005732:	2019      	movs	r0, #25
 8005734:	f7fd f938 	bl	80029a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005738:	4622      	mov	r2, r4
 800573a:	4621      	mov	r1, r4
 800573c:	201b      	movs	r0, #27
 800573e:	f7fd f923 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005742:	201b      	movs	r0, #27
 8005744:	f7fd f930 	bl	80029a8 <HAL_NVIC_EnableIRQ>
 8005748:	e7c3      	b.n	80056d2 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800574a:	2400      	movs	r4, #0
 800574c:	9402      	str	r4, [sp, #8]
 800574e:	4b1f      	ldr	r3, [pc, #124]	@ (80057cc <HAL_TIM_Base_MspInit+0x118>)
 8005750:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005752:	f042 0202 	orr.w	r2, r2, #2
 8005756:	641a      	str	r2, [r3, #64]	@ 0x40
 8005758:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800575a:	f002 0202 	and.w	r2, r2, #2
 800575e:	9202      	str	r2, [sp, #8]
 8005760:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005762:	9403      	str	r4, [sp, #12]
 8005764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	631a      	str	r2, [r3, #48]	@ 0x30
 800576c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800576e:	f002 0201 	and.w	r2, r2, #1
 8005772:	9203      	str	r2, [sp, #12]
 8005774:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005776:	9404      	str	r4, [sp, #16]
 8005778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800577a:	f042 0202 	orr.w	r2, r2, #2
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	9304      	str	r3, [sp, #16]
 8005788:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800578a:	23c0      	movs	r3, #192	@ 0xc0
 800578c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578e:	2502      	movs	r5, #2
 8005790:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005792:	9509      	str	r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005794:	ae05      	add	r6, sp, #20
 8005796:	4631      	mov	r1, r6
 8005798:	480e      	ldr	r0, [pc, #56]	@ (80057d4 <HAL_TIM_Base_MspInit+0x120>)
 800579a:	f7fd fb69 	bl	8002e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800579e:	2301      	movs	r3, #1
 80057a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057a6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80057a8:	9509      	str	r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057aa:	4631      	mov	r1, r6
 80057ac:	4808      	ldr	r0, [pc, #32]	@ (80057d0 <HAL_TIM_Base_MspInit+0x11c>)
 80057ae:	f7fd fb5f 	bl	8002e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80057b2:	4622      	mov	r2, r4
 80057b4:	4621      	mov	r1, r4
 80057b6:	201d      	movs	r0, #29
 80057b8:	f7fd f8e6 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80057bc:	201d      	movs	r0, #29
 80057be:	f7fd f8f3 	bl	80029a8 <HAL_NVIC_EnableIRQ>
}
 80057c2:	e786      	b.n	80056d2 <HAL_TIM_Base_MspInit+0x1e>
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40020400 	.word	0x40020400
 80057d4:	40020000 	.word	0x40020000

080057d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057d8:	b500      	push	{lr}
 80057da:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057dc:	2300      	movs	r3, #0
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	9302      	str	r3, [sp, #8]
 80057e2:	9303      	str	r3, [sp, #12]
 80057e4:	9304      	str	r3, [sp, #16]
 80057e6:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 80057e8:	6802      	ldr	r2, [r0, #0]
 80057ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005828 <HAL_TIM_MspPostInit+0x50>)
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d002      	beq.n	80057f6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80057f0:	b007      	add	sp, #28
 80057f2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f6:	2300      	movs	r3, #0
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <HAL_TIM_MspPostInit+0x54>)
 80057fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800580e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8005812:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005814:	2302      	movs	r3, #2
 8005816:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005818:	2301      	movs	r3, #1
 800581a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800581c:	a901      	add	r1, sp, #4
 800581e:	4804      	ldr	r0, [pc, #16]	@ (8005830 <HAL_TIM_MspPostInit+0x58>)
 8005820:	f7fd fb26 	bl	8002e70 <HAL_GPIO_Init>
}
 8005824:	e7e4      	b.n	80057f0 <HAL_TIM_MspPostInit+0x18>
 8005826:	bf00      	nop
 8005828:	40010000 	.word	0x40010000
 800582c:	40023800 	.word	0x40023800
 8005830:	40020000 	.word	0x40020000

08005834 <MX_TIM1_Init>:
{
 8005834:	b530      	push	{r4, r5, lr}
 8005836:	b097      	sub	sp, #92	@ 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005838:	2400      	movs	r4, #0
 800583a:	9412      	str	r4, [sp, #72]	@ 0x48
 800583c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800583e:	9414      	str	r4, [sp, #80]	@ 0x50
 8005840:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005842:	9410      	str	r4, [sp, #64]	@ 0x40
 8005844:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005846:	9409      	str	r4, [sp, #36]	@ 0x24
 8005848:	940a      	str	r4, [sp, #40]	@ 0x28
 800584a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800584c:	940c      	str	r4, [sp, #48]	@ 0x30
 800584e:	940d      	str	r4, [sp, #52]	@ 0x34
 8005850:	940e      	str	r4, [sp, #56]	@ 0x38
 8005852:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005854:	2520      	movs	r5, #32
 8005856:	462a      	mov	r2, r5
 8005858:	4621      	mov	r1, r4
 800585a:	a801      	add	r0, sp, #4
 800585c:	f000 fa1e 	bl	8005c9c <memset>
  htim1.Instance = TIM1;
 8005860:	4840      	ldr	r0, [pc, #256]	@ (8005964 <MX_TIM1_Init+0x130>)
 8005862:	4b41      	ldr	r3, [pc, #260]	@ (8005968 <MX_TIM1_Init+0x134>)
 8005864:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 1-1;
 8005866:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005868:	6085      	str	r5, [r0, #8]
  htim1.Init.Period = 8000-1;
 800586a:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 800586e:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8005870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005874:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 1;
 8005876:	2301      	movs	r3, #1
 8005878:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800587a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800587c:	f7fe fd7c 	bl	8004378 <HAL_TIM_Base_Init>
 8005880:	2800      	cmp	r0, #0
 8005882:	d154      	bne.n	800592e <MX_TIM1_Init+0xfa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005888:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800588a:	a912      	add	r1, sp, #72	@ 0x48
 800588c:	4835      	ldr	r0, [pc, #212]	@ (8005964 <MX_TIM1_Init+0x130>)
 800588e:	f7fe febc 	bl	800460a <HAL_TIM_ConfigClockSource>
 8005892:	2800      	cmp	r0, #0
 8005894:	d14e      	bne.n	8005934 <MX_TIM1_Init+0x100>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005896:	4833      	ldr	r0, [pc, #204]	@ (8005964 <MX_TIM1_Init+0x130>)
 8005898:	f7fe fd9a 	bl	80043d0 <HAL_TIM_PWM_Init>
 800589c:	2800      	cmp	r0, #0
 800589e:	d14c      	bne.n	800593a <MX_TIM1_Init+0x106>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058a0:	2300      	movs	r3, #0
 80058a2:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058a4:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058a6:	a910      	add	r1, sp, #64	@ 0x40
 80058a8:	482e      	ldr	r0, [pc, #184]	@ (8005964 <MX_TIM1_Init+0x130>)
 80058aa:	f7ff f913 	bl	8004ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d146      	bne.n	8005940 <MX_TIM1_Init+0x10c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058b2:	2360      	movs	r3, #96	@ 0x60
 80058b4:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80058b6:	2200      	movs	r2, #0
 80058b8:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058ba:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058bc:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058be:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058c0:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058c2:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058c4:	a909      	add	r1, sp, #36	@ 0x24
 80058c6:	4827      	ldr	r0, [pc, #156]	@ (8005964 <MX_TIM1_Init+0x130>)
 80058c8:	f7fe fde6 	bl	8004498 <HAL_TIM_PWM_ConfigChannel>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d13a      	bne.n	8005946 <MX_TIM1_Init+0x112>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058d0:	2204      	movs	r2, #4
 80058d2:	a909      	add	r1, sp, #36	@ 0x24
 80058d4:	4823      	ldr	r0, [pc, #140]	@ (8005964 <MX_TIM1_Init+0x130>)
 80058d6:	f7fe fddf 	bl	8004498 <HAL_TIM_PWM_ConfigChannel>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d136      	bne.n	800594c <MX_TIM1_Init+0x118>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80058de:	2208      	movs	r2, #8
 80058e0:	a909      	add	r1, sp, #36	@ 0x24
 80058e2:	4820      	ldr	r0, [pc, #128]	@ (8005964 <MX_TIM1_Init+0x130>)
 80058e4:	f7fe fdd8 	bl	8004498 <HAL_TIM_PWM_ConfigChannel>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d132      	bne.n	8005952 <MX_TIM1_Init+0x11e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80058ec:	2370      	movs	r3, #112	@ 0x70
 80058ee:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 8000-2;
 80058f0:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80058f4:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80058f6:	220c      	movs	r2, #12
 80058f8:	a909      	add	r1, sp, #36	@ 0x24
 80058fa:	481a      	ldr	r0, [pc, #104]	@ (8005964 <MX_TIM1_Init+0x130>)
 80058fc:	f7fe fdcc 	bl	8004498 <HAL_TIM_PWM_ConfigChannel>
 8005900:	bb50      	cbnz	r0, 8005958 <MX_TIM1_Init+0x124>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005902:	2300      	movs	r3, #0
 8005904:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005906:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005908:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800590a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800590c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005910:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005912:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005916:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005918:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800591a:	a901      	add	r1, sp, #4
 800591c:	4811      	ldr	r0, [pc, #68]	@ (8005964 <MX_TIM1_Init+0x130>)
 800591e:	f7ff f91f 	bl	8004b60 <HAL_TIMEx_ConfigBreakDeadTime>
 8005922:	b9e0      	cbnz	r0, 800595e <MX_TIM1_Init+0x12a>
  HAL_TIM_MspPostInit(&htim1);
 8005924:	480f      	ldr	r0, [pc, #60]	@ (8005964 <MX_TIM1_Init+0x130>)
 8005926:	f7ff ff57 	bl	80057d8 <HAL_TIM_MspPostInit>
}
 800592a:	b017      	add	sp, #92	@ 0x5c
 800592c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800592e:	f7fc f915 	bl	8001b5c <Error_Handler>
 8005932:	e7a7      	b.n	8005884 <MX_TIM1_Init+0x50>
    Error_Handler();
 8005934:	f7fc f912 	bl	8001b5c <Error_Handler>
 8005938:	e7ad      	b.n	8005896 <MX_TIM1_Init+0x62>
    Error_Handler();
 800593a:	f7fc f90f 	bl	8001b5c <Error_Handler>
 800593e:	e7af      	b.n	80058a0 <MX_TIM1_Init+0x6c>
    Error_Handler();
 8005940:	f7fc f90c 	bl	8001b5c <Error_Handler>
 8005944:	e7b5      	b.n	80058b2 <MX_TIM1_Init+0x7e>
    Error_Handler();
 8005946:	f7fc f909 	bl	8001b5c <Error_Handler>
 800594a:	e7c1      	b.n	80058d0 <MX_TIM1_Init+0x9c>
    Error_Handler();
 800594c:	f7fc f906 	bl	8001b5c <Error_Handler>
 8005950:	e7c5      	b.n	80058de <MX_TIM1_Init+0xaa>
    Error_Handler();
 8005952:	f7fc f903 	bl	8001b5c <Error_Handler>
 8005956:	e7c9      	b.n	80058ec <MX_TIM1_Init+0xb8>
    Error_Handler();
 8005958:	f7fc f900 	bl	8001b5c <Error_Handler>
 800595c:	e7d1      	b.n	8005902 <MX_TIM1_Init+0xce>
    Error_Handler();
 800595e:	f7fc f8fd 	bl	8001b5c <Error_Handler>
 8005962:	e7df      	b.n	8005924 <MX_TIM1_Init+0xf0>
 8005964:	20000508 	.word	0x20000508
 8005968:	40010000 	.word	0x40010000

0800596c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800596c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800596e:	480a      	ldr	r0, [pc, #40]	@ (8005998 <MX_USART3_UART_Init+0x2c>)
 8005970:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <MX_USART3_UART_Init+0x30>)
 8005972:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 921600;
 8005974:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8005978:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800597a:	2300      	movs	r3, #0
 800597c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800597e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005980:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005982:	220c      	movs	r2, #12
 8005984:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005986:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005988:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800598a:	f7ff fa5d 	bl	8004e48 <HAL_UART_Init>
 800598e:	b900      	cbnz	r0, 8005992 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005990:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005992:	f7fc f8e3 	bl	8001b5c <Error_Handler>
}
 8005996:	e7fb      	b.n	8005990 <MX_USART3_UART_Init+0x24>
 8005998:	20000610 	.word	0x20000610
 800599c:	40004800 	.word	0x40004800

080059a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80059a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a6:	2300      	movs	r3, #0
 80059a8:	9303      	str	r3, [sp, #12]
 80059aa:	9304      	str	r3, [sp, #16]
 80059ac:	9305      	str	r3, [sp, #20]
 80059ae:	9306      	str	r3, [sp, #24]
 80059b0:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 80059b2:	6802      	ldr	r2, [r0, #0]
 80059b4:	4b41      	ldr	r3, [pc, #260]	@ (8005abc <HAL_UART_MspInit+0x11c>)
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d002      	beq.n	80059c0 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80059ba:	b008      	add	sp, #32
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_ENABLE();
 80059c2:	2500      	movs	r5, #0
 80059c4:	9500      	str	r5, [sp, #0]
 80059c6:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 80059ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059cc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80059d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80059d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059d4:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80059d8:	9200      	str	r2, [sp, #0]
 80059da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059dc:	9501      	str	r5, [sp, #4]
 80059de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059e0:	f042 0204 	orr.w	r2, r2, #4
 80059e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80059e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059e8:	f002 0204 	and.w	r2, r2, #4
 80059ec:	9201      	str	r2, [sp, #4]
 80059ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059f0:	9502      	str	r5, [sp, #8]
 80059f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059f4:	f042 0202 	orr.w	r2, r2, #2
 80059f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005a04:	2320      	movs	r3, #32
 8005a06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a08:	f04f 0a02 	mov.w	sl, #2
 8005a0c:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a10:	f04f 0903 	mov.w	r9, #3
 8005a14:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a18:	f04f 0807 	mov.w	r8, #7
 8005a1c:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a20:	af03      	add	r7, sp, #12
 8005a22:	4639      	mov	r1, r7
 8005a24:	4826      	ldr	r0, [pc, #152]	@ (8005ac0 <HAL_UART_MspInit+0x120>)
 8005a26:	f7fd fa23 	bl	8002e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a2a:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8005a2e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a30:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a34:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a36:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a3a:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a3e:	4639      	mov	r1, r7
 8005a40:	4820      	ldr	r0, [pc, #128]	@ (8005ac4 <HAL_UART_MspInit+0x124>)
 8005a42:	f7fd fa15 	bl	8002e70 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8005a46:	4820      	ldr	r0, [pc, #128]	@ (8005ac8 <HAL_UART_MspInit+0x128>)
 8005a48:	4b20      	ldr	r3, [pc, #128]	@ (8005acc <HAL_UART_MspInit+0x12c>)
 8005a4a:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005a4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a50:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a52:	2340      	movs	r3, #64	@ 0x40
 8005a54:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a56:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a58:	6106      	str	r6, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a5a:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a5c:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005a5e:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a60:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a62:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005a64:	f7fd f820 	bl	8002aa8 <HAL_DMA_Init>
 8005a68:	bb10      	cbnz	r0, 8005ab0 <HAL_UART_MspInit+0x110>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005a6a:	4b17      	ldr	r3, [pc, #92]	@ (8005ac8 <HAL_UART_MspInit+0x128>)
 8005a6c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005a6e:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005a70:	4817      	ldr	r0, [pc, #92]	@ (8005ad0 <HAL_UART_MspInit+0x130>)
 8005a72:	4b18      	ldr	r3, [pc, #96]	@ (8005ad4 <HAL_UART_MspInit+0x134>)
 8005a74:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005a76:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a7a:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a80:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a86:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a88:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a8a:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005a8c:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a8e:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a90:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005a92:	f7fd f809 	bl	8002aa8 <HAL_DMA_Init>
 8005a96:	b970      	cbnz	r0, 8005ab6 <HAL_UART_MspInit+0x116>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005a98:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad0 <HAL_UART_MspInit+0x130>)
 8005a9a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005a9c:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	2027      	movs	r0, #39	@ 0x27
 8005aa4:	f7fc ff70 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005aa8:	2027      	movs	r0, #39	@ 0x27
 8005aaa:	f7fc ff7d 	bl	80029a8 <HAL_NVIC_EnableIRQ>
}
 8005aae:	e784      	b.n	80059ba <HAL_UART_MspInit+0x1a>
      Error_Handler();
 8005ab0:	f7fc f854 	bl	8001b5c <Error_Handler>
 8005ab4:	e7d9      	b.n	8005a6a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8005ab6:	f7fc f851 	bl	8001b5c <Error_Handler>
 8005aba:	e7ed      	b.n	8005a98 <HAL_UART_MspInit+0xf8>
 8005abc:	40004800 	.word	0x40004800
 8005ac0:	40020800 	.word	0x40020800
 8005ac4:	40020400 	.word	0x40020400
 8005ac8:	200005b0 	.word	0x200005b0
 8005acc:	40026058 	.word	0x40026058
 8005ad0:	20000550 	.word	0x20000550
 8005ad4:	40026028 	.word	0x40026028

08005ad8 <vbus_init>:

static float g_vbus_gain = 0.0f;
static float g_vbus = 0.0f;

void vbus_init(void) {
  g_vbus_gain = ADC_VOLTAGE_REF / ADC_RESOLUTION * (R1 + R2) / R2;
 8005ad8:	4b01      	ldr	r3, [pc, #4]	@ (8005ae0 <vbus_init+0x8>)
 8005ada:	4a02      	ldr	r2, [pc, #8]	@ (8005ae4 <vbus_init+0xc>)
 8005adc:	601a      	str	r2, [r3, #0]
}
 8005ade:	4770      	bx	lr
 8005ae0:	2000065c 	.word	0x2000065c
 8005ae4:	3cab999a 	.word	0x3cab999a

08005ae8 <vbus_get>:

float vbus_get(void) {
 8005ae8:	b510      	push	{r4, lr}
  HAL_ADC_Start(&hadc1);
 8005aea:	4c0c      	ldr	r4, [pc, #48]	@ (8005b1c <vbus_get+0x34>)
 8005aec:	4620      	mov	r0, r4
 8005aee:	f7fc fa4b 	bl	8001f88 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 8005af2:	210a      	movs	r1, #10
 8005af4:	4620      	mov	r0, r4
 8005af6:	f7fc fae9 	bl	80020cc <HAL_ADC_PollForConversion>
  g_vbus = HAL_ADC_GetValue(&hadc1) * g_vbus_gain;
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7fc fb42 	bl	8002184 <HAL_ADC_GetValue>
 8005b00:	ee00 0a10 	vmov	s0, r0
 8005b04:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005b08:	4b05      	ldr	r3, [pc, #20]	@ (8005b20 <vbus_get+0x38>)
 8005b0a:	edd3 7a00 	vldr	s15, [r3]
 8005b0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005b12:	4b04      	ldr	r3, [pc, #16]	@ (8005b24 <vbus_get+0x3c>)
 8005b14:	ed83 0a00 	vstr	s0, [r3]
  return g_vbus;
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200000f8 	.word	0x200000f8
 8005b20:	2000065c 	.word	0x2000065c
 8005b24:	20000658 	.word	0x20000658

08005b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005b2c:	f7ff fd6c 	bl	8005608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b30:	480c      	ldr	r0, [pc, #48]	@ (8005b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b32:	490d      	ldr	r1, [pc, #52]	@ (8005b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b34:	4a0d      	ldr	r2, [pc, #52]	@ (8005b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b38:	e002      	b.n	8005b40 <LoopCopyDataInit>

08005b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b3e:	3304      	adds	r3, #4

08005b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b44:	d3f9      	bcc.n	8005b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b46:	4a0a      	ldr	r2, [pc, #40]	@ (8005b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b48:	4c0a      	ldr	r4, [pc, #40]	@ (8005b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b4c:	e001      	b.n	8005b52 <LoopFillZerobss>

08005b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b50:	3204      	adds	r2, #4

08005b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b54:	d3fb      	bcc.n	8005b4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005b56:	f000 f8a9 	bl	8005cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b5a:	f7fc f855 	bl	8001c08 <main>
  bx  lr    
 8005b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b68:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8005b6c:	0800692c 	.word	0x0800692c
  ldr r2, =_sbss
 8005b70:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8005b74:	20000660 	.word	0x20000660

08005b78 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b78:	e7fe      	b.n	8005b78 <CAN1_RX0_IRQHandler>
	...

08005b7c <arm_sin_f32>:
 8005b7c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8005bfc <arm_sin_f32+0x80>
 8005b80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005b84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005b90:	d504      	bpl.n	8005b9c <arm_sin_f32+0x20>
 8005b92:	ee17 3a90 	vmov	r3, s15
 8005b96:	3b01      	subs	r3, #1
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005c00 <arm_sin_f32+0x84>
 8005ba4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005ba8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005bac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005bb0:	ee17 3a90 	vmov	r3, s15
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bba:	d21a      	bcs.n	8005bf2 <arm_sin_f32+0x76>
 8005bbc:	ee07 3a90 	vmov	s15, r3
 8005bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc4:	1c59      	adds	r1, r3, #1
 8005bc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005bca:	4a0e      	ldr	r2, [pc, #56]	@ (8005c04 <arm_sin_f32+0x88>)
 8005bcc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005bd4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005bd8:	ed93 7a00 	vldr	s14, [r3]
 8005bdc:	edd2 6a00 	vldr	s13, [r2]
 8005be0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005be4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bec:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005bf0:	4770      	bx	lr
 8005bf2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e7e6      	b.n	8005bca <arm_sin_f32+0x4e>
 8005bfc:	3e22f983 	.word	0x3e22f983
 8005c00:	44000000 	.word	0x44000000
 8005c04:	08006118 	.word	0x08006118

08005c08 <arm_cos_f32>:
 8005c08:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8005c90 <arm_cos_f32+0x88>
 8005c0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005c10:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8005c14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c20:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005c24:	d504      	bpl.n	8005c30 <arm_cos_f32+0x28>
 8005c26:	ee17 3a90 	vmov	r3, s15
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c34:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005c94 <arm_cos_f32+0x8c>
 8005c38:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005c3c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005c40:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005c44:	ee17 3a90 	vmov	r3, s15
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c4e:	d21a      	bcs.n	8005c86 <arm_cos_f32+0x7e>
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c58:	1c59      	adds	r1, r3, #1
 8005c5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c98 <arm_cos_f32+0x90>)
 8005c60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005c64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005c6c:	ed93 7a00 	vldr	s14, [r3]
 8005c70:	edd2 6a00 	vldr	s13, [r2]
 8005c74:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005c78:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c80:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005c84:	4770      	bx	lr
 8005c86:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e7e6      	b.n	8005c5e <arm_cos_f32+0x56>
 8005c90:	3e22f983 	.word	0x3e22f983
 8005c94:	44000000 	.word	0x44000000
 8005c98:	08006118 	.word	0x08006118

08005c9c <memset>:
 8005c9c:	4402      	add	r2, r0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d100      	bne.n	8005ca6 <memset+0xa>
 8005ca4:	4770      	bx	lr
 8005ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8005caa:	e7f9      	b.n	8005ca0 <memset+0x4>

08005cac <__libc_init_array>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <__libc_init_array+0x38>)
 8005cb0:	4d0d      	ldr	r5, [pc, #52]	@ (8005ce8 <__libc_init_array+0x3c>)
 8005cb2:	1b5b      	subs	r3, r3, r5
 8005cb4:	109c      	asrs	r4, r3, #2
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	42a6      	cmp	r6, r4
 8005cba:	d109      	bne.n	8005cd0 <__libc_init_array+0x24>
 8005cbc:	f000 fa10 	bl	80060e0 <_init>
 8005cc0:	4d0a      	ldr	r5, [pc, #40]	@ (8005cec <__libc_init_array+0x40>)
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <__libc_init_array+0x44>)
 8005cc4:	1b5b      	subs	r3, r3, r5
 8005cc6:	109c      	asrs	r4, r3, #2
 8005cc8:	2600      	movs	r6, #0
 8005cca:	42a6      	cmp	r6, r4
 8005ccc:	d105      	bne.n	8005cda <__libc_init_array+0x2e>
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd4:	4798      	blx	r3
 8005cd6:	3601      	adds	r6, #1
 8005cd8:	e7ee      	b.n	8005cb8 <__libc_init_array+0xc>
 8005cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cde:	4798      	blx	r3
 8005ce0:	3601      	adds	r6, #1
 8005ce2:	e7f2      	b.n	8005cca <__libc_init_array+0x1e>
 8005ce4:	08006924 	.word	0x08006924
 8005ce8:	08006924 	.word	0x08006924
 8005cec:	08006924 	.word	0x08006924
 8005cf0:	08006928 	.word	0x08006928

08005cf4 <memcpy>:
 8005cf4:	440a      	add	r2, r1
 8005cf6:	4291      	cmp	r1, r2
 8005cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cfc:	d100      	bne.n	8005d00 <memcpy+0xc>
 8005cfe:	4770      	bx	lr
 8005d00:	b510      	push	{r4, lr}
 8005d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d0a:	4291      	cmp	r1, r2
 8005d0c:	d1f9      	bne.n	8005d02 <memcpy+0xe>
 8005d0e:	bd10      	pop	{r4, pc}

08005d10 <fmaxf>:
 8005d10:	b508      	push	{r3, lr}
 8005d12:	ed2d 8b02 	vpush	{d8}
 8005d16:	eef0 8a40 	vmov.f32	s17, s0
 8005d1a:	eeb0 8a60 	vmov.f32	s16, s1
 8005d1e:	f000 f847 	bl	8005db0 <__fpclassifyf>
 8005d22:	b920      	cbnz	r0, 8005d2e <fmaxf+0x1e>
 8005d24:	eeb0 0a48 	vmov.f32	s0, s16
 8005d28:	ecbd 8b02 	vpop	{d8}
 8005d2c:	bd08      	pop	{r3, pc}
 8005d2e:	eeb0 0a48 	vmov.f32	s0, s16
 8005d32:	f000 f83d 	bl	8005db0 <__fpclassifyf>
 8005d36:	b158      	cbz	r0, 8005d50 <fmaxf+0x40>
 8005d38:	eef4 8ac8 	vcmpe.f32	s17, s16
 8005d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d40:	bfc8      	it	gt
 8005d42:	eeb0 8a68 	vmovgt.f32	s16, s17
 8005d46:	eeb0 0a48 	vmov.f32	s0, s16
 8005d4a:	ecbd 8b02 	vpop	{d8}
 8005d4e:	bd08      	pop	{r3, pc}
 8005d50:	eeb0 8a68 	vmov.f32	s16, s17
 8005d54:	eeb0 0a48 	vmov.f32	s0, s16
 8005d58:	ecbd 8b02 	vpop	{d8}
 8005d5c:	bd08      	pop	{r3, pc}
 8005d5e:	bf00      	nop

08005d60 <fminf>:
 8005d60:	b508      	push	{r3, lr}
 8005d62:	ed2d 8b02 	vpush	{d8}
 8005d66:	eef0 8a40 	vmov.f32	s17, s0
 8005d6a:	eeb0 8a60 	vmov.f32	s16, s1
 8005d6e:	f000 f81f 	bl	8005db0 <__fpclassifyf>
 8005d72:	b920      	cbnz	r0, 8005d7e <fminf+0x1e>
 8005d74:	eeb0 0a48 	vmov.f32	s0, s16
 8005d78:	ecbd 8b02 	vpop	{d8}
 8005d7c:	bd08      	pop	{r3, pc}
 8005d7e:	eeb0 0a48 	vmov.f32	s0, s16
 8005d82:	f000 f815 	bl	8005db0 <__fpclassifyf>
 8005d86:	b158      	cbz	r0, 8005da0 <fminf+0x40>
 8005d88:	eef4 8ac8 	vcmpe.f32	s17, s16
 8005d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d90:	bf48      	it	mi
 8005d92:	eeb0 8a68 	vmovmi.f32	s16, s17
 8005d96:	eeb0 0a48 	vmov.f32	s0, s16
 8005d9a:	ecbd 8b02 	vpop	{d8}
 8005d9e:	bd08      	pop	{r3, pc}
 8005da0:	eeb0 8a68 	vmov.f32	s16, s17
 8005da4:	eeb0 0a48 	vmov.f32	s0, s16
 8005da8:	ecbd 8b02 	vpop	{d8}
 8005dac:	bd08      	pop	{r3, pc}
 8005dae:	bf00      	nop

08005db0 <__fpclassifyf>:
 8005db0:	ee10 3a10 	vmov	r3, s0
 8005db4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8005db8:	d00e      	beq.n	8005dd8 <__fpclassifyf+0x28>
 8005dba:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8005dbe:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8005dc2:	d30d      	bcc.n	8005de0 <__fpclassifyf+0x30>
 8005dc4:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <__fpclassifyf+0x34>)
 8005dc6:	1e42      	subs	r2, r0, #1
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d907      	bls.n	8005ddc <__fpclassifyf+0x2c>
 8005dcc:	f1a0 40ff 	sub.w	r0, r0, #2139095040	@ 0x7f800000
 8005dd0:	fab0 f080 	clz	r0, r0
 8005dd4:	0940      	lsrs	r0, r0, #5
 8005dd6:	4770      	bx	lr
 8005dd8:	2002      	movs	r0, #2
 8005dda:	4770      	bx	lr
 8005ddc:	2003      	movs	r0, #3
 8005dde:	4770      	bx	lr
 8005de0:	2004      	movs	r0, #4
 8005de2:	4770      	bx	lr
 8005de4:	007ffffe 	.word	0x007ffffe

08005de8 <__udivmoddi4>:
 8005de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dec:	9d08      	ldr	r5, [sp, #32]
 8005dee:	460f      	mov	r7, r1
 8005df0:	4604      	mov	r4, r0
 8005df2:	468c      	mov	ip, r1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d148      	bne.n	8005e8a <__udivmoddi4+0xa2>
 8005df8:	428a      	cmp	r2, r1
 8005dfa:	4616      	mov	r6, r2
 8005dfc:	d961      	bls.n	8005ec2 <__udivmoddi4+0xda>
 8005dfe:	fab2 f382 	clz	r3, r2
 8005e02:	b14b      	cbz	r3, 8005e18 <__udivmoddi4+0x30>
 8005e04:	f1c3 0220 	rsb	r2, r3, #32
 8005e08:	fa01 fc03 	lsl.w	ip, r1, r3
 8005e0c:	fa20 f202 	lsr.w	r2, r0, r2
 8005e10:	409e      	lsls	r6, r3
 8005e12:	ea42 0c0c 	orr.w	ip, r2, ip
 8005e16:	409c      	lsls	r4, r3
 8005e18:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005e1c:	b2b7      	uxth	r7, r6
 8005e1e:	fbbc f1fe 	udiv	r1, ip, lr
 8005e22:	0c22      	lsrs	r2, r4, #16
 8005e24:	fb0e cc11 	mls	ip, lr, r1, ip
 8005e28:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8005e2c:	fb01 f007 	mul.w	r0, r1, r7
 8005e30:	4290      	cmp	r0, r2
 8005e32:	d909      	bls.n	8005e48 <__udivmoddi4+0x60>
 8005e34:	18b2      	adds	r2, r6, r2
 8005e36:	f101 3cff 	add.w	ip, r1, #4294967295
 8005e3a:	f080 80ee 	bcs.w	800601a <__udivmoddi4+0x232>
 8005e3e:	4290      	cmp	r0, r2
 8005e40:	f240 80eb 	bls.w	800601a <__udivmoddi4+0x232>
 8005e44:	3902      	subs	r1, #2
 8005e46:	4432      	add	r2, r6
 8005e48:	1a12      	subs	r2, r2, r0
 8005e4a:	b2a4      	uxth	r4, r4
 8005e4c:	fbb2 f0fe 	udiv	r0, r2, lr
 8005e50:	fb0e 2210 	mls	r2, lr, r0, r2
 8005e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005e58:	fb00 f707 	mul.w	r7, r0, r7
 8005e5c:	42a7      	cmp	r7, r4
 8005e5e:	d909      	bls.n	8005e74 <__udivmoddi4+0x8c>
 8005e60:	1934      	adds	r4, r6, r4
 8005e62:	f100 32ff 	add.w	r2, r0, #4294967295
 8005e66:	f080 80da 	bcs.w	800601e <__udivmoddi4+0x236>
 8005e6a:	42a7      	cmp	r7, r4
 8005e6c:	f240 80d7 	bls.w	800601e <__udivmoddi4+0x236>
 8005e70:	4434      	add	r4, r6
 8005e72:	3802      	subs	r0, #2
 8005e74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005e78:	1be4      	subs	r4, r4, r7
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	b11d      	cbz	r5, 8005e86 <__udivmoddi4+0x9e>
 8005e7e:	40dc      	lsrs	r4, r3
 8005e80:	2300      	movs	r3, #0
 8005e82:	e9c5 4300 	strd	r4, r3, [r5]
 8005e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8a:	428b      	cmp	r3, r1
 8005e8c:	d906      	bls.n	8005e9c <__udivmoddi4+0xb4>
 8005e8e:	b10d      	cbz	r5, 8005e94 <__udivmoddi4+0xac>
 8005e90:	e9c5 0100 	strd	r0, r1, [r5]
 8005e94:	2100      	movs	r1, #0
 8005e96:	4608      	mov	r0, r1
 8005e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9c:	fab3 f183 	clz	r1, r3
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	d148      	bne.n	8005f36 <__udivmoddi4+0x14e>
 8005ea4:	42bb      	cmp	r3, r7
 8005ea6:	d302      	bcc.n	8005eae <__udivmoddi4+0xc6>
 8005ea8:	4282      	cmp	r2, r0
 8005eaa:	f200 8107 	bhi.w	80060bc <__udivmoddi4+0x2d4>
 8005eae:	1a84      	subs	r4, r0, r2
 8005eb0:	eb67 0203 	sbc.w	r2, r7, r3
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	4694      	mov	ip, r2
 8005eb8:	2d00      	cmp	r5, #0
 8005eba:	d0e4      	beq.n	8005e86 <__udivmoddi4+0x9e>
 8005ebc:	e9c5 4c00 	strd	r4, ip, [r5]
 8005ec0:	e7e1      	b.n	8005e86 <__udivmoddi4+0x9e>
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	f000 8092 	beq.w	8005fec <__udivmoddi4+0x204>
 8005ec8:	fab2 f382 	clz	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f040 80a8 	bne.w	8006022 <__udivmoddi4+0x23a>
 8005ed2:	1a8a      	subs	r2, r1, r2
 8005ed4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005ed8:	fa1f fc86 	uxth.w	ip, r6
 8005edc:	2101      	movs	r1, #1
 8005ede:	0c20      	lsrs	r0, r4, #16
 8005ee0:	fbb2 f7fe 	udiv	r7, r2, lr
 8005ee4:	fb0e 2217 	mls	r2, lr, r7, r2
 8005ee8:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8005eec:	fb0c f007 	mul.w	r0, ip, r7
 8005ef0:	4290      	cmp	r0, r2
 8005ef2:	d907      	bls.n	8005f04 <__udivmoddi4+0x11c>
 8005ef4:	18b2      	adds	r2, r6, r2
 8005ef6:	f107 38ff 	add.w	r8, r7, #4294967295
 8005efa:	d202      	bcs.n	8005f02 <__udivmoddi4+0x11a>
 8005efc:	4290      	cmp	r0, r2
 8005efe:	f200 80e2 	bhi.w	80060c6 <__udivmoddi4+0x2de>
 8005f02:	4647      	mov	r7, r8
 8005f04:	1a12      	subs	r2, r2, r0
 8005f06:	b2a4      	uxth	r4, r4
 8005f08:	fbb2 f0fe 	udiv	r0, r2, lr
 8005f0c:	fb0e 2210 	mls	r2, lr, r0, r2
 8005f10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005f14:	fb0c fc00 	mul.w	ip, ip, r0
 8005f18:	45a4      	cmp	ip, r4
 8005f1a:	d907      	bls.n	8005f2c <__udivmoddi4+0x144>
 8005f1c:	1934      	adds	r4, r6, r4
 8005f1e:	f100 32ff 	add.w	r2, r0, #4294967295
 8005f22:	d202      	bcs.n	8005f2a <__udivmoddi4+0x142>
 8005f24:	45a4      	cmp	ip, r4
 8005f26:	f200 80cb 	bhi.w	80060c0 <__udivmoddi4+0x2d8>
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	eba4 040c 	sub.w	r4, r4, ip
 8005f30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005f34:	e7a2      	b.n	8005e7c <__udivmoddi4+0x94>
 8005f36:	f1c1 0620 	rsb	r6, r1, #32
 8005f3a:	408b      	lsls	r3, r1
 8005f3c:	fa22 fc06 	lsr.w	ip, r2, r6
 8005f40:	ea4c 0c03 	orr.w	ip, ip, r3
 8005f44:	fa07 f401 	lsl.w	r4, r7, r1
 8005f48:	fa20 f306 	lsr.w	r3, r0, r6
 8005f4c:	40f7      	lsrs	r7, r6
 8005f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8005f52:	4323      	orrs	r3, r4
 8005f54:	fa00 f801 	lsl.w	r8, r0, r1
 8005f58:	fa1f fe8c 	uxth.w	lr, ip
 8005f5c:	fbb7 f0f9 	udiv	r0, r7, r9
 8005f60:	0c1c      	lsrs	r4, r3, #16
 8005f62:	fb09 7710 	mls	r7, r9, r0, r7
 8005f66:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8005f6a:	fb00 f70e 	mul.w	r7, r0, lr
 8005f6e:	42a7      	cmp	r7, r4
 8005f70:	fa02 f201 	lsl.w	r2, r2, r1
 8005f74:	d90a      	bls.n	8005f8c <__udivmoddi4+0x1a4>
 8005f76:	eb1c 0404 	adds.w	r4, ip, r4
 8005f7a:	f100 3aff 	add.w	sl, r0, #4294967295
 8005f7e:	f080 809b 	bcs.w	80060b8 <__udivmoddi4+0x2d0>
 8005f82:	42a7      	cmp	r7, r4
 8005f84:	f240 8098 	bls.w	80060b8 <__udivmoddi4+0x2d0>
 8005f88:	3802      	subs	r0, #2
 8005f8a:	4464      	add	r4, ip
 8005f8c:	1be4      	subs	r4, r4, r7
 8005f8e:	b29f      	uxth	r7, r3
 8005f90:	fbb4 f3f9 	udiv	r3, r4, r9
 8005f94:	fb09 4413 	mls	r4, r9, r3, r4
 8005f98:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8005f9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8005fa0:	45a6      	cmp	lr, r4
 8005fa2:	d909      	bls.n	8005fb8 <__udivmoddi4+0x1d0>
 8005fa4:	eb1c 0404 	adds.w	r4, ip, r4
 8005fa8:	f103 37ff 	add.w	r7, r3, #4294967295
 8005fac:	f080 8082 	bcs.w	80060b4 <__udivmoddi4+0x2cc>
 8005fb0:	45a6      	cmp	lr, r4
 8005fb2:	d97f      	bls.n	80060b4 <__udivmoddi4+0x2cc>
 8005fb4:	3b02      	subs	r3, #2
 8005fb6:	4464      	add	r4, ip
 8005fb8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005fbc:	eba4 040e 	sub.w	r4, r4, lr
 8005fc0:	fba0 e702 	umull	lr, r7, r0, r2
 8005fc4:	42bc      	cmp	r4, r7
 8005fc6:	4673      	mov	r3, lr
 8005fc8:	46b9      	mov	r9, r7
 8005fca:	d363      	bcc.n	8006094 <__udivmoddi4+0x2ac>
 8005fcc:	d060      	beq.n	8006090 <__udivmoddi4+0x2a8>
 8005fce:	b15d      	cbz	r5, 8005fe8 <__udivmoddi4+0x200>
 8005fd0:	ebb8 0203 	subs.w	r2, r8, r3
 8005fd4:	eb64 0409 	sbc.w	r4, r4, r9
 8005fd8:	fa04 f606 	lsl.w	r6, r4, r6
 8005fdc:	fa22 f301 	lsr.w	r3, r2, r1
 8005fe0:	431e      	orrs	r6, r3
 8005fe2:	40cc      	lsrs	r4, r1
 8005fe4:	e9c5 6400 	strd	r6, r4, [r5]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	e74c      	b.n	8005e86 <__udivmoddi4+0x9e>
 8005fec:	0862      	lsrs	r2, r4, #1
 8005fee:	0848      	lsrs	r0, r1, #1
 8005ff0:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8005ff4:	0c0b      	lsrs	r3, r1, #16
 8005ff6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ffa:	b28a      	uxth	r2, r1
 8005ffc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006000:	fbb3 f1f6 	udiv	r1, r3, r6
 8006004:	07e4      	lsls	r4, r4, #31
 8006006:	46b4      	mov	ip, r6
 8006008:	4637      	mov	r7, r6
 800600a:	46b6      	mov	lr, r6
 800600c:	231f      	movs	r3, #31
 800600e:	fbb0 f0f6 	udiv	r0, r0, r6
 8006012:	1bd2      	subs	r2, r2, r7
 8006014:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006018:	e761      	b.n	8005ede <__udivmoddi4+0xf6>
 800601a:	4661      	mov	r1, ip
 800601c:	e714      	b.n	8005e48 <__udivmoddi4+0x60>
 800601e:	4610      	mov	r0, r2
 8006020:	e728      	b.n	8005e74 <__udivmoddi4+0x8c>
 8006022:	f1c3 0120 	rsb	r1, r3, #32
 8006026:	fa20 f201 	lsr.w	r2, r0, r1
 800602a:	409e      	lsls	r6, r3
 800602c:	fa27 f101 	lsr.w	r1, r7, r1
 8006030:	409f      	lsls	r7, r3
 8006032:	433a      	orrs	r2, r7
 8006034:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006038:	fa1f fc86 	uxth.w	ip, r6
 800603c:	fbb1 f7fe 	udiv	r7, r1, lr
 8006040:	fb0e 1017 	mls	r0, lr, r7, r1
 8006044:	0c11      	lsrs	r1, r2, #16
 8006046:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800604a:	fb07 f80c 	mul.w	r8, r7, ip
 800604e:	4588      	cmp	r8, r1
 8006050:	fa04 f403 	lsl.w	r4, r4, r3
 8006054:	d93a      	bls.n	80060cc <__udivmoddi4+0x2e4>
 8006056:	1871      	adds	r1, r6, r1
 8006058:	f107 30ff 	add.w	r0, r7, #4294967295
 800605c:	d201      	bcs.n	8006062 <__udivmoddi4+0x27a>
 800605e:	4588      	cmp	r8, r1
 8006060:	d81f      	bhi.n	80060a2 <__udivmoddi4+0x2ba>
 8006062:	eba1 0108 	sub.w	r1, r1, r8
 8006066:	fbb1 f8fe 	udiv	r8, r1, lr
 800606a:	fb08 f70c 	mul.w	r7, r8, ip
 800606e:	fb0e 1118 	mls	r1, lr, r8, r1
 8006072:	b292      	uxth	r2, r2
 8006074:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006078:	42ba      	cmp	r2, r7
 800607a:	d22f      	bcs.n	80060dc <__udivmoddi4+0x2f4>
 800607c:	18b2      	adds	r2, r6, r2
 800607e:	f108 31ff 	add.w	r1, r8, #4294967295
 8006082:	d2c6      	bcs.n	8006012 <__udivmoddi4+0x22a>
 8006084:	42ba      	cmp	r2, r7
 8006086:	d2c4      	bcs.n	8006012 <__udivmoddi4+0x22a>
 8006088:	f1a8 0102 	sub.w	r1, r8, #2
 800608c:	4432      	add	r2, r6
 800608e:	e7c0      	b.n	8006012 <__udivmoddi4+0x22a>
 8006090:	45f0      	cmp	r8, lr
 8006092:	d29c      	bcs.n	8005fce <__udivmoddi4+0x1e6>
 8006094:	ebbe 0302 	subs.w	r3, lr, r2
 8006098:	eb67 070c 	sbc.w	r7, r7, ip
 800609c:	3801      	subs	r0, #1
 800609e:	46b9      	mov	r9, r7
 80060a0:	e795      	b.n	8005fce <__udivmoddi4+0x1e6>
 80060a2:	eba6 0808 	sub.w	r8, r6, r8
 80060a6:	4441      	add	r1, r8
 80060a8:	1eb8      	subs	r0, r7, #2
 80060aa:	fbb1 f8fe 	udiv	r8, r1, lr
 80060ae:	fb08 f70c 	mul.w	r7, r8, ip
 80060b2:	e7dc      	b.n	800606e <__udivmoddi4+0x286>
 80060b4:	463b      	mov	r3, r7
 80060b6:	e77f      	b.n	8005fb8 <__udivmoddi4+0x1d0>
 80060b8:	4650      	mov	r0, sl
 80060ba:	e767      	b.n	8005f8c <__udivmoddi4+0x1a4>
 80060bc:	4608      	mov	r0, r1
 80060be:	e6fb      	b.n	8005eb8 <__udivmoddi4+0xd0>
 80060c0:	4434      	add	r4, r6
 80060c2:	3802      	subs	r0, #2
 80060c4:	e732      	b.n	8005f2c <__udivmoddi4+0x144>
 80060c6:	3f02      	subs	r7, #2
 80060c8:	4432      	add	r2, r6
 80060ca:	e71b      	b.n	8005f04 <__udivmoddi4+0x11c>
 80060cc:	eba1 0108 	sub.w	r1, r1, r8
 80060d0:	4638      	mov	r0, r7
 80060d2:	fbb1 f8fe 	udiv	r8, r1, lr
 80060d6:	fb08 f70c 	mul.w	r7, r8, ip
 80060da:	e7c8      	b.n	800606e <__udivmoddi4+0x286>
 80060dc:	4641      	mov	r1, r8
 80060de:	e798      	b.n	8006012 <__udivmoddi4+0x22a>

080060e0 <_init>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

080060ec <_fini>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr
