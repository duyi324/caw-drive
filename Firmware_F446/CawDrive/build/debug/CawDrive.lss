
build/debug/CawDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005040  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005210  08005210  00006210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005270  08005270  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005270  08005270  00006270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005278  08005278  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800527c  0800527c  0000627c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005280  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004560  20000010  08005290  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004570  08005290  00007570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002613f  00000000  00000000  00007079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052d7  00000000  00000000  0002d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012cf8  00000000  00000000  0003248f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ae0  00000000  00000000  00045188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001562  00000000  00000000  00046c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020e4c  00000000  00000000  000481ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000874c  00000000  00000000  00069016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000491c  00000000  00000000  00071764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000017f  00000000  00000000  00076080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b80c 	b.w	8000200 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f004 fe86 	bl	8004f00 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__aeabi_idiv0>:
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c05      	ldr	r4, [pc, #20]	@ (800021c <__do_global_dtors_aux+0x18>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b933      	cbnz	r3, 800021a <__do_global_dtors_aux+0x16>
 800020c:	4b04      	ldr	r3, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x1c>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x12>
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000010 	.word	0x20000010
 8000220:	00000000 	.word	0x00000000
 8000224:	080051f8 	.word	0x080051f8

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <frame_dummy+0x10>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4903      	ldr	r1, [pc, #12]	@ (800023c <frame_dummy+0x14>)
 8000230:	4803      	ldr	r0, [pc, #12]	@ (8000240 <frame_dummy+0x18>)
 8000232:	f3af 8000 	nop.w
 8000236:	bd08      	pop	{r3, pc}
 8000238:	00000000 	.word	0x00000000
 800023c:	20000014 	.word	0x20000014
 8000240:	080051f8 	.word	0x080051f8

08000244 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000244:	b500      	push	{lr}
 8000246:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000248:	2300      	movs	r3, #0
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	9301      	str	r3, [sp, #4]
 800024e:	9302      	str	r3, [sp, #8]
 8000250:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000252:	4815      	ldr	r0, [pc, #84]	@ (80002a8 <MX_ADC1_Init+0x64>)
 8000254:	4a15      	ldr	r2, [pc, #84]	@ (80002ac <MX_ADC1_Init+0x68>)
 8000256:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000258:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800025c:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800025e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000260:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000262:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000264:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000268:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800026a:	4a11      	ldr	r2, [pc, #68]	@ (80002b0 <MX_ADC1_Init+0x6c>)
 800026c:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800026e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000270:	2201      	movs	r2, #1
 8000272:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000274:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000278:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800027a:	f001 f98d 	bl	8001598 <HAL_ADC_Init>
 800027e:	b960      	cbnz	r0, 800029a <MX_ADC1_Init+0x56>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000280:	2300      	movs	r3, #0
 8000282:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000284:	2201      	movs	r2, #1
 8000286:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000288:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028a:	4669      	mov	r1, sp
 800028c:	4806      	ldr	r0, [pc, #24]	@ (80002a8 <MX_ADC1_Init+0x64>)
 800028e:	f001 f9af 	bl	80015f0 <HAL_ADC_ConfigChannel>
 8000292:	b928      	cbnz	r0, 80002a0 <MX_ADC1_Init+0x5c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000294:	b005      	add	sp, #20
 8000296:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800029a:	f000 fdf3 	bl	8000e84 <Error_Handler>
 800029e:	e7ef      	b.n	8000280 <MX_ADC1_Init+0x3c>
    Error_Handler();
 80002a0:	f000 fdf0 	bl	8000e84 <Error_Handler>
}
 80002a4:	e7f6      	b.n	8000294 <MX_ADC1_Init+0x50>
 80002a6:	bf00      	nop
 80002a8:	200000bc 	.word	0x200000bc
 80002ac:	40012000 	.word	0x40012000
 80002b0:	0f000001 	.word	0x0f000001

080002b4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002b4:	b500      	push	{lr}
 80002b6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002b8:	2300      	movs	r3, #0
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	9302      	str	r3, [sp, #8]
 80002c0:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80002c2:	4815      	ldr	r0, [pc, #84]	@ (8000318 <MX_ADC2_Init+0x64>)
 80002c4:	4a15      	ldr	r2, [pc, #84]	@ (800031c <MX_ADC2_Init+0x68>)
 80002c6:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002cc:	6042      	str	r2, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002ce:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80002d0:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002d2:	7603      	strb	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002d4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002d8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002da:	4a11      	ldr	r2, [pc, #68]	@ (8000320 <MX_ADC2_Init+0x6c>)
 80002dc:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002de:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 80002e0:	2201      	movs	r2, #1
 80002e2:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80002e4:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002e8:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80002ea:	f001 f955 	bl	8001598 <HAL_ADC_Init>
 80002ee:	b960      	cbnz	r0, 800030a <MX_ADC2_Init+0x56>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80002f4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80002f6:	2300      	movs	r3, #0
 80002f8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80002fa:	4669      	mov	r1, sp
 80002fc:	4806      	ldr	r0, [pc, #24]	@ (8000318 <MX_ADC2_Init+0x64>)
 80002fe:	f001 f977 	bl	80015f0 <HAL_ADC_ConfigChannel>
 8000302:	b928      	cbnz	r0, 8000310 <MX_ADC2_Init+0x5c>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000304:	b005      	add	sp, #20
 8000306:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800030a:	f000 fdbb 	bl	8000e84 <Error_Handler>
 800030e:	e7ef      	b.n	80002f0 <MX_ADC2_Init+0x3c>
    Error_Handler();
 8000310:	f000 fdb8 	bl	8000e84 <Error_Handler>
}
 8000314:	e7f6      	b.n	8000304 <MX_ADC2_Init+0x50>
 8000316:	bf00      	nop
 8000318:	20000074 	.word	0x20000074
 800031c:	40012100 	.word	0x40012100
 8000320:	0f000001 	.word	0x0f000001

08000324 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000324:	b500      	push	{lr}
 8000326:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000328:	2300      	movs	r3, #0
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	9302      	str	r3, [sp, #8]
 8000330:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000332:	4815      	ldr	r0, [pc, #84]	@ (8000388 <MX_ADC3_Init+0x64>)
 8000334:	4a15      	ldr	r2, [pc, #84]	@ (800038c <MX_ADC3_Init+0x68>)
 8000336:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000338:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800033c:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800033e:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000340:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000342:	7603      	strb	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000344:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000348:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034a:	4a11      	ldr	r2, [pc, #68]	@ (8000390 <MX_ADC3_Init+0x6c>)
 800034c:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034e:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000350:	2201      	movs	r2, #1
 8000352:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000354:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000358:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800035a:	f001 f91d 	bl	8001598 <HAL_ADC_Init>
 800035e:	b968      	cbnz	r0, 800037c <MX_ADC3_Init+0x58>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000360:	2302      	movs	r3, #2
 8000362:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000364:	2301      	movs	r3, #1
 8000366:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000368:	2300      	movs	r3, #0
 800036a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800036c:	4669      	mov	r1, sp
 800036e:	4806      	ldr	r0, [pc, #24]	@ (8000388 <MX_ADC3_Init+0x64>)
 8000370:	f001 f93e 	bl	80015f0 <HAL_ADC_ConfigChannel>
 8000374:	b928      	cbnz	r0, 8000382 <MX_ADC3_Init+0x5e>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000376:	b005      	add	sp, #20
 8000378:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800037c:	f000 fd82 	bl	8000e84 <Error_Handler>
 8000380:	e7ee      	b.n	8000360 <MX_ADC3_Init+0x3c>
    Error_Handler();
 8000382:	f000 fd7f 	bl	8000e84 <Error_Handler>
}
 8000386:	e7f6      	b.n	8000376 <MX_ADC3_Init+0x52>
 8000388:	2000002c 	.word	0x2000002c
 800038c:	40012200 	.word	0x40012200
 8000390:	0f000001 	.word	0x0f000001

08000394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000396:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	2300      	movs	r3, #0
 800039a:	9309      	str	r3, [sp, #36]	@ 0x24
 800039c:	930a      	str	r3, [sp, #40]	@ 0x28
 800039e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80003a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80003a2:	930d      	str	r3, [sp, #52]	@ 0x34
  if(adcHandle->Instance==ADC1)
 80003a4:	6803      	ldr	r3, [r0, #0]
 80003a6:	4a46      	ldr	r2, [pc, #280]	@ (80004c0 <HAL_ADC_MspInit+0x12c>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d007      	beq.n	80003bc <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80003ac:	4a45      	ldr	r2, [pc, #276]	@ (80004c4 <HAL_ADC_MspInit+0x130>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d035      	beq.n	800041e <HAL_ADC_MspInit+0x8a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80003b2:	4a45      	ldr	r2, [pc, #276]	@ (80004c8 <HAL_ADC_MspInit+0x134>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d063      	beq.n	8000480 <HAL_ADC_MspInit+0xec>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80003b8:	b00f      	add	sp, #60	@ 0x3c
 80003ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003bc:	2400      	movs	r4, #0
 80003be:	9401      	str	r4, [sp, #4]
 80003c0:	4b42      	ldr	r3, [pc, #264]	@ (80004cc <HAL_ADC_MspInit+0x138>)
 80003c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80003c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80003c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80003ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80003cc:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	9402      	str	r4, [sp, #8]
 80003d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003d8:	f042 0204 	orr.w	r2, r2, #4
 80003dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80003de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003e0:	f002 0204 	and.w	r2, r2, #4
 80003e4:	9202      	str	r2, [sp, #8]
 80003e6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	9403      	str	r4, [sp, #12]
 80003ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003ec:	f042 0201 	orr.w	r2, r2, #1
 80003f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80003f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	9303      	str	r3, [sp, #12]
 80003fa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003fc:	2701      	movs	r7, #1
 80003fe:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000400:	2603      	movs	r6, #3
 8000402:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000404:	ad09      	add	r5, sp, #36	@ 0x24
 8000406:	4629      	mov	r1, r5
 8000408:	4831      	ldr	r0, [pc, #196]	@ (80004d0 <HAL_ADC_MspInit+0x13c>)
 800040a:	f001 fd35 	bl	8001e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800040e:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000410:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000414:	4629      	mov	r1, r5
 8000416:	482f      	ldr	r0, [pc, #188]	@ (80004d4 <HAL_ADC_MspInit+0x140>)
 8000418:	f001 fd2e 	bl	8001e78 <HAL_GPIO_Init>
 800041c:	e7cc      	b.n	80003b8 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800041e:	2400      	movs	r4, #0
 8000420:	9404      	str	r4, [sp, #16]
 8000422:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <HAL_ADC_MspInit+0x138>)
 8000424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800042a:	645a      	str	r2, [r3, #68]	@ 0x44
 800042c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800042e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000432:	9204      	str	r2, [sp, #16]
 8000434:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	9405      	str	r4, [sp, #20]
 8000438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800043a:	f042 0201 	orr.w	r2, r2, #1
 800043e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000442:	f002 0201 	and.w	r2, r2, #1
 8000446:	9205      	str	r2, [sp, #20]
 8000448:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	9406      	str	r4, [sp, #24]
 800044c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800044e:	f042 0202 	orr.w	r2, r2, #2
 8000452:	631a      	str	r2, [r3, #48]	@ 0x30
 8000454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	9306      	str	r3, [sp, #24]
 800045c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800045e:	2702      	movs	r7, #2
 8000460:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000462:	2603      	movs	r6, #3
 8000464:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	ad09      	add	r5, sp, #36	@ 0x24
 8000468:	4629      	mov	r1, r5
 800046a:	481a      	ldr	r0, [pc, #104]	@ (80004d4 <HAL_ADC_MspInit+0x140>)
 800046c:	f001 fd04 	bl	8001e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000470:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000472:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000476:	4629      	mov	r1, r5
 8000478:	4817      	ldr	r0, [pc, #92]	@ (80004d8 <HAL_ADC_MspInit+0x144>)
 800047a:	f001 fcfd 	bl	8001e78 <HAL_GPIO_Init>
 800047e:	e79b      	b.n	80003b8 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000480:	2100      	movs	r1, #0
 8000482:	9107      	str	r1, [sp, #28]
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <HAL_ADC_MspInit+0x138>)
 8000486:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000488:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800048c:	645a      	str	r2, [r3, #68]	@ 0x44
 800048e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000490:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000494:	9207      	str	r2, [sp, #28]
 8000496:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	9108      	str	r1, [sp, #32]
 800049a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800049c:	f042 0201 	orr.w	r2, r2, #1
 80004a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80004a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	9308      	str	r3, [sp, #32]
 80004aa:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004ac:	230c      	movs	r3, #12
 80004ae:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b0:	2303      	movs	r3, #3
 80004b2:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	a909      	add	r1, sp, #36	@ 0x24
 80004b6:	4807      	ldr	r0, [pc, #28]	@ (80004d4 <HAL_ADC_MspInit+0x140>)
 80004b8:	f001 fcde 	bl	8001e78 <HAL_GPIO_Init>
}
 80004bc:	e77c      	b.n	80003b8 <HAL_ADC_MspInit+0x24>
 80004be:	bf00      	nop
 80004c0:	40012000 	.word	0x40012000
 80004c4:	40012100 	.word	0x40012100
 80004c8:	40012200 	.word	0x40012200
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40020800 	.word	0x40020800
 80004d4:	40020000 	.word	0x40020000
 80004d8:	40020400 	.word	0x40020400

080004dc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004dc:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004de:	480b      	ldr	r0, [pc, #44]	@ (800050c <MX_CAN1_Init+0x30>)
 80004e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <MX_CAN1_Init+0x34>)
 80004e2:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 80004e4:	2310      	movs	r3, #16
 80004e6:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ec:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004ee:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004f0:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004f2:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80004f4:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004f6:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80004f8:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80004fa:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80004fc:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80004fe:	f001 f94d 	bl	800179c <HAL_CAN_Init>
 8000502:	b900      	cbnz	r0, 8000506 <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000504:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000506:	f000 fcbd 	bl	8000e84 <Error_Handler>
}
 800050a:	e7fb      	b.n	8000504 <MX_CAN1_Init+0x28>
 800050c:	20000104 	.word	0x20000104
 8000510:	40006400 	.word	0x40006400

08000514 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000514:	b500      	push	{lr}
 8000516:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	2300      	movs	r3, #0
 800051a:	9303      	str	r3, [sp, #12]
 800051c:	9304      	str	r3, [sp, #16]
 800051e:	9305      	str	r3, [sp, #20]
 8000520:	9306      	str	r3, [sp, #24]
 8000522:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 8000524:	6802      	ldr	r2, [r0, #0]
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <HAL_CAN_MspInit+0x68>)
 8000528:	429a      	cmp	r2, r3
 800052a:	d002      	beq.n	8000532 <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800052c:	b009      	add	sp, #36	@ 0x24
 800052e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000532:	2100      	movs	r1, #0
 8000534:	9101      	str	r1, [sp, #4]
 8000536:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 800053a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800053c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000540:	641a      	str	r2, [r3, #64]	@ 0x40
 8000542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000544:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000548:	9201      	str	r2, [sp, #4]
 800054a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	9102      	str	r1, [sp, #8]
 800054e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000550:	f042 0202 	orr.w	r2, r2, #2
 8000554:	631a      	str	r2, [r3, #48]	@ 0x30
 8000556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	9302      	str	r3, [sp, #8]
 800055e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000560:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000564:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000566:	2302      	movs	r3, #2
 8000568:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056a:	2303      	movs	r3, #3
 800056c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800056e:	2309      	movs	r3, #9
 8000570:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	a903      	add	r1, sp, #12
 8000574:	4802      	ldr	r0, [pc, #8]	@ (8000580 <HAL_CAN_MspInit+0x6c>)
 8000576:	f001 fc7f 	bl	8001e78 <HAL_GPIO_Init>
}
 800057a:	e7d7      	b.n	800052c <HAL_CAN_MspInit+0x18>
 800057c:	40006400 	.word	0x40006400
 8000580:	40020400 	.word	0x40020400

08000584 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8000584:	2884      	cmp	r0, #132	@ 0x84
 8000586:	d001      	beq.n	800058c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8000588:	3003      	adds	r0, #3
 800058a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800058c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800058e:	4770      	bx	lr

08000590 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000590:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000592:	f004 f837 	bl	8004604 <vTaskStartScheduler>
  
  return osOK;
}
 8000596:	2000      	movs	r0, #0
 8000598:	bd08      	pop	{r3, pc}

0800059a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800059a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800059e:	b087      	sub	sp, #28
 80005a0:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80005a2:	6944      	ldr	r4, [r0, #20]
 80005a4:	b1c4      	cbz	r4, 80005d8 <osThreadCreate+0x3e>
 80005a6:	6985      	ldr	r5, [r0, #24]
 80005a8:	b1b5      	cbz	r5, 80005d8 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005aa:	6847      	ldr	r7, [r0, #4]
 80005ac:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80005b0:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005b4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80005b8:	f7ff ffe4 	bl	8000584 <makeFreeRtosPriority>
 80005bc:	9502      	str	r5, [sp, #8]
 80005be:	9401      	str	r4, [sp, #4]
 80005c0:	9000      	str	r0, [sp, #0]
 80005c2:	4633      	mov	r3, r6
 80005c4:	464a      	mov	r2, r9
 80005c6:	4641      	mov	r1, r8
 80005c8:	4638      	mov	r0, r7
 80005ca:	f003 ffad 	bl	8004528 <xTaskCreateStatic>
 80005ce:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80005d0:	9805      	ldr	r0, [sp, #20]
}
 80005d2:	b007      	add	sp, #28
 80005d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005d8:	6844      	ldr	r4, [r0, #4]
 80005da:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80005dc:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005de:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80005e2:	f7ff ffcf 	bl	8000584 <makeFreeRtosPriority>
 80005e6:	ab05      	add	r3, sp, #20
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	9000      	str	r0, [sp, #0]
 80005ec:	4633      	mov	r3, r6
 80005ee:	b2ba      	uxth	r2, r7
 80005f0:	4629      	mov	r1, r5
 80005f2:	4620      	mov	r0, r4
 80005f4:	f003 ffd3 	bl	800459e <xTaskCreate>
 80005f8:	2801      	cmp	r0, #1
 80005fa:	d0e9      	beq.n	80005d0 <osThreadCreate+0x36>
      return NULL;
 80005fc:	2000      	movs	r0, #0
 80005fe:	e7e8      	b.n	80005d2 <osThreadCreate+0x38>

08000600 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000600:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000602:	b900      	cbnz	r0, 8000606 <osDelay+0x6>
 8000604:	2001      	movs	r0, #1
 8000606:	f004 f947 	bl	8004898 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800060a:	2000      	movs	r0, #0
 800060c:	bd08      	pop	{r3, pc}
	...

08000610 <controller_init>:

#include "./Drivers/drv8323/drv8323.h"

drv8323_t g_driver;

void controller_init(void) {
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	b087      	sub	sp, #28
  drv8323_init(&g_driver, &hspi3);
 8000614:	4e24      	ldr	r6, [pc, #144]	@ (80006a8 <controller_init+0x98>)
 8000616:	4925      	ldr	r1, [pc, #148]	@ (80006ac <controller_init+0x9c>)
 8000618:	4630      	mov	r0, r6
 800061a:	f000 f8d5 	bl	80007c8 <drv8323_init>
  drv8323_calibrate(&g_driver);
 800061e:	4630      	mov	r0, r6
 8000620:	f000 f97e 	bl	8000920 <drv8323_calibrate>
  HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 ff09 	bl	800143c <HAL_Delay>
  drv8323_write_dcr(&g_driver, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0,
 800062a:	2501      	movs	r5, #1
 800062c:	9505      	str	r5, [sp, #20]
 800062e:	2400      	movs	r4, #0
 8000630:	9404      	str	r4, [sp, #16]
 8000632:	9403      	str	r4, [sp, #12]
 8000634:	9402      	str	r4, [sp, #8]
 8000636:	9401      	str	r4, [sp, #4]
 8000638:	9500      	str	r5, [sp, #0]
 800063a:	4623      	mov	r3, r4
 800063c:	462a      	mov	r2, r5
 800063e:	4621      	mov	r1, r4
 8000640:	4630      	mov	r0, r6
 8000642:	f000 f8f3 	bl	800082c <drv8323_write_dcr>
                    0x0, 0x0, 0x1);
  HAL_Delay(10);
 8000646:	200a      	movs	r0, #10
 8000648:	f000 fef8 	bl	800143c <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1,
 800064c:	2703      	movs	r7, #3
 800064e:	9705      	str	r7, [sp, #20]
 8000650:	9504      	str	r5, [sp, #16]
 8000652:	9503      	str	r5, [sp, #12]
 8000654:	9502      	str	r5, [sp, #8]
 8000656:	9401      	str	r4, [sp, #4]
 8000658:	9700      	str	r7, [sp, #0]
 800065a:	4623      	mov	r3, r4
 800065c:	462a      	mov	r2, r5
 800065e:	4621      	mov	r1, r4
 8000660:	4630      	mov	r0, r6
 8000662:	f000 f925 	bl	80008b0 <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 8000666:	200a      	movs	r0, #10
 8000668:	f000 fee8 	bl	800143c <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0,
 800066c:	9705      	str	r7, [sp, #20]
 800066e:	9404      	str	r4, [sp, #16]
 8000670:	9403      	str	r4, [sp, #12]
 8000672:	9402      	str	r4, [sp, #8]
 8000674:	9501      	str	r5, [sp, #4]
 8000676:	9700      	str	r7, [sp, #0]
 8000678:	4623      	mov	r3, r4
 800067a:	462a      	mov	r2, r5
 800067c:	4621      	mov	r1, r4
 800067e:	4630      	mov	r0, r6
 8000680:	f000 f916 	bl	80008b0 <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 8000684:	200a      	movs	r0, #10
 8000686:	f000 fed9 	bl	800143c <HAL_Delay>
  drv8323_write_ocpcr(&g_driver, TRETRY_50US, DEADTIME_50NS, OCP_NONE,
 800068a:	230f      	movs	r3, #15
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	9700      	str	r7, [sp, #0]
 8000690:	463b      	mov	r3, r7
 8000692:	4622      	mov	r2, r4
 8000694:	4629      	mov	r1, r5
 8000696:	4630      	mov	r0, r6
 8000698:	f000 f8f3 	bl	8000882 <drv8323_write_ocpcr>
                      OCP_DEG_8US, VDS_LVL_1_88);
  drv8323_enable_gd(&g_driver);
 800069c:	4630      	mov	r0, r6
 800069e:	f000 f932 	bl	8000906 <drv8323_enable_gd>
 80006a2:	b007      	add	sp, #28
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000012c 	.word	0x2000012c
 80006ac:	20004204 	.word	0x20004204

080006b0 <dev_usart_write>:
int dev_usart_init(void) {
  HAL_UART_Receive_DMA(&huart3, rx_buffer, RX_BUFFER_SIZE);
}

int dev_usart_write(const uint8_t* buf, uint16_t size) {
  if (size > TX_BUFFER_SIZE) {
 80006b0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80006b4:	d80d      	bhi.n	80006d2 <dev_usart_write+0x22>
int dev_usart_write(const uint8_t* buf, uint16_t size) {
 80006b6:	b538      	push	{r3, r4, r5, lr}
 80006b8:	460c      	mov	r4, r1
    return -1;  // 错误：数据长度超过缓冲区限制
  }
  memcpy(tx_buffer, buf, size);
 80006ba:	4d07      	ldr	r5, [pc, #28]	@ (80006d8 <dev_usart_write+0x28>)
 80006bc:	460a      	mov	r2, r1
 80006be:	4601      	mov	r1, r0
 80006c0:	4628      	mov	r0, r5
 80006c2:	f004 fc0f 	bl	8004ee4 <memcpy>
  return HAL_UART_Transmit_DMA(&huart3, tx_buffer, size);
 80006c6:	4622      	mov	r2, r4
 80006c8:	4629      	mov	r1, r5
 80006ca:	4804      	ldr	r0, [pc, #16]	@ (80006dc <dev_usart_write+0x2c>)
 80006cc:	f003 fa14 	bl	8003af8 <HAL_UART_Transmit_DMA>
}
 80006d0:	bd38      	pop	{r3, r4, r5, pc}
    return -1;  // 错误：数据长度超过缓冲区限制
 80006d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80006d6:	4770      	bx	lr
 80006d8:	20000230 	.word	0x20000230
 80006dc:	20004528 	.word	0x20004528

080006e0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t size) {
  if (huart->Instance == USART3) {
  }
}
 80006e0:	4770      	bx	lr
	...

080006e4 <HAL_UART_ErrorCallback>:

/// 下面错误处理函数中把奇偶校验错误以及数据溢出错误标志清除
/// 可以直接在调试时打断点查看huart->ErrorCode的值
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
  if (huart->Instance == USART3) {
 80006e4:	6803      	ldr	r3, [r0, #0]
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <HAL_UART_ErrorCallback+0x4c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d000      	beq.n	80006ee <HAL_UART_ErrorCallback+0xa>
 80006ec:	4770      	bx	lr
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 80006ee:	b500      	push	{lr}
 80006f0:	b083      	sub	sp, #12
    __HAL_UART_CLEAR_OREFLAG(huart);
 80006f2:	2200      	movs	r2, #0
 80006f4:	9200      	str	r2, [sp, #0]
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	9100      	str	r1, [sp, #0]
 80006fa:	6859      	ldr	r1, [r3, #4]
 80006fc:	9100      	str	r1, [sp, #0]
 80006fe:	9900      	ldr	r1, [sp, #0]
    __HAL_UART_CLEAR_PEFLAG(huart);
 8000700:	9201      	str	r2, [sp, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	9201      	str	r2, [sp, #4]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	9b01      	ldr	r3, [sp, #4]
    huart->RxState = HAL_UART_STATE_READY;
 800070c:	2320      	movs	r3, #32
 800070e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buffer, RX_BUFFER_SIZE);
 8000712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000716:	4907      	ldr	r1, [pc, #28]	@ (8000734 <HAL_UART_ErrorCallback+0x50>)
 8000718:	f003 fcfe 	bl	8004118 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_UART_ErrorCallback+0x54>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	6813      	ldr	r3, [r2, #0]
 8000722:	f023 0308 	bic.w	r3, r3, #8
 8000726:	6013      	str	r3, [r2, #0]
  }
 8000728:	b003      	add	sp, #12
 800072a:	f85d fb04 	ldr.w	pc, [sp], #4
 800072e:	bf00      	nop
 8000730:	40004800 	.word	0x40004800
 8000734:	20000130 	.word	0x20000130
 8000738:	20004468 	.word	0x20004468

0800073c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800073c:	b510      	push	{r4, lr}
 800073e:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000740:	2400      	movs	r4, #0
 8000742:	9401      	str	r4, [sp, #4]
 8000744:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <MX_DMA_Init+0x40>)
 8000746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000748:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
 800074e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000758:	4622      	mov	r2, r4
 800075a:	2105      	movs	r1, #5
 800075c:	200c      	movs	r0, #12
 800075e:	f001 f917 	bl	8001990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000762:	200c      	movs	r0, #12
 8000764:	f001 f924 	bl	80019b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000768:	4622      	mov	r2, r4
 800076a:	2105      	movs	r1, #5
 800076c:	200e      	movs	r0, #14
 800076e:	f001 f90f 	bl	8001990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000772:	200e      	movs	r0, #14
 8000774:	f001 f91c 	bl	80019b0 <HAL_NVIC_EnableIRQ>

}
 8000778:	b002      	add	sp, #8
 800077a:	bd10      	pop	{r4, pc}
 800077c:	40023800 	.word	0x40023800

08000780 <_SPI_WRITE>:
#define _CAL(x) HAL_GPIO_WritePin(DRV_CAL_GPIO_Port, DRV_CAL_Pin, x)

// SPI通讯NSS
#define _NSS(x) HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, x)

uint16_t _SPI_WRITE(drv8323_t* self, uint16_t data) {
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	b087      	sub	sp, #28
 8000784:	4604      	mov	r4, r0
 8000786:	f8ad 100e 	strh.w	r1, [sp, #14]
  uint16_t ret;
  _NSS(0);
 800078a:	4d0e      	ldr	r5, [pc, #56]	@ (80007c4 <_SPI_WRITE+0x44>)
 800078c:	2200      	movs	r2, #0
 800078e:	2104      	movs	r1, #4
 8000790:	4628      	mov	r0, r5
 8000792:	f001 fc61 	bl	8002058 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000796:	200a      	movs	r0, #10
 8000798:	f000 fe50 	bl	800143c <HAL_Delay>
  HAL_StatusTypeDef sta = HAL_SPI_TransmitReceive(
 800079c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	f10d 0216 	add.w	r2, sp, #22
 80007a8:	f10d 010e 	add.w	r1, sp, #14
 80007ac:	6820      	ldr	r0, [r4, #0]
 80007ae:	f002 fa34 	bl	8002c1a <HAL_SPI_TransmitReceive>
      self->hspi, (uint8_t*)&data, (uint8_t*)&ret, 1, DRV8323_SPI_TIMEOUT);
  if (HAL_OK != sta) {
    // warn("_SPI_WRITE FAILED: %d", sta);
  }
  _NSS(1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2104      	movs	r1, #4
 80007b6:	4628      	mov	r0, r5
 80007b8:	f001 fc4e 	bl	8002058 <HAL_GPIO_WritePin>
  return ret;
}
 80007bc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80007c0:	b007      	add	sp, #28
 80007c2:	bd30      	pop	{r4, r5, pc}
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <drv8323_init>:

int drv8323_init(drv8323_t* self, SPI_HandleTypeDef* spi) {
 80007c8:	b510      	push	{r4, lr}
  self->hspi = spi;
 80007ca:	6001      	str	r1, [r0, #0]
  _ENABLE(0);
 80007cc:	4c0e      	ldr	r4, [pc, #56]	@ (8000808 <drv8323_init+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d4:	4620      	mov	r0, r4
 80007d6:	f001 fc3f 	bl	8002058 <HAL_GPIO_WritePin>
  _CAL(1);
 80007da:	2201      	movs	r2, #1
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	4620      	mov	r0, r4
 80007e0:	f001 fc3a 	bl	8002058 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f000 fe29 	bl	800143c <HAL_Delay>
  _ENABLE(1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f0:	4620      	mov	r0, r4
 80007f2:	f001 fc31 	bl	8002058 <HAL_GPIO_WritePin>
  _CAL(0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2180      	movs	r1, #128	@ 0x80
 80007fa:	4620      	mov	r0, r4
 80007fc:	f001 fc2c 	bl	8002058 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fe1b 	bl	800143c <HAL_Delay>
}
 8000806:	bd10      	pop	{r4, pc}
 8000808:	40020800 	.word	0x40020800

0800080c <drv8323_read_register>:
uint16_t drv8323_read_fsr2(drv8323_t* self) {
  uint16_t val = (1 << 15) | (FSR2 << 11);
  return _SPI_WRITE(self, val);
}

uint16_t drv8323_read_register(drv8323_t* self, uint16_t reg) {
 800080c:	b508      	push	{r3, lr}
  uint16_t ret = _SPI_WRITE(self, (1 << 15) | (reg << 11));
 800080e:	ea6f 7101 	mvn.w	r1, r1, lsl #28
 8000812:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000816:	b289      	uxth	r1, r1
 8000818:	f7ff ffb2 	bl	8000780 <_SPI_WRITE>
  return ret;
}
 800081c:	bd08      	pop	{r3, pc}

0800081e <drv8323_write_register>:

void drv8323_write_register(drv8323_t* self, uint16_t reg, uint16_t val) {
 800081e:	b508      	push	{r3, lr}
  _SPI_WRITE(self, (reg << 11) | val);
 8000820:	ea42 21c1 	orr.w	r1, r2, r1, lsl #11
 8000824:	b289      	uxth	r1, r1
 8000826:	f7ff ffab 	bl	8000780 <_SPI_WRITE>
}
 800082a:	bd08      	pop	{r3, pc}

0800082c <drv8323_write_dcr>:

void drv8323_write_dcr(drv8323_t* self, uint16_t dis_cpuv, uint16_t dis_gdf,
                       uint16_t otw_rep, uint16_t pwm_mode, uint16_t pwm_com,
                       uint16_t pwm_dir, uint16_t coast, uint16_t brake,
                       uint16_t clr_flt) {
 800082c:	b508      	push	{r3, lr}
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 800082e:	0249      	lsls	r1, r1, #9
 8000830:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8000834:	b209      	sxth	r1, r1
 8000836:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800083a:	b209      	sxth	r1, r1
 800083c:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 8000840:	b21b      	sxth	r3, r3
                 (otw_rep << 7) | (pwm_mode << 5) | (pwm_com << 4) |
 8000842:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8000846:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800084a:	b21b      	sxth	r3, r3
 800084c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000850:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000854:	b21b      	sxth	r3, r3
 8000856:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800085a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800085e:	b21b      	sxth	r3, r3
                 (pwm_dir << 3) | (coast << 2) | (brake << 1) | clr_flt;
 8000860:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8000864:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8000868:	b21b      	sxth	r3, r3
 800086a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800086e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8000872:	b21b      	sxth	r3, r3
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 8000874:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8000878:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 800087a:	b289      	uxth	r1, r1
 800087c:	f7ff ff80 	bl	8000780 <_SPI_WRITE>
}
 8000880:	bd08      	pop	{r3, pc}

08000882 <drv8323_write_ocpcr>:
  _SPI_WRITE(self, val);
}

void drv8323_write_ocpcr(drv8323_t* self, uint16_t tretry, uint16_t dead_time,
                         uint16_t ocp_mode, uint16_t ocp_deg,
                         uint16_t vds_lvl) {
 8000882:	b508      	push	{r3, lr}
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 8000884:	0289      	lsls	r1, r1, #10
 8000886:	f441 5120 	orr.w	r1, r1, #10240	@ 0x2800
 800088a:	b209      	sxth	r1, r1
 800088c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000890:	b209      	sxth	r1, r1
 8000892:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 8000896:	b21b      	sxth	r3, r3
                 (ocp_mode << 6) | (ocp_deg << 4) | vds_lvl;
 8000898:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800089c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80008a0:	b21b      	sxth	r3, r3
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 80008a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80008a6:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 80008a8:	b289      	uxth	r1, r1
 80008aa:	f7ff ff69 	bl	8000780 <_SPI_WRITE>
}
 80008ae:	bd08      	pop	{r3, pc}

080008b0 <drv8323_write_csacr>:

void drv8323_write_csacr(drv8323_t* self, uint16_t csa_fet, uint16_t vref_div,
                         uint16_t ls_ref, uint16_t csa_gain, uint16_t dis_sen,
                         uint16_t csa_cal_a, uint16_t csa_cal_b,
                         uint16_t csa_cal_c, uint16_t sen_lvl) {
 80008b0:	b508      	push	{r3, lr}
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 80008b2:	0289      	lsls	r1, r1, #10
 80008b4:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 80008b8:	b209      	sxth	r1, r1
 80008ba:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80008be:	b209      	sxth	r1, r1
 80008c0:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80008c4:	b21b      	sxth	r3, r3
                 (ls_ref << 8) | (csa_gain << 6) | (dis_sen << 5) |
 80008c6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80008ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80008d4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80008d8:	b21b      	sxth	r3, r3
 80008da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80008de:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80008e2:	b21b      	sxth	r3, r3
                 (csa_cal_a << 4) | (csa_cal_b << 3) | (csa_cal_c << 2) |
 80008e4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80008e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80008f2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008f6:	b21b      	sxth	r3, r3
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 80008f8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80008fc:	4319      	orrs	r1, r3
                 sen_lvl;
  _SPI_WRITE(self, val);
 80008fe:	b289      	uxth	r1, r1
 8000900:	f7ff ff3e 	bl	8000780 <_SPI_WRITE>
}
 8000904:	bd08      	pop	{r3, pc}

08000906 <drv8323_enable_gd>:

void drv8323_enable_gd(drv8323_t* self) {
 8000906:	b510      	push	{r4, lr}
 8000908:	4604      	mov	r4, r0
  uint16_t val = (drv8323_read_register(self, DCR)) & (~(0x1 << 2));
 800090a:	2102      	movs	r1, #2
 800090c:	f7ff ff7e 	bl	800080c <drv8323_read_register>
 8000910:	f020 0204 	bic.w	r2, r0, #4
 8000914:	b292      	uxth	r2, r2
  drv8323_write_register(self, DCR, val);
 8000916:	2102      	movs	r1, #2
 8000918:	4620      	mov	r0, r4
 800091a:	f7ff ff80 	bl	800081e <drv8323_write_register>
}
 800091e:	bd10      	pop	{r4, pc}

08000920 <drv8323_calibrate>:
void drv8323_disable_gd(drv8323_t* self) {
  uint16_t val = (drv8323_read_register(self, DCR)) | (0x1 << 2);
  drv8323_write_register(self, DCR, val);
}

void drv8323_calibrate(drv8323_t* self) {
 8000920:	b508      	push	{r3, lr}
  uint16_t val = 0x1 << 4 + 0x1 << 3 + 0x1 << 2;
  drv8323_write_register(self, CSACR, val);
 8000922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000926:	2106      	movs	r1, #6
 8000928:	f7ff ff79 	bl	800081e <drv8323_write_register>
}
 800092c:	bd08      	pop	{r3, pc}
	...

08000930 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;) {
    state_step();
 8000932:	f000 fd35 	bl	80013a0 <state_step>
    dev_usart_write((uint8_t *)"Hello World!\r\n", 14);
 8000936:	210e      	movs	r1, #14
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <StartDefaultTask+0x18>)
 800093a:	f7ff feb9 	bl	80006b0 <dev_usart_write>
    osDelay(50);
 800093e:	2032      	movs	r0, #50	@ 0x32
 8000940:	f7ff fe5e 	bl	8000600 <osDelay>
  for (;;) {
 8000944:	e7f5      	b.n	8000932 <StartDefaultTask+0x2>
 8000946:	bf00      	nop
 8000948:	0800522c 	.word	0x0800522c

0800094c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <vApplicationGetIdleTaskMemory+0x10>)
 800094e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <vApplicationGetIdleTaskMemory+0x14>)
 8000952:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000530 	.word	0x20000530
 8000960:	20000330 	.word	0x20000330

08000964 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000964:	b510      	push	{r4, lr}
 8000966:	b088      	sub	sp, #32
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000968:	f10d 0c04 	add.w	ip, sp, #4
 800096c:	4c07      	ldr	r4, [pc, #28]	@ (800098c <MX_FREERTOS_Init+0x28>)
 800096e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000970:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000974:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000978:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800097c:	2100      	movs	r1, #0
 800097e:	a801      	add	r0, sp, #4
 8000980:	f7ff fe0b 	bl	800059a <osThreadCreate>
 8000984:	4b02      	ldr	r3, [pc, #8]	@ (8000990 <MX_FREERTOS_Init+0x2c>)
 8000986:	6018      	str	r0, [r3, #0]
}
 8000988:	b008      	add	sp, #32
 800098a:	bd10      	pop	{r4, pc}
 800098c:	08005210 	.word	0x08005210
 8000990:	20000584 	.word	0x20000584

08000994 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA5   ------> SPI1_SCK
*/
void MX_GPIO_Init(void)
{
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000998:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	ad05      	add	r5, sp, #20
 800099c:	2400      	movs	r4, #0
 800099e:	9405      	str	r4, [sp, #20]
 80009a0:	9406      	str	r4, [sp, #24]
 80009a2:	9407      	str	r4, [sp, #28]
 80009a4:	9408      	str	r4, [sp, #32]
 80009a6:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a8:	9400      	str	r4, [sp, #0]
 80009aa:	4b4b      	ldr	r3, [pc, #300]	@ (8000ad8 <MX_GPIO_Init+0x144>)
 80009ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009ae:	f042 0204 	orr.w	r2, r2, #4
 80009b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80009b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009b6:	f002 0204 	and.w	r2, r2, #4
 80009ba:	9200      	str	r2, [sp, #0]
 80009bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	9401      	str	r4, [sp, #4]
 80009c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80009c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009ca:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80009ce:	9201      	str	r2, [sp, #4]
 80009d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	9402      	str	r4, [sp, #8]
 80009d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	631a      	str	r2, [r3, #48]	@ 0x30
 80009dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009de:	f002 0201 	and.w	r2, r2, #1
 80009e2:	9202      	str	r2, [sp, #8]
 80009e4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	9403      	str	r4, [sp, #12]
 80009e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009ea:	f042 0202 	orr.w	r2, r2, #2
 80009ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80009f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009f2:	f002 0202 	and.w	r2, r2, #2
 80009f6:	9203      	str	r2, [sp, #12]
 80009f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	9404      	str	r4, [sp, #16]
 80009fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009fe:	f042 0208 	orr.w	r2, r2, #8
 8000a02:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	9304      	str	r3, [sp, #16]
 8000a0c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 8000a0e:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 8000ae0 <MX_GPIO_Init+0x14c>
 8000a12:	4622      	mov	r2, r4
 8000a14:	f242 11ce 	movw	r1, #8654	@ 0x21ce
 8000a18:	4648      	mov	r0, r9
 8000a1a:	f001 fb1d 	bl	8002058 <HAL_GPIO_WritePin>
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_CAL_GPIO_Port, ENCODER_CAL_Pin, GPIO_PIN_RESET);
 8000a1e:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8000ae4 <MX_GPIO_Init+0x150>
 8000a22:	4622      	mov	r2, r4
 8000a24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a28:	4640      	mov	r0, r8
 8000a2a:	f001 fb15 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_SET);
 8000a2e:	f8df a0b8 	ldr.w	sl, [pc, #184]	@ 8000ae8 <MX_GPIO_Init+0x154>
 8000a32:	2201      	movs	r2, #1
 8000a34:	2104      	movs	r1, #4
 8000a36:	4650      	mov	r0, sl
 8000a38:	f001 fb0e 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_SPI_NSS_GPIO_Port, ENCODER_SPI_NSS_Pin, GPIO_PIN_SET);
 8000a3c:	4f27      	ldr	r7, [pc, #156]	@ (8000adc <MX_GPIO_Init+0x148>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2108      	movs	r1, #8
 8000a42:	4638      	mov	r0, r7
 8000a44:	f001 fb08 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STB_GPIO_Port, CAN_STB_Pin, GPIO_PIN_RESET);
 8000a48:	4622      	mov	r2, r4
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	4638      	mov	r0, r7
 8000a4e:	f001 fb03 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 LED_3_Pin LED_2_Pin LED_1_Pin
                           TIM1_BREAK_Pin DRV_CAL_Pin DRV_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 8000a52:	f242 13ce 	movw	r3, #8654	@ 0x21ce
 8000a56:	9305      	str	r3, [sp, #20]
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2601      	movs	r6, #1
 8000a5a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	4629      	mov	r1, r5
 8000a62:	4648      	mov	r0, r9
 8000a64:	f001 fa08 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a76:	2305      	movs	r3, #5
 8000a78:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f001 f9fb 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 8000a82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a8c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000a90:	4629      	mov	r1, r5
 8000a92:	4648      	mov	r0, r9
 8000a94:	f001 f9f0 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_CAL_Pin */
  GPIO_InitStruct.Pin = ENCODER_CAL_Pin;
 8000a98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER_CAL_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	4629      	mov	r1, r5
 8000aa6:	4640      	mov	r0, r8
 8000aa8:	f001 f9e6 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = DRV_SPI_NSS_Pin;
 8000aac:	2304      	movs	r3, #4
 8000aae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DRV_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	4629      	mov	r1, r5
 8000ab8:	4650      	mov	r0, sl
 8000aba:	f001 f9dd 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_SPI_NSS_Pin CAN_STB_Pin */
  GPIO_InitStruct.Pin = ENCODER_SPI_NSS_Pin|CAN_STB_Pin;
 8000abe:	2328      	movs	r3, #40	@ 0x28
 8000ac0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	4629      	mov	r1, r5
 8000aca:	4638      	mov	r0, r7
 8000acc:	f001 f9d4 	bl	8001e78 <HAL_GPIO_Init>

}
 8000ad0:	b00a      	add	sp, #40	@ 0x28
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000aec:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000aee:	f012 0f07 	tst.w	r2, #7
 8000af2:	d01e      	beq.n	8000b32 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000af4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000af6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000afa:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8000afe:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000b00:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000b02:	480e      	ldr	r0, [pc, #56]	@ (8000b3c <prvHeapInit+0x50>)
 8000b04:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000b06:	2100      	movs	r1, #0
 8000b08:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000b0a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000b0c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000b0e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8000b12:	480b      	ldr	r0, [pc, #44]	@ (8000b40 <prvHeapInit+0x54>)
 8000b14:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8000b16:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000b18:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000b1a:	1a99      	subs	r1, r3, r2
 8000b1c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000b1e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <prvHeapInit+0x58>)
 8000b22:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <prvHeapInit+0x5c>)
 8000b26:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <prvHeapInit+0x60>)
 8000b2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000b2e:	601a      	str	r2, [r3, #0]
}
 8000b30:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000b32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000b36:	e7e4      	b.n	8000b02 <prvHeapInit+0x16>
 8000b38:	200005a8 	.word	0x200005a8
 8000b3c:	200005a0 	.word	0x200005a0
 8000b40:	2000059c 	.word	0x2000059c
 8000b44:	20000594 	.word	0x20000594
 8000b48:	20000598 	.word	0x20000598
 8000b4c:	20000588 	.word	0x20000588

08000b50 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <prvInsertBlockIntoFreeList+0x5c>)
 8000b52:	461a      	mov	r2, r3
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4283      	cmp	r3, r0
 8000b58:	d3fb      	bcc.n	8000b52 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b5a:	6851      	ldr	r1, [r2, #4]
 8000b5c:	eb02 0c01 	add.w	ip, r2, r1
 8000b60:	4584      	cmp	ip, r0
 8000b62:	d009      	beq.n	8000b78 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b64:	6841      	ldr	r1, [r0, #4]
 8000b66:	eb00 0c01 	add.w	ip, r0, r1
 8000b6a:	4563      	cmp	r3, ip
 8000b6c:	d009      	beq.n	8000b82 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b6e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b70:	4290      	cmp	r0, r2
 8000b72:	d019      	beq.n	8000ba8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b74:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8000b76:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b78:	6840      	ldr	r0, [r0, #4]
 8000b7a:	4401      	add	r1, r0
 8000b7c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8000b7e:	4610      	mov	r0, r2
 8000b80:	e7f0      	b.n	8000b64 <prvInsertBlockIntoFreeList+0x14>
{
 8000b82:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <prvInsertBlockIntoFreeList+0x60>)
 8000b86:	6824      	ldr	r4, [r4, #0]
 8000b88:	42a3      	cmp	r3, r4
 8000b8a:	d00b      	beq.n	8000ba4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	4419      	add	r1, r3
 8000b90:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	d000      	beq.n	8000b9e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b9c:	6010      	str	r0, [r2, #0]
	}
}
 8000b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ba2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ba4:	6004      	str	r4, [r0, #0]
 8000ba6:	e7f7      	b.n	8000b98 <prvInsertBlockIntoFreeList+0x48>
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200005a0 	.word	0x200005a0
 8000bb0:	2000059c 	.word	0x2000059c

08000bb4 <pvPortMalloc>:
{
 8000bb4:	b538      	push	{r3, r4, r5, lr}
 8000bb6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8000bb8:	f003 fd5e 	bl	8004678 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8000bbc:	4b38      	ldr	r3, [pc, #224]	@ (8000ca0 <pvPortMalloc+0xec>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	b1b3      	cbz	r3, 8000bf0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000bc2:	4b38      	ldr	r3, [pc, #224]	@ (8000ca4 <pvPortMalloc+0xf0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	421c      	tst	r4, r3
 8000bc8:	d150      	bne.n	8000c6c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8000bca:	2c00      	cmp	r4, #0
 8000bcc:	d050      	beq.n	8000c70 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8000bce:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000bd2:	f014 0f07 	tst.w	r4, #7
 8000bd6:	d002      	beq.n	8000bde <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000bd8:	f022 0207 	bic.w	r2, r2, #7
 8000bdc:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d055      	beq.n	8000c8e <pvPortMalloc+0xda>
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <pvPortMalloc+0xf4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d353      	bcc.n	8000c92 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8000bea:	4930      	ldr	r1, [pc, #192]	@ (8000cac <pvPortMalloc+0xf8>)
 8000bec:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000bee:	e004      	b.n	8000bfa <pvPortMalloc+0x46>
			prvHeapInit();
 8000bf0:	f7ff ff7c 	bl	8000aec <prvHeapInit>
 8000bf4:	e7e5      	b.n	8000bc2 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000bf6:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000bf8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000bfa:	6863      	ldr	r3, [r4, #4]
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d202      	bcs.n	8000c06 <pvPortMalloc+0x52>
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f7      	bne.n	8000bf6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000c06:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <pvPortMalloc+0xec>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	42a3      	cmp	r3, r4
 8000c0c:	d043      	beq.n	8000c96 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000c0e:	680d      	ldr	r5, [r1, #0]
 8000c10:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c16:	6863      	ldr	r3, [r4, #4]
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	2b10      	cmp	r3, #16
 8000c1c:	d910      	bls.n	8000c40 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000c1e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c20:	f010 0f07 	tst.w	r0, #7
 8000c24:	d008      	beq.n	8000c38 <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c2a:	f383 8811 	msr	BASEPRI, r3
 8000c2e:	f3bf 8f6f 	isb	sy
 8000c32:	f3bf 8f4f 	dsb	sy
 8000c36:	e7fe      	b.n	8000c36 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c38:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000c3a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000c3c:	f7ff ff88 	bl	8000b50 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000c40:	6862      	ldr	r2, [r4, #4]
 8000c42:	4919      	ldr	r1, [pc, #100]	@ (8000ca8 <pvPortMalloc+0xf4>)
 8000c44:	680b      	ldr	r3, [r1, #0]
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000c4a:	4919      	ldr	r1, [pc, #100]	@ (8000cb0 <pvPortMalloc+0xfc>)
 8000c4c:	6809      	ldr	r1, [r1, #0]
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d201      	bcs.n	8000c56 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000c52:	4917      	ldr	r1, [pc, #92]	@ (8000cb0 <pvPortMalloc+0xfc>)
 8000c54:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <pvPortMalloc+0xf0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8000c62:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <pvPortMalloc+0x100>)
 8000c64:	6813      	ldr	r3, [r2, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e002      	b.n	8000c72 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	e000      	b.n	8000c72 <pvPortMalloc+0xbe>
 8000c70:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8000c72:	f003 fd95 	bl	80047a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c76:	f015 0f07 	tst.w	r5, #7
 8000c7a:	d00e      	beq.n	8000c9a <pvPortMalloc+0xe6>
 8000c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	e7fe      	b.n	8000c8c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8000c8e:	2500      	movs	r5, #0
 8000c90:	e7ef      	b.n	8000c72 <pvPortMalloc+0xbe>
 8000c92:	2500      	movs	r5, #0
 8000c94:	e7ed      	b.n	8000c72 <pvPortMalloc+0xbe>
 8000c96:	2500      	movs	r5, #0
 8000c98:	e7eb      	b.n	8000c72 <pvPortMalloc+0xbe>
}
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	bd38      	pop	{r3, r4, r5, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000059c 	.word	0x2000059c
 8000ca4:	20000588 	.word	0x20000588
 8000ca8:	20000598 	.word	0x20000598
 8000cac:	200005a0 	.word	0x200005a0
 8000cb0:	20000594 	.word	0x20000594
 8000cb4:	20000590 	.word	0x20000590

08000cb8 <vPortFree>:
	if( pv != NULL )
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d034      	beq.n	8000d26 <vPortFree+0x6e>
{
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8000cc0:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000cc4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000cc8:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <vPortFree+0x70>)
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	4213      	tst	r3, r2
 8000cce:	d108      	bne.n	8000ce2 <vPortFree+0x2a>
 8000cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	e7fe      	b.n	8000ce0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000ce2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000ce6:	b141      	cbz	r1, 8000cfa <vPortFree+0x42>
 8000ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cec:	f383 8811 	msr	BASEPRI, r3
 8000cf0:	f3bf 8f6f 	isb	sy
 8000cf4:	f3bf 8f4f 	dsb	sy
 8000cf8:	e7fe      	b.n	8000cf8 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000cfa:	ea23 0302 	bic.w	r3, r3, r2
 8000cfe:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8000d02:	f003 fcb9 	bl	8004678 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000d06:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <vPortFree+0x74>)
 8000d0c:	6813      	ldr	r3, [r2, #0]
 8000d0e:	440b      	add	r3, r1
 8000d10:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000d12:	4628      	mov	r0, r5
 8000d14:	f7ff ff1c 	bl	8000b50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000d18:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <vPortFree+0x78>)
 8000d1a:	6813      	ldr	r3, [r2, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8000d20:	f003 fd3e 	bl	80047a0 <xTaskResumeAll>
}
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	4770      	bx	lr
 8000d28:	20000588 	.word	0x20000588
 8000d2c:	20000598 	.word	0x20000598
 8000d30:	2000058c 	.word	0x2000058c

08000d34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d34:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d36:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <MX_I2C1_Init+0x30>)
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <MX_I2C1_Init+0x34>)
 8000d3a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_I2C1_Init+0x38>)
 8000d3e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d40:	2300      	movs	r3, #0
 8000d42:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d44:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d4a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d50:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d52:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d54:	f001 f986 	bl	8002064 <HAL_I2C_Init>
 8000d58:	b900      	cbnz	r0, 8000d5c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d5a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d5c:	f000 f892 	bl	8000e84 <Error_Handler>
}
 8000d60:	e7fb      	b.n	8000d5a <MX_I2C1_Init+0x26>
 8000d62:	bf00      	nop
 8000d64:	200041a8 	.word	0x200041a8
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	000186a0 	.word	0x000186a0

08000d70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d70:	b530      	push	{r4, r5, lr}
 8000d72:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	2300      	movs	r3, #0
 8000d76:	9303      	str	r3, [sp, #12]
 8000d78:	9304      	str	r3, [sp, #16]
 8000d7a:	9305      	str	r3, [sp, #20]
 8000d7c:	9306      	str	r3, [sp, #24]
 8000d7e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000d80:	6802      	ldr	r2, [r0, #0]
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_I2C_MspInit+0x64>)
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d001      	beq.n	8000d8c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d88:	b009      	add	sp, #36	@ 0x24
 8000d8a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	2500      	movs	r5, #0
 8000d8e:	9501      	str	r5, [sp, #4]
 8000d90:	4c11      	ldr	r4, [pc, #68]	@ (8000dd8 <HAL_I2C_MspInit+0x68>)
 8000d92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000da4:	23c0      	movs	r3, #192	@ 0xc0
 8000da6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da8:	2312      	movs	r3, #18
 8000daa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db0:	2304      	movs	r3, #4
 8000db2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	a903      	add	r1, sp, #12
 8000db6:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <HAL_I2C_MspInit+0x6c>)
 8000db8:	f001 f85e 	bl	8001e78 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dbc:	9502      	str	r5, [sp, #8]
 8000dbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dc4:	6423      	str	r3, [r4, #64]	@ 0x40
 8000dc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dcc:	9302      	str	r3, [sp, #8]
 8000dce:	9b02      	ldr	r3, [sp, #8]
}
 8000dd0:	e7da      	b.n	8000d88 <HAL_I2C_MspInit+0x18>
 8000dd2:	bf00      	nop
 8000dd4:	40005400 	.word	0x40005400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400

08000de0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000de0:	f100 0308 	add.w	r3, r0, #8
 8000de4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000de6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dea:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000dec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000dee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000df4:	4770      	bx	lr

08000df6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000dfa:	4770      	bx	lr

08000dfc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000dfc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000dfe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000e04:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000e06:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000e08:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000e0a:	6803      	ldr	r3, [r0, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	6003      	str	r3, [r0, #0]
}
 8000e10:	4770      	bx	lr

08000e12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000e12:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000e14:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000e16:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000e1a:	d011      	beq.n	8000e40 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000e1c:	f100 0308 	add.w	r3, r0, #8
 8000e20:	461c      	mov	r4, r3
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	42aa      	cmp	r2, r5
 8000e28:	d9fa      	bls.n	8000e20 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000e2a:	6863      	ldr	r3, [r4, #4]
 8000e2c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e2e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000e30:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000e32:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000e34:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000e36:	6803      	ldr	r3, [r0, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	6003      	str	r3, [r0, #0]
}
 8000e3c:	bc30      	pop	{r4, r5}
 8000e3e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8000e40:	6904      	ldr	r4, [r0, #16]
 8000e42:	e7f2      	b.n	8000e2a <vListInsert+0x18>

08000e44 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e44:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e46:	6841      	ldr	r1, [r0, #4]
 8000e48:	6882      	ldr	r2, [r0, #8]
 8000e4a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e4c:	6841      	ldr	r1, [r0, #4]
 8000e4e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	4282      	cmp	r2, r0
 8000e54:	d006      	beq.n	8000e64 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000e56:	2200      	movs	r2, #0
 8000e58:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000e60:	6818      	ldr	r0, [r3, #0]
}
 8000e62:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e64:	6882      	ldr	r2, [r0, #8]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	e7f5      	b.n	8000e56 <uxListRemove+0x12>
	...

08000e6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000e6e:	6802      	ldr	r2, [r0, #0]
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d000      	beq.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e76:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000e78:	f000 face 	bl	8001418 <HAL_IncTick>
}
 8000e7c:	e7fb      	b.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000e7e:	bf00      	nop
 8000e80:	40001000 	.word	0x40001000

08000e84 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000e86:	e7fe      	b.n	8000e86 <Error_Handler+0x2>

08000e88 <SystemClock_Config>:
{
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8c:	ac07      	add	r4, sp, #28
 8000e8e:	2234      	movs	r2, #52	@ 0x34
 8000e90:	2100      	movs	r1, #0
 8000e92:	4620      	mov	r0, r4
 8000e94:	f003 fff9 	bl	8004e8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	9303      	str	r3, [sp, #12]
 8000e9e:	9304      	str	r3, [sp, #16]
 8000ea0:	9305      	str	r3, [sp, #20]
 8000ea2:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <SystemClock_Config+0xa0>)
 8000ea8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000eaa:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000eae:	6411      	str	r1, [r2, #64]	@ 0x40
 8000eb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000eb2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000eb6:	9200      	str	r2, [sp, #0]
 8000eb8:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <SystemClock_Config+0xa4>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ed8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ee2:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ee8:	22a0      	movs	r2, #160	@ 0xa0
 8000eea:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eec:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eee:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ef0:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f001 fb6c 	bl	80025d0 <HAL_RCC_OscConfig>
 8000ef8:	b990      	cbnz	r0, 8000f20 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f0a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f10:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f12:	2105      	movs	r1, #5
 8000f14:	a802      	add	r0, sp, #8
 8000f16:	f001 f9a5 	bl	8002264 <HAL_RCC_ClockConfig>
 8000f1a:	b918      	cbnz	r0, 8000f24 <SystemClock_Config+0x9c>
}
 8000f1c:	b014      	add	sp, #80	@ 0x50
 8000f1e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f20:	f7ff ffb0 	bl	8000e84 <Error_Handler>
    Error_Handler();
 8000f24:	f7ff ffae 	bl	8000e84 <Error_Handler>
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40007000 	.word	0x40007000

08000f30 <main>:
{
 8000f30:	b508      	push	{r3, lr}
  HAL_Init();
 8000f32:	f000 fa57 	bl	80013e4 <HAL_Init>
  SystemClock_Config();
 8000f36:	f7ff ffa7 	bl	8000e88 <SystemClock_Config>
  MX_GPIO_Init();
 8000f3a:	f7ff fd2b 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3e:	f7ff fbfd 	bl	800073c <MX_DMA_Init>
  MX_CAN1_Init();
 8000f42:	f7ff facb 	bl	80004dc <MX_CAN1_Init>
  MX_TIM1_Init();
 8000f46:	f003 fe23 	bl	8004b90 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f4a:	f7ff f97b 	bl	8000244 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f4e:	f7ff f9b1 	bl	80002b4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000f52:	f7ff f9e7 	bl	8000324 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000f56:	f7ff feed 	bl	8000d34 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000f5a:	f000 f999 	bl	8001290 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000f5e:	f003 feb5 	bl	8004ccc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000f62:	f003 fd0b 	bl	800497c <MX_TIM3_Init>
  controller_init();
 8000f66:	f7ff fb53 	bl	8000610 <controller_init>
  MX_FREERTOS_Init();
 8000f6a:	f7ff fcfb 	bl	8000964 <MX_FREERTOS_Init>
  osKernelStart();
 8000f6e:	f7ff fb0f 	bl	8000590 <osKernelStart>
  while (1) {
 8000f72:	e7fe      	b.n	8000f72 <main+0x42>

08000f74 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000f74:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <prvTaskExitError+0x3c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f82:	d008      	beq.n	8000f96 <prvTaskExitError+0x22>
 8000f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f88:	f383 8811 	msr	BASEPRI, r3
 8000f8c:	f3bf 8f6f 	isb	sy
 8000f90:	f3bf 8f4f 	dsb	sy
 8000f94:	e7fe      	b.n	8000f94 <prvTaskExitError+0x20>
 8000f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f9a:	f383 8811 	msr	BASEPRI, r3
 8000f9e:	f3bf 8f6f 	isb	sy
 8000fa2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000fa6:	9b01      	ldr	r3, [sp, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0fc      	beq.n	8000fa6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000fac:	b002      	add	sp, #8
 8000fae:	4770      	bx	lr
 8000fb0:	20000000 	.word	0x20000000

08000fb4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000fb4:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <prvPortStartFirstTask+0x24>)
 8000fb6:	6800      	ldr	r0, [r0, #0]
 8000fb8:	6800      	ldr	r0, [r0, #0]
 8000fba:	f380 8808 	msr	MSP, r0
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	f380 8814 	msr	CONTROL, r0
 8000fc6:	b662      	cpsie	i
 8000fc8:	b661      	cpsie	f
 8000fca:	f3bf 8f4f 	dsb	sy
 8000fce:	f3bf 8f6f 	isb	sy
 8000fd2:	df00      	svc	0
 8000fd4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000fd6:	0000      	.short	0x0000
 8000fd8:	e000ed08 	.word	0xe000ed08

08000fdc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000fdc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8000fec <vPortEnableVFP+0x10>
 8000fe0:	6801      	ldr	r1, [r0, #0]
 8000fe2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000fe6:	6001      	str	r1, [r0, #0]
 8000fe8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000fea:	0000      	.short	0x0000
 8000fec:	e000ed88 	.word	0xe000ed88

08000ff0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ff4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000ff8:	f021 0101 	bic.w	r1, r1, #1
 8000ffc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001000:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <pxPortInitialiseStack+0x28>)
 8001002:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001006:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800100a:	f06f 0302 	mvn.w	r3, #2
 800100e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001012:	3844      	subs	r0, #68	@ 0x44
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	08000f75 	.word	0x08000f75
 800101c:	00000000 	.word	0x00000000

08001020 <SVC_Handler>:
	__asm volatile (
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <pxCurrentTCBConst2>)
 8001022:	6819      	ldr	r1, [r3, #0]
 8001024:	6808      	ldr	r0, [r1, #0]
 8001026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800102a:	f380 8809 	msr	PSP, r0
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	f04f 0000 	mov.w	r0, #0
 8001036:	f380 8811 	msr	BASEPRI, r0
 800103a:	4770      	bx	lr
 800103c:	f3af 8000 	nop.w

08001040 <pxCurrentTCBConst2>:
 8001040:	200043d4 	.word	0x200043d4

08001044 <vPortEnterCritical>:
 8001044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001048:	f383 8811 	msr	BASEPRI, r3
 800104c:	f3bf 8f6f 	isb	sy
 8001050:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001054:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <vPortEnterCritical+0x40>)
 8001056:	6813      	ldr	r3, [r2, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800105c:	2b01      	cmp	r3, #1
 800105e:	d000      	beq.n	8001062 <vPortEnterCritical+0x1e>
}
 8001060:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001062:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001066:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800106a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800106e:	d0f7      	beq.n	8001060 <vPortEnterCritical+0x1c>
 8001070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001074:	f383 8811 	msr	BASEPRI, r3
 8001078:	f3bf 8f6f 	isb	sy
 800107c:	f3bf 8f4f 	dsb	sy
 8001080:	e7fe      	b.n	8001080 <vPortEnterCritical+0x3c>
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000

08001088 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <vPortExitCritical+0x28>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b943      	cbnz	r3, 80010a0 <vPortExitCritical+0x18>
 800108e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001092:	f383 8811 	msr	BASEPRI, r3
 8001096:	f3bf 8f6f 	isb	sy
 800109a:	f3bf 8f4f 	dsb	sy
 800109e:	e7fe      	b.n	800109e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80010a0:	3b01      	subs	r3, #1
 80010a2:	4a03      	ldr	r2, [pc, #12]	@ (80010b0 <vPortExitCritical+0x28>)
 80010a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80010a6:	b90b      	cbnz	r3, 80010ac <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80010a8:	f383 8811 	msr	BASEPRI, r3
}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000000 	.word	0x20000000
	...

080010c0 <PendSV_Handler>:
	__asm volatile
 80010c0:	f3ef 8009 	mrs	r0, PSP
 80010c4:	f3bf 8f6f 	isb	sy
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <pxCurrentTCBConst>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f01e 0f10 	tst.w	lr, #16
 80010d0:	bf08      	it	eq
 80010d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80010d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010da:	6010      	str	r0, [r2, #0]
 80010dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80010e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80010e4:	f380 8811 	msr	BASEPRI, r0
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	f3bf 8f6f 	isb	sy
 80010f0:	f003 fbf8 	bl	80048e4 <vTaskSwitchContext>
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	f380 8811 	msr	BASEPRI, r0
 80010fc:	bc09      	pop	{r0, r3}
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	6808      	ldr	r0, [r1, #0]
 8001102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001106:	f01e 0f10 	tst.w	lr, #16
 800110a:	bf08      	it	eq
 800110c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001110:	f380 8809 	msr	PSP, r0
 8001114:	f3bf 8f6f 	isb	sy
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	f3af 8000 	nop.w

08001120 <pxCurrentTCBConst>:
 8001120:	200043d4 	.word	0x200043d4

08001124 <SysTick_Handler>:
{
 8001124:	b508      	push	{r3, lr}
	__asm volatile
 8001126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800112a:	f383 8811 	msr	BASEPRI, r3
 800112e:	f3bf 8f6f 	isb	sy
 8001132:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001136:	f003 faa7 	bl	8004688 <xTaskIncrementTick>
 800113a:	b128      	cbz	r0, 8001148 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800113c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001144:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8001148:	2300      	movs	r3, #0
 800114a:	f383 8811 	msr	BASEPRI, r3
}
 800114e:	bd08      	pop	{r3, pc}

08001150 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001150:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001154:	2300      	movs	r3, #0
 8001156:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001158:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800115a:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <vPortSetupTimerInterrupt+0x20>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4905      	ldr	r1, [pc, #20]	@ (8001174 <vPortSetupTimerInterrupt+0x24>)
 8001160:	fba1 1303 	umull	r1, r3, r1, r3
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	3b01      	subs	r3, #1
 8001168:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800116a:	2307      	movs	r3, #7
 800116c:	6113      	str	r3, [r2, #16]
}
 800116e:	4770      	bx	lr
 8001170:	2000000c 	.word	0x2000000c
 8001174:	10624dd3 	.word	0x10624dd3

08001178 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001178:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800117c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001180:	4b3d      	ldr	r3, [pc, #244]	@ (8001278 <xPortStartScheduler+0x100>)
 8001182:	429a      	cmp	r2, r3
 8001184:	d01c      	beq.n	80011c0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001186:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800118a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800118e:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <xPortStartScheduler+0x104>)
 8001190:	429a      	cmp	r2, r3
 8001192:	d01e      	beq.n	80011d2 <xPortStartScheduler+0x5a>
{
 8001194:	b530      	push	{r4, r5, lr}
 8001196:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001198:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <xPortStartScheduler+0x108>)
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80011a0:	22ff      	movs	r2, #255	@ 0xff
 80011a2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80011ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80011b0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80011b4:	4a33      	ldr	r2, [pc, #204]	@ (8001284 <xPortStartScheduler+0x10c>)
 80011b6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <xPortStartScheduler+0x110>)
 80011ba:	2207      	movs	r2, #7
 80011bc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80011be:	e01b      	b.n	80011f8 <xPortStartScheduler+0x80>
	__asm volatile
 80011c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011c4:	f383 8811 	msr	BASEPRI, r3
 80011c8:	f3bf 8f6f 	isb	sy
 80011cc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80011d0:	e7fe      	b.n	80011d0 <xPortStartScheduler+0x58>
 80011d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011d6:	f383 8811 	msr	BASEPRI, r3
 80011da:	f3bf 8f6f 	isb	sy
 80011de:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80011e2:	e7fe      	b.n	80011e2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 80011e4:	4a28      	ldr	r2, [pc, #160]	@ (8001288 <xPortStartScheduler+0x110>)
 80011e6:	6813      	ldr	r3, [r2, #0]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80011ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80011f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80011fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001200:	d1f0      	bne.n	80011e4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <xPortStartScheduler+0x110>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d008      	beq.n	800121c <xPortStartScheduler+0xa4>
 800120a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800120e:	f383 8811 	msr	BASEPRI, r3
 8001212:	f3bf 8f6f 	isb	sy
 8001216:	f3bf 8f4f 	dsb	sy
 800121a:	e7fe      	b.n	800121a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	4a1a      	ldr	r2, [pc, #104]	@ (8001288 <xPortStartScheduler+0x110>)
 8001220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001222:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001226:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001228:	9b01      	ldr	r3, [sp, #4]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <xPortStartScheduler+0x108>)
 800122e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001230:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8001234:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800123c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001240:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8001244:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001248:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800124c:	f7ff ff80 	bl	8001150 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001250:	2500      	movs	r5, #0
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <xPortStartScheduler+0x114>)
 8001254:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8001256:	f7ff fec1 	bl	8000fdc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800125a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800125e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001262:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8001266:	f7ff fea5 	bl	8000fb4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800126a:	f003 fb3b 	bl	80048e4 <vTaskSwitchContext>
	prvTaskExitError();
 800126e:	f7ff fe81 	bl	8000f74 <prvTaskExitError>
}
 8001272:	4628      	mov	r0, r5
 8001274:	b003      	add	sp, #12
 8001276:	bd30      	pop	{r4, r5, pc}
 8001278:	410fc271 	.word	0x410fc271
 800127c:	410fc270 	.word	0x410fc270
 8001280:	e000e400 	.word	0xe000e400
 8001284:	20004200 	.word	0x20004200
 8001288:	200041fc 	.word	0x200041fc
 800128c:	20000000 	.word	0x20000000

08001290 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001290:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001292:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <MX_SPI3_Init+0x38>)
 8001294:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <MX_SPI3_Init+0x3c>)
 8001296:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001298:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800129c:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	2300      	movs	r3, #0
 80012a0:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a2:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a4:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a6:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ac:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ae:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b0:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b2:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b4:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80012b6:	230a      	movs	r3, #10
 80012b8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012ba:	f001 fc4f 	bl	8002b5c <HAL_SPI_Init>
 80012be:	b900      	cbnz	r0, 80012c2 <MX_SPI3_Init+0x32>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012c0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80012c2:	f7ff fddf 	bl	8000e84 <Error_Handler>
}
 80012c6:	e7fb      	b.n	80012c0 <MX_SPI3_Init+0x30>
 80012c8:	20004204 	.word	0x20004204
 80012cc:	40003c00 	.word	0x40003c00

080012d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012d0:	b500      	push	{lr}
 80012d2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	2300      	movs	r3, #0
 80012d6:	9303      	str	r3, [sp, #12]
 80012d8:	9304      	str	r3, [sp, #16]
 80012da:	9305      	str	r3, [sp, #20]
 80012dc:	9306      	str	r3, [sp, #24]
 80012de:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 80012e0:	6802      	ldr	r2, [r0, #0]
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_SPI_MspInit+0x68>)
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d002      	beq.n	80012ee <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80012e8:	b009      	add	sp, #36	@ 0x24
 80012ea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012ee:	2100      	movs	r1, #0
 80012f0:	9101      	str	r1, [sp, #4]
 80012f2:	f503 33fe 	add.w	r3, r3, #130048	@ 0x1fc00
 80012f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80012fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001300:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8001304:	9201      	str	r2, [sp, #4]
 8001306:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	9102      	str	r1, [sp, #8]
 800130a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800130c:	f042 0204 	orr.w	r2, r2, #4
 8001310:	631a      	str	r2, [r3, #48]	@ 0x30
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800131c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001320:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800132a:	2306      	movs	r3, #6
 800132c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	a903      	add	r1, sp, #12
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <HAL_SPI_MspInit+0x6c>)
 8001332:	f000 fda1 	bl	8001e78 <HAL_GPIO_Init>
}
 8001336:	e7d7      	b.n	80012e8 <HAL_SPI_MspInit+0x18>
 8001338:	40003c00 	.word	0x40003c00
 800133c:	40020800 	.word	0x40020800

08001340 <led_ctl>:
#include "gpio.h"

static state_e g_state = STATE_DEBUG;
static uint8_t g_led_state = 0x01;

void led_ctl(uint8_t led_state) {
 8001340:	b510      	push	{r4, lr}
 8001342:	4604      	mov	r4, r0
  if (led_state & 0x01) {
 8001344:	f010 0f01 	tst.w	r0, #1
 8001348:	d015      	beq.n	8001376 <led_ctl+0x36>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2108      	movs	r1, #8
 800134e:	4813      	ldr	r0, [pc, #76]	@ (800139c <led_ctl+0x5c>)
 8001350:	f000 fe82 	bl	8002058 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x02) {
 8001354:	f014 0f02 	tst.w	r4, #2
 8001358:	d013      	beq.n	8001382 <led_ctl+0x42>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2104      	movs	r1, #4
 800135e:	480f      	ldr	r0, [pc, #60]	@ (800139c <led_ctl+0x5c>)
 8001360:	f000 fe7a 	bl	8002058 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x04) {
 8001364:	f014 0f04 	tst.w	r4, #4
 8001368:	d011      	beq.n	800138e <led_ctl+0x4e>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2102      	movs	r1, #2
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <led_ctl+0x5c>)
 8001370:	f000 fe72 	bl	8002058 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
  }
}
 8001374:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2108      	movs	r1, #8
 800137a:	4808      	ldr	r0, [pc, #32]	@ (800139c <led_ctl+0x5c>)
 800137c:	f000 fe6c 	bl	8002058 <HAL_GPIO_WritePin>
 8001380:	e7e8      	b.n	8001354 <led_ctl+0x14>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	2104      	movs	r1, #4
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <led_ctl+0x5c>)
 8001388:	f000 fe66 	bl	8002058 <HAL_GPIO_WritePin>
 800138c:	e7ea      	b.n	8001364 <led_ctl+0x24>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2102      	movs	r1, #2
 8001392:	4802      	ldr	r0, [pc, #8]	@ (800139c <led_ctl+0x5c>)
 8001394:	f000 fe60 	bl	8002058 <HAL_GPIO_WritePin>
}
 8001398:	e7ec      	b.n	8001374 <led_ctl+0x34>
 800139a:	bf00      	nop
 800139c:	40020800 	.word	0x40020800

080013a0 <state_step>:

void state_step(void) {
 80013a0:	b508      	push	{r3, lr}
    led_ctl(g_led_state);
  }

  else if (STATE_DEBUG == g_state) {
    static uint8_t dir = 0;
    led_ctl(g_led_state);
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <state_step+0x3c>)
 80013a4:	7818      	ldrb	r0, [r3, #0]
 80013a6:	f7ff ffcb 	bl	8001340 <led_ctl>
    if (0 == dir) {
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <state_step+0x40>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b95b      	cbnz	r3, 80013c8 <state_step+0x28>
      g_led_state = g_led_state << 1;
 80013b0:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <state_step+0x3c>)
 80013b2:	7813      	ldrb	r3, [r2, #0]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	7013      	strb	r3, [r2, #0]
      if (0x04 == g_led_state) {
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d000      	beq.n	80013c0 <state_step+0x20>

  else if (STATE_ERROR == g_state) {
    g_led_state = 0x02;
    led_ctl(g_led_state);
  }
 80013be:	bd08      	pop	{r3, pc}
        dir = 1;
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <state_step+0x40>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	e7fa      	b.n	80013be <state_step+0x1e>
      g_led_state = g_led_state >> 1;
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <state_step+0x3c>)
 80013ca:	7813      	ldrb	r3, [r2, #0]
 80013cc:	085b      	lsrs	r3, r3, #1
 80013ce:	7013      	strb	r3, [r2, #0]
      if (0x01 == g_led_state) {
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d1f4      	bne.n	80013be <state_step+0x1e>
        dir = 0;
 80013d4:	4b02      	ldr	r3, [pc, #8]	@ (80013e0 <state_step+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	e7f0      	b.n	80013be <state_step+0x1e>
 80013dc:	20000004 	.word	0x20000004
 80013e0:	2000425c 	.word	0x2000425c

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <HAL_Init+0x30>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013ee:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80013f6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 fab3 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	200f      	movs	r0, #15
 8001408:	f002 f9fe 	bl	8003808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f000 ff08 	bl	8002220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001410:	2000      	movs	r0, #0
 8001412:	bd08      	pop	{r3, pc}
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001418:	4a03      	ldr	r2, [pc, #12]	@ (8001428 <HAL_IncTick+0x10>)
 800141a:	6811      	ldr	r1, [r2, #0]
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_IncTick+0x14>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	440b      	add	r3, r1
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20004260 	.word	0x20004260
 800142c:	20000005 	.word	0x20000005

08001430 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001430:	4b01      	ldr	r3, [pc, #4]	@ (8001438 <HAL_GetTick+0x8>)
 8001432:	6818      	ldr	r0, [r3, #0]
}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20004260 	.word	0x20004260

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b538      	push	{r3, r4, r5, lr}
 800143e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff fff6 	bl	8001430 <HAL_GetTick>
 8001444:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	f1b4 3fff 	cmp.w	r4, #4294967295
 800144a:	d002      	beq.n	8001452 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <HAL_Delay+0x24>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001452:	f7ff ffed 	bl	8001430 <HAL_GetTick>
 8001456:	1b40      	subs	r0, r0, r5
 8001458:	42a0      	cmp	r0, r4
 800145a:	d3fa      	bcc.n	8001452 <HAL_Delay+0x16>
  {
  }
}
 800145c:	bd38      	pop	{r3, r4, r5, pc}
 800145e:	bf00      	nop
 8001460:	20000005 	.word	0x20000005

08001464 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001464:	4b4a      	ldr	r3, [pc, #296]	@ (8001590 <ADC_Init+0x12c>)
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800146c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	6841      	ldr	r1, [r0, #4]
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001476:	6802      	ldr	r2, [r0, #0]
 8001478:	6853      	ldr	r3, [r2, #4]
 800147a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800147e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001480:	6802      	ldr	r2, [r0, #0]
 8001482:	6853      	ldr	r3, [r2, #4]
 8001484:	6901      	ldr	r1, [r0, #16]
 8001486:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800148a:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800148c:	6802      	ldr	r2, [r0, #0]
 800148e:	6853      	ldr	r3, [r2, #4]
 8001490:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001494:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001496:	6802      	ldr	r2, [r0, #0]
 8001498:	6853      	ldr	r3, [r2, #4]
 800149a:	6881      	ldr	r1, [r0, #8]
 800149c:	430b      	orrs	r3, r1
 800149e:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014a0:	6802      	ldr	r2, [r0, #0]
 80014a2:	6893      	ldr	r3, [r2, #8]
 80014a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80014a8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014aa:	6802      	ldr	r2, [r0, #0]
 80014ac:	6893      	ldr	r3, [r2, #8]
 80014ae:	68c1      	ldr	r1, [r0, #12]
 80014b0:	430b      	orrs	r3, r1
 80014b2:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80014b6:	4b37      	ldr	r3, [pc, #220]	@ (8001594 <ADC_Init+0x130>)
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d057      	beq.n	800156c <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014bc:	6802      	ldr	r2, [r0, #0]
 80014be:	6893      	ldr	r3, [r2, #8]
 80014c0:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80014c4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014c6:	6802      	ldr	r2, [r0, #0]
 80014c8:	6893      	ldr	r3, [r2, #8]
 80014ca:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014d0:	6802      	ldr	r2, [r0, #0]
 80014d2:	6893      	ldr	r3, [r2, #8]
 80014d4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80014d8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014da:	6802      	ldr	r2, [r0, #0]
 80014dc:	6893      	ldr	r3, [r2, #8]
 80014de:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014e4:	6802      	ldr	r2, [r0, #0]
 80014e6:	6893      	ldr	r3, [r2, #8]
 80014e8:	f023 0302 	bic.w	r3, r3, #2
 80014ec:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ee:	6802      	ldr	r2, [r0, #0]
 80014f0:	6893      	ldr	r3, [r2, #8]
 80014f2:	7e01      	ldrb	r1, [r0, #24]
 80014f4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80014f8:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014fa:	f890 3020 	ldrb.w	r3, [r0, #32]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d03f      	beq.n	8001582 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001502:	6802      	ldr	r2, [r0, #0]
 8001504:	6853      	ldr	r3, [r2, #4]
 8001506:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800150a:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800150c:	6802      	ldr	r2, [r0, #0]
 800150e:	6853      	ldr	r3, [r2, #4]
 8001510:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001514:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001516:	6801      	ldr	r1, [r0, #0]
 8001518:	684b      	ldr	r3, [r1, #4]
 800151a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800151c:	3a01      	subs	r2, #1
 800151e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001522:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001524:	6802      	ldr	r2, [r0, #0]
 8001526:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001528:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800152c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800152e:	6801      	ldr	r1, [r0, #0]
 8001530:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8001532:	69c2      	ldr	r2, [r0, #28]
 8001534:	3a01      	subs	r2, #1
 8001536:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800153a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800153c:	6802      	ldr	r2, [r0, #0]
 800153e:	6893      	ldr	r3, [r2, #8]
 8001540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001544:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001546:	6802      	ldr	r2, [r0, #0]
 8001548:	6893      	ldr	r3, [r2, #8]
 800154a:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 800154e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001552:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001554:	6802      	ldr	r2, [r0, #0]
 8001556:	6893      	ldr	r3, [r2, #8]
 8001558:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800155c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800155e:	6802      	ldr	r2, [r0, #0]
 8001560:	6893      	ldr	r3, [r2, #8]
 8001562:	6941      	ldr	r1, [r0, #20]
 8001564:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001568:	6093      	str	r3, [r2, #8]
}
 800156a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156c:	6802      	ldr	r2, [r0, #0]
 800156e:	6893      	ldr	r3, [r2, #8]
 8001570:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001574:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001576:	6802      	ldr	r2, [r0, #0]
 8001578:	6893      	ldr	r3, [r2, #8]
 800157a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800157e:	6093      	str	r3, [r2, #8]
 8001580:	e7b0      	b.n	80014e4 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001582:	6802      	ldr	r2, [r0, #0]
 8001584:	6853      	ldr	r3, [r2, #4]
 8001586:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800158a:	6053      	str	r3, [r2, #4]
 800158c:	e7ca      	b.n	8001524 <ADC_Init+0xc0>
 800158e:	bf00      	nop
 8001590:	40012300 	.word	0x40012300
 8001594:	0f000001 	.word	0x0f000001

08001598 <HAL_ADC_Init>:
  if (hadc == NULL)
 8001598:	b338      	cbz	r0, 80015ea <HAL_ADC_Init+0x52>
{
 800159a:	b510      	push	{r4, lr}
 800159c:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 800159e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80015a0:	b143      	cbz	r3, 80015b4 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015a4:	f013 0f10 	tst.w	r3, #16
 80015a8:	d00b      	beq.n	80015c2 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80015ac:	2300      	movs	r3, #0
 80015ae:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80015b2:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80015b4:	f7fe feee 	bl	8000394 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	2300      	movs	r3, #0
 80015ba:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 80015bc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 80015c0:	e7ef      	b.n	80015a2 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80015c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015c8:	f023 0302 	bic.w	r3, r3, #2
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff ff46 	bl	8001464 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80015d8:	2000      	movs	r0, #0
 80015da:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80015dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015de:	f023 0303 	bic.w	r3, r3, #3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6423      	str	r3, [r4, #64]	@ 0x40
 80015e8:	e7e0      	b.n	80015ac <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80015ea:	2001      	movs	r0, #1
}
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_ADC_ConfigChannel>:
{
 80015f0:	b430      	push	{r4, r5}
 80015f2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80015f4:	2200      	movs	r2, #0
 80015f6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80015f8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80015fc:	2a01      	cmp	r2, #1
 80015fe:	f000 80c0 	beq.w	8001782 <HAL_ADC_ConfigChannel+0x192>
 8001602:	4603      	mov	r3, r0
 8001604:	2201      	movs	r2, #1
 8001606:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800160a:	680a      	ldr	r2, [r1, #0]
 800160c:	2a09      	cmp	r2, #9
 800160e:	d940      	bls.n	8001692 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001610:	6804      	ldr	r4, [r0, #0]
 8001612:	68e0      	ldr	r0, [r4, #12]
 8001614:	b292      	uxth	r2, r2
 8001616:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800161a:	3a1e      	subs	r2, #30
 800161c:	f04f 0c07 	mov.w	ip, #7
 8001620:	fa0c f202 	lsl.w	r2, ip, r2
 8001624:	ea20 0202 	bic.w	r2, r0, r2
 8001628:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800162a:	681c      	ldr	r4, [r3, #0]
 800162c:	68e0      	ldr	r0, [r4, #12]
 800162e:	880a      	ldrh	r2, [r1, #0]
 8001630:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001634:	3a1e      	subs	r2, #30
 8001636:	688d      	ldr	r5, [r1, #8]
 8001638:	fa05 f202 	lsl.w	r2, r5, r2
 800163c:	4302      	orrs	r2, r0
 800163e:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001640:	684a      	ldr	r2, [r1, #4]
 8001642:	2a06      	cmp	r2, #6
 8001644:	d83c      	bhi.n	80016c0 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001646:	681c      	ldr	r4, [r3, #0]
 8001648:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800164a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800164e:	3a05      	subs	r2, #5
 8001650:	f04f 0c1f 	mov.w	ip, #31
 8001654:	fa0c f202 	lsl.w	r2, ip, r2
 8001658:	ea20 0202 	bic.w	r2, r0, r2
 800165c:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800165e:	681c      	ldr	r4, [r3, #0]
 8001660:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001662:	684a      	ldr	r2, [r1, #4]
 8001664:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001668:	3a05      	subs	r2, #5
 800166a:	f8b1 c000 	ldrh.w	ip, [r1]
 800166e:	fa0c f202 	lsl.w	r2, ip, r2
 8001672:	4302      	orrs	r2, r0
 8001674:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	4a43      	ldr	r2, [pc, #268]	@ (8001788 <HAL_ADC_ConfigChannel+0x198>)
 800167a:	4290      	cmp	r0, r2
 800167c:	d050      	beq.n	8001720 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	4a41      	ldr	r2, [pc, #260]	@ (8001788 <HAL_ADC_ConfigChannel+0x198>)
 8001682:	4290      	cmp	r0, r2
 8001684:	d059      	beq.n	800173a <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8001686:	2000      	movs	r0, #0
 8001688:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800168c:	b002      	add	sp, #8
 800168e:	bc30      	pop	{r4, r5}
 8001690:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001692:	6804      	ldr	r4, [r0, #0]
 8001694:	6920      	ldr	r0, [r4, #16]
 8001696:	b292      	uxth	r2, r2
 8001698:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800169c:	f04f 0c07 	mov.w	ip, #7
 80016a0:	fa0c f202 	lsl.w	r2, ip, r2
 80016a4:	ea20 0202 	bic.w	r2, r0, r2
 80016a8:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016aa:	681c      	ldr	r4, [r3, #0]
 80016ac:	6920      	ldr	r0, [r4, #16]
 80016ae:	880a      	ldrh	r2, [r1, #0]
 80016b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016b4:	688d      	ldr	r5, [r1, #8]
 80016b6:	fa05 f202 	lsl.w	r2, r5, r2
 80016ba:	4302      	orrs	r2, r0
 80016bc:	6122      	str	r2, [r4, #16]
 80016be:	e7bf      	b.n	8001640 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80016c0:	2a0c      	cmp	r2, #12
 80016c2:	d816      	bhi.n	80016f2 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c4:	681d      	ldr	r5, [r3, #0]
 80016c6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80016c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80016cc:	3a23      	subs	r2, #35	@ 0x23
 80016ce:	241f      	movs	r4, #31
 80016d0:	fa04 f202 	lsl.w	r2, r4, r2
 80016d4:	ea20 0202 	bic.w	r2, r0, r2
 80016d8:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016da:	681d      	ldr	r5, [r3, #0]
 80016dc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80016de:	684a      	ldr	r2, [r1, #4]
 80016e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80016e4:	3a23      	subs	r2, #35	@ 0x23
 80016e6:	880c      	ldrh	r4, [r1, #0]
 80016e8:	fa04 f202 	lsl.w	r2, r4, r2
 80016ec:	4302      	orrs	r2, r0
 80016ee:	632a      	str	r2, [r5, #48]	@ 0x30
 80016f0:	e7c1      	b.n	8001676 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016f2:	681d      	ldr	r5, [r3, #0]
 80016f4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80016f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80016fa:	3a41      	subs	r2, #65	@ 0x41
 80016fc:	241f      	movs	r4, #31
 80016fe:	fa04 f202 	lsl.w	r2, r4, r2
 8001702:	ea20 0202 	bic.w	r2, r0, r2
 8001706:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001708:	681d      	ldr	r5, [r3, #0]
 800170a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800170c:	684a      	ldr	r2, [r1, #4]
 800170e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001712:	3a41      	subs	r2, #65	@ 0x41
 8001714:	880c      	ldrh	r4, [r1, #0]
 8001716:	fa04 f202 	lsl.w	r2, r4, r2
 800171a:	4302      	orrs	r2, r0
 800171c:	62ea      	str	r2, [r5, #44]	@ 0x2c
 800171e:	e7aa      	b.n	8001676 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001720:	680a      	ldr	r2, [r1, #0]
 8001722:	2a12      	cmp	r2, #18
 8001724:	d1ab      	bne.n	800167e <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001726:	4a19      	ldr	r2, [pc, #100]	@ (800178c <HAL_ADC_ConfigChannel+0x19c>)
 8001728:	6850      	ldr	r0, [r2, #4]
 800172a:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 800172e:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001730:	6850      	ldr	r0, [r2, #4]
 8001732:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001736:	6050      	str	r0, [r2, #4]
 8001738:	e7a1      	b.n	800167e <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800173a:	680a      	ldr	r2, [r1, #0]
 800173c:	4814      	ldr	r0, [pc, #80]	@ (8001790 <HAL_ADC_ConfigChannel+0x1a0>)
 800173e:	4282      	cmp	r2, r0
 8001740:	d001      	beq.n	8001746 <HAL_ADC_ConfigChannel+0x156>
 8001742:	2a11      	cmp	r2, #17
 8001744:	d19f      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001746:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_ADC_ConfigChannel+0x19c>)
 8001748:	6850      	ldr	r0, [r2, #4]
 800174a:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 800174e:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001750:	6850      	ldr	r0, [r2, #4]
 8001752:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001756:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001758:	6809      	ldr	r1, [r1, #0]
 800175a:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <HAL_ADC_ConfigChannel+0x1a0>)
 800175c:	4291      	cmp	r1, r2
 800175e:	d192      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001760:	4a0c      	ldr	r2, [pc, #48]	@ (8001794 <HAL_ADC_ConfigChannel+0x1a4>)
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <HAL_ADC_ConfigChannel+0x1a8>)
 8001766:	fba1 1202 	umull	r1, r2, r1, r2
 800176a:	0c92      	lsrs	r2, r2, #18
 800176c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001770:	0052      	lsls	r2, r2, #1
 8001772:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001774:	9a01      	ldr	r2, [sp, #4]
 8001776:	2a00      	cmp	r2, #0
 8001778:	d085      	beq.n	8001686 <HAL_ADC_ConfigChannel+0x96>
        counter--;
 800177a:	9a01      	ldr	r2, [sp, #4]
 800177c:	3a01      	subs	r2, #1
 800177e:	9201      	str	r2, [sp, #4]
 8001780:	e7f8      	b.n	8001774 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001782:	2002      	movs	r0, #2
 8001784:	e782      	b.n	800168c <HAL_ADC_ConfigChannel+0x9c>
 8001786:	bf00      	nop
 8001788:	40012000 	.word	0x40012000
 800178c:	40012300 	.word	0x40012300
 8001790:	10000012 	.word	0x10000012
 8001794:	2000000c 	.word	0x2000000c
 8001798:	431bde83 	.word	0x431bde83

0800179c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800179c:	2800      	cmp	r0, #0
 800179e:	f000 80a1 	beq.w	80018e4 <HAL_CAN_Init+0x148>
{
 80017a2:	b538      	push	{r3, r4, r5, lr}
 80017a4:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80017aa:	b1d3      	cbz	r3, 80017e2 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b6:	f7ff fe3b 	bl	8001430 <HAL_GetTick>
 80017ba:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	f012 0f01 	tst.w	r2, #1
 80017c4:	d110      	bne.n	80017e8 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017c6:	f7ff fe33 	bl	8001430 <HAL_GetTick>
 80017ca:	1b40      	subs	r0, r0, r5
 80017cc:	280a      	cmp	r0, #10
 80017ce:	d9f5      	bls.n	80017bc <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80017d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d6:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017d8:	2305      	movs	r3, #5
 80017da:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80017de:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80017e0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80017e2:	f7fe fe97 	bl	8000514 <HAL_CAN_MspInit>
 80017e6:	e7e1      	b.n	80017ac <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	f022 0202 	bic.w	r2, r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80017f0:	f7ff fe1e 	bl	8001430 <HAL_GetTick>
 80017f4:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	f012 0f02 	tst.w	r2, #2
 80017fe:	d00d      	beq.n	800181c <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001800:	f7ff fe16 	bl	8001430 <HAL_GetTick>
 8001804:	1b40      	subs	r0, r0, r5
 8001806:	280a      	cmp	r0, #10
 8001808:	d9f5      	bls.n	80017f6 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800180a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800180c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001810:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001812:	2305      	movs	r3, #5
 8001814:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e7e1      	b.n	80017e0 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800181c:	7e22      	ldrb	r2, [r4, #24]
 800181e:	2a01      	cmp	r2, #1
 8001820:	d03d      	beq.n	800189e <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001828:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800182a:	7e63      	ldrb	r3, [r4, #25]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d03b      	beq.n	80018a8 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001830:	6822      	ldr	r2, [r4, #0]
 8001832:	6813      	ldr	r3, [r2, #0]
 8001834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001838:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800183a:	7ea3      	ldrb	r3, [r4, #26]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d039      	beq.n	80018b4 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	6813      	ldr	r3, [r2, #0]
 8001844:	f023 0320 	bic.w	r3, r3, #32
 8001848:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800184a:	7ee3      	ldrb	r3, [r4, #27]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d037      	beq.n	80018c0 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001850:	6822      	ldr	r2, [r4, #0]
 8001852:	6813      	ldr	r3, [r2, #0]
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800185a:	7f23      	ldrb	r3, [r4, #28]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d035      	beq.n	80018cc <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	6813      	ldr	r3, [r2, #0]
 8001864:	f023 0308 	bic.w	r3, r3, #8
 8001868:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800186a:	7f63      	ldrb	r3, [r4, #29]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d033      	beq.n	80018d8 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	6813      	ldr	r3, [r2, #0]
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800187a:	68a3      	ldr	r3, [r4, #8]
 800187c:	68e2      	ldr	r2, [r4, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	6922      	ldr	r2, [r4, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	6962      	ldr	r2, [r4, #20]
 8001886:	4313      	orrs	r3, r2
 8001888:	6862      	ldr	r2, [r4, #4]
 800188a:	3a01      	subs	r2, #1
 800188c:	6821      	ldr	r1, [r4, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001892:	2000      	movs	r0, #0
 8001894:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001896:	2301      	movs	r3, #1
 8001898:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 800189c:	e7a0      	b.n	80017e0 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e7c0      	b.n	800182a <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018a8:	6822      	ldr	r2, [r4, #0]
 80018aa:	6813      	ldr	r3, [r2, #0]
 80018ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e7c2      	b.n	800183a <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	6813      	ldr	r3, [r2, #0]
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e7c4      	b.n	800184a <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	6813      	ldr	r3, [r2, #0]
 80018c4:	f023 0310 	bic.w	r3, r3, #16
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e7c6      	b.n	800185a <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018cc:	6822      	ldr	r2, [r4, #0]
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e7c8      	b.n	800186a <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018d8:	6822      	ldr	r2, [r4, #0]
 80018da:	6813      	ldr	r3, [r2, #0]
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e7ca      	b.n	800187a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80018e4:	2001      	movs	r0, #1
}
 80018e6:	4770      	bx	lr

080018e8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80018e8:	2800      	cmp	r0, #0
 80018ea:	db07      	blt.n	80018fc <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ec:	f000 021f 	and.w	r2, r0, #31
 80018f0:	0940      	lsrs	r0, r0, #5
 80018f2:	2301      	movs	r3, #1
 80018f4:	4093      	lsls	r3, r2
 80018f6:	4a02      	ldr	r2, [pc, #8]	@ (8001900 <__NVIC_EnableIRQ+0x18>)
 80018f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001904:	2800      	cmp	r0, #0
 8001906:	db08      	blt.n	800191a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	0109      	lsls	r1, r1, #4
 800190a:	b2c9      	uxtb	r1, r1
 800190c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001910:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001914:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001918:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	f000 000f 	and.w	r0, r0, #15
 800191e:	0109      	lsls	r1, r1, #4
 8001920:	b2c9      	uxtb	r1, r1
 8001922:	4b01      	ldr	r3, [pc, #4]	@ (8001928 <__NVIC_SetPriority+0x24>)
 8001924:	5419      	strb	r1, [r3, r0]
  }
}
 8001926:	4770      	bx	lr
 8001928:	e000ed14 	.word	0xe000ed14

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001932:	f1c0 0c07 	rsb	ip, r0, #7
 8001936:	f1bc 0f04 	cmp.w	ip, #4
 800193a:	bf28      	it	cs
 800193c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001940:	1d03      	adds	r3, r0, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d90f      	bls.n	8001966 <NVIC_EncodePriority+0x3a>
 8001946:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 3eff 	mov.w	lr, #4294967295
 800194c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001950:	ea21 0100 	bic.w	r1, r1, r0
 8001954:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001956:	fa0e fe03 	lsl.w	lr, lr, r3
 800195a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800195e:	ea41 0002 	orr.w	r0, r1, r2
 8001962:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	2300      	movs	r3, #0
 8001968:	e7ee      	b.n	8001948 <NVIC_EncodePriority+0x1c>
	...

0800196c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800196e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001970:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	0200      	lsls	r0, r0, #8
 800197a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001988:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001990:	b510      	push	{r4, lr}
 8001992:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_NVIC_SetPriority+0x1c>)
 8001996:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001998:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800199c:	f7ff ffc6 	bl	800192c <NVIC_EncodePriority>
 80019a0:	4601      	mov	r1, r0
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff ffae 	bl	8001904 <__NVIC_SetPriority>
}
 80019a8:	bd10      	pop	{r4, pc}
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b2:	f7ff ff99 	bl	80018e8 <__NVIC_EnableIRQ>
}
 80019b6:	bd08      	pop	{r3, pc}

080019b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b8:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019ba:	6805      	ldr	r5, [r0, #0]
 80019bc:	682c      	ldr	r4, [r5, #0]
 80019be:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80019c2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019c4:	6804      	ldr	r4, [r0, #0]
 80019c6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c8:	6883      	ldr	r3, [r0, #8]
 80019ca:	2b40      	cmp	r3, #64	@ 0x40
 80019cc:	d005      	beq.n	80019da <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80019ce:	6803      	ldr	r3, [r0, #0]
 80019d0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80019d2:	6803      	ldr	r3, [r0, #0]
 80019d4:	60da      	str	r2, [r3, #12]
  }
}
 80019d6:	bc30      	pop	{r4, r5}
 80019d8:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80019da:	6803      	ldr	r3, [r0, #0]
 80019dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80019de:	6803      	ldr	r3, [r0, #0]
 80019e0:	60d9      	str	r1, [r3, #12]
 80019e2:	e7f8      	b.n	80019d6 <DMA_SetConfig+0x1e>

080019e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019e4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e6:	6803      	ldr	r3, [r0, #0]
 80019e8:	b2d9      	uxtb	r1, r3
 80019ea:	3910      	subs	r1, #16
 80019ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <DMA_CalcBaseAndBitshift+0x34>)
 80019ee:	fba2 4201 	umull	r4, r2, r2, r1
 80019f2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019f4:	4c09      	ldr	r4, [pc, #36]	@ (8001a1c <DMA_CalcBaseAndBitshift+0x38>)
 80019f6:	5ca2      	ldrb	r2, [r4, r2]
 80019f8:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80019fa:	295f      	cmp	r1, #95	@ 0x5f
 80019fc:	d907      	bls.n	8001a0e <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019fe:	f36f 0309 	bfc	r3, #0, #10
 8001a02:	3304      	adds	r3, #4
 8001a04:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001a06:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a0c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a0e:	f36f 0309 	bfc	r3, #0, #10
 8001a12:	6583      	str	r3, [r0, #88]	@ 0x58
 8001a14:	e7f7      	b.n	8001a06 <DMA_CalcBaseAndBitshift+0x22>
 8001a16:	bf00      	nop
 8001a18:	aaaaaaab 	.word	0xaaaaaaab
 8001a1c:	08005250 	.word	0x08005250

08001a20 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a20:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a22:	6982      	ldr	r2, [r0, #24]
 8001a24:	b992      	cbnz	r2, 8001a4c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d00a      	beq.n	8001a40 <DMA_CheckFifoParam+0x20>
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d002      	beq.n	8001a34 <DMA_CheckFifoParam+0x14>
 8001a2e:	b10b      	cbz	r3, 8001a34 <DMA_CheckFifoParam+0x14>
 8001a30:	2000      	movs	r0, #0
 8001a32:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a34:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a36:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a3a:	d128      	bne.n	8001a8e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a40:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a46:	d024      	beq.n	8001a92 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a4c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001a50:	d009      	beq.n	8001a66 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d925      	bls.n	8001aa2 <DMA_CheckFifoParam+0x82>
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d125      	bne.n	8001aa6 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a5a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a5c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a60:	d123      	bne.n	8001aaa <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2000      	movs	r0, #0
 8001a64:	4770      	bx	lr
    switch (tmp)
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d803      	bhi.n	8001a72 <DMA_CheckFifoParam+0x52>
 8001a6a:	e8df f003 	tbb	[pc, r3]
 8001a6e:	0414      	.short	0x0414
 8001a70:	0a14      	.short	0x0a14
 8001a72:	2000      	movs	r0, #0
 8001a74:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a76:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a78:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a7c:	d10d      	bne.n	8001a9a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a7e:	2000      	movs	r0, #0
 8001a80:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a82:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a88:	d009      	beq.n	8001a9e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	4770      	bx	lr
        status = HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
 8001a90:	4770      	bx	lr
        status = HAL_ERROR;
 8001a92:	2001      	movs	r0, #1
 8001a94:	4770      	bx	lr
      status = HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
 8001a98:	4770      	bx	lr
        status = HAL_ERROR;
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	4770      	bx	lr
        status = HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	4770      	bx	lr
      status = HAL_ERROR;
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	4770      	bx	lr
    switch (tmp)
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001aaa:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_DMA_Init>:
{
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff fcbc 	bl	8001430 <HAL_GetTick>
  if(hdma == NULL)
 8001ab8:	2c00      	cmp	r4, #0
 8001aba:	d05b      	beq.n	8001b74 <HAL_DMA_Init+0xc4>
 8001abc:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	6813      	ldr	r3, [r2, #0]
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	f012 0f01 	tst.w	r2, #1
 8001adc:	d00a      	beq.n	8001af4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ade:	f7ff fca7 	bl	8001430 <HAL_GetTick>
 8001ae2:	1b43      	subs	r3, r0, r5
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d9f5      	bls.n	8001ad4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae8:	2320      	movs	r3, #32
 8001aea:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aec:	2003      	movs	r0, #3
 8001aee:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001af4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af6:	4920      	ldr	r1, [pc, #128]	@ (8001b78 <HAL_DMA_Init+0xc8>)
 8001af8:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afa:	6862      	ldr	r2, [r4, #4]
 8001afc:	68a0      	ldr	r0, [r4, #8]
 8001afe:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b00:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b02:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b04:	6920      	ldr	r0, [r4, #16]
 8001b06:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b08:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0c:	69a0      	ldr	r0, [r4, #24]
 8001b0e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b10:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b14:	6a20      	ldr	r0, [r4, #32]
 8001b16:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b18:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b1a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001b1c:	2904      	cmp	r1, #4
 8001b1e:	d01e      	beq.n	8001b5e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001b20:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001b22:	6826      	ldr	r6, [r4, #0]
 8001b24:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b26:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001b2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b2c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d107      	bne.n	8001b42 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001b32:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b34:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001b38:	b11b      	cbz	r3, 8001b42 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff ff70 	bl	8001a20 <DMA_CheckFifoParam>
 8001b40:	b990      	cbnz	r0, 8001b68 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001b42:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff ff4d 	bl	80019e4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001b4c:	233f      	movs	r3, #63	@ 0x3f
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b52:	2000      	movs	r0, #0
 8001b54:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001b5c:	e7c9      	b.n	8001af2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001b60:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001b62:	4301      	orrs	r1, r0
 8001b64:	430a      	orrs	r2, r1
 8001b66:	e7db      	b.n	8001b20 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b68:	2340      	movs	r3, #64	@ 0x40
 8001b6a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001b72:	e7be      	b.n	8001af2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001b74:	2001      	movs	r0, #1
 8001b76:	e7bc      	b.n	8001af2 <HAL_DMA_Init+0x42>
 8001b78:	f010803f 	.word	0xf010803f

08001b7c <HAL_DMA_Start_IT>:
{
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b80:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001b82:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001b86:	2801      	cmp	r0, #1
 8001b88:	d02a      	beq.n	8001be0 <HAL_DMA_Start_IT+0x64>
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b90:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001b94:	2801      	cmp	r0, #1
 8001b96:	d004      	beq.n	8001ba2 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001b9e:	2002      	movs	r0, #2
}
 8001ba0:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba8:	2000      	movs	r0, #0
 8001baa:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff ff03 	bl	80019b8 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001bb4:	233f      	movs	r3, #63	@ 0x3f
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bba:	6822      	ldr	r2, [r4, #0]
 8001bbc:	6813      	ldr	r3, [r2, #0]
 8001bbe:	f043 0316 	orr.w	r3, r3, #22
 8001bc2:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bc6:	b123      	cbz	r3, 8001bd2 <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bc8:	6822      	ldr	r2, [r4, #0]
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bd2:	6822      	ldr	r2, [r4, #0]
 8001bd4:	6813      	ldr	r3, [r2, #0]
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bdc:	2000      	movs	r0, #0
 8001bde:	e7df      	b.n	8001ba0 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8001be0:	2002      	movs	r0, #2
 8001be2:	e7dd      	b.n	8001ba0 <HAL_DMA_Start_IT+0x24>

08001be4 <HAL_DMA_Abort>:
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be8:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001bea:	f7ff fc21 	bl	8001430 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bee:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d006      	beq.n	8001c04 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
}
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
 8001c04:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	f023 0316 	bic.w	r3, r3, #22
 8001c0e:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	6953      	ldr	r3, [r2, #20]
 8001c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c18:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c1c:	b1e3      	cbz	r3, 8001c58 <HAL_DMA_Abort+0x74>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c1e:	6822      	ldr	r2, [r4, #0]
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f023 0308 	bic.w	r3, r3, #8
 8001c26:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f013 0f01 	tst.w	r3, #1
 8001c3a:	d011      	beq.n	8001c60 <HAL_DMA_Abort+0x7c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c3c:	f7ff fbf8 	bl	8001430 <HAL_GetTick>
 8001c40:	1b43      	subs	r3, r0, r5
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d9f5      	bls.n	8001c32 <HAL_DMA_Abort+0x4e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c46:	2320      	movs	r3, #32
 8001c48:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001c50:	2300      	movs	r3, #0
 8001c52:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001c56:	e7d4      	b.n	8001c02 <HAL_DMA_Abort+0x1e>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c58:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1df      	bne.n	8001c1e <HAL_DMA_Abort+0x3a>
 8001c5e:	e7e3      	b.n	8001c28 <HAL_DMA_Abort+0x44>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c60:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001c62:	233f      	movs	r3, #63	@ 0x3f
 8001c64:	4093      	lsls	r3, r2
 8001c66:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001c74:	e7c5      	b.n	8001c02 <HAL_DMA_Abort+0x1e>

08001c76 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c76:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001c82:	2001      	movs	r0, #1
 8001c84:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c86:	2305      	movs	r3, #5
 8001c88:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c8c:	6802      	ldr	r2, [r0, #0]
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001c96:	2000      	movs	r0, #0
}
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_DMA_IRQHandler>:
{
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca6:	4b72      	ldr	r3, [pc, #456]	@ (8001e70 <HAL_DMA_IRQHandler+0x1d4>)
 8001ca8:	681d      	ldr	r5, [r3, #0]
 8001caa:	4b72      	ldr	r3, [pc, #456]	@ (8001e74 <HAL_DMA_IRQHandler+0x1d8>)
 8001cac:	fba3 3505 	umull	r3, r5, r3, r5
 8001cb0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb2:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001cb4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001cb8:	2308      	movs	r3, #8
 8001cba:	4093      	lsls	r3, r2
 8001cbc:	4233      	tst	r3, r6
 8001cbe:	d010      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cc0:	6803      	ldr	r3, [r0, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	f012 0f04 	tst.w	r2, #4
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f022 0204 	bic.w	r2, r2, #4
 8001cd0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cd2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	4093      	lsls	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cda:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	4093      	lsls	r3, r2
 8001ce8:	4233      	tst	r3, r6
 8001cea:	d009      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cec:	6822      	ldr	r2, [r4, #0]
 8001cee:	6952      	ldr	r2, [r2, #20]
 8001cf0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001cf4:	d004      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cf6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cf8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d00:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d02:	2304      	movs	r3, #4
 8001d04:	4093      	lsls	r3, r2
 8001d06:	4233      	tst	r3, r6
 8001d08:	d009      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	f012 0f02 	tst.w	r2, #2
 8001d12:	d004      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d14:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d16:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d20:	2310      	movs	r3, #16
 8001d22:	4093      	lsls	r3, r2
 8001d24:	4233      	tst	r3, r6
 8001d26:	d024      	beq.n	8001d72 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d28:	6822      	ldr	r2, [r4, #0]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	f012 0f08 	tst.w	r2, #8
 8001d30:	d01f      	beq.n	8001d72 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d32:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001d3c:	d00d      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001d44:	d104      	bne.n	8001d50 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001d46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d48:	b19b      	cbz	r3, 8001d72 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4798      	blx	r3
 8001d4e:	e010      	b.n	8001d72 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d50:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001d52:	b173      	cbz	r3, 8001d72 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001d54:	4620      	mov	r0, r4
 8001d56:	4798      	blx	r3
 8001d58:	e00b      	b.n	8001d72 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001d60:	d103      	bne.n	8001d6a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	f022 0208 	bic.w	r2, r2, #8
 8001d68:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001d6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d6c:	b10b      	cbz	r3, 8001d72 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d72:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d74:	2320      	movs	r3, #32
 8001d76:	4093      	lsls	r3, r2
 8001d78:	4233      	tst	r3, r6
 8001d7a:	d054      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d7c:	6822      	ldr	r2, [r4, #0]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	f012 0f10 	tst.w	r2, #16
 8001d84:	d04f      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d86:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d88:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d00e      	beq.n	8001dae <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001d98:	d033      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001da0:	d12a      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8001da2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d03e      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8001da8:	4620      	mov	r0, r4
 8001daa:	4798      	blx	r3
 8001dac:	e03b      	b.n	8001e26 <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dae:	6822      	ldr	r2, [r4, #0]
 8001db0:	6813      	ldr	r3, [r2, #0]
 8001db2:	f023 0316 	bic.w	r3, r3, #22
 8001db6:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001db8:	6822      	ldr	r2, [r4, #0]
 8001dba:	6953      	ldr	r3, [r2, #20]
 8001dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dc0:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dc4:	b1a3      	cbz	r3, 8001df0 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc6:	6822      	ldr	r2, [r4, #0]
 8001dc8:	6813      	ldr	r3, [r2, #0]
 8001dca:	f023 0308 	bic.w	r3, r3, #8
 8001dce:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001dd2:	233f      	movs	r3, #63	@ 0x3f
 8001dd4:	4093      	lsls	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001dde:	2300      	movs	r3, #0
 8001de0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001de4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03f      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8001dea:	4620      	mov	r0, r4
 8001dec:	4798      	blx	r3
        return;
 8001dee:	e03c      	b.n	8001e6a <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1e7      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0x12a>
 8001df6:	e7eb      	b.n	8001dd0 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8001df8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001dfa:	b1a3      	cbz	r3, 8001e26 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	4798      	blx	r3
 8001e00:	e011      	b.n	8001e26 <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001e08:	d109      	bne.n	8001e1e <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	f022 0210 	bic.w	r2, r2, #16
 8001e10:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001e1e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001e20:	b10b      	cbz	r3, 8001e26 <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8001e22:	4620      	mov	r0, r4
 8001e24:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e28:	b1fb      	cbz	r3, 8001e6a <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e2a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e2c:	f013 0f01 	tst.w	r3, #1
 8001e30:	d017      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e32:	2305      	movs	r3, #5
 8001e34:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	6813      	ldr	r3, [r2, #0]
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001e42:	9b01      	ldr	r3, [sp, #4]
 8001e44:	3301      	adds	r3, #1
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	42ab      	cmp	r3, r5
 8001e4a:	d804      	bhi.n	8001e56 <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f013 0f01 	tst.w	r3, #1
 8001e54:	d1f5      	bne.n	8001e42 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001e62:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001e64:	b10b      	cbz	r3, 8001e6a <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 8001e66:	4620      	mov	r0, r4
 8001e68:	4798      	blx	r3
}
 8001e6a:	b003      	add	sp, #12
 8001e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000000c 	.word	0x2000000c
 8001e74:	1b4e81b5 	.word	0x1b4e81b5

08001e78 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2b0f      	cmp	r3, #15
 8001e7c:	f200 80e3 	bhi.w	8002046 <HAL_GPIO_Init+0x1ce>
{
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	e065      	b.n	8001f52 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e88:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001e8c:	2403      	movs	r4, #3
 8001e8e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e92:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	68cc      	ldr	r4, [r1, #12]
 8001e98:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e9c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001e9e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea6:	684a      	ldr	r2, [r1, #4]
 8001ea8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001eac:	409a      	lsls	r2, r3
 8001eae:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001eb0:	6042      	str	r2, [r0, #4]
 8001eb2:	e05c      	b.n	8001f6e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb4:	08dc      	lsrs	r4, r3, #3
 8001eb6:	3408      	adds	r4, #8
 8001eb8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ebc:	f003 0507 	and.w	r5, r3, #7
 8001ec0:	00ad      	lsls	r5, r5, #2
 8001ec2:	f04f 0e0f 	mov.w	lr, #15
 8001ec6:	fa0e fe05 	lsl.w	lr, lr, r5
 8001eca:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ece:	690a      	ldr	r2, [r1, #16]
 8001ed0:	40aa      	lsls	r2, r5
 8001ed2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001ed6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001eda:	e05c      	b.n	8001f96 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001edc:	2206      	movs	r2, #6
 8001ede:	e000      	b.n	8001ee2 <HAL_GPIO_Init+0x6a>
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ee6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee8:	3402      	adds	r4, #2
 8001eea:	4d57      	ldr	r5, [pc, #348]	@ (8002048 <HAL_GPIO_Init+0x1d0>)
 8001eec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef0:	4a56      	ldr	r2, [pc, #344]	@ (800204c <HAL_GPIO_Init+0x1d4>)
 8001ef2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	ea6f 020c 	mvn.w	r2, ip
 8001ef8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efc:	684e      	ldr	r6, [r1, #4]
 8001efe:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001f02:	d001      	beq.n	8001f08 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001f04:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001f08:	4c50      	ldr	r4, [pc, #320]	@ (800204c <HAL_GPIO_Init+0x1d4>)
 8001f0a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001f0c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f12:	684e      	ldr	r6, [r1, #4]
 8001f14:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001f18:	d001      	beq.n	8001f1e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001f1a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001f1e:	4c4b      	ldr	r4, [pc, #300]	@ (800204c <HAL_GPIO_Init+0x1d4>)
 8001f20:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001f22:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f28:	684e      	ldr	r6, [r1, #4]
 8001f2a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001f2e:	d001      	beq.n	8001f34 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001f30:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001f34:	4c45      	ldr	r4, [pc, #276]	@ (800204c <HAL_GPIO_Init+0x1d4>)
 8001f36:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f38:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f3c:	684d      	ldr	r5, [r1, #4]
 8001f3e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001f42:	d001      	beq.n	8001f48 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001f44:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001f48:	4c40      	ldr	r4, [pc, #256]	@ (800204c <HAL_GPIO_Init+0x1d4>)
 8001f4a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	d877      	bhi.n	8002042 <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8001f52:	2201      	movs	r2, #1
 8001f54:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f56:	680c      	ldr	r4, [r1, #0]
 8001f58:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001f5c:	ea32 0404 	bics.w	r4, r2, r4
 8001f60:	d1f4      	bne.n	8001f4c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	684c      	ldr	r4, [r1, #4]
 8001f64:	f004 0403 	and.w	r4, r4, #3
 8001f68:	3c01      	subs	r4, #1
 8001f6a:	2c01      	cmp	r4, #1
 8001f6c:	d98b      	bls.n	8001e86 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6e:	684a      	ldr	r2, [r1, #4]
 8001f70:	f002 0203 	and.w	r2, r2, #3
 8001f74:	2a03      	cmp	r2, #3
 8001f76:	d009      	beq.n	8001f8c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001f78:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7a:	005d      	lsls	r5, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	40aa      	lsls	r2, r5
 8001f80:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	688a      	ldr	r2, [r1, #8]
 8001f86:	40aa      	lsls	r2, r5
 8001f88:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001f8a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8c:	684a      	ldr	r2, [r1, #4]
 8001f8e:	f002 0203 	and.w	r2, r2, #3
 8001f92:	2a02      	cmp	r2, #2
 8001f94:	d08e      	beq.n	8001eb4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001f96:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f98:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fa2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa6:	684a      	ldr	r2, [r1, #4]
 8001fa8:	f002 0203 	and.w	r2, r2, #3
 8001fac:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fb0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001fb2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb4:	684a      	ldr	r2, [r1, #4]
 8001fb6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001fba:	d0c7      	beq.n	8001f4c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	9201      	str	r2, [sp, #4]
 8001fc0:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <HAL_GPIO_Init+0x1d8>)
 8001fc2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001fc4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001fc8:	6454      	str	r4, [r2, #68]	@ 0x44
 8001fca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fcc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001fd0:	9201      	str	r2, [sp, #4]
 8001fd2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd4:	089c      	lsrs	r4, r3, #2
 8001fd6:	1ca5      	adds	r5, r4, #2
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002048 <HAL_GPIO_Init+0x1d0>)
 8001fda:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fde:	f003 0e03 	and.w	lr, r3, #3
 8001fe2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fec:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff0:	4a18      	ldr	r2, [pc, #96]	@ (8002054 <HAL_GPIO_Init+0x1dc>)
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	f43f af74 	beq.w	8001ee0 <HAL_GPIO_Init+0x68>
 8001ff8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ffc:	4290      	cmp	r0, r2
 8001ffe:	d016      	beq.n	800202e <HAL_GPIO_Init+0x1b6>
 8002000:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002004:	4290      	cmp	r0, r2
 8002006:	d014      	beq.n	8002032 <HAL_GPIO_Init+0x1ba>
 8002008:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800200c:	4290      	cmp	r0, r2
 800200e:	d012      	beq.n	8002036 <HAL_GPIO_Init+0x1be>
 8002010:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002014:	4290      	cmp	r0, r2
 8002016:	d010      	beq.n	800203a <HAL_GPIO_Init+0x1c2>
 8002018:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800201c:	4290      	cmp	r0, r2
 800201e:	d00e      	beq.n	800203e <HAL_GPIO_Init+0x1c6>
 8002020:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002024:	4290      	cmp	r0, r2
 8002026:	f43f af59 	beq.w	8001edc <HAL_GPIO_Init+0x64>
 800202a:	2207      	movs	r2, #7
 800202c:	e759      	b.n	8001ee2 <HAL_GPIO_Init+0x6a>
 800202e:	2201      	movs	r2, #1
 8002030:	e757      	b.n	8001ee2 <HAL_GPIO_Init+0x6a>
 8002032:	2202      	movs	r2, #2
 8002034:	e755      	b.n	8001ee2 <HAL_GPIO_Init+0x6a>
 8002036:	2203      	movs	r2, #3
 8002038:	e753      	b.n	8001ee2 <HAL_GPIO_Init+0x6a>
 800203a:	2204      	movs	r2, #4
 800203c:	e751      	b.n	8001ee2 <HAL_GPIO_Init+0x6a>
 800203e:	2205      	movs	r2, #5
 8002040:	e74f      	b.n	8001ee2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8002042:	b002      	add	sp, #8
 8002044:	bd70      	pop	{r4, r5, r6, pc}
 8002046:	4770      	bx	lr
 8002048:	40013800 	.word	0x40013800
 800204c:	40013c00 	.word	0x40013c00
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000

08002058 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002058:	b10a      	cbz	r2, 800205e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205a:	6181      	str	r1, [r0, #24]
 800205c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800205e:	0409      	lsls	r1, r1, #16
 8002060:	6181      	str	r1, [r0, #24]
  }
}
 8002062:	4770      	bx	lr

08002064 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002064:	2800      	cmp	r0, #0
 8002066:	f000 80cc 	beq.w	8002202 <HAL_I2C_Init+0x19e>
{
 800206a:	b570      	push	{r4, r5, r6, lr}
 800206c:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002072:	2b00      	cmp	r3, #0
 8002074:	d077      	beq.n	8002166 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002076:	2324      	movs	r3, #36	@ 0x24
 8002078:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800207c:	6822      	ldr	r2, [r4, #0]
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002086:	6822      	ldr	r2, [r4, #0]
 8002088:	6813      	ldr	r3, [r2, #0]
 800208a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800208e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002090:	6822      	ldr	r2, [r4, #0]
 8002092:	6813      	ldr	r3, [r2, #0]
 8002094:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002098:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800209a:	f000 f999 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800209e:	6862      	ldr	r2, [r4, #4]
 80020a0:	4b5a      	ldr	r3, [pc, #360]	@ (800220c <HAL_I2C_Init+0x1a8>)
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d864      	bhi.n	8002170 <HAL_I2C_Init+0x10c>
 80020a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002210 <HAL_I2C_Init+0x1ac>)
 80020a8:	4298      	cmp	r0, r3
 80020aa:	bf8c      	ite	hi
 80020ac:	2300      	movhi	r3, #0
 80020ae:	2301      	movls	r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f040 80a8 	bne.w	8002206 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020b6:	4957      	ldr	r1, [pc, #348]	@ (8002214 <HAL_I2C_Init+0x1b0>)
 80020b8:	fba1 3100 	umull	r3, r1, r1, r0
 80020bc:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020be:	6825      	ldr	r5, [r4, #0]
 80020c0:	686a      	ldr	r2, [r5, #4]
 80020c2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80020c6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80020ca:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020cc:	6821      	ldr	r1, [r4, #0]
 80020ce:	6a0a      	ldr	r2, [r1, #32]
 80020d0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80020d4:	6866      	ldr	r6, [r4, #4]
 80020d6:	4d4d      	ldr	r5, [pc, #308]	@ (800220c <HAL_I2C_Init+0x1a8>)
 80020d8:	42ae      	cmp	r6, r5
 80020da:	d84f      	bhi.n	800217c <HAL_I2C_Init+0x118>
 80020dc:	3301      	adds	r3, #1
 80020de:	4313      	orrs	r3, r2
 80020e0:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e2:	6821      	ldr	r1, [r4, #0]
 80020e4:	69ca      	ldr	r2, [r1, #28]
 80020e6:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80020ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020ee:	6865      	ldr	r5, [r4, #4]
 80020f0:	4b46      	ldr	r3, [pc, #280]	@ (800220c <HAL_I2C_Init+0x1a8>)
 80020f2:	429d      	cmp	r5, r3
 80020f4:	d84c      	bhi.n	8002190 <HAL_I2C_Init+0x12c>
 80020f6:	1e43      	subs	r3, r0, #1
 80020f8:	006d      	lsls	r5, r5, #1
 80020fa:	fbb3 f3f5 	udiv	r3, r3, r5
 80020fe:	3301      	adds	r3, #1
 8002100:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002104:	4203      	tst	r3, r0
 8002106:	d078      	beq.n	80021fa <HAL_I2C_Init+0x196>
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	431a      	orrs	r2, r3
 800210e:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002110:	6821      	ldr	r1, [r4, #0]
 8002112:	680b      	ldr	r3, [r1, #0]
 8002114:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002118:	69e2      	ldr	r2, [r4, #28]
 800211a:	6a20      	ldr	r0, [r4, #32]
 800211c:	4302      	orrs	r2, r0
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002122:	6821      	ldr	r1, [r4, #0]
 8002124:	688b      	ldr	r3, [r1, #8]
 8002126:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800212a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800212e:	6922      	ldr	r2, [r4, #16]
 8002130:	68e0      	ldr	r0, [r4, #12]
 8002132:	4302      	orrs	r2, r0
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002138:	6821      	ldr	r1, [r4, #0]
 800213a:	68cb      	ldr	r3, [r1, #12]
 800213c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002140:	6962      	ldr	r2, [r4, #20]
 8002142:	69a0      	ldr	r0, [r4, #24]
 8002144:	4302      	orrs	r2, r0
 8002146:	4313      	orrs	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214a:	6822      	ldr	r2, [r4, #0]
 800214c:	6813      	ldr	r3, [r2, #0]
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002154:	2000      	movs	r0, #0
 8002156:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002158:	2320      	movs	r3, #32
 800215a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800215e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8002164:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002166:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800216a:	f7fe fe01 	bl	8000d70 <HAL_I2C_MspInit>
 800216e:	e782      	b.n	8002076 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002170:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <HAL_I2C_Init+0x1b4>)
 8002172:	4298      	cmp	r0, r3
 8002174:	bf8c      	ite	hi
 8002176:	2300      	movhi	r3, #0
 8002178:	2301      	movls	r3, #1
 800217a:	e799      	b.n	80020b0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800217c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002180:	fb05 f303 	mul.w	r3, r5, r3
 8002184:	4d25      	ldr	r5, [pc, #148]	@ (800221c <HAL_I2C_Init+0x1b8>)
 8002186:	fba5 5303 	umull	r5, r3, r5, r3
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	3301      	adds	r3, #1
 800218e:	e7a6      	b.n	80020de <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002190:	68a6      	ldr	r6, [r4, #8]
 8002192:	b9be      	cbnz	r6, 80021c4 <HAL_I2C_Init+0x160>
 8002194:	1e43      	subs	r3, r0, #1
 8002196:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800219a:	fbb3 f3fc 	udiv	r3, r3, ip
 800219e:	3301      	adds	r3, #1
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	bb43      	cbnz	r3, 80021fe <HAL_I2C_Init+0x19a>
 80021ac:	b9c6      	cbnz	r6, 80021e0 <HAL_I2C_Init+0x17c>
 80021ae:	1e43      	subs	r3, r0, #1
 80021b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021b4:	fbb3 f3f5 	udiv	r3, r3, r5
 80021b8:	3301      	adds	r3, #1
 80021ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021c2:	e7a3      	b.n	800210c <HAL_I2C_Init+0xa8>
 80021c4:	1e43      	subs	r3, r0, #1
 80021c6:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80021ca:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80021ce:	fbb3 f3fc 	udiv	r3, r3, ip
 80021d2:	3301      	adds	r3, #1
 80021d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	e7e4      	b.n	80021aa <HAL_I2C_Init+0x146>
 80021e0:	1e43      	subs	r3, r0, #1
 80021e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80021e6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80021ea:	fbb3 f3f5 	udiv	r3, r3, r5
 80021ee:	3301      	adds	r3, #1
 80021f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021f8:	e788      	b.n	800210c <HAL_I2C_Init+0xa8>
 80021fa:	2304      	movs	r3, #4
 80021fc:	e786      	b.n	800210c <HAL_I2C_Init+0xa8>
 80021fe:	2301      	movs	r3, #1
 8002200:	e784      	b.n	800210c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002202:	2001      	movs	r0, #1
}
 8002204:	4770      	bx	lr
    return HAL_ERROR;
 8002206:	2001      	movs	r0, #1
 8002208:	e7ac      	b.n	8002164 <HAL_I2C_Init+0x100>
 800220a:	bf00      	nop
 800220c:	000186a0 	.word	0x000186a0
 8002210:	001e847f 	.word	0x001e847f
 8002214:	431bde83 	.word	0x431bde83
 8002218:	003d08ff 	.word	0x003d08ff
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b500      	push	{lr}
 8002222:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002224:	2200      	movs	r2, #0
 8002226:	9200      	str	r2, [sp, #0]
 8002228:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <HAL_MspInit+0x40>)
 800222a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800222c:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002230:	6459      	str	r1, [r3, #68]	@ 0x44
 8002232:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002234:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8002238:	9100      	str	r1, [sp, #0]
 800223a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	9201      	str	r2, [sp, #4]
 800223e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002240:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002244:	6419      	str	r1, [r3, #64]	@ 0x40
 8002246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002250:	210f      	movs	r1, #15
 8002252:	f06f 0001 	mvn.w	r0, #1
 8002256:	f7ff fb9b 	bl	8001990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225a:	b003      	add	sp, #12
 800225c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002260:	40023800 	.word	0x40023800

08002264 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002264:	2800      	cmp	r0, #0
 8002266:	f000 809b 	beq.w	80023a0 <HAL_RCC_ClockConfig+0x13c>
{
 800226a:	b570      	push	{r4, r5, r6, lr}
 800226c:	460d      	mov	r5, r1
 800226e:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b4f      	ldr	r3, [pc, #316]	@ (80023b0 <HAL_RCC_ClockConfig+0x14c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	428b      	cmp	r3, r1
 800227a:	d208      	bcs.n	800228e <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227c:	b2cb      	uxtb	r3, r1
 800227e:	4a4c      	ldr	r2, [pc, #304]	@ (80023b0 <HAL_RCC_ClockConfig+0x14c>)
 8002280:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	6813      	ldr	r3, [r2, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	428b      	cmp	r3, r1
 800228a:	f040 808b 	bne.w	80023a4 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	f013 0f02 	tst.w	r3, #2
 8002294:	d017      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002296:	f013 0f04 	tst.w	r3, #4
 800229a:	d004      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4a45      	ldr	r2, [pc, #276]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 800229e:	6893      	ldr	r3, [r2, #8]
 80022a0:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022a4:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	f013 0f08 	tst.w	r3, #8
 80022ac:	d004      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ae:	4a41      	ldr	r2, [pc, #260]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 80022b0:	6893      	ldr	r3, [r2, #8]
 80022b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4a3e      	ldr	r2, [pc, #248]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 80022ba:	6893      	ldr	r3, [r2, #8]
 80022bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022c0:	68a1      	ldr	r1, [r4, #8]
 80022c2:	430b      	orrs	r3, r1
 80022c4:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	f013 0f01 	tst.w	r3, #1
 80022cc:	d032      	beq.n	8002334 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	6863      	ldr	r3, [r4, #4]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d021      	beq.n	8002318 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d4:	1e9a      	subs	r2, r3, #2
 80022d6:	2a01      	cmp	r2, #1
 80022d8:	d925      	bls.n	8002326 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4a36      	ldr	r2, [pc, #216]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f012 0f02 	tst.w	r2, #2
 80022e2:	d061      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e4:	4933      	ldr	r1, [pc, #204]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 80022e6:	688a      	ldr	r2, [r1, #8]
 80022e8:	f022 0203 	bic.w	r2, r2, #3
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f0:	f7ff f89e 	bl	8001430 <HAL_GetTick>
 80022f4:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2f      	ldr	r3, [pc, #188]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	6862      	ldr	r2, [r4, #4]
 8002300:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002304:	d016      	beq.n	8002334 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002306:	f7ff f893 	bl	8001430 <HAL_GetTick>
 800230a:	1b80      	subs	r0, r0, r6
 800230c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002310:	4298      	cmp	r0, r3
 8002312:	d9f0      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8002314:	2003      	movs	r0, #3
 8002316:	e042      	b.n	800239e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002318:	4a26      	ldr	r2, [pc, #152]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002320:	d1e0      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002322:	2001      	movs	r0, #1
 8002324:	e03b      	b.n	800239e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4a23      	ldr	r2, [pc, #140]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800232e:	d1d9      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002330:	2001      	movs	r0, #1
 8002332:	e034      	b.n	800239e <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <HAL_RCC_ClockConfig+0x14c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	42ab      	cmp	r3, r5
 800233e:	d907      	bls.n	8002350 <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002340:	b2ea      	uxtb	r2, r5
 8002342:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <HAL_RCC_ClockConfig+0x14c>)
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	42ab      	cmp	r3, r5
 800234e:	d12d      	bne.n	80023ac <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	f013 0f04 	tst.w	r3, #4
 8002356:	d006      	beq.n	8002366 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4a16      	ldr	r2, [pc, #88]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 800235a:	6893      	ldr	r3, [r2, #8]
 800235c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002360:	68e1      	ldr	r1, [r4, #12]
 8002362:	430b      	orrs	r3, r1
 8002364:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	f013 0f08 	tst.w	r3, #8
 800236c:	d007      	beq.n	800237e <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236e:	4a11      	ldr	r2, [pc, #68]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 8002370:	6893      	ldr	r3, [r2, #8]
 8002372:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002376:	6921      	ldr	r1, [r4, #16]
 8002378:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800237c:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f865 	bl	800244c <HAL_RCC_GetSysClockFreq>
 8002382:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <HAL_RCC_ClockConfig+0x150>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800238a:	4a0b      	ldr	r2, [pc, #44]	@ (80023b8 <HAL_RCC_ClockConfig+0x154>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	40d8      	lsrs	r0, r3
 8002390:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_RCC_ClockConfig+0x158>)
 8002392:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002394:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <HAL_RCC_ClockConfig+0x15c>)
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	f001 fa36 	bl	8003808 <HAL_InitTick>

  return HAL_OK;
 800239c:	2000      	movs	r0, #0
}
 800239e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80023a0:	2001      	movs	r0, #1
}
 80023a2:	4770      	bx	lr
      return HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
 80023a6:	e7fa      	b.n	800239e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
 80023aa:	e7f8      	b.n	800239e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80023ac:	2001      	movs	r0, #1
 80023ae:	e7f6      	b.n	800239e <HAL_RCC_ClockConfig+0x13a>
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	08005260 	.word	0x08005260
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	20000008 	.word	0x20000008

080023c4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80023c4:	4b01      	ldr	r3, [pc, #4]	@ (80023cc <HAL_RCC_GetHCLKFreq+0x8>)
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	2000000c 	.word	0x2000000c

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d2:	f7ff fff7 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023d6:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80023de:	4a03      	ldr	r2, [pc, #12]	@ (80023ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80023e2:	40d8      	lsrs	r0, r3
 80023e4:	bd08      	pop	{r3, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	08005258 	.word	0x08005258

080023f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023f2:	f7ff ffe7 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023f6:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <HAL_RCC_GetPCLK2Freq+0x18>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80023fe:	4a03      	ldr	r2, [pc, #12]	@ (800240c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
}
 8002402:	40d8      	lsrs	r0, r3
 8002404:	bd08      	pop	{r3, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	08005258 	.word	0x08005258

08002410 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002410:	230f      	movs	r3, #15
 8002412:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCC_GetClockConfig+0x34>)
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	f002 0203 	and.w	r2, r2, #3
 800241c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002424:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800242c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002436:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002438:	4b03      	ldr	r3, [pc, #12]	@ (8002448 <HAL_RCC_GetClockConfig+0x38>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	600b      	str	r3, [r1, #0]
}
 8002442:	4770      	bx	lr
 8002444:	40023800 	.word	0x40023800
 8002448:	40023c00 	.word	0x40023c00

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800244e:	4b5e      	ldr	r3, [pc, #376]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x16>
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d05b      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0xca>
 800245e:	485b      	ldr	r0, [pc, #364]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002460:	e033      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x7e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002462:	4b59      	ldr	r3, [pc, #356]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002470:	d02c      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002472:	4b55      	ldr	r3, [pc, #340]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002474:	6858      	ldr	r0, [r3, #4]
 8002476:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800247a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800247e:	ebbc 0c00 	subs.w	ip, ip, r0
 8002482:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002486:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800248a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800248e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002492:	ebb1 010c 	subs.w	r1, r1, ip
 8002496:	eb63 030e 	sbc.w	r3, r3, lr
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024a0:	00c9      	lsls	r1, r1, #3
 80024a2:	eb11 0c00 	adds.w	ip, r1, r0
 80024a6:	f143 0300 	adc.w	r3, r3, #0
 80024aa:	0299      	lsls	r1, r3, #10
 80024ac:	2300      	movs	r3, #0
 80024ae:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80024b2:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80024b6:	f7fd fe8b 	bl	80001d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024ba:	4b43      	ldr	r3, [pc, #268]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x17c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80024c6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024ca:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024cc:	4b3e      	ldr	r3, [pc, #248]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x17c>)
 80024ce:	6858      	ldr	r0, [r3, #4]
 80024d0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80024d4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80024d8:	ebbc 0c00 	subs.w	ip, ip, r0
 80024dc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80024e0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80024e4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80024e8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80024ec:	ebb1 010c 	subs.w	r1, r1, ip
 80024f0:	eb63 030e 	sbc.w	r3, r3, lr
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024fa:	00c9      	lsls	r1, r1, #3
 80024fc:	eb11 0c00 	adds.w	ip, r1, r0
 8002500:	f143 0300 	adc.w	r3, r3, #0
 8002504:	0299      	lsls	r1, r3, #10
 8002506:	2300      	movs	r3, #0
 8002508:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800250c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002510:	f7fd fe5e 	bl	80001d0 <__aeabi_uldivmod>
 8002514:	e7d1      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x6e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002516:	4b2c      	ldr	r3, [pc, #176]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002524:	d02a      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x130>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002526:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002528:	6858      	ldr	r0, [r3, #4]
 800252a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800252e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002532:	ebbc 0c00 	subs.w	ip, ip, r0
 8002536:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800253a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800253e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002542:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002546:	ebb1 010c 	subs.w	r1, r1, ip
 800254a:	eb63 030e 	sbc.w	r3, r3, lr
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002554:	00c9      	lsls	r1, r1, #3
 8002556:	eb11 0c00 	adds.w	ip, r1, r0
 800255a:	f143 0300 	adc.w	r3, r3, #0
 800255e:	0299      	lsls	r1, r3, #10
 8002560:	2300      	movs	r3, #0
 8002562:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002566:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800256a:	f7fd fe31 	bl	80001d0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800256e:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8002576:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800257a:	e7a6      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x7e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257c:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x17c>)
 800257e:	6858      	ldr	r0, [r3, #4]
 8002580:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002584:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002588:	ebbc 0c00 	subs.w	ip, ip, r0
 800258c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002590:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002594:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002598:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800259c:	ebb1 010c 	subs.w	r1, r1, ip
 80025a0:	eb63 030e 	sbc.w	r3, r3, lr
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025aa:	00c9      	lsls	r1, r1, #3
 80025ac:	eb11 0c00 	adds.w	ip, r1, r0
 80025b0:	f143 0300 	adc.w	r3, r3, #0
 80025b4:	0299      	lsls	r1, r3, #10
 80025b6:	2300      	movs	r3, #0
 80025b8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80025bc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80025c0:	f7fd fe06 	bl	80001d0 <__aeabi_uldivmod>
 80025c4:	e7d3      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x122>
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	00f42400 	.word	0x00f42400

080025d0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d0:	2800      	cmp	r0, #0
 80025d2:	f000 8201 	beq.w	80029d8 <HAL_RCC_OscConfig+0x408>
{
 80025d6:	b570      	push	{r4, r5, r6, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025dc:	6803      	ldr	r3, [r0, #0]
 80025de:	f013 0f01 	tst.w	r3, #1
 80025e2:	d041      	beq.n	8002668 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025e4:	4b99      	ldr	r3, [pc, #612]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d032      	beq.n	8002656 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025f0:	4b96      	ldr	r3, [pc, #600]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
        || \
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d027      	beq.n	800264c <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fc:	4b93      	ldr	r3, [pc, #588]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002604:	2b0c      	cmp	r3, #12
 8002606:	d059      	beq.n	80026bc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002608:	6863      	ldr	r3, [r4, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260e:	d05b      	beq.n	80026c8 <HAL_RCC_OscConfig+0xf8>
 8002610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002614:	d05e      	beq.n	80026d4 <HAL_RCC_OscConfig+0x104>
 8002616:	4b8d      	ldr	r3, [pc, #564]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002626:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002628:	6863      	ldr	r3, [r4, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d05c      	beq.n	80026e8 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe feff 	bl	8001430 <HAL_GetTick>
 8002632:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002634:	4b85      	ldr	r3, [pc, #532]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800263c:	d114      	bne.n	8002668 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263e:	f7fe fef7 	bl	8001430 <HAL_GetTick>
 8002642:	1b40      	subs	r0, r0, r5
 8002644:	2864      	cmp	r0, #100	@ 0x64
 8002646:	d9f5      	bls.n	8002634 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8002648:	2003      	movs	r0, #3
 800264a:	e1cc      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800264c:	4b7f      	ldr	r3, [pc, #508]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002654:	d0d2      	beq.n	80025fc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002656:	4b7d      	ldr	r3, [pc, #500]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800265e:	d003      	beq.n	8002668 <HAL_RCC_OscConfig+0x98>
 8002660:	6863      	ldr	r3, [r4, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 81ba 	beq.w	80029dc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	f013 0f02 	tst.w	r3, #2
 800266e:	d060      	beq.n	8002732 <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002670:	4b76      	ldr	r3, [pc, #472]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f013 0f0c 	tst.w	r3, #12
 8002678:	d04a      	beq.n	8002710 <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800267a:	4b74      	ldr	r3, [pc, #464]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002682:	2b08      	cmp	r3, #8
 8002684:	d03f      	beq.n	8002706 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b71      	ldr	r3, [pc, #452]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d069      	beq.n	8002766 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002692:	68e3      	ldr	r3, [r4, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d075      	beq.n	8002784 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002698:	4b6d      	ldr	r3, [pc, #436]	@ (8002850 <HAL_RCC_OscConfig+0x280>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe fec7 	bl	8001430 <HAL_GetTick>
 80026a2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	4b69      	ldr	r3, [pc, #420]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f013 0f02 	tst.w	r3, #2
 80026ac:	d161      	bne.n	8002772 <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ae:	f7fe febf 	bl	8001430 <HAL_GetTick>
 80026b2:	1b40      	subs	r0, r0, r5
 80026b4:	2802      	cmp	r0, #2
 80026b6:	d9f5      	bls.n	80026a4 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80026b8:	2003      	movs	r0, #3
 80026ba:	e194      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026bc:	4b63      	ldr	r3, [pc, #396]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80026c4:	d0a0      	beq.n	8002608 <HAL_RCC_OscConfig+0x38>
 80026c6:	e7c6      	b.n	8002656 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c8:	4a60      	ldr	r2, [pc, #384]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80026ca:	6813      	ldr	r3, [r2, #0]
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e7a9      	b.n	8002628 <HAL_RCC_OscConfig+0x58>
 80026d4:	4b5d      	ldr	r3, [pc, #372]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e79f      	b.n	8002628 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 80026e8:	f7fe fea2 	bl	8001430 <HAL_GetTick>
 80026ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	4b57      	ldr	r3, [pc, #348]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80026f6:	d0b7      	beq.n	8002668 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fe9a 	bl	8001430 <HAL_GetTick>
 80026fc:	1b40      	subs	r0, r0, r5
 80026fe:	2864      	cmp	r0, #100	@ 0x64
 8002700:	d9f5      	bls.n	80026ee <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002702:	2003      	movs	r0, #3
 8002704:	e16f      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002706:	4b51      	ldr	r3, [pc, #324]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800270e:	d1ba      	bne.n	8002686 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002710:	4b4e      	ldr	r3, [pc, #312]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f013 0f02 	tst.w	r3, #2
 8002718:	d003      	beq.n	8002722 <HAL_RCC_OscConfig+0x152>
 800271a:	68e3      	ldr	r3, [r4, #12]
 800271c:	2b01      	cmp	r3, #1
 800271e:	f040 815f 	bne.w	80029e0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002722:	4a4a      	ldr	r2, [pc, #296]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002724:	6813      	ldr	r3, [r2, #0]
 8002726:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800272a:	6921      	ldr	r1, [r4, #16]
 800272c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002730:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	f013 0f08 	tst.w	r3, #8
 8002738:	d049      	beq.n	80027ce <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800273a:	6963      	ldr	r3, [r4, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d033      	beq.n	80027a8 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002740:	4b43      	ldr	r3, [pc, #268]	@ (8002850 <HAL_RCC_OscConfig+0x280>)
 8002742:	2201      	movs	r2, #1
 8002744:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fe72 	bl	8001430 <HAL_GetTick>
 800274c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b3f      	ldr	r3, [pc, #252]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002752:	f013 0f02 	tst.w	r3, #2
 8002756:	d13a      	bne.n	80027ce <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe fe6a 	bl	8001430 <HAL_GetTick>
 800275c:	1b40      	subs	r0, r0, r5
 800275e:	2802      	cmp	r0, #2
 8002760:	d9f5      	bls.n	800274e <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8002762:	2003      	movs	r0, #3
 8002764:	e13f      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002766:	4b39      	ldr	r3, [pc, #228]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800276e:	d190      	bne.n	8002692 <HAL_RCC_OscConfig+0xc2>
 8002770:	e7ce      	b.n	8002710 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4a36      	ldr	r2, [pc, #216]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002774:	6813      	ldr	r3, [r2, #0]
 8002776:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800277a:	6921      	ldr	r1, [r4, #16]
 800277c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e7d6      	b.n	8002732 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002784:	4b32      	ldr	r3, [pc, #200]	@ (8002850 <HAL_RCC_OscConfig+0x280>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800278a:	f7fe fe51 	bl	8001430 <HAL_GetTick>
 800278e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002790:	4b2e      	ldr	r3, [pc, #184]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f013 0f02 	tst.w	r3, #2
 8002798:	d0cb      	beq.n	8002732 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279a:	f7fe fe49 	bl	8001430 <HAL_GetTick>
 800279e:	1b40      	subs	r0, r0, r5
 80027a0:	2802      	cmp	r0, #2
 80027a2:	d9f5      	bls.n	8002790 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 80027a4:	2003      	movs	r0, #3
 80027a6:	e11e      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a8:	4b29      	ldr	r3, [pc, #164]	@ (8002850 <HAL_RCC_OscConfig+0x280>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fe3e 	bl	8001430 <HAL_GetTick>
 80027b4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b6:	4b25      	ldr	r3, [pc, #148]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ba:	f013 0f02 	tst.w	r3, #2
 80027be:	d006      	beq.n	80027ce <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe fe36 	bl	8001430 <HAL_GetTick>
 80027c4:	1b40      	subs	r0, r0, r5
 80027c6:	2802      	cmp	r0, #2
 80027c8:	d9f5      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 80027ca:	2003      	movs	r0, #3
 80027cc:	e10b      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	f013 0f04 	tst.w	r3, #4
 80027d4:	d076      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b1d      	ldr	r3, [pc, #116]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80027de:	d133      	bne.n	8002848 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	4b19      	ldr	r3, [pc, #100]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 80027e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027e8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80027ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80027f8:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	4b16      	ldr	r3, [pc, #88]	@ (8002854 <HAL_RCC_OscConfig+0x284>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002802:	d029      	beq.n	8002858 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	68a3      	ldr	r3, [r4, #8]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d03a      	beq.n	8002880 <HAL_RCC_OscConfig+0x2b0>
 800280a:	2b05      	cmp	r3, #5
 800280c:	d03e      	beq.n	800288c <HAL_RCC_OscConfig+0x2bc>
 800280e:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 8002810:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	671a      	str	r2, [r3, #112]	@ 0x70
 8002818:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800281a:	f022 0204 	bic.w	r2, r2, #4
 800281e:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002820:	68a3      	ldr	r3, [r4, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7fe fe03 	bl	8001430 <HAL_GetTick>
 800282a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b07      	ldr	r3, [pc, #28]	@ (800284c <HAL_RCC_OscConfig+0x27c>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002830:	f013 0f02 	tst.w	r3, #2
 8002834:	d145      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fdfb 	bl	8001430 <HAL_GetTick>
 800283a:	1b80      	subs	r0, r0, r6
 800283c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002840:	4298      	cmp	r0, r3
 8002842:	d9f3      	bls.n	800282c <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8002844:	2003      	movs	r0, #3
 8002846:	e0ce      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8002848:	2500      	movs	r5, #0
 800284a:	e7d6      	b.n	80027fa <HAL_RCC_OscConfig+0x22a>
 800284c:	40023800 	.word	0x40023800
 8002850:	42470000 	.word	0x42470000
 8002854:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002858:	4a6b      	ldr	r2, [pc, #428]	@ (8002a08 <HAL_RCC_OscConfig+0x438>)
 800285a:	6813      	ldr	r3, [r2, #0]
 800285c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002860:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002862:	f7fe fde5 	bl	8001430 <HAL_GetTick>
 8002866:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b67      	ldr	r3, [pc, #412]	@ (8002a08 <HAL_RCC_OscConfig+0x438>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002870:	d1c8      	bne.n	8002804 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002872:	f7fe fddd 	bl	8001430 <HAL_GetTick>
 8002876:	1b80      	subs	r0, r0, r6
 8002878:	2802      	cmp	r0, #2
 800287a:	d9f5      	bls.n	8002868 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 800287c:	2003      	movs	r0, #3
 800287e:	e0b2      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	4a62      	ldr	r2, [pc, #392]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 8002882:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6713      	str	r3, [r2, #112]	@ 0x70
 800288a:	e7c9      	b.n	8002820 <HAL_RCC_OscConfig+0x250>
 800288c:	4b5f      	ldr	r3, [pc, #380]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 800288e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002890:	f042 0204 	orr.w	r2, r2, #4
 8002894:	671a      	str	r2, [r3, #112]	@ 0x70
 8002896:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	671a      	str	r2, [r3, #112]	@ 0x70
 800289e:	e7bf      	b.n	8002820 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe fdc6 	bl	8001430 <HAL_GetTick>
 80028a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a6:	4b59      	ldr	r3, [pc, #356]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	f013 0f02 	tst.w	r3, #2
 80028ae:	d008      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b0:	f7fe fdbe 	bl	8001430 <HAL_GetTick>
 80028b4:	1b80      	subs	r0, r0, r6
 80028b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80028ba:	4298      	cmp	r0, r3
 80028bc:	d9f3      	bls.n	80028a6 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80028be:	2003      	movs	r0, #3
 80028c0:	e091      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028c2:	b9ed      	cbnz	r5, 8002900 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c4:	69a3      	ldr	r3, [r4, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 808c 	beq.w	80029e4 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028cc:	4a4f      	ldr	r2, [pc, #316]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 80028ce:	6892      	ldr	r2, [r2, #8]
 80028d0:	f002 020c 	and.w	r2, r2, #12
 80028d4:	2a08      	cmp	r2, #8
 80028d6:	d054      	beq.n	8002982 <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d017      	beq.n	800290c <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002a10 <HAL_RCC_OscConfig+0x440>)
 80028de:	2200      	movs	r2, #0
 80028e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fda5 	bl	8001430 <HAL_GetTick>
 80028e6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e8:	4b48      	ldr	r3, [pc, #288]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80028f0:	d045      	beq.n	800297e <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fd9d 	bl	8001430 <HAL_GetTick>
 80028f6:	1b00      	subs	r0, r0, r4
 80028f8:	2802      	cmp	r0, #2
 80028fa:	d9f5      	bls.n	80028e8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80028fc:	2003      	movs	r0, #3
 80028fe:	e072      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4a42      	ldr	r2, [pc, #264]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 8002902:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	e7db      	b.n	80028c4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800290c:	4b40      	ldr	r3, [pc, #256]	@ (8002a10 <HAL_RCC_OscConfig+0x440>)
 800290e:	2200      	movs	r2, #0
 8002910:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002912:	f7fe fd8d 	bl	8001430 <HAL_GetTick>
 8002916:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002918:	4b3c      	ldr	r3, [pc, #240]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002920:	d006      	beq.n	8002930 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7fe fd85 	bl	8001430 <HAL_GetTick>
 8002926:	1b40      	subs	r0, r0, r5
 8002928:	2802      	cmp	r0, #2
 800292a:	d9f5      	bls.n	8002918 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 800292c:	2003      	movs	r0, #3
 800292e:	e05a      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002930:	69e3      	ldr	r3, [r4, #28]
 8002932:	6a22      	ldr	r2, [r4, #32]
 8002934:	4313      	orrs	r3, r2
 8002936:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002938:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800293c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800293e:	0852      	lsrs	r2, r2, #1
 8002940:	3a01      	subs	r2, #1
 8002942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002946:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002948:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800294c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800294e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002952:	4a2e      	ldr	r2, [pc, #184]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 8002954:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002956:	4b2e      	ldr	r3, [pc, #184]	@ (8002a10 <HAL_RCC_OscConfig+0x440>)
 8002958:	2201      	movs	r2, #1
 800295a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800295c:	f7fe fd68 	bl	8001430 <HAL_GetTick>
 8002960:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fd60 	bl	8001430 <HAL_GetTick>
 8002970:	1b00      	subs	r0, r0, r4
 8002972:	2802      	cmp	r0, #2
 8002974:	d9f5      	bls.n	8002962 <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8002976:	2003      	movs	r0, #3
 8002978:	e035      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800297a:	2000      	movs	r0, #0
 800297c:	e033      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
 800297e:	2000      	movs	r0, #0
 8002980:	e031      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002982:	2b01      	cmp	r3, #1
 8002984:	d031      	beq.n	80029ea <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8002986:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_RCC_OscConfig+0x43c>)
 8002988:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800298e:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002990:	4291      	cmp	r1, r2
 8002992:	d12c      	bne.n	80029ee <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002994:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002998:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299a:	428a      	cmp	r2, r1
 800299c:	d129      	bne.n	80029f2 <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a0:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80029a4:	401a      	ands	r2, r3
 80029a6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80029aa:	d124      	bne.n	80029f6 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80029b0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80029b2:	0852      	lsrs	r2, r2, #1
 80029b4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80029ba:	d11e      	bne.n	80029fa <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029bc:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029c0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80029c6:	d11a      	bne.n	80029fe <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029c8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80029cc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ce:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80029d2:	d116      	bne.n	8002a02 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80029d4:	2000      	movs	r0, #0
 80029d6:	e006      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80029d8:	2001      	movs	r0, #1
}
 80029da:	4770      	bx	lr
        return HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
 80029de:	e002      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80029e0:	2001      	movs	r0, #1
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80029e4:	2000      	movs	r0, #0
}
 80029e6:	b002      	add	sp, #8
 80029e8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80029ea:	2001      	movs	r0, #1
 80029ec:	e7fb      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80029ee:	2001      	movs	r0, #1
 80029f0:	e7f9      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
 80029f2:	2001      	movs	r0, #1
 80029f4:	e7f7      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
 80029f6:	2001      	movs	r0, #1
 80029f8:	e7f5      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
 80029fa:	2001      	movs	r0, #1
 80029fc:	e7f3      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
 80029fe:	2001      	movs	r0, #1
 8002a00:	e7f1      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
 8002a02:	2001      	movs	r0, #1
 8002a04:	e7ef      	b.n	80029e6 <HAL_RCC_OscConfig+0x416>
 8002a06:	bf00      	nop
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	42470000 	.word	0x42470000

08002a14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	4605      	mov	r5, r0
 8002a1c:	4688      	mov	r8, r1
 8002a1e:	4617      	mov	r7, r2
 8002a20:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a22:	f7fe fd05 	bl	8001430 <HAL_GetTick>
 8002a26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002a28:	1a1b      	subs	r3, r3, r0
 8002a2a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002a2e:	f7fe fcff 	bl	8001430 <HAL_GetTick>
 8002a32:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a34:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002a3c:	fb09 f303 	mul.w	r3, r9, r3
 8002a40:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	689c      	ldr	r4, [r3, #8]
 8002a46:	ea38 0404 	bics.w	r4, r8, r4
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	42bb      	cmp	r3, r7
 8002a52:	d03d      	beq.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a54:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002a58:	d0f3      	beq.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a5a:	f7fe fce9 	bl	8001430 <HAL_GetTick>
 8002a5e:	eba0 000a 	sub.w	r0, r0, sl
 8002a62:	4548      	cmp	r0, r9
 8002a64:	d207      	bcs.n	8002a76 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a66:	9a01      	ldr	r2, [sp, #4]
 8002a68:	b102      	cbz	r2, 8002a6c <SPI_WaitFlagStateUntilTimeout+0x58>
 8002a6a:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002a6c:	9b01      	ldr	r3, [sp, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	4691      	mov	r9, r2
 8002a74:	e7e5      	b.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a76:	682a      	ldr	r2, [r5, #0]
 8002a78:	6853      	ldr	r3, [r2, #4]
 8002a7a:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8002a7e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a80:	686b      	ldr	r3, [r5, #4]
 8002a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a86:	d00b      	beq.n	8002aa0 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a88:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a8e:	d014      	beq.n	8002aba <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a96:	2300      	movs	r3, #0
 8002a98:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a9c:	2003      	movs	r0, #3
 8002a9e:	e018      	b.n	8002ad2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa0:	68ab      	ldr	r3, [r5, #8]
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aa6:	d002      	beq.n	8002aae <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aac:	d1ec      	bne.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8002aae:	682a      	ldr	r2, [r5, #0]
 8002ab0:	6813      	ldr	r3, [r2, #0]
 8002ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	e7e6      	b.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8002aba:	682a      	ldr	r2, [r5, #0]
 8002abc:	6813      	ldr	r3, [r2, #0]
 8002abe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	682a      	ldr	r2, [r5, #0]
 8002ac6:	6813      	ldr	r3, [r2, #0]
 8002ac8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e7df      	b.n	8002a90 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8002ad0:	2000      	movs	r0, #0
}
 8002ad2:	b002      	add	sp, #8
 8002ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad8:	2000000c 	.word	0x2000000c

08002adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ae6:	9200      	str	r2, [sp, #0]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	2201      	movs	r2, #1
 8002aec:	2102      	movs	r1, #2
 8002aee:	f7ff ff91 	bl	8002a14 <SPI_WaitFlagStateUntilTimeout>
 8002af2:	b9d0      	cbnz	r0, 8002b2a <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002af4:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <SPI_EndRxTxTransaction+0x78>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a17      	ldr	r2, [pc, #92]	@ (8002b58 <SPI_EndRxTxTransaction+0x7c>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0d5b      	lsrs	r3, r3, #21
 8002b00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b0a:	6863      	ldr	r3, [r4, #4]
 8002b0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b10:	d011      	beq.n	8002b36 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b12:	9b03      	ldr	r3, [sp, #12]
 8002b14:	b13b      	cbz	r3, 8002b26 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8002b16:	9b03      	ldr	r3, [sp, #12]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002b24:	d1f5      	bne.n	8002b12 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8002b26:	b004      	add	sp, #16
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b2c:	f043 0320 	orr.w	r3, r3, #32
 8002b30:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b32:	2003      	movs	r0, #3
 8002b34:	e7f7      	b.n	8002b26 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b36:	9600      	str	r6, [sp, #0]
 8002b38:	462b      	mov	r3, r5
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2180      	movs	r1, #128	@ 0x80
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7ff ff68 	bl	8002a14 <SPI_WaitFlagStateUntilTimeout>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d0ee      	beq.n	8002b26 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b48:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b4a:	f043 0320 	orr.w	r3, r3, #32
 8002b4e:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b50:	2003      	movs	r0, #3
 8002b52:	e7e8      	b.n	8002b26 <SPI_EndRxTxTransaction+0x4a>
 8002b54:	2000000c 	.word	0x2000000c
 8002b58:	165e9f81 	.word	0x165e9f81

08002b5c <HAL_SPI_Init>:
  if (hspi == NULL)
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d05a      	beq.n	8002c16 <HAL_SPI_Init+0xba>
{
 8002b60:	b510      	push	{r4, lr}
 8002b62:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b64:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002b66:	b933      	cbnz	r3, 8002b76 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b68:	6843      	ldr	r3, [r0, #4]
 8002b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b6e:	d005      	beq.n	8002b7c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61c3      	str	r3, [r0, #28]
 8002b74:	e002      	b.n	8002b7c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b7a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b80:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d040      	beq.n	8002c0a <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8002b8e:	6822      	ldr	r2, [r4, #0]
 8002b90:	6813      	ldr	r3, [r2, #0]
 8002b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b96:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b98:	6863      	ldr	r3, [r4, #4]
 8002b9a:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002b9e:	68a2      	ldr	r2, [r4, #8]
 8002ba0:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	68e2      	ldr	r2, [r4, #12]
 8002ba8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002bac:	4313      	orrs	r3, r2
 8002bae:	6922      	ldr	r2, [r4, #16]
 8002bb0:	f002 0202 	and.w	r2, r2, #2
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	6962      	ldr	r2, [r4, #20]
 8002bb8:	f002 0201 	and.w	r2, r2, #1
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	69a2      	ldr	r2, [r4, #24]
 8002bc0:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	69e2      	ldr	r2, [r4, #28]
 8002bc8:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	6a22      	ldr	r2, [r4, #32]
 8002bd0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002bd8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002bdc:	6821      	ldr	r1, [r4, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002be2:	8b63      	ldrh	r3, [r4, #26]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002bea:	f002 0210 	and.w	r2, r2, #16
 8002bee:	6821      	ldr	r1, [r4, #0]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bf4:	6822      	ldr	r2, [r4, #0]
 8002bf6:	69d3      	ldr	r3, [r2, #28]
 8002bf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bfc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfe:	2000      	movs	r0, #0
 8002c00:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8002c08:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002c0a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f7fe fb5e 	bl	80012d0 <HAL_SPI_MspInit>
 8002c14:	e7b8      	b.n	8002b88 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
}
 8002c18:	4770      	bx	lr

08002c1a <HAL_SPI_TransmitReceive>:
{
 8002c1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	4604      	mov	r4, r0
 8002c22:	4688      	mov	r8, r1
 8002c24:	4691      	mov	r9, r2
 8002c26:	461f      	mov	r7, r3
 8002c28:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8002c2a:	f7fe fc01 	bl	8001430 <HAL_GetTick>
 8002c2e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002c30:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8002c34:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d00b      	beq.n	8002c52 <HAL_SPI_TransmitReceive+0x38>
 8002c3a:	b2d9      	uxtb	r1, r3
 8002c3c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002c40:	f040 8104 	bne.w	8002e4c <HAL_SPI_TransmitReceive+0x232>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c44:	68a3      	ldr	r3, [r4, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 8104 	bne.w	8002e54 <HAL_SPI_TransmitReceive+0x23a>
 8002c4c:	2904      	cmp	r1, #4
 8002c4e:	f040 8103 	bne.w	8002e58 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c52:	f1b8 0f00 	cmp.w	r8, #0
 8002c56:	f000 8101 	beq.w	8002e5c <HAL_SPI_TransmitReceive+0x242>
 8002c5a:	f1b9 0f00 	cmp.w	r9, #0
 8002c5e:	f000 80ff 	beq.w	8002e60 <HAL_SPI_TransmitReceive+0x246>
 8002c62:	2f00      	cmp	r7, #0
 8002c64:	f000 80fe 	beq.w	8002e64 <HAL_SPI_TransmitReceive+0x24a>
  __HAL_LOCK(hspi);
 8002c68:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f000 80fb 	beq.w	8002e68 <HAL_SPI_TransmitReceive+0x24e>
 8002c72:	2301      	movs	r3, #1
 8002c74:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c78:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d002      	beq.n	8002c86 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c80:	2305      	movs	r3, #5
 8002c82:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c8a:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002c8e:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002c90:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002c92:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002c96:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002c98:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8002c9a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c9c:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002ca6:	d103      	bne.n	8002cb0 <HAL_SPI_TransmitReceive+0x96>
    __HAL_SPI_ENABLE(hspi);
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cae:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cb0:	68e3      	ldr	r3, [r4, #12]
 8002cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cb6:	d011      	beq.n	8002cdc <HAL_SPI_TransmitReceive+0xc2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cb8:	6863      	ldr	r3, [r4, #4]
 8002cba:	b10b      	cbz	r3, 8002cc0 <HAL_SPI_TransmitReceive+0xa6>
 8002cbc:	2f01      	cmp	r7, #1
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cc0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	7812      	ldrb	r2, [r2, #0]
 8002cc6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002cca:	3301      	adds	r3, #1
 8002ccc:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cce:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8002cd8:	2701      	movs	r7, #1
 8002cda:	e071      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	b10b      	cbz	r3, 8002ce4 <HAL_SPI_TransmitReceive+0xca>
 8002ce0:	2f01      	cmp	r7, #1
 8002ce2:	d10b      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0xe2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ce4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	8812      	ldrh	r2, [r2, #0]
 8002cea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002cee:	3302      	adds	r3, #2
 8002cf0:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cf2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8002cfc:	2701      	movs	r7, #1
 8002cfe:	e01b      	b.n	8002d38 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	f012 0f01 	tst.w	r2, #1
 8002d08:	d00e      	beq.n	8002d28 <HAL_SPI_TransmitReceive+0x10e>
 8002d0a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	b15a      	cbz	r2, 8002d28 <HAL_SPI_TransmitReceive+0x10e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d18:	3302      	adds	r3, #2
 8002d1a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d1c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002d26:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d28:	f7fe fb82 	bl	8001430 <HAL_GetTick>
 8002d2c:	1b80      	subs	r0, r0, r6
 8002d2e:	42a8      	cmp	r0, r5
 8002d30:	d302      	bcc.n	8002d38 <HAL_SPI_TransmitReceive+0x11e>
 8002d32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d36:	d11e      	bne.n	8002d76 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d38:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	b91b      	cbnz	r3, 8002d46 <HAL_SPI_TransmitReceive+0x12c>
 8002d3e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d062      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	f012 0f02 	tst.w	r2, #2
 8002d4e:	d0d7      	beq.n	8002d00 <HAL_SPI_TransmitReceive+0xe6>
 8002d50:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002d52:	b292      	uxth	r2, r2
 8002d54:	2a00      	cmp	r2, #0
 8002d56:	d0d3      	beq.n	8002d00 <HAL_SPI_TransmitReceive+0xe6>
 8002d58:	2f00      	cmp	r7, #0
 8002d5a:	d0d1      	beq.n	8002d00 <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002d5e:	8812      	ldrh	r2, [r2, #0]
 8002d60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002d64:	3302      	adds	r3, #2
 8002d66:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d68:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8002d72:	2700      	movs	r7, #0
 8002d74:	e7c4      	b.n	8002d00 <HAL_SPI_TransmitReceive+0xe6>
        hspi->State = HAL_SPI_STATE_READY;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002d82:	2003      	movs	r0, #3
 8002d84:	e063      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	f012 0f01 	tst.w	r2, #1
 8002d8e:	d00e      	beq.n	8002dae <HAL_SPI_TransmitReceive+0x194>
 8002d90:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002d92:	b292      	uxth	r2, r2
 8002d94:	b15a      	cbz	r2, 8002dae <HAL_SPI_TransmitReceive+0x194>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002d9e:	3301      	adds	r3, #1
 8002da0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002da2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002dac:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dae:	f7fe fb3f 	bl	8001430 <HAL_GetTick>
 8002db2:	1b83      	subs	r3, r0, r6
 8002db4:	42ab      	cmp	r3, r5
 8002db6:	d302      	bcc.n	8002dbe <HAL_SPI_TransmitReceive+0x1a4>
 8002db8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002dbc:	d11e      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x1e2>
 8002dbe:	b1ed      	cbz	r5, 8002dfc <HAL_SPI_TransmitReceive+0x1e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dc0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	b913      	cbnz	r3, 8002dcc <HAL_SPI_TransmitReceive+0x1b2>
 8002dc6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	b1fb      	cbz	r3, 8002e0c <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	f012 0f02 	tst.w	r2, #2
 8002dd4:	d0d7      	beq.n	8002d86 <HAL_SPI_TransmitReceive+0x16c>
 8002dd6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	d0d3      	beq.n	8002d86 <HAL_SPI_TransmitReceive+0x16c>
 8002dde:	2f00      	cmp	r7, #0
 8002de0:	d0d1      	beq.n	8002d86 <HAL_SPI_TransmitReceive+0x16c>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002de2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002de4:	7812      	ldrb	r2, [r2, #0]
 8002de6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002de8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002dea:	3301      	adds	r3, #1
 8002dec:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8002dee:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8002df8:	2700      	movs	r7, #0
 8002dfa:	e7c4      	b.n	8002d86 <HAL_SPI_TransmitReceive+0x16c>
        hspi->State = HAL_SPI_STATE_READY;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002e02:	2300      	movs	r3, #0
 8002e04:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002e08:	2003      	movs	r0, #3
 8002e0a:	e020      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e0c:	4632      	mov	r2, r6
 8002e0e:	4629      	mov	r1, r5
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff fe63 	bl	8002adc <SPI_EndRxTxTransaction>
 8002e16:	b990      	cbnz	r0, 8002e3e <HAL_SPI_TransmitReceive+0x224>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e18:	68a3      	ldr	r3, [r4, #8]
 8002e1a:	b933      	cbnz	r3, 8002e2a <HAL_SPI_TransmitReceive+0x210>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	9201      	str	r2, [sp, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8002e30:	2300      	movs	r3, #0
 8002e32:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002e38:	b14b      	cbz	r3, 8002e4e <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	e007      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002e42:	2300      	movs	r3, #0
 8002e44:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8002e48:	2001      	movs	r0, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>
    return HAL_BUSY;
 8002e4c:	2002      	movs	r0, #2
}
 8002e4e:	b003      	add	sp, #12
 8002e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8002e54:	2002      	movs	r0, #2
 8002e56:	e7fa      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>
 8002e58:	2002      	movs	r0, #2
 8002e5a:	e7f8      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	e7f6      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>
 8002e60:	2001      	movs	r0, #1
 8002e62:	e7f4      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>
 8002e64:	2001      	movs	r0, #1
 8002e66:	e7f2      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>
  __HAL_LOCK(hspi);
 8002e68:	2002      	movs	r0, #2
 8002e6a:	e7f0      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x234>

08002e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e70:	6a02      	ldr	r2, [r0, #32]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e78:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e7c:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e80:	680c      	ldr	r4, [r1, #0]
 8002e82:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e86:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e8a:	688b      	ldr	r3, [r1, #8]
 8002e8c:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e90:	4d11      	ldr	r5, [pc, #68]	@ (8002ed8 <TIM_OC1_SetConfig+0x6c>)
 8002e92:	42a8      	cmp	r0, r5
 8002e94:	d003      	beq.n	8002e9e <TIM_OC1_SetConfig+0x32>
 8002e96:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002e9a:	42a8      	cmp	r0, r5
 8002e9c:	d105      	bne.n	8002eaa <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e9e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ea2:	68cd      	ldr	r5, [r1, #12]
 8002ea4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eaa:	4d0b      	ldr	r5, [pc, #44]	@ (8002ed8 <TIM_OC1_SetConfig+0x6c>)
 8002eac:	42a8      	cmp	r0, r5
 8002eae:	d003      	beq.n	8002eb8 <TIM_OC1_SetConfig+0x4c>
 8002eb0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002eb4:	42a8      	cmp	r0, r5
 8002eb6:	d107      	bne.n	8002ec8 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eb8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ebc:	694d      	ldr	r5, [r1, #20]
 8002ebe:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ec2:	698a      	ldr	r2, [r1, #24]
 8002ec4:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eca:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ecc:	684a      	ldr	r2, [r1, #4]
 8002ece:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed0:	6203      	str	r3, [r0, #32]
}
 8002ed2:	bc30      	pop	{r4, r5}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000

08002edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002edc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ee0:	6a02      	ldr	r2, [r0, #32]
 8002ee2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ee6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eea:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eec:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef0:	680c      	ldr	r4, [r1, #0]
 8002ef2:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ef6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002efa:	688c      	ldr	r4, [r1, #8]
 8002efc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f00:	4c11      	ldr	r4, [pc, #68]	@ (8002f48 <TIM_OC3_SetConfig+0x6c>)
 8002f02:	42a0      	cmp	r0, r4
 8002f04:	d003      	beq.n	8002f0e <TIM_OC3_SetConfig+0x32>
 8002f06:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002f0a:	42a0      	cmp	r0, r4
 8002f0c:	d106      	bne.n	8002f1c <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f12:	68cc      	ldr	r4, [r1, #12]
 8002f14:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f48 <TIM_OC3_SetConfig+0x6c>)
 8002f1e:	42a0      	cmp	r0, r4
 8002f20:	d003      	beq.n	8002f2a <TIM_OC3_SetConfig+0x4e>
 8002f22:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002f26:	42a0      	cmp	r0, r4
 8002f28:	d107      	bne.n	8002f3a <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f2a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f2e:	694c      	ldr	r4, [r1, #20]
 8002f30:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f34:	698c      	ldr	r4, [r1, #24]
 8002f36:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3c:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f3e:	684a      	ldr	r2, [r1, #4]
 8002f40:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f42:	6203      	str	r3, [r0, #32]
}
 8002f44:	bc30      	pop	{r4, r5}
 8002f46:	4770      	bx	lr
 8002f48:	40010000 	.word	0x40010000

08002f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f4c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f4e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f50:	6a02      	ldr	r2, [r0, #32]
 8002f52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f56:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f5a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f5c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f60:	680d      	ldr	r5, [r1, #0]
 8002f62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f6a:	688d      	ldr	r5, [r1, #8]
 8002f6c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f70:	4d09      	ldr	r5, [pc, #36]	@ (8002f98 <TIM_OC4_SetConfig+0x4c>)
 8002f72:	42a8      	cmp	r0, r5
 8002f74:	d003      	beq.n	8002f7e <TIM_OC4_SetConfig+0x32>
 8002f76:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002f7a:	42a8      	cmp	r0, r5
 8002f7c:	d104      	bne.n	8002f88 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f7e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f82:	694d      	ldr	r5, [r1, #20]
 8002f84:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f88:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f8a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f8c:	684a      	ldr	r2, [r1, #4]
 8002f8e:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f90:	6203      	str	r3, [r0, #32]
}
 8002f92:	bc30      	pop	{r4, r5}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000

08002f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f9c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f9e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa0:	6a04      	ldr	r4, [r0, #32]
 8002fa2:	f024 0401 	bic.w	r4, r4, #1
 8002fa6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002faa:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fae:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fb2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002fb6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fba:	6203      	str	r3, [r0, #32]
}
 8002fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fc4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc6:	6a04      	ldr	r4, [r0, #32]
 8002fc8:	f024 0410 	bic.w	r4, r4, #16
 8002fcc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fce:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fd0:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fdc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fe2:	6203      	str	r3, [r0, #32]
}
 8002fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fea:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff6:	6083      	str	r3, [r0, #8]
}
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002ffc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003000:	2b01      	cmp	r3, #1
 8003002:	d137      	bne.n	8003074 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	2302      	movs	r3, #2
 8003006:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800300a:	6802      	ldr	r2, [r0, #0]
 800300c:	68d3      	ldr	r3, [r2, #12]
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003014:	6803      	ldr	r3, [r0, #0]
 8003016:	4a19      	ldr	r2, [pc, #100]	@ (800307c <HAL_TIM_Base_Start_IT+0x80>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d020      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x62>
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003020:	d01d      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x62>
 8003022:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003026:	4293      	cmp	r3, r2
 8003028:	d019      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x62>
 800302a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800302e:	4293      	cmp	r3, r2
 8003030:	d015      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x62>
 8003032:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003036:	4293      	cmp	r3, r2
 8003038:	d011      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x62>
 800303a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800303e:	4293      	cmp	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x62>
 8003042:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003046:	4293      	cmp	r3, r2
 8003048:	d009      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x62>
 800304a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800304e:	4293      	cmp	r3, r2
 8003050:	d005      	beq.n	800305e <HAL_TIM_Base_Start_IT+0x62>
    __HAL_TIM_ENABLE(htim);
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800305a:	2000      	movs	r0, #0
 800305c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003064:	2a06      	cmp	r2, #6
 8003066:	d007      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003070:	2000      	movs	r0, #0
 8003072:	4770      	bx	lr
    return HAL_ERROR;
 8003074:	2001      	movs	r0, #1
 8003076:	4770      	bx	lr
  return HAL_OK;
 8003078:	2000      	movs	r0, #0
}
 800307a:	4770      	bx	lr
 800307c:	40010000 	.word	0x40010000

08003080 <HAL_TIM_PWM_MspInit>:
}
 8003080:	4770      	bx	lr

08003082 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003082:	4770      	bx	lr

08003084 <HAL_TIM_IC_CaptureCallback>:
}
 8003084:	4770      	bx	lr

08003086 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003086:	4770      	bx	lr

08003088 <HAL_TIM_TriggerCallback>:
}
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_IRQHandler>:
{
 800308a:	b570      	push	{r4, r5, r6, lr}
 800308c:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800308e:	6803      	ldr	r3, [r0, #0]
 8003090:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003092:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003094:	f015 0f02 	tst.w	r5, #2
 8003098:	d010      	beq.n	80030bc <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800309a:	f016 0f02 	tst.w	r6, #2
 800309e:	d00d      	beq.n	80030bc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030a0:	f06f 0202 	mvn.w	r2, #2
 80030a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030aa:	6803      	ldr	r3, [r0, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f013 0f03 	tst.w	r3, #3
 80030b2:	d05e      	beq.n	8003172 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80030b4:	f7ff ffe6 	bl	8003084 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b8:	2300      	movs	r3, #0
 80030ba:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030bc:	f015 0f04 	tst.w	r5, #4
 80030c0:	d012      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030c2:	f016 0f04 	tst.w	r6, #4
 80030c6:	d00f      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f06f 0204 	mvn.w	r2, #4
 80030ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d0:	2302      	movs	r3, #2
 80030d2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80030dc:	d04f      	beq.n	800317e <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80030de:	4620      	mov	r0, r4
 80030e0:	f7ff ffd0 	bl	8003084 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e4:	2300      	movs	r3, #0
 80030e6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030e8:	f015 0f08 	tst.w	r5, #8
 80030ec:	d012      	beq.n	8003114 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030ee:	f016 0f08 	tst.w	r6, #8
 80030f2:	d00f      	beq.n	8003114 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	f06f 0208 	mvn.w	r2, #8
 80030fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030fc:	2304      	movs	r3, #4
 80030fe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f013 0f03 	tst.w	r3, #3
 8003108:	d040      	beq.n	800318c <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	4620      	mov	r0, r4
 800310c:	f7ff ffba 	bl	8003084 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003110:	2300      	movs	r3, #0
 8003112:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003114:	f015 0f10 	tst.w	r5, #16
 8003118:	d012      	beq.n	8003140 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800311a:	f016 0f10 	tst.w	r6, #16
 800311e:	d00f      	beq.n	8003140 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	f06f 0210 	mvn.w	r2, #16
 8003126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003128:	2308      	movs	r3, #8
 800312a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003134:	d031      	beq.n	800319a <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	4620      	mov	r0, r4
 8003138:	f7ff ffa4 	bl	8003084 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313c:	2300      	movs	r3, #0
 800313e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003140:	f015 0f01 	tst.w	r5, #1
 8003144:	d002      	beq.n	800314c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003146:	f016 0f01 	tst.w	r6, #1
 800314a:	d12d      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800314c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003150:	d002      	beq.n	8003158 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003152:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003156:	d12f      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003158:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800315c:	d002      	beq.n	8003164 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800315e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003162:	d131      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003164:	f015 0f20 	tst.w	r5, #32
 8003168:	d002      	beq.n	8003170 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800316a:	f016 0f20 	tst.w	r6, #32
 800316e:	d133      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x14e>
}
 8003170:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	f7ff ff86 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003176:	4620      	mov	r0, r4
 8003178:	f7ff ff85 	bl	8003086 <HAL_TIM_PWM_PulseFinishedCallback>
 800317c:	e79c      	b.n	80030b8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	4620      	mov	r0, r4
 8003180:	f7ff ff7f 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	4620      	mov	r0, r4
 8003186:	f7ff ff7e 	bl	8003086 <HAL_TIM_PWM_PulseFinishedCallback>
 800318a:	e7ab      	b.n	80030e4 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318c:	4620      	mov	r0, r4
 800318e:	f7ff ff78 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003192:	4620      	mov	r0, r4
 8003194:	f7ff ff77 	bl	8003086 <HAL_TIM_PWM_PulseFinishedCallback>
 8003198:	e7ba      	b.n	8003110 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	4620      	mov	r0, r4
 800319c:	f7ff ff71 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	4620      	mov	r0, r4
 80031a2:	f7ff ff70 	bl	8003086 <HAL_TIM_PWM_PulseFinishedCallback>
 80031a6:	e7c9      	b.n	800313c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	f06f 0201 	mvn.w	r2, #1
 80031ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7fd fe5b 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
 80031b6:	e7c9      	b.n	800314c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80031c0:	4620      	mov	r0, r4
 80031c2:	f000 fb1f 	bl	8003804 <HAL_TIMEx_BreakCallback>
 80031c6:	e7c7      	b.n	8003158 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7ff ff59 	bl	8003088 <HAL_TIM_TriggerCallback>
 80031d6:	e7c5      	b.n	8003164 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	f06f 0220 	mvn.w	r2, #32
 80031de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 fb0e 	bl	8003802 <HAL_TIMEx_CommutCallback>
}
 80031e6:	e7c3      	b.n	8003170 <HAL_TIM_IRQHandler+0xe6>

080031e8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80031e8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ea:	4a34      	ldr	r2, [pc, #208]	@ (80032bc <TIM_Base_SetConfig+0xd4>)
 80031ec:	4290      	cmp	r0, r2
 80031ee:	d012      	beq.n	8003216 <TIM_Base_SetConfig+0x2e>
 80031f0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80031f4:	d00f      	beq.n	8003216 <TIM_Base_SetConfig+0x2e>
 80031f6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80031fa:	4290      	cmp	r0, r2
 80031fc:	d00b      	beq.n	8003216 <TIM_Base_SetConfig+0x2e>
 80031fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003202:	4290      	cmp	r0, r2
 8003204:	d007      	beq.n	8003216 <TIM_Base_SetConfig+0x2e>
 8003206:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800320a:	4290      	cmp	r0, r2
 800320c:	d003      	beq.n	8003216 <TIM_Base_SetConfig+0x2e>
 800320e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003212:	4290      	cmp	r0, r2
 8003214:	d103      	bne.n	800321e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800321a:	684a      	ldr	r2, [r1, #4]
 800321c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321e:	4a27      	ldr	r2, [pc, #156]	@ (80032bc <TIM_Base_SetConfig+0xd4>)
 8003220:	4290      	cmp	r0, r2
 8003222:	d02a      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 8003224:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003228:	d027      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 800322a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800322e:	4290      	cmp	r0, r2
 8003230:	d023      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 8003232:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003236:	4290      	cmp	r0, r2
 8003238:	d01f      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 800323a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800323e:	4290      	cmp	r0, r2
 8003240:	d01b      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 8003242:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003246:	4290      	cmp	r0, r2
 8003248:	d017      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 800324a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800324e:	4290      	cmp	r0, r2
 8003250:	d013      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 8003252:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003256:	4290      	cmp	r0, r2
 8003258:	d00f      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 800325a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800325e:	4290      	cmp	r0, r2
 8003260:	d00b      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 8003262:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8003266:	4290      	cmp	r0, r2
 8003268:	d007      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 800326a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800326e:	4290      	cmp	r0, r2
 8003270:	d003      	beq.n	800327a <TIM_Base_SetConfig+0x92>
 8003272:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003276:	4290      	cmp	r0, r2
 8003278:	d103      	bne.n	8003282 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800327a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327e:	68ca      	ldr	r2, [r1, #12]
 8003280:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003286:	694a      	ldr	r2, [r1, #20]
 8003288:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800328a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800328c:	688b      	ldr	r3, [r1, #8]
 800328e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003290:	680b      	ldr	r3, [r1, #0]
 8003292:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003294:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <TIM_Base_SetConfig+0xd4>)
 8003296:	4298      	cmp	r0, r3
 8003298:	d003      	beq.n	80032a2 <TIM_Base_SetConfig+0xba>
 800329a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800329e:	4298      	cmp	r0, r3
 80032a0:	d101      	bne.n	80032a6 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80032a2:	690b      	ldr	r3, [r1, #16]
 80032a4:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80032a6:	2301      	movs	r3, #1
 80032a8:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032aa:	6903      	ldr	r3, [r0, #16]
 80032ac:	f013 0f01 	tst.w	r3, #1
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032b2:	6903      	ldr	r3, [r0, #16]
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6103      	str	r3, [r0, #16]
}
 80032ba:	4770      	bx	lr
 80032bc:	40010000 	.word	0x40010000

080032c0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80032c0:	b340      	cbz	r0, 8003314 <HAL_TIM_Base_Init+0x54>
{
 80032c2:	b510      	push	{r4, lr}
 80032c4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80032c6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80032ca:	b1f3      	cbz	r3, 800330a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	2302      	movs	r3, #2
 80032ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d2:	4621      	mov	r1, r4
 80032d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80032d8:	f7ff ff86 	bl	80031e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	2301      	movs	r3, #1
 80032de:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80032e6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80032ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80032ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032fa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80032fe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003302:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003306:	2000      	movs	r0, #0
}
 8003308:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800330a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800330e:	f001 fb63 	bl	80049d8 <HAL_TIM_Base_MspInit>
 8003312:	e7db      	b.n	80032cc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003314:	2001      	movs	r0, #1
}
 8003316:	4770      	bx	lr

08003318 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003318:	b340      	cbz	r0, 800336c <HAL_TIM_PWM_Init+0x54>
{
 800331a:	b510      	push	{r4, lr}
 800331c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003322:	b1f3      	cbz	r3, 8003362 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	2302      	movs	r3, #2
 8003326:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332a:	4621      	mov	r1, r4
 800332c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003330:	f7ff ff5a 	bl	80031e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003334:	2301      	movs	r3, #1
 8003336:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800333e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003342:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003346:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800334e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003352:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003356:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800335a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800335e:	2000      	movs	r0, #0
}
 8003360:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003362:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003366:	f7ff fe8b 	bl	8003080 <HAL_TIM_PWM_MspInit>
 800336a:	e7db      	b.n	8003324 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800336c:	2001      	movs	r0, #1
}
 800336e:	4770      	bx	lr

08003370 <TIM_OC2_SetConfig>:
{
 8003370:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003372:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003374:	6a02      	ldr	r2, [r0, #32]
 8003376:	f022 0210 	bic.w	r2, r2, #16
 800337a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800337c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800337e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003380:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	680d      	ldr	r5, [r1, #0]
 8003386:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800338a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800338e:	688d      	ldr	r5, [r1, #8]
 8003390:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003394:	4d11      	ldr	r5, [pc, #68]	@ (80033dc <TIM_OC2_SetConfig+0x6c>)
 8003396:	42a8      	cmp	r0, r5
 8003398:	d003      	beq.n	80033a2 <TIM_OC2_SetConfig+0x32>
 800339a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800339e:	42a8      	cmp	r0, r5
 80033a0:	d106      	bne.n	80033b0 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 80033a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033a6:	68cd      	ldr	r5, [r1, #12]
 80033a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80033ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b0:	4d0a      	ldr	r5, [pc, #40]	@ (80033dc <TIM_OC2_SetConfig+0x6c>)
 80033b2:	42a8      	cmp	r0, r5
 80033b4:	d003      	beq.n	80033be <TIM_OC2_SetConfig+0x4e>
 80033b6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033ba:	42a8      	cmp	r0, r5
 80033bc:	d107      	bne.n	80033ce <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033be:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033c2:	694d      	ldr	r5, [r1, #20]
 80033c4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033c8:	698d      	ldr	r5, [r1, #24]
 80033ca:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80033ce:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80033d0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80033d2:	684a      	ldr	r2, [r1, #4]
 80033d4:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80033d6:	6203      	str	r3, [r0, #32]
}
 80033d8:	bc30      	pop	{r4, r5}
 80033da:	4770      	bx	lr
 80033dc:	40010000 	.word	0x40010000

080033e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80033e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80033e2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d066      	beq.n	80034b8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80033ea:	4604      	mov	r4, r0
 80033ec:	460d      	mov	r5, r1
 80033ee:	2301      	movs	r3, #1
 80033f0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80033f4:	2a0c      	cmp	r2, #12
 80033f6:	d85a      	bhi.n	80034ae <HAL_TIM_PWM_ConfigChannel+0xce>
 80033f8:	e8df f002 	tbb	[pc, r2]
 80033fc:	59595907 	.word	0x59595907
 8003400:	5959591b 	.word	0x5959591b
 8003404:	59595930 	.word	0x59595930
 8003408:	44          	.byte	0x44
 8003409:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800340a:	6800      	ldr	r0, [r0, #0]
 800340c:	f7ff fd2e 	bl	8002e6c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	6993      	ldr	r3, [r2, #24]
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800341a:	6822      	ldr	r2, [r4, #0]
 800341c:	6993      	ldr	r3, [r2, #24]
 800341e:	f023 0304 	bic.w	r3, r3, #4
 8003422:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	6993      	ldr	r3, [r2, #24]
 8003428:	6929      	ldr	r1, [r5, #16]
 800342a:	430b      	orrs	r3, r1
 800342c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	2000      	movs	r0, #0
      break;
 8003430:	e03e      	b.n	80034b0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003432:	6800      	ldr	r0, [r0, #0]
 8003434:	f7ff ff9c 	bl	8003370 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	6993      	ldr	r3, [r2, #24]
 800343c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003440:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	6993      	ldr	r3, [r2, #24]
 8003446:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800344a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	6993      	ldr	r3, [r2, #24]
 8003450:	6929      	ldr	r1, [r5, #16]
 8003452:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003456:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2000      	movs	r0, #0
      break;
 800345a:	e029      	b.n	80034b0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800345c:	6800      	ldr	r0, [r0, #0]
 800345e:	f7ff fd3d 	bl	8002edc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003462:	6822      	ldr	r2, [r4, #0]
 8003464:	69d3      	ldr	r3, [r2, #28]
 8003466:	f043 0308 	orr.w	r3, r3, #8
 800346a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800346c:	6822      	ldr	r2, [r4, #0]
 800346e:	69d3      	ldr	r3, [r2, #28]
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	69d3      	ldr	r3, [r2, #28]
 800347a:	6929      	ldr	r1, [r5, #16]
 800347c:	430b      	orrs	r3, r1
 800347e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	2000      	movs	r0, #0
      break;
 8003482:	e015      	b.n	80034b0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003484:	6800      	ldr	r0, [r0, #0]
 8003486:	f7ff fd61 	bl	8002f4c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	69d3      	ldr	r3, [r2, #28]
 800348e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003492:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	69d3      	ldr	r3, [r2, #28]
 8003498:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800349c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	69d3      	ldr	r3, [r2, #28]
 80034a2:	6929      	ldr	r1, [r5, #16]
 80034a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80034a8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2000      	movs	r0, #0
      break;
 80034ac:	e000      	b.n	80034b0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80034ae:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80034b0:	2300      	movs	r3, #0
 80034b2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80034b8:	2002      	movs	r0, #2
 80034ba:	e7fc      	b.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0xd6>

080034bc <TIM_TI1_SetConfig>:
{
 80034bc:	b470      	push	{r4, r5, r6}
 80034be:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 80034c0:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c2:	6a04      	ldr	r4, [r0, #32]
 80034c4:	f024 0401 	bic.w	r4, r4, #1
 80034c8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ca:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034cc:	4d18      	ldr	r5, [pc, #96]	@ (8003530 <TIM_TI1_SetConfig+0x74>)
 80034ce:	42a8      	cmp	r0, r5
 80034d0:	d01c      	beq.n	800350c <TIM_TI1_SetConfig+0x50>
 80034d2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80034d6:	d019      	beq.n	800350c <TIM_TI1_SetConfig+0x50>
 80034d8:	4a16      	ldr	r2, [pc, #88]	@ (8003534 <TIM_TI1_SetConfig+0x78>)
 80034da:	4290      	cmp	r0, r2
 80034dc:	d016      	beq.n	800350c <TIM_TI1_SetConfig+0x50>
 80034de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80034e2:	4290      	cmp	r0, r2
 80034e4:	d012      	beq.n	800350c <TIM_TI1_SetConfig+0x50>
 80034e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80034ea:	4290      	cmp	r0, r2
 80034ec:	d00e      	beq.n	800350c <TIM_TI1_SetConfig+0x50>
 80034ee:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80034f2:	4290      	cmp	r0, r2
 80034f4:	d00a      	beq.n	800350c <TIM_TI1_SetConfig+0x50>
 80034f6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80034fa:	4290      	cmp	r0, r2
 80034fc:	d006      	beq.n	800350c <TIM_TI1_SetConfig+0x50>
 80034fe:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003502:	4290      	cmp	r0, r2
 8003504:	d002      	beq.n	800350c <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003506:	f044 0201 	orr.w	r2, r4, #1
 800350a:	e003      	b.n	8003514 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800350c:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003510:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003514:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003522:	f001 010a 	and.w	r1, r1, #10
 8003526:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8003528:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800352a:	6201      	str	r1, [r0, #32]
}
 800352c:	bc70      	pop	{r4, r5, r6}
 800352e:	4770      	bx	lr
 8003530:	40010000 	.word	0x40010000
 8003534:	40000400 	.word	0x40000400

08003538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003538:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800353a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003540:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003544:	430a      	orrs	r2, r1
 8003546:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800354a:	6082      	str	r2, [r0, #8]
}
 800354c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003552:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d078      	beq.n	800364c <HAL_TIM_ConfigClockSource+0xfa>
{
 800355a:	b510      	push	{r4, lr}
 800355c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800355e:	2301      	movs	r3, #1
 8003560:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800356a:	6802      	ldr	r2, [r0, #0]
 800356c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003572:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003576:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003578:	680b      	ldr	r3, [r1, #0]
 800357a:	2b60      	cmp	r3, #96	@ 0x60
 800357c:	d04c      	beq.n	8003618 <HAL_TIM_ConfigClockSource+0xc6>
 800357e:	d823      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x76>
 8003580:	2b40      	cmp	r3, #64	@ 0x40
 8003582:	d054      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xdc>
 8003584:	d811      	bhi.n	80035aa <HAL_TIM_ConfigClockSource+0x58>
 8003586:	2b20      	cmp	r3, #32
 8003588:	d003      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x40>
 800358a:	d80a      	bhi.n	80035a2 <HAL_TIM_ConfigClockSource+0x50>
 800358c:	b10b      	cbz	r3, 8003592 <HAL_TIM_ConfigClockSource+0x40>
 800358e:	2b10      	cmp	r3, #16
 8003590:	d105      	bne.n	800359e <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003592:	4619      	mov	r1, r3
 8003594:	6820      	ldr	r0, [r4, #0]
 8003596:	f7ff fd28 	bl	8002fea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2000      	movs	r0, #0
      break;
 800359c:	e028      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800359e:	2001      	movs	r0, #1
 80035a0:	e026      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80035a2:	2b30      	cmp	r3, #48	@ 0x30
 80035a4:	d0f5      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 80035a6:	2001      	movs	r0, #1
 80035a8:	e022      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80035aa:	2b50      	cmp	r3, #80	@ 0x50
 80035ac:	d10a      	bne.n	80035c4 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ae:	68ca      	ldr	r2, [r1, #12]
 80035b0:	6849      	ldr	r1, [r1, #4]
 80035b2:	6800      	ldr	r0, [r0, #0]
 80035b4:	f7ff fcf2 	bl	8002f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b8:	2150      	movs	r1, #80	@ 0x50
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	f7ff fd15 	bl	8002fea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2000      	movs	r0, #0
      break;
 80035c2:	e015      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80035c4:	2001      	movs	r0, #1
 80035c6:	e013      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80035c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035cc:	d03a      	beq.n	8003644 <HAL_TIM_ConfigClockSource+0xf2>
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035d2:	d014      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0xac>
 80035d4:	2b70      	cmp	r3, #112	@ 0x70
 80035d6:	d137      	bne.n	8003648 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80035d8:	68cb      	ldr	r3, [r1, #12]
 80035da:	684a      	ldr	r2, [r1, #4]
 80035dc:	6889      	ldr	r1, [r1, #8]
 80035de:	6800      	ldr	r0, [r0, #0]
 80035e0:	f7ff ffaa 	bl	8003538 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80035ec:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80035f6:	2300      	movs	r3, #0
 80035f8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80035fc:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80035fe:	68cb      	ldr	r3, [r1, #12]
 8003600:	684a      	ldr	r2, [r1, #4]
 8003602:	6889      	ldr	r1, [r1, #8]
 8003604:	6800      	ldr	r0, [r0, #0]
 8003606:	f7ff ff97 	bl	8003538 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	6893      	ldr	r3, [r2, #8]
 800360e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003612:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003614:	2000      	movs	r0, #0
      break;
 8003616:	e7eb      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003618:	68ca      	ldr	r2, [r1, #12]
 800361a:	6849      	ldr	r1, [r1, #4]
 800361c:	6800      	ldr	r0, [r0, #0]
 800361e:	f7ff fcd0 	bl	8002fc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003622:	2160      	movs	r1, #96	@ 0x60
 8003624:	6820      	ldr	r0, [r4, #0]
 8003626:	f7ff fce0 	bl	8002fea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2000      	movs	r0, #0
      break;
 800362c:	e7e0      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800362e:	68ca      	ldr	r2, [r1, #12]
 8003630:	6849      	ldr	r1, [r1, #4]
 8003632:	6800      	ldr	r0, [r0, #0]
 8003634:	f7ff fcb2 	bl	8002f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003638:	2140      	movs	r1, #64	@ 0x40
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	f7ff fcd5 	bl	8002fea <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2000      	movs	r0, #0
      break;
 8003642:	e7d5      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003644:	2000      	movs	r0, #0
 8003646:	e7d3      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003648:	2001      	movs	r0, #1
 800364a:	e7d1      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 800364c:	2002      	movs	r0, #2
}
 800364e:	4770      	bx	lr

08003650 <HAL_TIMEx_HallSensor_Init>:
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003650:	2800      	cmp	r0, #0
 8003652:	d065      	beq.n	8003720 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	460e      	mov	r6, r1
 800365a:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003660:	2b00      	cmp	r3, #0
 8003662:	d058      	beq.n	8003716 <HAL_TIMEx_HallSensor_Init+0xc6>
    HAL_TIMEx_HallSensor_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	2302      	movs	r3, #2
 8003666:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366a:	4621      	mov	r1, r4
 800366c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003670:	f7ff fdba 	bl	80031e8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8003674:	68b3      	ldr	r3, [r6, #8]
 8003676:	2203      	movs	r2, #3
 8003678:	6831      	ldr	r1, [r6, #0]
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	f7ff ff1e 	bl	80034bc <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003680:	6822      	ldr	r2, [r4, #0]
 8003682:	6993      	ldr	r3, [r2, #24]
 8003684:	f023 030c 	bic.w	r3, r3, #12
 8003688:	6193      	str	r3, [r2, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	6993      	ldr	r3, [r2, #24]
 800368e:	6871      	ldr	r1, [r6, #4]
 8003690:	430b      	orrs	r3, r1
 8003692:	6193      	str	r3, [r2, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003694:	6822      	ldr	r2, [r4, #0]
 8003696:	6853      	ldr	r3, [r2, #4]
 8003698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800369c:	6053      	str	r3, [r2, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	6893      	ldr	r3, [r2, #8]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	6893      	ldr	r3, [r2, #8]
 80036ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b0:	6093      	str	r3, [r2, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80036b2:	6822      	ldr	r2, [r4, #0]
 80036b4:	6893      	ldr	r3, [r2, #8]
 80036b6:	f023 0307 	bic.w	r3, r3, #7
 80036ba:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	6893      	ldr	r3, [r2, #8]
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	6093      	str	r3, [r2, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80036c6:	2500      	movs	r5, #0
 80036c8:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036ca:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80036cc:	2370      	movs	r3, #112	@ 0x70
 80036ce:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036d0:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036d2:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036d4:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80036d6:	68f3      	ldr	r3, [r6, #12]
 80036d8:	9302      	str	r3, [sp, #8]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80036da:	a901      	add	r1, sp, #4
 80036dc:	6820      	ldr	r0, [r4, #0]
 80036de:	f7ff fe47 	bl	8003370 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80036e2:	6822      	ldr	r2, [r4, #0]
 80036e4:	6853      	ldr	r3, [r2, #4]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ea:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80036ec:	6822      	ldr	r2, [r4, #0]
 80036ee:	6853      	ldr	r3, [r2, #4]
 80036f0:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80036f4:	6053      	str	r3, [r2, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  return HAL_OK;
 8003710:	4628      	mov	r0, r5
}
 8003712:	b008      	add	sp, #32
 8003714:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003716:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800371a:	f001 f9ab 	bl	8004a74 <HAL_TIMEx_HallSensor_MspInit>
 800371e:	e7a1      	b.n	8003664 <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 8003720:	2001      	movs	r0, #1
}
 8003722:	4770      	bx	lr

08003724 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003724:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003728:	2a01      	cmp	r2, #1
 800372a:	d03d      	beq.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 800372c:	b410      	push	{r4}
 800372e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003730:	2201      	movs	r2, #1
 8003732:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003736:	2202      	movs	r2, #2
 8003738:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800373c:	6802      	ldr	r2, [r0, #0]
 800373e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003740:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003742:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003746:	6808      	ldr	r0, [r1, #0]
 8003748:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800374c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4816      	ldr	r0, [pc, #88]	@ (80037ac <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8003752:	4282      	cmp	r2, r0
 8003754:	d01a      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003756:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800375a:	d017      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800375c:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003760:	4282      	cmp	r2, r0
 8003762:	d013      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003764:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003768:	4282      	cmp	r2, r0
 800376a:	d00f      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800376c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003770:	4282      	cmp	r2, r0
 8003772:	d00b      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003774:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8003778:	4282      	cmp	r2, r0
 800377a:	d007      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800377c:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8003780:	4282      	cmp	r2, r0
 8003782:	d003      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003784:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003788:	4282      	cmp	r2, r0
 800378a:	d104      	bne.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800378c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003790:	6849      	ldr	r1, [r1, #4]
 8003792:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003794:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800379c:	2000      	movs	r0, #0
 800379e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80037a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037a6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80037a8:	2002      	movs	r0, #2
}
 80037aa:	4770      	bx	lr
 80037ac:	40010000 	.word	0x40010000

080037b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037b0:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d021      	beq.n	80037fe <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 80037ba:	2301      	movs	r3, #1
 80037bc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037c0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c6:	6888      	ldr	r0, [r1, #8]
 80037c8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037ce:	6848      	ldr	r0, [r1, #4]
 80037d0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037d6:	6808      	ldr	r0, [r1, #0]
 80037d8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037de:	6908      	ldr	r0, [r1, #16]
 80037e0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e6:	6948      	ldr	r0, [r1, #20]
 80037e8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ee:	69c9      	ldr	r1, [r1, #28]
 80037f0:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037f2:	6811      	ldr	r1, [r2, #0]
 80037f4:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80037f6:	2000      	movs	r0, #0
 80037f8:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 80037fc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80037fe:	2002      	movs	r0, #2
}
 8003800:	4770      	bx	lr

08003802 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003802:	4770      	bx	lr

08003804 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003804:	4770      	bx	lr
	...

08003808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b530      	push	{r4, r5, lr}
 800380a:	b089      	sub	sp, #36	@ 0x24
 800380c:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <HAL_InitTick+0x90>)
 8003814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003816:	f042 0210 	orr.w	r2, r2, #16
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003826:	a902      	add	r1, sp, #8
 8003828:	a803      	add	r0, sp, #12
 800382a:	f7fe fdf1 	bl	8002410 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800382e:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003830:	b9cb      	cbnz	r3, 8003866 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003832:	f7fe fdcd 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8003836:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003838:	4a18      	ldr	r2, [pc, #96]	@ (800389c <HAL_InitTick+0x94>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0c9b      	lsrs	r3, r3, #18
 8003840:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003842:	4817      	ldr	r0, [pc, #92]	@ (80038a0 <HAL_InitTick+0x98>)
 8003844:	4a17      	ldr	r2, [pc, #92]	@ (80038a4 <HAL_InitTick+0x9c>)
 8003846:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003848:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800384c:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800384e:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003854:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003856:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003858:	f7ff fd32 	bl	80032c0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800385c:	4605      	mov	r5, r0
 800385e:	b130      	cbz	r0, 800386e <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8003860:	4628      	mov	r0, r5
 8003862:	b009      	add	sp, #36	@ 0x24
 8003864:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003866:	f7fe fdb3 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 800386a:	0043      	lsls	r3, r0, #1
 800386c:	e7e4      	b.n	8003838 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800386e:	480c      	ldr	r0, [pc, #48]	@ (80038a0 <HAL_InitTick+0x98>)
 8003870:	f7ff fbc4 	bl	8002ffc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003874:	4605      	mov	r5, r0
 8003876:	2800      	cmp	r0, #0
 8003878:	d1f2      	bne.n	8003860 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800387a:	2036      	movs	r0, #54	@ 0x36
 800387c:	f7fe f898 	bl	80019b0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003880:	2c0f      	cmp	r4, #15
 8003882:	d901      	bls.n	8003888 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8003884:	2501      	movs	r5, #1
 8003886:	e7eb      	b.n	8003860 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003888:	2200      	movs	r2, #0
 800388a:	4621      	mov	r1, r4
 800388c:	2036      	movs	r0, #54	@ 0x36
 800388e:	f7fe f87f 	bl	8001990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003892:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <HAL_InitTick+0xa0>)
 8003894:	601c      	str	r4, [r3, #0]
 8003896:	e7e3      	b.n	8003860 <HAL_InitTick+0x58>
 8003898:	40023800 	.word	0x40023800
 800389c:	431bde83 	.word	0x431bde83
 80038a0:	20004264 	.word	0x20004264
 80038a4:	40001000 	.word	0x40001000
 80038a8:	20000008 	.word	0x20000008

080038ac <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	f102 030c 	add.w	r3, r2, #12
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	320c      	adds	r2, #12
 80038bc:	e842 3100 	strex	r1, r3, [r2]
 80038c0:	2900      	cmp	r1, #0
 80038c2:	d1f3      	bne.n	80038ac <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038c4:	2320      	movs	r3, #32
 80038c6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 80038ca:	4770      	bx	lr

080038cc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038cc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	f102 030c 	add.w	r3, r2, #12
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	320c      	adds	r2, #12
 80038dc:	e842 3100 	strex	r1, r3, [r2]
 80038e0:	2900      	cmp	r1, #0
 80038e2:	d1f3      	bne.n	80038cc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	f102 0314 	add.w	r3, r2, #20
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	3214      	adds	r2, #20
 80038f4:	e842 3100 	strex	r1, r3, [r2]
 80038f8:	2900      	cmp	r1, #0
 80038fa:	d1f3      	bne.n	80038e4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d005      	beq.n	800390e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003902:	2320      	movs	r3, #32
 8003904:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003908:	2300      	movs	r3, #0
 800390a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800390c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	f102 030c 	add.w	r3, r2, #12
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	320c      	adds	r2, #12
 800391e:	e842 3100 	strex	r1, r3, [r2]
 8003922:	2900      	cmp	r1, #0
 8003924:	d1f3      	bne.n	800390e <UART_EndRxTransfer+0x42>
 8003926:	e7ec      	b.n	8003902 <UART_EndRxTransfer+0x36>

08003928 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003928:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800392c:	2b21      	cmp	r3, #33	@ 0x21
 800392e:	d001      	beq.n	8003934 <UART_Transmit_IT+0xc>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003930:	2002      	movs	r0, #2
  }
}
 8003932:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003934:	6883      	ldr	r3, [r0, #8]
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393a:	d017      	beq.n	800396c <UART_Transmit_IT+0x44>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800393c:	6a03      	ldr	r3, [r0, #32]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	6202      	str	r2, [r0, #32]
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	6803      	ldr	r3, [r0, #0]
 8003946:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003948:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29b      	uxth	r3, r3
 8003950:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8003952:	b94b      	cbnz	r3, 8003968 <UART_Transmit_IT+0x40>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003954:	6802      	ldr	r2, [r0, #0]
 8003956:	68d3      	ldr	r3, [r2, #12]
 8003958:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800395c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800395e:	6802      	ldr	r2, [r0, #0]
 8003960:	68d3      	ldr	r3, [r2, #12]
 8003962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003966:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003968:	2000      	movs	r0, #0
 800396a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396c:	6903      	ldr	r3, [r0, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e4      	bne.n	800393c <UART_Transmit_IT+0x14>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003972:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	6802      	ldr	r2, [r0, #0]
 8003978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397c:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800397e:	6a03      	ldr	r3, [r0, #32]
 8003980:	3302      	adds	r3, #2
 8003982:	6203      	str	r3, [r0, #32]
 8003984:	e7e0      	b.n	8003948 <UART_Transmit_IT+0x20>
	...

08003988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	b510      	push	{r4, lr}
 800398a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398c:	6802      	ldr	r2, [r0, #0]
 800398e:	6913      	ldr	r3, [r2, #16]
 8003990:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003994:	68c1      	ldr	r1, [r0, #12]
 8003996:	430b      	orrs	r3, r1
 8003998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800399a:	6883      	ldr	r3, [r0, #8]
 800399c:	6902      	ldr	r2, [r0, #16]
 800399e:	431a      	orrs	r2, r3
 80039a0:	6943      	ldr	r3, [r0, #20]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	69c3      	ldr	r3, [r0, #28]
 80039a6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80039a8:	6801      	ldr	r1, [r0, #0]
 80039aa:	68cb      	ldr	r3, [r1, #12]
 80039ac:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80039b0:	f023 030c 	bic.w	r3, r3, #12
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b8:	6802      	ldr	r2, [r0, #0]
 80039ba:	6953      	ldr	r3, [r2, #20]
 80039bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c0:	6981      	ldr	r1, [r0, #24]
 80039c2:	430b      	orrs	r3, r1
 80039c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c6:	6803      	ldr	r3, [r0, #0]
 80039c8:	4a31      	ldr	r2, [pc, #196]	@ (8003a90 <UART_SetConfig+0x108>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d006      	beq.n	80039dc <UART_SetConfig+0x54>
 80039ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d002      	beq.n	80039dc <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039d6:	f7fe fcfb 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 80039da:	e001      	b.n	80039e0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7fe fd08 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e0:	69e3      	ldr	r3, [r4, #28]
 80039e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e6:	d029      	beq.n	8003a3c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e8:	2100      	movs	r1, #0
 80039ea:	1803      	adds	r3, r0, r0
 80039ec:	4149      	adcs	r1, r1
 80039ee:	181b      	adds	r3, r3, r0
 80039f0:	f141 0100 	adc.w	r1, r1, #0
 80039f4:	00c9      	lsls	r1, r1, #3
 80039f6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	1818      	adds	r0, r3, r0
 80039fe:	6863      	ldr	r3, [r4, #4]
 8003a00:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003a04:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003a08:	f141 0100 	adc.w	r1, r1, #0
 8003a0c:	f7fc fbe0 	bl	80001d0 <__aeabi_uldivmod>
 8003a10:	4a20      	ldr	r2, [pc, #128]	@ (8003a94 <UART_SetConfig+0x10c>)
 8003a12:	fba2 3100 	umull	r3, r1, r2, r0
 8003a16:	0949      	lsrs	r1, r1, #5
 8003a18:	2364      	movs	r3, #100	@ 0x64
 8003a1a:	fb03 0311 	mls	r3, r3, r1, r0
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	3332      	adds	r3, #50	@ 0x32
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a2c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	6821      	ldr	r1, [r4, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }
}
 8003a3a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	1802      	adds	r2, r0, r0
 8003a40:	eb43 0103 	adc.w	r1, r3, r3
 8003a44:	1812      	adds	r2, r2, r0
 8003a46:	f141 0100 	adc.w	r1, r1, #0
 8003a4a:	00c9      	lsls	r1, r1, #3
 8003a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a50:	00d2      	lsls	r2, r2, #3
 8003a52:	1810      	adds	r0, r2, r0
 8003a54:	f141 0100 	adc.w	r1, r1, #0
 8003a58:	6862      	ldr	r2, [r4, #4]
 8003a5a:	1892      	adds	r2, r2, r2
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	f7fc fbb7 	bl	80001d0 <__aeabi_uldivmod>
 8003a62:	4a0c      	ldr	r2, [pc, #48]	@ (8003a94 <UART_SetConfig+0x10c>)
 8003a64:	fba2 3100 	umull	r3, r1, r2, r0
 8003a68:	0949      	lsrs	r1, r1, #5
 8003a6a:	2364      	movs	r3, #100	@ 0x64
 8003a6c:	fb03 0311 	mls	r3, r3, r1, r0
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	3332      	adds	r3, #50	@ 0x32
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	005a      	lsls	r2, r3, #1
 8003a7c:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8003a80:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	6821      	ldr	r1, [r4, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
 8003a8e:	e7d4      	b.n	8003a3a <UART_SetConfig+0xb2>
 8003a90:	40011000 	.word	0x40011000
 8003a94:	51eb851f 	.word	0x51eb851f

08003a98 <HAL_UART_Init>:
  if (huart == NULL)
 8003a98:	b360      	cbz	r0, 8003af4 <HAL_UART_Init+0x5c>
{
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003aa2:	b313      	cbz	r3, 8003aea <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	2324      	movs	r3, #36	@ 0x24
 8003aa6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003aaa:	6822      	ldr	r2, [r4, #0]
 8003aac:	68d3      	ldr	r3, [r2, #12]
 8003aae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ab2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7ff ff67 	bl	8003988 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	6822      	ldr	r2, [r4, #0]
 8003abc:	6913      	ldr	r3, [r2, #16]
 8003abe:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003ac2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac4:	6822      	ldr	r2, [r4, #0]
 8003ac6:	6953      	ldr	r3, [r2, #20]
 8003ac8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003acc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	68d3      	ldr	r3, [r2, #12]
 8003ad2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ad6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	2000      	movs	r0, #0
 8003ada:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003adc:	2320      	movs	r3, #32
 8003ade:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ae2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae6:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8003ae8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003aea:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003aee:	f001 f907 	bl	8004d00 <HAL_UART_MspInit>
 8003af2:	e7d7      	b.n	8003aa4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003af4:	2001      	movs	r0, #1
}
 8003af6:	4770      	bx	lr

08003af8 <HAL_UART_Transmit_DMA>:
{
 8003af8:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8003afa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d130      	bne.n	8003b64 <HAL_UART_Transmit_DMA+0x6c>
 8003b02:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8003b04:	2900      	cmp	r1, #0
 8003b06:	d02f      	beq.n	8003b68 <HAL_UART_Transmit_DMA+0x70>
 8003b08:	b90a      	cbnz	r2, 8003b0e <HAL_UART_Transmit_DMA+0x16>
      return HAL_ERROR;
 8003b0a:	2001      	movs	r0, #1
}
 8003b0c:	bd38      	pop	{r3, r4, r5, pc}
    huart->pTxBuffPtr = pData;
 8003b0e:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8003b10:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b12:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b18:	2021      	movs	r0, #33	@ 0x21
 8003b1a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b1e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003b20:	4d12      	ldr	r5, [pc, #72]	@ (8003b6c <HAL_UART_Transmit_DMA+0x74>)
 8003b22:	63c5      	str	r5, [r0, #60]	@ 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b24:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003b26:	4d12      	ldr	r5, [pc, #72]	@ (8003b70 <HAL_UART_Transmit_DMA+0x78>)
 8003b28:	6405      	str	r5, [r0, #64]	@ 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b2a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003b2c:	4d11      	ldr	r5, [pc, #68]	@ (8003b74 <HAL_UART_Transmit_DMA+0x7c>)
 8003b2e:	64c5      	str	r5, [r0, #76]	@ 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8003b30:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003b32:	6503      	str	r3, [r0, #80]	@ 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	1d02      	adds	r2, r0, #4
 8003b3a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003b3c:	f7fe f81e 	bl	8001b7c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b46:	601a      	str	r2, [r3, #0]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b48:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	f102 0314 	add.w	r3, r2, #20
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	3214      	adds	r2, #20
 8003b58:	e842 3100 	strex	r1, r3, [r2]
 8003b5c:	2900      	cmp	r1, #0
 8003b5e:	d1f3      	bne.n	8003b48 <HAL_UART_Transmit_DMA+0x50>
    return HAL_OK;
 8003b60:	2000      	movs	r0, #0
 8003b62:	e7d3      	b.n	8003b0c <HAL_UART_Transmit_DMA+0x14>
    return HAL_BUSY;
 8003b64:	2002      	movs	r0, #2
 8003b66:	e7d1      	b.n	8003b0c <HAL_UART_Transmit_DMA+0x14>
      return HAL_ERROR;
 8003b68:	2001      	movs	r0, #1
 8003b6a:	e7cf      	b.n	8003b0c <HAL_UART_Transmit_DMA+0x14>
 8003b6c:	08003b7b 	.word	0x08003b7b
 8003b70:	08003be3 	.word	0x08003be3
 8003b74:	08003bf1 	.word	0x08003bf1

08003b78 <HAL_UART_TxCpltCallback>:
}
 8003b78:	4770      	bx	lr

08003b7a <UART_DMATransmitCplt>:
{
 8003b7a:	b508      	push	{r3, lr}
 8003b7c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003b88:	d11a      	bne.n	8003bc0 <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	84c3      	strh	r3, [r0, #38]	@ 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b8e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	f102 0314 	add.w	r3, r2, #20
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	3214      	adds	r2, #20
 8003b9e:	e842 3100 	strex	r1, r3, [r2]
 8003ba2:	2900      	cmp	r1, #0
 8003ba4:	d1f3      	bne.n	8003b8e <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ba6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	f102 030c 	add.w	r3, r2, #12
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	320c      	adds	r2, #12
 8003bb6:	e842 3100 	strex	r1, r3, [r2]
 8003bba:	2900      	cmp	r1, #0
 8003bbc:	d1f3      	bne.n	8003ba6 <UART_DMATransmitCplt+0x2c>
}
 8003bbe:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003bc0:	f7ff ffda 	bl	8003b78 <HAL_UART_TxCpltCallback>
}
 8003bc4:	e7fb      	b.n	8003bbe <UART_DMATransmitCplt+0x44>

08003bc6 <UART_EndTransmit_IT>:
{
 8003bc6:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bc8:	6801      	ldr	r1, [r0, #0]
 8003bca:	68ca      	ldr	r2, [r1, #12]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd0:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8003bd8:	f7ff ffce 	bl	8003b78 <HAL_UART_TxCpltCallback>
}
 8003bdc:	2000      	movs	r0, #0
 8003bde:	bd08      	pop	{r3, pc}

08003be0 <HAL_UART_TxHalfCpltCallback>:
}
 8003be0:	4770      	bx	lr

08003be2 <UART_DMATxHalfCplt>:
{
 8003be2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8003be4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003be6:	f7ff fffb 	bl	8003be0 <HAL_UART_TxHalfCpltCallback>
}
 8003bea:	bd08      	pop	{r3, pc}

08003bec <HAL_UART_RxCpltCallback>:
}
 8003bec:	4770      	bx	lr

08003bee <HAL_UART_RxHalfCpltCallback>:
}
 8003bee:	4770      	bx	lr

08003bf0 <UART_DMAError>:
{
 8003bf0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003bf8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8003bfc:	2a21      	cmp	r2, #33	@ 0x21
 8003bfe:	d00f      	beq.n	8003c20 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c08:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8003c0c:	2a22      	cmp	r2, #34	@ 0x22
 8003c0e:	d011      	beq.n	8003c34 <UART_DMAError+0x44>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c10:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003c12:	f043 0310 	orr.w	r3, r3, #16
 8003c16:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7fc fd63 	bl	80006e4 <HAL_UART_ErrorCallback>
}
 8003c1e:	bd10      	pop	{r4, pc}
 8003c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0eb      	beq.n	8003c00 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff fe3d 	bl	80038ac <UART_EndTxTransfer>
 8003c32:	e7e5      	b.n	8003c00 <UART_DMAError+0x10>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0eb      	beq.n	8003c10 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7ff fe45 	bl	80038cc <UART_EndRxTransfer>
 8003c42:	e7e5      	b.n	8003c10 <UART_DMAError+0x20>

08003c44 <UART_DMAAbortOnError>:
{
 8003c44:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c46:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c4c:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8003c4e:	f7fc fd49 	bl	80006e4 <HAL_UART_ErrorCallback>
}
 8003c52:	bd08      	pop	{r3, pc}

08003c54 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c54:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003c58:	2b22      	cmp	r3, #34	@ 0x22
 8003c5a:	d169      	bne.n	8003d30 <UART_Receive_IT+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5c:	6883      	ldr	r3, [r0, #8]
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c62:	d04f      	beq.n	8003d04 <UART_Receive_IT+0xb0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c64:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c6a:	d004      	beq.n	8003c76 <UART_Receive_IT+0x22>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d156      	bne.n	8003d1e <UART_Receive_IT+0xca>
 8003c70:	6903      	ldr	r3, [r0, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d153      	bne.n	8003d1e <UART_Receive_IT+0xca>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c76:	6803      	ldr	r3, [r0, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003c7c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003c7e:	3301      	adds	r3, #1
 8003c80:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8003c82:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d151      	bne.n	8003d34 <UART_Receive_IT+0xe0>
{
 8003c90:	b500      	push	{lr}
 8003c92:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c94:	6802      	ldr	r2, [r0, #0]
 8003c96:	68d3      	ldr	r3, [r2, #12]
 8003c98:	f023 0320 	bic.w	r3, r3, #32
 8003c9c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c9e:	6802      	ldr	r2, [r0, #0]
 8003ca0:	68d3      	ldr	r3, [r2, #12]
 8003ca2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ca8:	6802      	ldr	r2, [r0, #0]
 8003caa:	6953      	ldr	r3, [r2, #20]
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d133      	bne.n	8003d2a <UART_Receive_IT+0xd6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	f102 030c 	add.w	r3, r2, #12
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	320c      	adds	r2, #12
 8003cd6:	e842 3100 	strex	r1, r3, [r2]
 8003cda:	2900      	cmp	r1, #0
 8003cdc:	d1f3      	bne.n	8003cc6 <UART_Receive_IT+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cde:	6803      	ldr	r3, [r0, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	f012 0f10 	tst.w	r2, #16
 8003ce6:	d006      	beq.n	8003cf6 <UART_Receive_IT+0xa2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	9201      	str	r2, [sp, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	9201      	str	r2, [sp, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cf6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003cf8:	f7fc fcf2 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003cfc:	2000      	movs	r0, #0
}
 8003cfe:	b003      	add	sp, #12
 8003d00:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	6902      	ldr	r2, [r0, #16]
 8003d06:	2a00      	cmp	r2, #0
 8003d08:	d1ac      	bne.n	8003c64 <UART_Receive_IT+0x10>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d0a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d0c:	6803      	ldr	r3, [r0, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d14:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003d16:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003d18:	3302      	adds	r3, #2
 8003d1a:	6283      	str	r3, [r0, #40]	@ 0x28
 8003d1c:	e7b1      	b.n	8003c82 <UART_Receive_IT+0x2e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d1e:	6803      	ldr	r3, [r0, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d26:	7013      	strb	r3, [r2, #0]
 8003d28:	e7a8      	b.n	8003c7c <UART_Receive_IT+0x28>
        HAL_UART_RxCpltCallback(huart);
 8003d2a:	f7ff ff5f 	bl	8003bec <HAL_UART_RxCpltCallback>
 8003d2e:	e7e5      	b.n	8003cfc <UART_Receive_IT+0xa8>
    return HAL_BUSY;
 8003d30:	2002      	movs	r0, #2
 8003d32:	4770      	bx	lr
    return HAL_OK;
 8003d34:	2000      	movs	r0, #0
}
 8003d36:	4770      	bx	lr

08003d38 <HAL_UART_IRQHandler>:
{
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d3e:	6802      	ldr	r2, [r0, #0]
 8003d40:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d42:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d44:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8003d46:	f013 0f0f 	tst.w	r3, #15
 8003d4a:	d109      	bne.n	8003d60 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d4c:	f013 0f20 	tst.w	r3, #32
 8003d50:	d00c      	beq.n	8003d6c <HAL_UART_IRQHandler+0x34>
 8003d52:	f010 0f20 	tst.w	r0, #32
 8003d56:	d009      	beq.n	8003d6c <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7ff ff7b 	bl	8003c54 <UART_Receive_IT>
      return;
 8003d5e:	e016      	b.n	8003d8e <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d60:	f011 0101 	ands.w	r1, r1, #1
 8003d64:	d115      	bne.n	8003d92 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d66:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8003d6a:	d112      	bne.n	8003d92 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003d6e:	2901      	cmp	r1, #1
 8003d70:	d079      	beq.n	8003e66 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d72:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d76:	d003      	beq.n	8003d80 <HAL_UART_IRQHandler+0x48>
 8003d78:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003d7c:	f040 8114 	bne.w	8003fa8 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d80:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003d84:	d003      	beq.n	8003d8e <HAL_UART_IRQHandler+0x56>
 8003d86:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8003d8a:	f040 8111 	bne.w	8003fb0 <HAL_UART_IRQHandler+0x278>
}
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d92:	f013 0f01 	tst.w	r3, #1
 8003d96:	d006      	beq.n	8003da6 <HAL_UART_IRQHandler+0x6e>
 8003d98:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003d9c:	d003      	beq.n	8003da6 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d9e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003da6:	f013 0f04 	tst.w	r3, #4
 8003daa:	d004      	beq.n	8003db6 <HAL_UART_IRQHandler+0x7e>
 8003dac:	b119      	cbz	r1, 8003db6 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dae:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003db0:	f042 0202 	orr.w	r2, r2, #2
 8003db4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003db6:	f013 0f02 	tst.w	r3, #2
 8003dba:	d004      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x8e>
 8003dbc:	b119      	cbz	r1, 8003dc6 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dbe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003dc0:	f042 0204 	orr.w	r2, r2, #4
 8003dc4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dc6:	f013 0f08 	tst.w	r3, #8
 8003dca:	d007      	beq.n	8003ddc <HAL_UART_IRQHandler+0xa4>
 8003dcc:	f010 0f20 	tst.w	r0, #32
 8003dd0:	d100      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dd2:	b119      	cbz	r1, 8003ddc <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dd4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003dd6:	f042 0208 	orr.w	r2, r2, #8
 8003dda:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ddc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003dde:	2a00      	cmp	r2, #0
 8003de0:	d0d5      	beq.n	8003d8e <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de2:	f013 0f20 	tst.w	r3, #32
 8003de6:	d002      	beq.n	8003dee <HAL_UART_IRQHandler+0xb6>
 8003de8:	f010 0f20 	tst.w	r0, #32
 8003dec:	d129      	bne.n	8003e42 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003df6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003df8:	f012 0f08 	tst.w	r2, #8
 8003dfc:	d100      	bne.n	8003e00 <HAL_UART_IRQHandler+0xc8>
 8003dfe:	b363      	cbz	r3, 8003e5a <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003e00:	4620      	mov	r0, r4
 8003e02:	f7ff fd63 	bl	80038cc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003e0e:	d020      	beq.n	8003e52 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e10:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	f102 0314 	add.w	r3, r2, #20
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	3214      	adds	r2, #20
 8003e20:	e842 3100 	strex	r1, r3, [r2]
 8003e24:	2900      	cmp	r1, #0
 8003e26:	d1f3      	bne.n	8003e10 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8003e28:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003e2a:	b173      	cbz	r3, 8003e4a <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e2c:	4a62      	ldr	r2, [pc, #392]	@ (8003fb8 <HAL_UART_IRQHandler+0x280>)
 8003e2e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e30:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003e32:	f7fd ff20 	bl	8001c76 <HAL_DMA_Abort_IT>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d0a9      	beq.n	8003d8e <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e3a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003e3c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003e3e:	4798      	blx	r3
 8003e40:	e7a5      	b.n	8003d8e <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8003e42:	4620      	mov	r0, r4
 8003e44:	f7ff ff06 	bl	8003c54 <UART_Receive_IT>
 8003e48:	e7d1      	b.n	8003dee <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f7fc fc4a 	bl	80006e4 <HAL_UART_ErrorCallback>
 8003e50:	e79d      	b.n	8003d8e <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8003e52:	4620      	mov	r0, r4
 8003e54:	f7fc fc46 	bl	80006e4 <HAL_UART_ErrorCallback>
 8003e58:	e799      	b.n	8003d8e <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f7fc fc42 	bl	80006e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8003e64:	e793      	b.n	8003d8e <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e66:	f013 0f10 	tst.w	r3, #16
 8003e6a:	d082      	beq.n	8003d72 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e6c:	f010 0f10 	tst.w	r0, #16
 8003e70:	f43f af7f 	beq.w	8003d72 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e74:	2300      	movs	r3, #0
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	6813      	ldr	r3, [r2, #0]
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	6853      	ldr	r3, [r2, #4]
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e82:	6953      	ldr	r3, [r2, #20]
 8003e84:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003e88:	d052      	beq.n	8003f30 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e8a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003e8c:	6813      	ldr	r3, [r2, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f43f af7b 	beq.w	8003d8e <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e98:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003e9a:	4299      	cmp	r1, r3
 8003e9c:	f67f af77 	bls.w	8003d8e <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea2:	69d3      	ldr	r3, [r2, #28]
 8003ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea8:	d037      	beq.n	8003f1a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eaa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	f102 030c 	add.w	r3, r2, #12
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	320c      	adds	r2, #12
 8003eba:	e842 3100 	strex	r1, r3, [r2]
 8003ebe:	2900      	cmp	r1, #0
 8003ec0:	d1f3      	bne.n	8003eaa <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	f102 0314 	add.w	r3, r2, #20
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	3214      	adds	r2, #20
 8003ed2:	e842 3100 	strex	r1, r3, [r2]
 8003ed6:	2900      	cmp	r1, #0
 8003ed8:	d1f3      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	f102 0314 	add.w	r3, r2, #20
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	3214      	adds	r2, #20
 8003eea:	e842 3100 	strex	r1, r3, [r2]
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	d1f3      	bne.n	8003eda <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	f102 030c 	add.w	r3, r2, #12
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	320c      	adds	r2, #12
 8003f0c:	e842 3100 	strex	r1, r3, [r2]
 8003f10:	2900      	cmp	r1, #0
 8003f12:	d1f3      	bne.n	8003efc <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f14:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003f16:	f7fd fe65 	bl	8001be4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f1e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003f20:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	1ac9      	subs	r1, r1, r3
 8003f26:	b289      	uxth	r1, r1
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7fc fbd9 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
      return;
 8003f2e:	e72e      	b.n	8003d8e <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f30:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003f32:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	1ac9      	subs	r1, r1, r3
 8003f38:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003f3a:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f43f af25 	beq.w	8003d8e <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8003f44:	2900      	cmp	r1, #0
 8003f46:	f43f af22 	beq.w	8003d8e <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	f102 030c 	add.w	r3, r2, #12
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	320c      	adds	r2, #12
 8003f5a:	e842 3000 	strex	r0, r3, [r2]
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d1f3      	bne.n	8003f4a <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	f102 0314 	add.w	r3, r2, #20
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	3214      	adds	r2, #20
 8003f72:	e842 3000 	strex	r0, r3, [r2]
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d1f3      	bne.n	8003f62 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	2300      	movs	r3, #0
 8003f82:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	f102 030c 	add.w	r3, r2, #12
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	320c      	adds	r2, #12
 8003f94:	e842 3000 	strex	r0, r3, [r2]
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d1f3      	bne.n	8003f84 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f7fc fb9d 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
      return;
 8003fa6:	e6f2      	b.n	8003d8e <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f7ff fcbd 	bl	8003928 <UART_Transmit_IT>
    return;
 8003fae:	e6ee      	b.n	8003d8e <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f7ff fe08 	bl	8003bc6 <UART_EndTransmit_IT>
    return;
 8003fb6:	e6ea      	b.n	8003d8e <HAL_UART_IRQHandler+0x56>
 8003fb8:	08003c45 	.word	0x08003c45

08003fbc <UART_DMARxHalfCplt>:
{
 8003fbc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fbe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d002      	beq.n	8003fd0 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8003fca:	f7ff fe10 	bl	8003bee <HAL_UART_RxHalfCpltCallback>
}
 8003fce:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fd0:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003fd2:	0849      	lsrs	r1, r1, #1
 8003fd4:	f7fc fb84 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
 8003fd8:	e7f9      	b.n	8003fce <UART_DMARxHalfCplt+0x12>

08003fda <UART_DMAReceiveCplt>:
{
 8003fda:	b508      	push	{r3, lr}
 8003fdc:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fde:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003fe8:	d12b      	bne.n	8004042 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	f102 030c 	add.w	r3, r2, #12
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	320c      	adds	r2, #12
 8003ffe:	e842 3100 	strex	r1, r3, [r2]
 8004002:	2900      	cmp	r1, #0
 8004004:	d1f3      	bne.n	8003fee <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004006:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	f102 0314 	add.w	r3, r2, #20
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	3214      	adds	r2, #20
 8004016:	e842 3100 	strex	r1, r3, [r2]
 800401a:	2900      	cmp	r1, #0
 800401c:	d1f3      	bne.n	8004006 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	f102 0314 	add.w	r3, r2, #20
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	3214      	adds	r2, #20
 800402e:	e842 3100 	strex	r1, r3, [r2]
 8004032:	2900      	cmp	r1, #0
 8004034:	d1f3      	bne.n	800401e <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8004036:	2320      	movs	r3, #32
 8004038:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800403e:	2b01      	cmp	r3, #1
 8004040:	d007      	beq.n	8004052 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004042:	2300      	movs	r3, #0
 8004044:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004046:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004048:	2b01      	cmp	r3, #1
 800404a:	d00f      	beq.n	800406c <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800404c:	f7ff fdce 	bl	8003bec <HAL_UART_RxCpltCallback>
}
 8004050:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004052:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	f102 030c 	add.w	r3, r2, #12
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	320c      	adds	r2, #12
 8004062:	e842 3100 	strex	r1, r3, [r2]
 8004066:	2900      	cmp	r1, #0
 8004068:	d1f3      	bne.n	8004052 <UART_DMAReceiveCplt+0x78>
 800406a:	e7ea      	b.n	8004042 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800406c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800406e:	f7fc fb37 	bl	80006e0 <HAL_UARTEx_RxEventCallback>
 8004072:	e7ed      	b.n	8004050 <UART_DMAReceiveCplt+0x76>

08004074 <UART_Start_Receive_DMA>:
{
 8004074:	b530      	push	{r4, r5, lr}
 8004076:	b083      	sub	sp, #12
 8004078:	4604      	mov	r4, r0
 800407a:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800407c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800407e:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	2500      	movs	r5, #0
 8004082:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004084:	2222      	movs	r2, #34	@ 0x22
 8004086:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800408a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800408c:	481f      	ldr	r0, [pc, #124]	@ (800410c <UART_Start_Receive_DMA+0x98>)
 800408e:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004090:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004092:	481f      	ldr	r0, [pc, #124]	@ (8004110 <UART_Start_Receive_DMA+0x9c>)
 8004094:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004096:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004098:	481e      	ldr	r0, [pc, #120]	@ (8004114 <UART_Start_Receive_DMA+0xa0>)
 800409a:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 800409c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800409e:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80040a0:	6820      	ldr	r0, [r4, #0]
 80040a2:	460a      	mov	r2, r1
 80040a4:	1d01      	adds	r1, r0, #4
 80040a6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80040a8:	f7fd fd68 	bl	8001b7c <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80040ac:	9501      	str	r5, [sp, #4]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	9201      	str	r2, [sp, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040ba:	6923      	ldr	r3, [r4, #16]
 80040bc:	b15b      	cbz	r3, 80040d6 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	f102 030c 	add.w	r3, r2, #12
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	320c      	adds	r2, #12
 80040ce:	e842 3100 	strex	r1, r3, [r2]
 80040d2:	2900      	cmp	r1, #0
 80040d4:	d1f3      	bne.n	80040be <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	f102 0314 	add.w	r3, r2, #20
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	3214      	adds	r2, #20
 80040e6:	e842 3100 	strex	r1, r3, [r2]
 80040ea:	2900      	cmp	r1, #0
 80040ec:	d1f3      	bne.n	80040d6 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	f102 0314 	add.w	r3, r2, #20
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	3214      	adds	r2, #20
 80040fe:	e842 3100 	strex	r1, r3, [r2]
 8004102:	2900      	cmp	r1, #0
 8004104:	d1f3      	bne.n	80040ee <UART_Start_Receive_DMA+0x7a>
}
 8004106:	2000      	movs	r0, #0
 8004108:	b003      	add	sp, #12
 800410a:	bd30      	pop	{r4, r5, pc}
 800410c:	08003fdb 	.word	0x08003fdb
 8004110:	08003fbd 	.word	0x08003fbd
 8004114:	08003bf1 	.word	0x08003bf1

08004118 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004118:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800411c:	2b20      	cmp	r3, #32
 800411e:	d129      	bne.n	8004174 <HAL_UARTEx_ReceiveToIdle_DMA+0x5c>
{
 8004120:	b510      	push	{r4, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004126:	b339      	cbz	r1, 8004178 <HAL_UARTEx_ReceiveToIdle_DMA+0x60>
 8004128:	b912      	cbnz	r2, 8004130 <HAL_UARTEx_ReceiveToIdle_DMA+0x18>
      return HAL_ERROR;
 800412a:	2001      	movs	r0, #1
}
 800412c:	b002      	add	sp, #8
 800412e:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004130:	2301      	movs	r3, #1
 8004132:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004134:	2300      	movs	r3, #0
 8004136:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004138:	f7ff ff9c 	bl	8004074 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800413c:	2800      	cmp	r0, #0
 800413e:	d1f5      	bne.n	800412c <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
        status = HAL_ERROR;
 8004146:	2001      	movs	r0, #1
    return status;
 8004148:	e7f0      	b.n	800412c <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800414a:	2300      	movs	r3, #0
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	9201      	str	r2, [sp, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	f102 030c 	add.w	r3, r2, #12
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	320c      	adds	r2, #12
 800416a:	e842 3100 	strex	r1, r3, [r2]
 800416e:	2900      	cmp	r1, #0
 8004170:	d1f3      	bne.n	800415a <HAL_UARTEx_ReceiveToIdle_DMA+0x42>
 8004172:	e7db      	b.n	800412c <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    return HAL_BUSY;
 8004174:	2002      	movs	r0, #2
}
 8004176:	4770      	bx	lr
      return HAL_ERROR;
 8004178:	2001      	movs	r0, #1
 800417a:	e7d7      	b.n	800412c <HAL_UARTEx_ReceiveToIdle_DMA+0x14>

0800417c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800417c:	e7fe      	b.n	800417c <NMI_Handler>

0800417e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800417e:	e7fe      	b.n	800417e <HardFault_Handler>

08004180 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004180:	e7fe      	b.n	8004180 <MemManage_Handler>

08004182 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004182:	e7fe      	b.n	8004182 <BusFault_Handler>

08004184 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004184:	e7fe      	b.n	8004184 <UsageFault_Handler>

08004186 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004186:	4770      	bx	lr

08004188 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004188:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800418a:	4802      	ldr	r0, [pc, #8]	@ (8004194 <DMA1_Stream1_IRQHandler+0xc>)
 800418c:	f7fd fd86 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004190:	bd08      	pop	{r3, pc}
 8004192:	bf00      	nop
 8004194:	20004468 	.word	0x20004468

08004198 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004198:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800419a:	4802      	ldr	r0, [pc, #8]	@ (80041a4 <DMA1_Stream3_IRQHandler+0xc>)
 800419c:	f7fd fd7e 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80041a0:	bd08      	pop	{r3, pc}
 80041a2:	bf00      	nop
 80041a4:	200044c8 	.word	0x200044c8

080041a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80041a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041aa:	4802      	ldr	r0, [pc, #8]	@ (80041b4 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 80041ac:	f7fe ff6d 	bl	800308a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80041b0:	bd08      	pop	{r3, pc}
 80041b2:	bf00      	nop
 80041b4:	20004420 	.word	0x20004420

080041b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041ba:	4802      	ldr	r0, [pc, #8]	@ (80041c4 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80041bc:	f7fe ff65 	bl	800308a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80041c0:	bd08      	pop	{r3, pc}
 80041c2:	bf00      	nop
 80041c4:	20004420 	.word	0x20004420

080041c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80041c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041ca:	4802      	ldr	r0, [pc, #8]	@ (80041d4 <TIM1_CC_IRQHandler+0xc>)
 80041cc:	f7fe ff5d 	bl	800308a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80041d0:	bd08      	pop	{r3, pc}
 80041d2:	bf00      	nop
 80041d4:	20004420 	.word	0x20004420

080041d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80041d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80041da:	4802      	ldr	r0, [pc, #8]	@ (80041e4 <USART3_IRQHandler+0xc>)
 80041dc:	f7ff fdac 	bl	8003d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80041e0:	bd08      	pop	{r3, pc}
 80041e2:	bf00      	nop
 80041e4:	20004528 	.word	0x20004528

080041e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80041e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041ea:	4802      	ldr	r0, [pc, #8]	@ (80041f4 <TIM6_DAC_IRQHandler+0xc>)
 80041ec:	f7fe ff4d 	bl	800308a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80041f0:	bd08      	pop	{r3, pc}
 80041f2:	bf00      	nop
 80041f4:	20004264 	.word	0x20004264

080041f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f8:	4a03      	ldr	r2, [pc, #12]	@ (8004208 <SystemInit+0x10>)
 80041fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80041fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004202:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004206:	4770      	bx	lr
 8004208:	e000ed00 	.word	0xe000ed00

0800420c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800420c:	4b08      	ldr	r3, [pc, #32]	@ (8004230 <prvResetNextTaskUnblockTime+0x24>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b923      	cbnz	r3, 800421e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004214:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <prvResetNextTaskUnblockTime+0x28>)
 8004216:	f04f 32ff 	mov.w	r2, #4294967295
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421e:	4b04      	ldr	r3, [pc, #16]	@ (8004230 <prvResetNextTaskUnblockTime+0x24>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	4b02      	ldr	r3, [pc, #8]	@ (8004234 <prvResetNextTaskUnblockTime+0x28>)
 800422a:	601a      	str	r2, [r3, #0]
	}
}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	2000431c 	.word	0x2000431c
 8004234:	200042b4 	.word	0x200042b4

08004238 <prvInitialiseNewTask>:
{
 8004238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800423c:	4607      	mov	r7, r0
 800423e:	4698      	mov	r8, r3
 8004240:	9d08      	ldr	r5, [sp, #32]
 8004242:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8004246:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004248:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800424a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800424e:	3a01      	subs	r2, #1
 8004250:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004254:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8004258:	b3c1      	cbz	r1, 80042cc <prvInitialiseNewTask+0x94>
 800425a:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800425c:	f04f 0c00 	mov.w	ip, #0
 8004260:	f1bc 0f0f 	cmp.w	ip, #15
 8004264:	d809      	bhi.n	800427a <prvInitialiseNewTask+0x42>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004266:	f810 200c 	ldrb.w	r2, [r0, ip]
 800426a:	eb04 030c 	add.w	r3, r4, ip
 800426e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004272:	b112      	cbz	r2, 800427a <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004274:	f10c 0c01 	add.w	ip, ip, #1
 8004278:	e7f2      	b.n	8004260 <prvInitialiseNewTask+0x28>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800427a:	2300      	movs	r3, #0
 800427c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004280:	2d06      	cmp	r5, #6
 8004282:	d900      	bls.n	8004286 <prvInitialiseNewTask+0x4e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004284:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004286:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004288:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800428a:	f04f 0a00 	mov.w	sl, #0
 800428e:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004292:	1d20      	adds	r0, r4, #4
 8004294:	f7fc fdaf 	bl	8000df6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004298:	f104 0018 	add.w	r0, r4, #24
 800429c:	f7fc fdab 	bl	8000df6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042a0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a2:	f1c5 0507 	rsb	r5, r5, #7
 80042a6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042a8:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80042aa:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042ae:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042b2:	4642      	mov	r2, r8
 80042b4:	4639      	mov	r1, r7
 80042b6:	4630      	mov	r0, r6
 80042b8:	f7fc fe9a 	bl	8000ff0 <pxPortInitialiseStack>
 80042bc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80042be:	f1b9 0f00 	cmp.w	r9, #0
 80042c2:	d001      	beq.n	80042c8 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042c4:	f8c9 4000 	str.w	r4, [r9]
}
 80042c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80042d2:	e7d5      	b.n	8004280 <prvInitialiseNewTask+0x48>

080042d4 <prvInitialiseTaskLists>:
{
 80042d4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042d6:	2400      	movs	r4, #0
 80042d8:	e007      	b.n	80042ea <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042da:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80042de:	0093      	lsls	r3, r2, #2
 80042e0:	480e      	ldr	r0, [pc, #56]	@ (800431c <prvInitialiseTaskLists+0x48>)
 80042e2:	4418      	add	r0, r3
 80042e4:	f7fc fd7c 	bl	8000de0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042e8:	3401      	adds	r4, #1
 80042ea:	2c06      	cmp	r4, #6
 80042ec:	d9f5      	bls.n	80042da <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80042ee:	4d0c      	ldr	r5, [pc, #48]	@ (8004320 <prvInitialiseTaskLists+0x4c>)
 80042f0:	4628      	mov	r0, r5
 80042f2:	f7fc fd75 	bl	8000de0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042f6:	4c0b      	ldr	r4, [pc, #44]	@ (8004324 <prvInitialiseTaskLists+0x50>)
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7fc fd71 	bl	8000de0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042fe:	480a      	ldr	r0, [pc, #40]	@ (8004328 <prvInitialiseTaskLists+0x54>)
 8004300:	f7fc fd6e 	bl	8000de0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004304:	4809      	ldr	r0, [pc, #36]	@ (800432c <prvInitialiseTaskLists+0x58>)
 8004306:	f7fc fd6b 	bl	8000de0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800430a:	4809      	ldr	r0, [pc, #36]	@ (8004330 <prvInitialiseTaskLists+0x5c>)
 800430c:	f7fc fd68 	bl	8000de0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004310:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <prvInitialiseTaskLists+0x60>)
 8004312:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004314:	4b08      	ldr	r3, [pc, #32]	@ (8004338 <prvInitialiseTaskLists+0x64>)
 8004316:	601c      	str	r4, [r3, #0]
}
 8004318:	bd38      	pop	{r3, r4, r5, pc}
 800431a:	bf00      	nop
 800431c:	20004348 	.word	0x20004348
 8004320:	20004334 	.word	0x20004334
 8004324:	20004320 	.word	0x20004320
 8004328:	20004304 	.word	0x20004304
 800432c:	200042f0 	.word	0x200042f0
 8004330:	200042d8 	.word	0x200042d8
 8004334:	2000431c 	.word	0x2000431c
 8004338:	20004318 	.word	0x20004318

0800433c <prvAddNewTaskToReadyList>:
{
 800433c:	b510      	push	{r4, lr}
 800433e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004340:	f7fc fe80 	bl	8001044 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004344:	4a21      	ldr	r2, [pc, #132]	@ (80043cc <prvAddNewTaskToReadyList+0x90>)
 8004346:	6813      	ldr	r3, [r2, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800434c:	4b20      	ldr	r3, [pc, #128]	@ (80043d0 <prvAddNewTaskToReadyList+0x94>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b15b      	cbz	r3, 800436a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004352:	4b20      	ldr	r3, [pc, #128]	@ (80043d4 <prvAddNewTaskToReadyList+0x98>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	b96b      	cbnz	r3, 8004374 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004358:	4b1d      	ldr	r3, [pc, #116]	@ (80043d0 <prvAddNewTaskToReadyList+0x94>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d807      	bhi.n	8004374 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004364:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <prvAddNewTaskToReadyList+0x94>)
 8004366:	601c      	str	r4, [r3, #0]
 8004368:	e004      	b.n	8004374 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800436a:	4b19      	ldr	r3, [pc, #100]	@ (80043d0 <prvAddNewTaskToReadyList+0x94>)
 800436c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800436e:	6813      	ldr	r3, [r2, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d028      	beq.n	80043c6 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8004374:	4a18      	ldr	r2, [pc, #96]	@ (80043d8 <prvAddNewTaskToReadyList+0x9c>)
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800437c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800437e:	2301      	movs	r3, #1
 8004380:	4083      	lsls	r3, r0
 8004382:	4a16      	ldr	r2, [pc, #88]	@ (80043dc <prvAddNewTaskToReadyList+0xa0>)
 8004384:	6811      	ldr	r1, [r2, #0]
 8004386:	430b      	orrs	r3, r1
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800438e:	1d21      	adds	r1, r4, #4
 8004390:	4b13      	ldr	r3, [pc, #76]	@ (80043e0 <prvAddNewTaskToReadyList+0xa4>)
 8004392:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004396:	f7fc fd31 	bl	8000dfc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800439a:	f7fc fe75 	bl	8001088 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800439e:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <prvAddNewTaskToReadyList+0x98>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	b17b      	cbz	r3, 80043c4 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043a4:	4b0a      	ldr	r3, [pc, #40]	@ (80043d0 <prvAddNewTaskToReadyList+0x94>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d209      	bcs.n	80043c4 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 80043b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80043b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
}
 80043c4:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80043c6:	f7ff ff85 	bl	80042d4 <prvInitialiseTaskLists>
 80043ca:	e7d3      	b.n	8004374 <prvAddNewTaskToReadyList+0x38>
 80043cc:	200042d4 	.word	0x200042d4
 80043d0:	200043d4 	.word	0x200043d4
 80043d4:	200042c8 	.word	0x200042c8
 80043d8:	200042b8 	.word	0x200042b8
 80043dc:	200042cc 	.word	0x200042cc
 80043e0:	20004348 	.word	0x20004348

080043e4 <prvDeleteTCB>:
	{
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043e8:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 80043ec:	b163      	cbz	r3, 8004408 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d011      	beq.n	8004416 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d00e      	beq.n	8004414 <prvDeleteTCB+0x30>
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	e7fe      	b.n	8004406 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8004408:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800440a:	f7fc fc55 	bl	8000cb8 <vPortFree>
				vPortFree( pxTCB );
 800440e:	4620      	mov	r0, r4
 8004410:	f7fc fc52 	bl	8000cb8 <vPortFree>
	}
 8004414:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004416:	f7fc fc4f 	bl	8000cb8 <vPortFree>
 800441a:	e7fb      	b.n	8004414 <prvDeleteTCB+0x30>

0800441c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800441c:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <prvCheckTasksWaitingTermination+0x40>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	b1d3      	cbz	r3, 8004458 <prvCheckTasksWaitingTermination+0x3c>
{
 8004422:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8004424:	f7fc fe0e 	bl	8001044 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004428:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <prvCheckTasksWaitingTermination+0x44>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442e:	1d20      	adds	r0, r4, #4
 8004430:	f7fc fd08 	bl	8000e44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004434:	4a0b      	ldr	r2, [pc, #44]	@ (8004464 <prvCheckTasksWaitingTermination+0x48>)
 8004436:	6813      	ldr	r3, [r2, #0]
 8004438:	3b01      	subs	r3, #1
 800443a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800443c:	4a07      	ldr	r2, [pc, #28]	@ (800445c <prvCheckTasksWaitingTermination+0x40>)
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8004444:	f7fc fe20 	bl	8001088 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff ffcb 	bl	80043e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800444e:	4b03      	ldr	r3, [pc, #12]	@ (800445c <prvCheckTasksWaitingTermination+0x40>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <prvCheckTasksWaitingTermination+0x8>
}
 8004456:	bd10      	pop	{r4, pc}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200042ec 	.word	0x200042ec
 8004460:	200042f0 	.word	0x200042f0
 8004464:	200042d4 	.word	0x200042d4

08004468 <prvIdleTask>:
{
 8004468:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800446a:	f7ff ffd7 	bl	800441c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800446e:	4b07      	ldr	r3, [pc, #28]	@ (800448c <prvIdleTask+0x24>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d9f9      	bls.n	800446a <prvIdleTask+0x2>
				taskYIELD();
 8004476:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800447a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800447e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	e7ee      	b.n	800446a <prvIdleTask+0x2>
 800448c:	20004348 	.word	0x20004348

08004490 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	4604      	mov	r4, r0
 8004494:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004496:	4b1d      	ldr	r3, [pc, #116]	@ (800450c <prvAddCurrentTaskToDelayedList+0x7c>)
 8004498:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800449a:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <prvAddCurrentTaskToDelayedList+0x80>)
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	3004      	adds	r0, #4
 80044a0:	f7fc fcd0 	bl	8000e44 <uxListRemove>
 80044a4:	b948      	cbnz	r0, 80044ba <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <prvAddCurrentTaskToDelayedList+0x80>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	2201      	movs	r2, #1
 80044ae:	409a      	lsls	r2, r3
 80044b0:	4918      	ldr	r1, [pc, #96]	@ (8004514 <prvAddCurrentTaskToDelayedList+0x84>)
 80044b2:	680b      	ldr	r3, [r1, #0]
 80044b4:	ea23 0302 	bic.w	r3, r3, r2
 80044b8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044ba:	f1b4 3fff 	cmp.w	r4, #4294967295
 80044be:	d00d      	beq.n	80044dc <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044c0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044c2:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <prvAddCurrentTaskToDelayedList+0x80>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80044c8:	42a6      	cmp	r6, r4
 80044ca:	d910      	bls.n	80044ee <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044cc:	4b12      	ldr	r3, [pc, #72]	@ (8004518 <prvAddCurrentTaskToDelayedList+0x88>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <prvAddCurrentTaskToDelayedList+0x80>)
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	3104      	adds	r1, #4
 80044d6:	f7fc fc9c 	bl	8000e12 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044da:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044dc:	2d00      	cmp	r5, #0
 80044de:	d0ef      	beq.n	80044c0 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004510 <prvAddCurrentTaskToDelayedList+0x80>)
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	3104      	adds	r1, #4
 80044e6:	480d      	ldr	r0, [pc, #52]	@ (800451c <prvAddCurrentTaskToDelayedList+0x8c>)
 80044e8:	f7fc fc88 	bl	8000dfc <vListInsertEnd>
 80044ec:	e7f5      	b.n	80044da <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004520 <prvAddCurrentTaskToDelayedList+0x90>)
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	4b07      	ldr	r3, [pc, #28]	@ (8004510 <prvAddCurrentTaskToDelayedList+0x80>)
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	3104      	adds	r1, #4
 80044f8:	f7fc fc8b 	bl	8000e12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044fc:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <prvAddCurrentTaskToDelayedList+0x94>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	42a3      	cmp	r3, r4
 8004502:	d9ea      	bls.n	80044da <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8004504:	4b07      	ldr	r3, [pc, #28]	@ (8004524 <prvAddCurrentTaskToDelayedList+0x94>)
 8004506:	601c      	str	r4, [r3, #0]
}
 8004508:	e7e7      	b.n	80044da <prvAddCurrentTaskToDelayedList+0x4a>
 800450a:	bf00      	nop
 800450c:	200042d0 	.word	0x200042d0
 8004510:	200043d4 	.word	0x200043d4
 8004514:	200042cc 	.word	0x200042cc
 8004518:	20004318 	.word	0x20004318
 800451c:	200042d8 	.word	0x200042d8
 8004520:	2000431c 	.word	0x2000431c
 8004524:	200042b4 	.word	0x200042b4

08004528 <xTaskCreateStatic>:
	{
 8004528:	b530      	push	{r4, r5, lr}
 800452a:	b087      	sub	sp, #28
 800452c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800452e:	b17c      	cbz	r4, 8004550 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004530:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004532:	b1b5      	cbz	r5, 8004562 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004534:	2554      	movs	r5, #84	@ 0x54
 8004536:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004538:	9d04      	ldr	r5, [sp, #16]
 800453a:	2d54      	cmp	r5, #84	@ 0x54
 800453c:	d01a      	beq.n	8004574 <xTaskCreateStatic+0x4c>
 800453e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	e7fe      	b.n	800454e <xTaskCreateStatic+0x26>
 8004550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004560:	e7fe      	b.n	8004560 <xTaskCreateStatic+0x38>
 8004562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004572:	e7fe      	b.n	8004572 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004574:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004576:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004578:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800457a:	2402      	movs	r4, #2
 800457c:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004580:	2400      	movs	r4, #0
 8004582:	9403      	str	r4, [sp, #12]
 8004584:	9502      	str	r5, [sp, #8]
 8004586:	ac05      	add	r4, sp, #20
 8004588:	9401      	str	r4, [sp, #4]
 800458a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800458c:	9400      	str	r4, [sp, #0]
 800458e:	f7ff fe53 	bl	8004238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004592:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004594:	f7ff fed2 	bl	800433c <prvAddNewTaskToReadyList>
	}
 8004598:	9805      	ldr	r0, [sp, #20]
 800459a:	b007      	add	sp, #28
 800459c:	bd30      	pop	{r4, r5, pc}

0800459e <xTaskCreate>:
	{
 800459e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045a2:	b085      	sub	sp, #20
 80045a4:	4607      	mov	r7, r0
 80045a6:	4688      	mov	r8, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045ac:	0090      	lsls	r0, r2, #2
 80045ae:	f7fc fb01 	bl	8000bb4 <pvPortMalloc>
			if( pxStack != NULL )
 80045b2:	b308      	cbz	r0, 80045f8 <xTaskCreate+0x5a>
 80045b4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045b6:	2054      	movs	r0, #84	@ 0x54
 80045b8:	f7fc fafc 	bl	8000bb4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80045bc:	4605      	mov	r5, r0
 80045be:	b1a8      	cbz	r0, 80045ec <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80045c0:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045ca:	9303      	str	r3, [sp, #12]
 80045cc:	9002      	str	r0, [sp, #8]
 80045ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	4633      	mov	r3, r6
 80045d8:	4622      	mov	r2, r4
 80045da:	4641      	mov	r1, r8
 80045dc:	4638      	mov	r0, r7
 80045de:	f7ff fe2b 	bl	8004238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045e2:	4628      	mov	r0, r5
 80045e4:	f7ff feaa 	bl	800433c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045e8:	2001      	movs	r0, #1
 80045ea:	e007      	b.n	80045fc <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80045ec:	4648      	mov	r0, r9
 80045ee:	f7fc fb63 	bl	8000cb8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045f2:	f04f 30ff 	mov.w	r0, #4294967295
 80045f6:	e001      	b.n	80045fc <xTaskCreate+0x5e>
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80045fc:	b005      	add	sp, #20
 80045fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004604 <vTaskStartScheduler>:
{
 8004604:	b510      	push	{r4, lr}
 8004606:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004608:	2400      	movs	r4, #0
 800460a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800460c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800460e:	aa07      	add	r2, sp, #28
 8004610:	a906      	add	r1, sp, #24
 8004612:	a805      	add	r0, sp, #20
 8004614:	f7fc f99a 	bl	800094c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004618:	9b05      	ldr	r3, [sp, #20]
 800461a:	9302      	str	r3, [sp, #8]
 800461c:	9b06      	ldr	r3, [sp, #24]
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	9400      	str	r4, [sp, #0]
 8004622:	4623      	mov	r3, r4
 8004624:	9a07      	ldr	r2, [sp, #28]
 8004626:	490e      	ldr	r1, [pc, #56]	@ (8004660 <vTaskStartScheduler+0x5c>)
 8004628:	480e      	ldr	r0, [pc, #56]	@ (8004664 <vTaskStartScheduler+0x60>)
 800462a:	f7ff ff7d 	bl	8004528 <xTaskCreateStatic>
 800462e:	4b0e      	ldr	r3, [pc, #56]	@ (8004668 <vTaskStartScheduler+0x64>)
 8004630:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8004632:	b190      	cbz	r0, 800465a <vTaskStartScheduler+0x56>
 8004634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004644:	4b09      	ldr	r3, [pc, #36]	@ (800466c <vTaskStartScheduler+0x68>)
 8004646:	f04f 32ff 	mov.w	r2, #4294967295
 800464a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800464c:	4b08      	ldr	r3, [pc, #32]	@ (8004670 <vTaskStartScheduler+0x6c>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004652:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <vTaskStartScheduler+0x70>)
 8004654:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004656:	f7fc fd8f 	bl	8001178 <xPortStartScheduler>
}
 800465a:	b008      	add	sp, #32
 800465c:	bd10      	pop	{r4, pc}
 800465e:	bf00      	nop
 8004660:	08005248 	.word	0x08005248
 8004664:	08004469 	.word	0x08004469
 8004668:	200042b0 	.word	0x200042b0
 800466c:	200042b4 	.word	0x200042b4
 8004670:	200042c8 	.word	0x200042c8
 8004674:	200042d0 	.word	0x200042d0

08004678 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004678:	4a02      	ldr	r2, [pc, #8]	@ (8004684 <vTaskSuspendAll+0xc>)
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	6013      	str	r3, [r2, #0]
}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	200042ac 	.word	0x200042ac

08004688 <xTaskIncrementTick>:
{
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800468a:	4b3a      	ldr	r3, [pc, #232]	@ (8004774 <xTaskIncrementTick+0xec>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d169      	bne.n	8004766 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004692:	4b39      	ldr	r3, [pc, #228]	@ (8004778 <xTaskIncrementTick+0xf0>)
 8004694:	681d      	ldr	r5, [r3, #0]
 8004696:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004698:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800469a:	b9c5      	cbnz	r5, 80046ce <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800469c:	4b37      	ldr	r3, [pc, #220]	@ (800477c <xTaskIncrementTick+0xf4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	b143      	cbz	r3, 80046b6 <xTaskIncrementTick+0x2e>
 80046a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	e7fe      	b.n	80046b4 <xTaskIncrementTick+0x2c>
 80046b6:	4a31      	ldr	r2, [pc, #196]	@ (800477c <xTaskIncrementTick+0xf4>)
 80046b8:	6811      	ldr	r1, [r2, #0]
 80046ba:	4b31      	ldr	r3, [pc, #196]	@ (8004780 <xTaskIncrementTick+0xf8>)
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	6010      	str	r0, [r2, #0]
 80046c0:	6019      	str	r1, [r3, #0]
 80046c2:	4a30      	ldr	r2, [pc, #192]	@ (8004784 <xTaskIncrementTick+0xfc>)
 80046c4:	6813      	ldr	r3, [r2, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	f7ff fd9f 	bl	800420c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004788 <xTaskIncrementTick+0x100>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	42ab      	cmp	r3, r5
 80046d4:	d93d      	bls.n	8004752 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80046d6:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046d8:	4b2c      	ldr	r3, [pc, #176]	@ (800478c <xTaskIncrementTick+0x104>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046e2:	009a      	lsls	r2, r3, #2
 80046e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004790 <xTaskIncrementTick+0x108>)
 80046e6:	589b      	ldr	r3, [r3, r2]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d900      	bls.n	80046ee <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80046ec:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80046ee:	4b29      	ldr	r3, [pc, #164]	@ (8004794 <xTaskIncrementTick+0x10c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03c      	beq.n	8004770 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 80046f6:	2701      	movs	r7, #1
	return xSwitchRequired;
 80046f8:	e03a      	b.n	8004770 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 80046fa:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046fc:	4b1f      	ldr	r3, [pc, #124]	@ (800477c <xTaskIncrementTick+0xf4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	b343      	cbz	r3, 8004756 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004704:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <xTaskIncrementTick+0xf4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800470c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800470e:	429d      	cmp	r5, r3
 8004710:	d326      	bcc.n	8004760 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004712:	1d26      	adds	r6, r4, #4
 8004714:	4630      	mov	r0, r6
 8004716:	f7fc fb95 	bl	8000e44 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800471a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800471c:	b11b      	cbz	r3, 8004726 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800471e:	f104 0018 	add.w	r0, r4, #24
 8004722:	f7fc fb8f 	bl	8000e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004726:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004728:	2201      	movs	r2, #1
 800472a:	409a      	lsls	r2, r3
 800472c:	491a      	ldr	r1, [pc, #104]	@ (8004798 <xTaskIncrementTick+0x110>)
 800472e:	6808      	ldr	r0, [r1, #0]
 8004730:	4302      	orrs	r2, r0
 8004732:	600a      	str	r2, [r1, #0]
 8004734:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004738:	009a      	lsls	r2, r3, #2
 800473a:	4631      	mov	r1, r6
 800473c:	4814      	ldr	r0, [pc, #80]	@ (8004790 <xTaskIncrementTick+0x108>)
 800473e:	4410      	add	r0, r2
 8004740:	f7fc fb5c 	bl	8000dfc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004744:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004746:	4b11      	ldr	r3, [pc, #68]	@ (800478c <xTaskIncrementTick+0x104>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	429a      	cmp	r2, r3
 800474e:	d2d4      	bcs.n	80046fa <xTaskIncrementTick+0x72>
 8004750:	e7d4      	b.n	80046fc <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8004752:	2700      	movs	r7, #0
 8004754:	e7d2      	b.n	80046fc <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004756:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <xTaskIncrementTick+0x100>)
 8004758:	f04f 32ff 	mov.w	r2, #4294967295
 800475c:	601a      	str	r2, [r3, #0]
					break;
 800475e:	e7bb      	b.n	80046d8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8004760:	4a09      	ldr	r2, [pc, #36]	@ (8004788 <xTaskIncrementTick+0x100>)
 8004762:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004764:	e7b8      	b.n	80046d8 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8004766:	4a0d      	ldr	r2, [pc, #52]	@ (800479c <xTaskIncrementTick+0x114>)
 8004768:	6813      	ldr	r3, [r2, #0]
 800476a:	3301      	adds	r3, #1
 800476c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800476e:	2700      	movs	r7, #0
}
 8004770:	4638      	mov	r0, r7
 8004772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004774:	200042ac 	.word	0x200042ac
 8004778:	200042d0 	.word	0x200042d0
 800477c:	2000431c 	.word	0x2000431c
 8004780:	20004318 	.word	0x20004318
 8004784:	200042bc 	.word	0x200042bc
 8004788:	200042b4 	.word	0x200042b4
 800478c:	200043d4 	.word	0x200043d4
 8004790:	20004348 	.word	0x20004348
 8004794:	200042c0 	.word	0x200042c0
 8004798:	200042cc 	.word	0x200042cc
 800479c:	200042c4 	.word	0x200042c4

080047a0 <xTaskResumeAll>:
{
 80047a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80047a2:	4b35      	ldr	r3, [pc, #212]	@ (8004878 <xTaskResumeAll+0xd8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	b943      	cbnz	r3, 80047ba <xTaskResumeAll+0x1a>
 80047a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	e7fe      	b.n	80047b8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80047ba:	f7fc fc43 	bl	8001044 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80047be:	4b2e      	ldr	r3, [pc, #184]	@ (8004878 <xTaskResumeAll+0xd8>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	3a01      	subs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d14f      	bne.n	800486c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047cc:	4b2b      	ldr	r3, [pc, #172]	@ (800487c <xTaskResumeAll+0xdc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	b90b      	cbnz	r3, 80047d6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80047d2:	2400      	movs	r4, #0
 80047d4:	e04b      	b.n	800486e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80047d6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047d8:	4b29      	ldr	r3, [pc, #164]	@ (8004880 <xTaskResumeAll+0xe0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b31b      	cbz	r3, 8004826 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047de:	4b28      	ldr	r3, [pc, #160]	@ (8004880 <xTaskResumeAll+0xe0>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047e4:	f104 0018 	add.w	r0, r4, #24
 80047e8:	f7fc fb2c 	bl	8000e44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ec:	1d25      	adds	r5, r4, #4
 80047ee:	4628      	mov	r0, r5
 80047f0:	f7fc fb28 	bl	8000e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047f4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80047f6:	2301      	movs	r3, #1
 80047f8:	4083      	lsls	r3, r0
 80047fa:	4a22      	ldr	r2, [pc, #136]	@ (8004884 <xTaskResumeAll+0xe4>)
 80047fc:	6811      	ldr	r1, [r2, #0]
 80047fe:	430b      	orrs	r3, r1
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004806:	4629      	mov	r1, r5
 8004808:	4b1f      	ldr	r3, [pc, #124]	@ (8004888 <xTaskResumeAll+0xe8>)
 800480a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800480e:	f7fc faf5 	bl	8000dfc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004812:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004814:	4b1d      	ldr	r3, [pc, #116]	@ (800488c <xTaskResumeAll+0xec>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	429a      	cmp	r2, r3
 800481c:	d3dc      	bcc.n	80047d8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800481e:	4b1c      	ldr	r3, [pc, #112]	@ (8004890 <xTaskResumeAll+0xf0>)
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e7d8      	b.n	80047d8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8004826:	b10c      	cbz	r4, 800482c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8004828:	f7ff fcf0 	bl	800420c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <xTaskResumeAll+0xf4>)
 800482e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8004830:	b984      	cbnz	r4, 8004854 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8004832:	4b17      	ldr	r3, [pc, #92]	@ (8004890 <xTaskResumeAll+0xf0>)
 8004834:	681c      	ldr	r4, [r3, #0]
 8004836:	b1d4      	cbz	r4, 800486e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8004838:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800483c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004840:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800484c:	2401      	movs	r4, #1
 800484e:	e00e      	b.n	800486e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004850:	3c01      	subs	r4, #1
 8004852:	d007      	beq.n	8004864 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8004854:	f7ff ff18 	bl	8004688 <xTaskIncrementTick>
 8004858:	2800      	cmp	r0, #0
 800485a:	d0f9      	beq.n	8004850 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800485c:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <xTaskResumeAll+0xf0>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e7f5      	b.n	8004850 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8004864:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <xTaskResumeAll+0xf4>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e7e2      	b.n	8004832 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800486c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800486e:	f7fc fc0b 	bl	8001088 <vPortExitCritical>
}
 8004872:	4620      	mov	r0, r4
 8004874:	bd38      	pop	{r3, r4, r5, pc}
 8004876:	bf00      	nop
 8004878:	200042ac 	.word	0x200042ac
 800487c:	200042d4 	.word	0x200042d4
 8004880:	20004304 	.word	0x20004304
 8004884:	200042cc 	.word	0x200042cc
 8004888:	20004348 	.word	0x20004348
 800488c:	200043d4 	.word	0x200043d4
 8004890:	200042c0 	.word	0x200042c0
 8004894:	200042c4 	.word	0x200042c4

08004898 <vTaskDelay>:
	{
 8004898:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800489a:	b1a8      	cbz	r0, 80048c8 <vTaskDelay+0x30>
 800489c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800489e:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <vTaskDelay+0x48>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b143      	cbz	r3, 80048b6 <vTaskDelay+0x1e>
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	e7fe      	b.n	80048b4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80048b6:	f7ff fedf 	bl	8004678 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048ba:	2100      	movs	r1, #0
 80048bc:	4620      	mov	r0, r4
 80048be:	f7ff fde7 	bl	8004490 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80048c2:	f7ff ff6d 	bl	80047a0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80048c6:	b948      	cbnz	r0, 80048dc <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80048c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80048cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	f3bf 8f6f 	isb	sy
	}
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	bf00      	nop
 80048e0:	200042ac 	.word	0x200042ac

080048e4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048e4:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <vTaskSwitchContext+0x84>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	b11b      	cbz	r3, 80048f2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80048ea:	4b20      	ldr	r3, [pc, #128]	@ (800496c <vTaskSwitchContext+0x88>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80048f2:	4b1e      	ldr	r3, [pc, #120]	@ (800496c <vTaskSwitchContext+0x88>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004970 <vTaskSwitchContext+0x8c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048fc:	fab3 f383 	clz	r3, r3
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f1c3 031f 	rsb	r3, r3, #31
 8004906:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800490a:	008a      	lsls	r2, r1, #2
 800490c:	4919      	ldr	r1, [pc, #100]	@ (8004974 <vTaskSwitchContext+0x90>)
 800490e:	588a      	ldr	r2, [r1, r2]
 8004910:	b942      	cbnz	r2, 8004924 <vTaskSwitchContext+0x40>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	e7fe      	b.n	8004922 <vTaskSwitchContext+0x3e>
 8004924:	4813      	ldr	r0, [pc, #76]	@ (8004974 <vTaskSwitchContext+0x90>)
 8004926:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800492a:	008a      	lsls	r2, r1, #2
 800492c:	4402      	add	r2, r0
 800492e:	6851      	ldr	r1, [r2, #4]
 8004930:	6849      	ldr	r1, [r1, #4]
 8004932:	6051      	str	r1, [r2, #4]
 8004934:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8004938:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800493c:	3208      	adds	r2, #8
 800493e:	4402      	add	r2, r0
 8004940:	4291      	cmp	r1, r2
 8004942:	d009      	beq.n	8004958 <vTaskSwitchContext+0x74>
 8004944:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004948:	009a      	lsls	r2, r3, #2
 800494a:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <vTaskSwitchContext+0x90>)
 800494c:	4413      	add	r3, r2
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <vTaskSwitchContext+0x94>)
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004958:	6848      	ldr	r0, [r1, #4]
 800495a:	4662      	mov	r2, ip
 800495c:	0091      	lsls	r1, r2, #2
 800495e:	4a05      	ldr	r2, [pc, #20]	@ (8004974 <vTaskSwitchContext+0x90>)
 8004960:	440a      	add	r2, r1
 8004962:	6050      	str	r0, [r2, #4]
 8004964:	e7ee      	b.n	8004944 <vTaskSwitchContext+0x60>
 8004966:	bf00      	nop
 8004968:	200042ac 	.word	0x200042ac
 800496c:	200042c0 	.word	0x200042c0
 8004970:	200042cc 	.word	0x200042cc
 8004974:	20004348 	.word	0x20004348
 8004978:	200043d4 	.word	0x200043d4

0800497c <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800497c:	b500      	push	{lr}
 800497e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8004980:	a902      	add	r1, sp, #8
 8004982:	2300      	movs	r3, #0
 8004984:	9302      	str	r3, [sp, #8]
 8004986:	604b      	str	r3, [r1, #4]
 8004988:	608b      	str	r3, [r1, #8]
 800498a:	60cb      	str	r3, [r1, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004990:	480f      	ldr	r0, [pc, #60]	@ (80049d0 <MX_TIM3_Init+0x54>)
 8004992:	4a10      	ldr	r2, [pc, #64]	@ (80049d4 <MX_TIM3_Init+0x58>)
 8004994:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8004996:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004998:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 800499a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800499e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049a2:	6183      	str	r3, [r0, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.Commutation_Delay = 0;
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80049a4:	f7fe fe54 	bl	8003650 <HAL_TIMEx_HallSensor_Init>
 80049a8:	b958      	cbnz	r0, 80049c2 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80049aa:	2350      	movs	r3, #80	@ 0x50
 80049ac:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80049b2:	4669      	mov	r1, sp
 80049b4:	4806      	ldr	r0, [pc, #24]	@ (80049d0 <MX_TIM3_Init+0x54>)
 80049b6:	f7fe feb5 	bl	8003724 <HAL_TIMEx_MasterConfigSynchronization>
 80049ba:	b928      	cbnz	r0, 80049c8 <MX_TIM3_Init+0x4c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80049bc:	b007      	add	sp, #28
 80049be:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80049c2:	f7fc fa5f 	bl	8000e84 <Error_Handler>
 80049c6:	e7f0      	b.n	80049aa <MX_TIM3_Init+0x2e>
    Error_Handler();
 80049c8:	f7fc fa5c 	bl	8000e84 <Error_Handler>
}
 80049cc:	e7f6      	b.n	80049bc <MX_TIM3_Init+0x40>
 80049ce:	bf00      	nop
 80049d0:	200043d8 	.word	0x200043d8
 80049d4:	40000400 	.word	0x40000400

080049d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80049d8:	b510      	push	{r4, lr}
 80049da:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049dc:	2300      	movs	r3, #0
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	9305      	str	r3, [sp, #20]
 80049e4:	9306      	str	r3, [sp, #24]
 80049e6:	9307      	str	r3, [sp, #28]
  if(tim_baseHandle->Instance==TIM1)
 80049e8:	6802      	ldr	r2, [r0, #0]
 80049ea:	4b20      	ldr	r3, [pc, #128]	@ (8004a6c <HAL_TIM_Base_MspInit+0x94>)
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80049f0:	b008      	add	sp, #32
 80049f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049f4:	2400      	movs	r4, #0
 80049f6:	9401      	str	r4, [sp, #4]
 80049f8:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80049fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a06:	f002 0201 	and.w	r2, r2, #1
 8004a0a:	9201      	str	r2, [sp, #4]
 8004a0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0e:	9402      	str	r4, [sp, #8]
 8004a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a12:	f042 0202 	orr.w	r2, r2, #2
 8004a16:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	9302      	str	r3, [sp, #8]
 8004a20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a30:	a903      	add	r1, sp, #12
 8004a32:	480f      	ldr	r0, [pc, #60]	@ (8004a70 <HAL_TIM_Base_MspInit+0x98>)
 8004a34:	f7fd fa20 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8004a38:	4622      	mov	r2, r4
 8004a3a:	2105      	movs	r1, #5
 8004a3c:	2018      	movs	r0, #24
 8004a3e:	f7fc ffa7 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004a42:	2018      	movs	r0, #24
 8004a44:	f7fc ffb4 	bl	80019b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004a48:	4622      	mov	r2, r4
 8004a4a:	2105      	movs	r1, #5
 8004a4c:	2019      	movs	r0, #25
 8004a4e:	f7fc ff9f 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004a52:	2019      	movs	r0, #25
 8004a54:	f7fc ffac 	bl	80019b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004a58:	4622      	mov	r2, r4
 8004a5a:	2105      	movs	r1, #5
 8004a5c:	201b      	movs	r0, #27
 8004a5e:	f7fc ff97 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004a62:	201b      	movs	r0, #27
 8004a64:	f7fc ffa4 	bl	80019b0 <HAL_NVIC_EnableIRQ>
}
 8004a68:	e7c2      	b.n	80049f0 <HAL_TIM_Base_MspInit+0x18>
 8004a6a:	bf00      	nop
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40020400 	.word	0x40020400

08004a74 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9303      	str	r3, [sp, #12]
 8004a7c:	9304      	str	r3, [sp, #16]
 8004a7e:	9305      	str	r3, [sp, #20]
 8004a80:	9306      	str	r3, [sp, #24]
 8004a82:	9307      	str	r3, [sp, #28]
  if(timex_hallsensorHandle->Instance==TIM3)
 8004a84:	6802      	ldr	r2, [r0, #0]
 8004a86:	4b1d      	ldr	r3, [pc, #116]	@ (8004afc <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_TIMEx_HallSensor_MspInit+0x1c>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004a8c:	b008      	add	sp, #32
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a90:	2400      	movs	r4, #0
 8004a92:	9400      	str	r4, [sp, #0]
 8004a94:	f503 330d 	add.w	r3, r3, #144384	@ 0x23400
 8004a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a9a:	f042 0202 	orr.w	r2, r2, #2
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004aa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aa2:	f002 0202 	and.w	r2, r2, #2
 8004aa6:	9200      	str	r2, [sp, #0]
 8004aa8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aaa:	9401      	str	r4, [sp, #4]
 8004aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ab6:	f002 0201 	and.w	r2, r2, #1
 8004aba:	9201      	str	r2, [sp, #4]
 8004abc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abe:	9402      	str	r4, [sp, #8]
 8004ac0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ac2:	f042 0202 	orr.w	r2, r2, #2
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	9302      	str	r3, [sp, #8]
 8004ad0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ad2:	23c0      	movs	r3, #192	@ 0xc0
 8004ad4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad6:	2502      	movs	r5, #2
 8004ad8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ada:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004adc:	ae03      	add	r6, sp, #12
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4807      	ldr	r0, [pc, #28]	@ (8004b00 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 8004ae2:	f7fd f9c9 	bl	8001e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aea:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aee:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004af0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af2:	4631      	mov	r1, r6
 8004af4:	4803      	ldr	r0, [pc, #12]	@ (8004b04 <HAL_TIMEx_HallSensor_MspInit+0x90>)
 8004af6:	f7fd f9bf 	bl	8001e78 <HAL_GPIO_Init>
}
 8004afa:	e7c7      	b.n	8004a8c <HAL_TIMEx_HallSensor_MspInit+0x18>
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40020000 	.word	0x40020000
 8004b04:	40020400 	.word	0x40020400

08004b08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9303      	str	r3, [sp, #12]
 8004b10:	9304      	str	r3, [sp, #16]
 8004b12:	9305      	str	r3, [sp, #20]
 8004b14:	9306      	str	r3, [sp, #24]
 8004b16:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8004b18:	6802      	ldr	r2, [r0, #0]
 8004b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b84 <HAL_TIM_MspPostInit+0x7c>)
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004b20:	b009      	add	sp, #36	@ 0x24
 8004b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b24:	2400      	movs	r4, #0
 8004b26:	9401      	str	r4, [sp, #4]
 8004b28:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8004b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b2e:	f042 0202 	orr.w	r2, r2, #2
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b36:	f002 0202 	and.w	r2, r2, #2
 8004b3a:	9201      	str	r2, [sp, #4]
 8004b3c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b3e:	9402      	str	r4, [sp, #8]
 8004b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	9302      	str	r3, [sp, #8]
 8004b50:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004b52:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004b56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b58:	2702      	movs	r7, #2
 8004b5a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b5c:	2601      	movs	r6, #1
 8004b5e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b60:	ad03      	add	r5, sp, #12
 8004b62:	4629      	mov	r1, r5
 8004b64:	4808      	ldr	r0, [pc, #32]	@ (8004b88 <HAL_TIM_MspPostInit+0x80>)
 8004b66:	f7fd f987 	bl	8001e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004b6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004b6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b70:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b74:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b76:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b78:	4629      	mov	r1, r5
 8004b7a:	4804      	ldr	r0, [pc, #16]	@ (8004b8c <HAL_TIM_MspPostInit+0x84>)
 8004b7c:	f7fd f97c 	bl	8001e78 <HAL_GPIO_Init>
}
 8004b80:	e7ce      	b.n	8004b20 <HAL_TIM_MspPostInit+0x18>
 8004b82:	bf00      	nop
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40020400 	.word	0x40020400
 8004b8c:	40020000 	.word	0x40020000

08004b90 <MX_TIM1_Init>:
{
 8004b90:	b530      	push	{r4, r5, lr}
 8004b92:	b097      	sub	sp, #92	@ 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b94:	2400      	movs	r4, #0
 8004b96:	9412      	str	r4, [sp, #72]	@ 0x48
 8004b98:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004b9a:	9414      	str	r4, [sp, #80]	@ 0x50
 8004b9c:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b9e:	9410      	str	r4, [sp, #64]	@ 0x40
 8004ba0:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ba2:	9409      	str	r4, [sp, #36]	@ 0x24
 8004ba4:	940a      	str	r4, [sp, #40]	@ 0x28
 8004ba6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004ba8:	940c      	str	r4, [sp, #48]	@ 0x30
 8004baa:	940d      	str	r4, [sp, #52]	@ 0x34
 8004bac:	940e      	str	r4, [sp, #56]	@ 0x38
 8004bae:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004bb0:	2520      	movs	r5, #32
 8004bb2:	462a      	mov	r2, r5
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	a801      	add	r0, sp, #4
 8004bb8:	f000 f967 	bl	8004e8a <memset>
  htim1.Instance = TIM1;
 8004bbc:	4841      	ldr	r0, [pc, #260]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004bbe:	4b42      	ldr	r3, [pc, #264]	@ (8004cc8 <MX_TIM1_Init+0x138>)
 8004bc0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 1-1;
 8004bc2:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004bc4:	6085      	str	r5, [r0, #8]
  htim1.Init.Period = 8000-1;
 8004bc6:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 8004bca:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8004bcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bd0:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bd6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004bd8:	f7fe fb72 	bl	80032c0 <HAL_TIM_Base_Init>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d155      	bne.n	8004c8c <MX_TIM1_Init+0xfc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004be4:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004be6:	a912      	add	r1, sp, #72	@ 0x48
 8004be8:	4836      	ldr	r0, [pc, #216]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004bea:	f7fe fcb2 	bl	8003552 <HAL_TIM_ConfigClockSource>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d14f      	bne.n	8004c92 <MX_TIM1_Init+0x102>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004bf2:	4834      	ldr	r0, [pc, #208]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004bf4:	f7fe fb90 	bl	8003318 <HAL_TIM_PWM_Init>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d14d      	bne.n	8004c98 <MX_TIM1_Init+0x108>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c00:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c02:	a910      	add	r1, sp, #64	@ 0x40
 8004c04:	482f      	ldr	r0, [pc, #188]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004c06:	f7fe fd8d 	bl	8003724 <HAL_TIMEx_MasterConfigSynchronization>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d147      	bne.n	8004c9e <MX_TIM1_Init+0x10e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c0e:	2360      	movs	r3, #96	@ 0x60
 8004c10:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004c12:	2200      	movs	r2, #0
 8004c14:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c16:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c18:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c1a:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c1c:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c1e:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c20:	a909      	add	r1, sp, #36	@ 0x24
 8004c22:	4828      	ldr	r0, [pc, #160]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004c24:	f7fe fbdc 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d13b      	bne.n	8004ca4 <MX_TIM1_Init+0x114>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	a909      	add	r1, sp, #36	@ 0x24
 8004c30:	4824      	ldr	r0, [pc, #144]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004c32:	f7fe fbd5 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d137      	bne.n	8004caa <MX_TIM1_Init+0x11a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	a909      	add	r1, sp, #36	@ 0x24
 8004c3e:	4821      	ldr	r0, [pc, #132]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004c40:	f7fe fbce 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d133      	bne.n	8004cb0 <MX_TIM1_Init+0x120>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004c48:	2370      	movs	r3, #112	@ 0x70
 8004c4a:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 8000-2;
 8004c4c:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8004c50:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c52:	220c      	movs	r2, #12
 8004c54:	a909      	add	r1, sp, #36	@ 0x24
 8004c56:	481b      	ldr	r0, [pc, #108]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004c58:	f7fe fbc2 	bl	80033e0 <HAL_TIM_PWM_ConfigChannel>
 8004c5c:	bb58      	cbnz	r0, 8004cb6 <MX_TIM1_Init+0x126>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c62:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c64:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 120;
 8004c66:	2278      	movs	r2, #120	@ 0x78
 8004c68:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8004c6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c6e:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c74:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c76:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004c78:	a901      	add	r1, sp, #4
 8004c7a:	4812      	ldr	r0, [pc, #72]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004c7c:	f7fe fd98 	bl	80037b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004c80:	b9e0      	cbnz	r0, 8004cbc <MX_TIM1_Init+0x12c>
  HAL_TIM_MspPostInit(&htim1);
 8004c82:	4810      	ldr	r0, [pc, #64]	@ (8004cc4 <MX_TIM1_Init+0x134>)
 8004c84:	f7ff ff40 	bl	8004b08 <HAL_TIM_MspPostInit>
}
 8004c88:	b017      	add	sp, #92	@ 0x5c
 8004c8a:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8004c8c:	f7fc f8fa 	bl	8000e84 <Error_Handler>
 8004c90:	e7a6      	b.n	8004be0 <MX_TIM1_Init+0x50>
    Error_Handler();
 8004c92:	f7fc f8f7 	bl	8000e84 <Error_Handler>
 8004c96:	e7ac      	b.n	8004bf2 <MX_TIM1_Init+0x62>
    Error_Handler();
 8004c98:	f7fc f8f4 	bl	8000e84 <Error_Handler>
 8004c9c:	e7ae      	b.n	8004bfc <MX_TIM1_Init+0x6c>
    Error_Handler();
 8004c9e:	f7fc f8f1 	bl	8000e84 <Error_Handler>
 8004ca2:	e7b4      	b.n	8004c0e <MX_TIM1_Init+0x7e>
    Error_Handler();
 8004ca4:	f7fc f8ee 	bl	8000e84 <Error_Handler>
 8004ca8:	e7c0      	b.n	8004c2c <MX_TIM1_Init+0x9c>
    Error_Handler();
 8004caa:	f7fc f8eb 	bl	8000e84 <Error_Handler>
 8004cae:	e7c4      	b.n	8004c3a <MX_TIM1_Init+0xaa>
    Error_Handler();
 8004cb0:	f7fc f8e8 	bl	8000e84 <Error_Handler>
 8004cb4:	e7c8      	b.n	8004c48 <MX_TIM1_Init+0xb8>
    Error_Handler();
 8004cb6:	f7fc f8e5 	bl	8000e84 <Error_Handler>
 8004cba:	e7d0      	b.n	8004c5e <MX_TIM1_Init+0xce>
    Error_Handler();
 8004cbc:	f7fc f8e2 	bl	8000e84 <Error_Handler>
 8004cc0:	e7df      	b.n	8004c82 <MX_TIM1_Init+0xf2>
 8004cc2:	bf00      	nop
 8004cc4:	20004420 	.word	0x20004420
 8004cc8:	40010000 	.word	0x40010000

08004ccc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004ccc:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004cce:	480a      	ldr	r0, [pc, #40]	@ (8004cf8 <MX_USART3_UART_Init+0x2c>)
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <MX_USART3_UART_Init+0x30>)
 8004cd2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 921600;
 8004cd4:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8004cd8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004cde:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004ce0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ce2:	220c      	movs	r2, #12
 8004ce4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ce6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ce8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004cea:	f7fe fed5 	bl	8003a98 <HAL_UART_Init>
 8004cee:	b900      	cbnz	r0, 8004cf2 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004cf0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004cf2:	f7fc f8c7 	bl	8000e84 <Error_Handler>
}
 8004cf6:	e7fb      	b.n	8004cf0 <MX_USART3_UART_Init+0x24>
 8004cf8:	20004528 	.word	0x20004528
 8004cfc:	40004800 	.word	0x40004800

08004d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d04:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d06:	2300      	movs	r3, #0
 8004d08:	9303      	str	r3, [sp, #12]
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	9305      	str	r3, [sp, #20]
 8004d0e:	9306      	str	r3, [sp, #24]
 8004d10:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 8004d12:	6802      	ldr	r2, [r0, #0]
 8004d14:	4b41      	ldr	r3, [pc, #260]	@ (8004e1c <HAL_UART_MspInit+0x11c>)
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d002      	beq.n	8004d20 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004d1a:	b008      	add	sp, #32
 8004d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d20:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d22:	2500      	movs	r5, #0
 8004d24:	9500      	str	r5, [sp, #0]
 8004d26:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 8004d2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d2c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004d30:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d34:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8004d38:	9200      	str	r2, [sp, #0]
 8004d3a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d3c:	9501      	str	r5, [sp, #4]
 8004d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d40:	f042 0204 	orr.w	r2, r2, #4
 8004d44:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d48:	f002 0204 	and.w	r2, r2, #4
 8004d4c:	9201      	str	r2, [sp, #4]
 8004d4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d50:	9502      	str	r5, [sp, #8]
 8004d52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d54:	f042 0202 	orr.w	r2, r2, #2
 8004d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	9302      	str	r3, [sp, #8]
 8004d62:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004d64:	2320      	movs	r3, #32
 8004d66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d68:	f04f 0a02 	mov.w	sl, #2
 8004d6c:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	f04f 0903 	mov.w	r9, #3
 8004d74:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d78:	f04f 0807 	mov.w	r8, #7
 8004d7c:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d80:	af03      	add	r7, sp, #12
 8004d82:	4639      	mov	r1, r7
 8004d84:	4826      	ldr	r0, [pc, #152]	@ (8004e20 <HAL_UART_MspInit+0x120>)
 8004d86:	f7fd f877 	bl	8001e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d8a:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8004d8e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d90:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d94:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d96:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d9a:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d9e:	4639      	mov	r1, r7
 8004da0:	4820      	ldr	r0, [pc, #128]	@ (8004e24 <HAL_UART_MspInit+0x124>)
 8004da2:	f7fd f869 	bl	8001e78 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004da6:	4820      	ldr	r0, [pc, #128]	@ (8004e28 <HAL_UART_MspInit+0x128>)
 8004da8:	4b20      	ldr	r3, [pc, #128]	@ (8004e2c <HAL_UART_MspInit+0x12c>)
 8004daa:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004db0:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004db2:	2340      	movs	r3, #64	@ 0x40
 8004db4:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004db6:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004db8:	6106      	str	r6, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dba:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dbc:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004dbe:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004dc0:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dc2:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004dc4:	f7fc fe74 	bl	8001ab0 <HAL_DMA_Init>
 8004dc8:	bb10      	cbnz	r0, 8004e10 <HAL_UART_MspInit+0x110>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004dca:	4b17      	ldr	r3, [pc, #92]	@ (8004e28 <HAL_UART_MspInit+0x128>)
 8004dcc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004dce:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004dd0:	4817      	ldr	r0, [pc, #92]	@ (8004e30 <HAL_UART_MspInit+0x130>)
 8004dd2:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <HAL_UART_MspInit+0x134>)
 8004dd4:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004dd6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004dda:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004de0:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004de2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004de6:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004de8:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dea:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004dec:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004dee:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004df0:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004df2:	f7fc fe5d 	bl	8001ab0 <HAL_DMA_Init>
 8004df6:	b970      	cbnz	r0, 8004e16 <HAL_UART_MspInit+0x116>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004df8:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <HAL_UART_MspInit+0x130>)
 8004dfa:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004dfc:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2105      	movs	r1, #5
 8004e02:	2027      	movs	r0, #39	@ 0x27
 8004e04:	f7fc fdc4 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004e08:	2027      	movs	r0, #39	@ 0x27
 8004e0a:	f7fc fdd1 	bl	80019b0 <HAL_NVIC_EnableIRQ>
}
 8004e0e:	e784      	b.n	8004d1a <HAL_UART_MspInit+0x1a>
      Error_Handler();
 8004e10:	f7fc f838 	bl	8000e84 <Error_Handler>
 8004e14:	e7d9      	b.n	8004dca <HAL_UART_MspInit+0xca>
      Error_Handler();
 8004e16:	f7fc f835 	bl	8000e84 <Error_Handler>
 8004e1a:	e7ed      	b.n	8004df8 <HAL_UART_MspInit+0xf8>
 8004e1c:	40004800 	.word	0x40004800
 8004e20:	40020800 	.word	0x40020800
 8004e24:	40020400 	.word	0x40020400
 8004e28:	200044c8 	.word	0x200044c8
 8004e2c:	40026058 	.word	0x40026058
 8004e30:	20004468 	.word	0x20004468
 8004e34:	40026028 	.word	0x40026028

08004e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004e3c:	f7ff f9dc 	bl	80041f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e40:	480c      	ldr	r0, [pc, #48]	@ (8004e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e42:	490d      	ldr	r1, [pc, #52]	@ (8004e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e44:	4a0d      	ldr	r2, [pc, #52]	@ (8004e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e48:	e002      	b.n	8004e50 <LoopCopyDataInit>

08004e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e4e:	3304      	adds	r3, #4

08004e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e54:	d3f9      	bcc.n	8004e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e56:	4a0a      	ldr	r2, [pc, #40]	@ (8004e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e58:	4c0a      	ldr	r4, [pc, #40]	@ (8004e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e5c:	e001      	b.n	8004e62 <LoopFillZerobss>

08004e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e60:	3204      	adds	r2, #4

08004e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e64:	d3fb      	bcc.n	8004e5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004e66:	f000 f819 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e6a:	f7fc f861 	bl	8000f30 <main>
  bx  lr    
 8004e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8004e7c:	08005280 	.word	0x08005280
  ldr r2, =_sbss
 8004e80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004e84:	20004570 	.word	0x20004570

08004e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e88:	e7fe      	b.n	8004e88 <ADC_IRQHandler>

08004e8a <memset>:
 8004e8a:	4402      	add	r2, r0
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d100      	bne.n	8004e94 <memset+0xa>
 8004e92:	4770      	bx	lr
 8004e94:	f803 1b01 	strb.w	r1, [r3], #1
 8004e98:	e7f9      	b.n	8004e8e <memset+0x4>
	...

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <__libc_init_array+0x38>)
 8004ea0:	4d0d      	ldr	r5, [pc, #52]	@ (8004ed8 <__libc_init_array+0x3c>)
 8004ea2:	1b5b      	subs	r3, r3, r5
 8004ea4:	109c      	asrs	r4, r3, #2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	f000 f9a4 	bl	80051f8 <_init>
 8004eb0:	4d0a      	ldr	r5, [pc, #40]	@ (8004edc <__libc_init_array+0x40>)
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <__libc_init_array+0x44>)
 8004eb4:	1b5b      	subs	r3, r3, r5
 8004eb6:	109c      	asrs	r4, r3, #2
 8004eb8:	2600      	movs	r6, #0
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08005278 	.word	0x08005278
 8004ed8:	08005278 	.word	0x08005278
 8004edc:	08005278 	.word	0x08005278
 8004ee0:	0800527c 	.word	0x0800527c

08004ee4 <memcpy>:
 8004ee4:	440a      	add	r2, r1
 8004ee6:	4291      	cmp	r1, r2
 8004ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eec:	d100      	bne.n	8004ef0 <memcpy+0xc>
 8004eee:	4770      	bx	lr
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004efa:	4291      	cmp	r1, r2
 8004efc:	d1f9      	bne.n	8004ef2 <memcpy+0xe>
 8004efe:	bd10      	pop	{r4, pc}

08004f00 <__udivmoddi4>:
 8004f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	9d08      	ldr	r5, [sp, #32]
 8004f06:	460f      	mov	r7, r1
 8004f08:	4604      	mov	r4, r0
 8004f0a:	468c      	mov	ip, r1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d148      	bne.n	8004fa2 <__udivmoddi4+0xa2>
 8004f10:	428a      	cmp	r2, r1
 8004f12:	4616      	mov	r6, r2
 8004f14:	d961      	bls.n	8004fda <__udivmoddi4+0xda>
 8004f16:	fab2 f382 	clz	r3, r2
 8004f1a:	b14b      	cbz	r3, 8004f30 <__udivmoddi4+0x30>
 8004f1c:	f1c3 0220 	rsb	r2, r3, #32
 8004f20:	fa01 fc03 	lsl.w	ip, r1, r3
 8004f24:	fa20 f202 	lsr.w	r2, r0, r2
 8004f28:	409e      	lsls	r6, r3
 8004f2a:	ea42 0c0c 	orr.w	ip, r2, ip
 8004f2e:	409c      	lsls	r4, r3
 8004f30:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004f34:	b2b7      	uxth	r7, r6
 8004f36:	fbbc f1fe 	udiv	r1, ip, lr
 8004f3a:	0c22      	lsrs	r2, r4, #16
 8004f3c:	fb0e cc11 	mls	ip, lr, r1, ip
 8004f40:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8004f44:	fb01 f007 	mul.w	r0, r1, r7
 8004f48:	4290      	cmp	r0, r2
 8004f4a:	d909      	bls.n	8004f60 <__udivmoddi4+0x60>
 8004f4c:	18b2      	adds	r2, r6, r2
 8004f4e:	f101 3cff 	add.w	ip, r1, #4294967295
 8004f52:	f080 80ee 	bcs.w	8005132 <__udivmoddi4+0x232>
 8004f56:	4290      	cmp	r0, r2
 8004f58:	f240 80eb 	bls.w	8005132 <__udivmoddi4+0x232>
 8004f5c:	3902      	subs	r1, #2
 8004f5e:	4432      	add	r2, r6
 8004f60:	1a12      	subs	r2, r2, r0
 8004f62:	b2a4      	uxth	r4, r4
 8004f64:	fbb2 f0fe 	udiv	r0, r2, lr
 8004f68:	fb0e 2210 	mls	r2, lr, r0, r2
 8004f6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004f70:	fb00 f707 	mul.w	r7, r0, r7
 8004f74:	42a7      	cmp	r7, r4
 8004f76:	d909      	bls.n	8004f8c <__udivmoddi4+0x8c>
 8004f78:	1934      	adds	r4, r6, r4
 8004f7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8004f7e:	f080 80da 	bcs.w	8005136 <__udivmoddi4+0x236>
 8004f82:	42a7      	cmp	r7, r4
 8004f84:	f240 80d7 	bls.w	8005136 <__udivmoddi4+0x236>
 8004f88:	4434      	add	r4, r6
 8004f8a:	3802      	subs	r0, #2
 8004f8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004f90:	1be4      	subs	r4, r4, r7
 8004f92:	2100      	movs	r1, #0
 8004f94:	b11d      	cbz	r5, 8004f9e <__udivmoddi4+0x9e>
 8004f96:	40dc      	lsrs	r4, r3
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e9c5 4300 	strd	r4, r3, [r5]
 8004f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa2:	428b      	cmp	r3, r1
 8004fa4:	d906      	bls.n	8004fb4 <__udivmoddi4+0xb4>
 8004fa6:	b10d      	cbz	r5, 8004fac <__udivmoddi4+0xac>
 8004fa8:	e9c5 0100 	strd	r0, r1, [r5]
 8004fac:	2100      	movs	r1, #0
 8004fae:	4608      	mov	r0, r1
 8004fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb4:	fab3 f183 	clz	r1, r3
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d148      	bne.n	800504e <__udivmoddi4+0x14e>
 8004fbc:	42bb      	cmp	r3, r7
 8004fbe:	d302      	bcc.n	8004fc6 <__udivmoddi4+0xc6>
 8004fc0:	4282      	cmp	r2, r0
 8004fc2:	f200 8107 	bhi.w	80051d4 <__udivmoddi4+0x2d4>
 8004fc6:	1a84      	subs	r4, r0, r2
 8004fc8:	eb67 0203 	sbc.w	r2, r7, r3
 8004fcc:	2001      	movs	r0, #1
 8004fce:	4694      	mov	ip, r2
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	d0e4      	beq.n	8004f9e <__udivmoddi4+0x9e>
 8004fd4:	e9c5 4c00 	strd	r4, ip, [r5]
 8004fd8:	e7e1      	b.n	8004f9e <__udivmoddi4+0x9e>
 8004fda:	2a00      	cmp	r2, #0
 8004fdc:	f000 8092 	beq.w	8005104 <__udivmoddi4+0x204>
 8004fe0:	fab2 f382 	clz	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f040 80a8 	bne.w	800513a <__udivmoddi4+0x23a>
 8004fea:	1a8a      	subs	r2, r1, r2
 8004fec:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004ff0:	fa1f fc86 	uxth.w	ip, r6
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	0c20      	lsrs	r0, r4, #16
 8004ff8:	fbb2 f7fe 	udiv	r7, r2, lr
 8004ffc:	fb0e 2217 	mls	r2, lr, r7, r2
 8005000:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8005004:	fb0c f007 	mul.w	r0, ip, r7
 8005008:	4290      	cmp	r0, r2
 800500a:	d907      	bls.n	800501c <__udivmoddi4+0x11c>
 800500c:	18b2      	adds	r2, r6, r2
 800500e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005012:	d202      	bcs.n	800501a <__udivmoddi4+0x11a>
 8005014:	4290      	cmp	r0, r2
 8005016:	f200 80e2 	bhi.w	80051de <__udivmoddi4+0x2de>
 800501a:	4647      	mov	r7, r8
 800501c:	1a12      	subs	r2, r2, r0
 800501e:	b2a4      	uxth	r4, r4
 8005020:	fbb2 f0fe 	udiv	r0, r2, lr
 8005024:	fb0e 2210 	mls	r2, lr, r0, r2
 8005028:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800502c:	fb0c fc00 	mul.w	ip, ip, r0
 8005030:	45a4      	cmp	ip, r4
 8005032:	d907      	bls.n	8005044 <__udivmoddi4+0x144>
 8005034:	1934      	adds	r4, r6, r4
 8005036:	f100 32ff 	add.w	r2, r0, #4294967295
 800503a:	d202      	bcs.n	8005042 <__udivmoddi4+0x142>
 800503c:	45a4      	cmp	ip, r4
 800503e:	f200 80cb 	bhi.w	80051d8 <__udivmoddi4+0x2d8>
 8005042:	4610      	mov	r0, r2
 8005044:	eba4 040c 	sub.w	r4, r4, ip
 8005048:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800504c:	e7a2      	b.n	8004f94 <__udivmoddi4+0x94>
 800504e:	f1c1 0620 	rsb	r6, r1, #32
 8005052:	408b      	lsls	r3, r1
 8005054:	fa22 fc06 	lsr.w	ip, r2, r6
 8005058:	ea4c 0c03 	orr.w	ip, ip, r3
 800505c:	fa07 f401 	lsl.w	r4, r7, r1
 8005060:	fa20 f306 	lsr.w	r3, r0, r6
 8005064:	40f7      	lsrs	r7, r6
 8005066:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800506a:	4323      	orrs	r3, r4
 800506c:	fa00 f801 	lsl.w	r8, r0, r1
 8005070:	fa1f fe8c 	uxth.w	lr, ip
 8005074:	fbb7 f0f9 	udiv	r0, r7, r9
 8005078:	0c1c      	lsrs	r4, r3, #16
 800507a:	fb09 7710 	mls	r7, r9, r0, r7
 800507e:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8005082:	fb00 f70e 	mul.w	r7, r0, lr
 8005086:	42a7      	cmp	r7, r4
 8005088:	fa02 f201 	lsl.w	r2, r2, r1
 800508c:	d90a      	bls.n	80050a4 <__udivmoddi4+0x1a4>
 800508e:	eb1c 0404 	adds.w	r4, ip, r4
 8005092:	f100 3aff 	add.w	sl, r0, #4294967295
 8005096:	f080 809b 	bcs.w	80051d0 <__udivmoddi4+0x2d0>
 800509a:	42a7      	cmp	r7, r4
 800509c:	f240 8098 	bls.w	80051d0 <__udivmoddi4+0x2d0>
 80050a0:	3802      	subs	r0, #2
 80050a2:	4464      	add	r4, ip
 80050a4:	1be4      	subs	r4, r4, r7
 80050a6:	b29f      	uxth	r7, r3
 80050a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80050ac:	fb09 4413 	mls	r4, r9, r3, r4
 80050b0:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 80050b4:	fb03 fe0e 	mul.w	lr, r3, lr
 80050b8:	45a6      	cmp	lr, r4
 80050ba:	d909      	bls.n	80050d0 <__udivmoddi4+0x1d0>
 80050bc:	eb1c 0404 	adds.w	r4, ip, r4
 80050c0:	f103 37ff 	add.w	r7, r3, #4294967295
 80050c4:	f080 8082 	bcs.w	80051cc <__udivmoddi4+0x2cc>
 80050c8:	45a6      	cmp	lr, r4
 80050ca:	d97f      	bls.n	80051cc <__udivmoddi4+0x2cc>
 80050cc:	3b02      	subs	r3, #2
 80050ce:	4464      	add	r4, ip
 80050d0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80050d4:	eba4 040e 	sub.w	r4, r4, lr
 80050d8:	fba0 e702 	umull	lr, r7, r0, r2
 80050dc:	42bc      	cmp	r4, r7
 80050de:	4673      	mov	r3, lr
 80050e0:	46b9      	mov	r9, r7
 80050e2:	d363      	bcc.n	80051ac <__udivmoddi4+0x2ac>
 80050e4:	d060      	beq.n	80051a8 <__udivmoddi4+0x2a8>
 80050e6:	b15d      	cbz	r5, 8005100 <__udivmoddi4+0x200>
 80050e8:	ebb8 0203 	subs.w	r2, r8, r3
 80050ec:	eb64 0409 	sbc.w	r4, r4, r9
 80050f0:	fa04 f606 	lsl.w	r6, r4, r6
 80050f4:	fa22 f301 	lsr.w	r3, r2, r1
 80050f8:	431e      	orrs	r6, r3
 80050fa:	40cc      	lsrs	r4, r1
 80050fc:	e9c5 6400 	strd	r6, r4, [r5]
 8005100:	2100      	movs	r1, #0
 8005102:	e74c      	b.n	8004f9e <__udivmoddi4+0x9e>
 8005104:	0862      	lsrs	r2, r4, #1
 8005106:	0848      	lsrs	r0, r1, #1
 8005108:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800510c:	0c0b      	lsrs	r3, r1, #16
 800510e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005112:	b28a      	uxth	r2, r1
 8005114:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005118:	fbb3 f1f6 	udiv	r1, r3, r6
 800511c:	07e4      	lsls	r4, r4, #31
 800511e:	46b4      	mov	ip, r6
 8005120:	4637      	mov	r7, r6
 8005122:	46b6      	mov	lr, r6
 8005124:	231f      	movs	r3, #31
 8005126:	fbb0 f0f6 	udiv	r0, r0, r6
 800512a:	1bd2      	subs	r2, r2, r7
 800512c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005130:	e761      	b.n	8004ff6 <__udivmoddi4+0xf6>
 8005132:	4661      	mov	r1, ip
 8005134:	e714      	b.n	8004f60 <__udivmoddi4+0x60>
 8005136:	4610      	mov	r0, r2
 8005138:	e728      	b.n	8004f8c <__udivmoddi4+0x8c>
 800513a:	f1c3 0120 	rsb	r1, r3, #32
 800513e:	fa20 f201 	lsr.w	r2, r0, r1
 8005142:	409e      	lsls	r6, r3
 8005144:	fa27 f101 	lsr.w	r1, r7, r1
 8005148:	409f      	lsls	r7, r3
 800514a:	433a      	orrs	r2, r7
 800514c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005150:	fa1f fc86 	uxth.w	ip, r6
 8005154:	fbb1 f7fe 	udiv	r7, r1, lr
 8005158:	fb0e 1017 	mls	r0, lr, r7, r1
 800515c:	0c11      	lsrs	r1, r2, #16
 800515e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005162:	fb07 f80c 	mul.w	r8, r7, ip
 8005166:	4588      	cmp	r8, r1
 8005168:	fa04 f403 	lsl.w	r4, r4, r3
 800516c:	d93a      	bls.n	80051e4 <__udivmoddi4+0x2e4>
 800516e:	1871      	adds	r1, r6, r1
 8005170:	f107 30ff 	add.w	r0, r7, #4294967295
 8005174:	d201      	bcs.n	800517a <__udivmoddi4+0x27a>
 8005176:	4588      	cmp	r8, r1
 8005178:	d81f      	bhi.n	80051ba <__udivmoddi4+0x2ba>
 800517a:	eba1 0108 	sub.w	r1, r1, r8
 800517e:	fbb1 f8fe 	udiv	r8, r1, lr
 8005182:	fb08 f70c 	mul.w	r7, r8, ip
 8005186:	fb0e 1118 	mls	r1, lr, r8, r1
 800518a:	b292      	uxth	r2, r2
 800518c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005190:	42ba      	cmp	r2, r7
 8005192:	d22f      	bcs.n	80051f4 <__udivmoddi4+0x2f4>
 8005194:	18b2      	adds	r2, r6, r2
 8005196:	f108 31ff 	add.w	r1, r8, #4294967295
 800519a:	d2c6      	bcs.n	800512a <__udivmoddi4+0x22a>
 800519c:	42ba      	cmp	r2, r7
 800519e:	d2c4      	bcs.n	800512a <__udivmoddi4+0x22a>
 80051a0:	f1a8 0102 	sub.w	r1, r8, #2
 80051a4:	4432      	add	r2, r6
 80051a6:	e7c0      	b.n	800512a <__udivmoddi4+0x22a>
 80051a8:	45f0      	cmp	r8, lr
 80051aa:	d29c      	bcs.n	80050e6 <__udivmoddi4+0x1e6>
 80051ac:	ebbe 0302 	subs.w	r3, lr, r2
 80051b0:	eb67 070c 	sbc.w	r7, r7, ip
 80051b4:	3801      	subs	r0, #1
 80051b6:	46b9      	mov	r9, r7
 80051b8:	e795      	b.n	80050e6 <__udivmoddi4+0x1e6>
 80051ba:	eba6 0808 	sub.w	r8, r6, r8
 80051be:	4441      	add	r1, r8
 80051c0:	1eb8      	subs	r0, r7, #2
 80051c2:	fbb1 f8fe 	udiv	r8, r1, lr
 80051c6:	fb08 f70c 	mul.w	r7, r8, ip
 80051ca:	e7dc      	b.n	8005186 <__udivmoddi4+0x286>
 80051cc:	463b      	mov	r3, r7
 80051ce:	e77f      	b.n	80050d0 <__udivmoddi4+0x1d0>
 80051d0:	4650      	mov	r0, sl
 80051d2:	e767      	b.n	80050a4 <__udivmoddi4+0x1a4>
 80051d4:	4608      	mov	r0, r1
 80051d6:	e6fb      	b.n	8004fd0 <__udivmoddi4+0xd0>
 80051d8:	4434      	add	r4, r6
 80051da:	3802      	subs	r0, #2
 80051dc:	e732      	b.n	8005044 <__udivmoddi4+0x144>
 80051de:	3f02      	subs	r7, #2
 80051e0:	4432      	add	r2, r6
 80051e2:	e71b      	b.n	800501c <__udivmoddi4+0x11c>
 80051e4:	eba1 0108 	sub.w	r1, r1, r8
 80051e8:	4638      	mov	r0, r7
 80051ea:	fbb1 f8fe 	udiv	r8, r1, lr
 80051ee:	fb08 f70c 	mul.w	r7, r8, ip
 80051f2:	e7c8      	b.n	8005186 <__udivmoddi4+0x286>
 80051f4:	4641      	mov	r1, r8
 80051f6:	e798      	b.n	800512a <__udivmoddi4+0x22a>

080051f8 <_init>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr

08005204 <_fini>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr
