
build/debug/CawDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005f40  08005f40  00006f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb8  08005fb8  00007018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fb8  08005fb8  00006fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fc0  08005fc0  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fc4  08005fc4  00006fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005fc8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045a0  20000018  08005fe0  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045b8  08005fe0  000075b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028fa2  00000000  00000000  00007081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c4e  00000000  00000000  00030023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001361f  00000000  00000000  00035c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c10  00000000  00000000  00049290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000162f  00000000  00000000  0004aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022809  00000000  00000000  0004c4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008b95  00000000  00000000  0006ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bdc  00000000  00000000  00077870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000017f  00000000  00000000  0007c44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b80c 	b.w	8000200 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f005 fd1e 	bl	8005c30 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__aeabi_idiv0>:
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c05      	ldr	r4, [pc, #20]	@ (800021c <__do_global_dtors_aux+0x18>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b933      	cbnz	r3, 800021a <__do_global_dtors_aux+0x16>
 800020c:	4b04      	ldr	r3, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x1c>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x12>
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000018 	.word	0x20000018
 8000220:	00000000 	.word	0x00000000
 8000224:	08005f28 	.word	0x08005f28

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <frame_dummy+0x10>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4903      	ldr	r1, [pc, #12]	@ (800023c <frame_dummy+0x14>)
 8000230:	4803      	ldr	r0, [pc, #12]	@ (8000240 <frame_dummy+0x18>)
 8000232:	f3af 8000 	nop.w
 8000236:	bd08      	pop	{r3, pc}
 8000238:	00000000 	.word	0x00000000
 800023c:	2000001c 	.word	0x2000001c
 8000240:	08005f28 	.word	0x08005f28

08000244 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000248:	2400      	movs	r4, #0
 800024a:	9408      	str	r4, [sp, #32]
 800024c:	9409      	str	r4, [sp, #36]	@ 0x24
 800024e:	940a      	str	r4, [sp, #40]	@ 0x28
 8000250:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000252:	2220      	movs	r2, #32
 8000254:	4621      	mov	r1, r4
 8000256:	4668      	mov	r0, sp
 8000258:	f005 fcaf 	bl	8005bba <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800025c:	4820      	ldr	r0, [pc, #128]	@ (80002e0 <MX_ADC1_Init+0x9c>)
 800025e:	4b21      	ldr	r3, [pc, #132]	@ (80002e4 <MX_ADC1_Init+0xa0>)
 8000260:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000266:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000268:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800026a:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026c:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800026e:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000272:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000274:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <MX_ADC1_Init+0xa4>)
 8000276:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000278:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800027a:	2301      	movs	r3, #1
 800027c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800027e:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000282:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000284:	f001 fb9c 	bl	80019c0 <HAL_ADC_Init>
 8000288:	bb00      	cbnz	r0, 80002cc <MX_ADC1_Init+0x88>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800028a:	230a      	movs	r3, #10
 800028c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 800028e:	2301      	movs	r3, #1
 8000290:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000292:	2300      	movs	r3, #0
 8000294:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000296:	a908      	add	r1, sp, #32
 8000298:	4811      	ldr	r0, [pc, #68]	@ (80002e0 <MX_ADC1_Init+0x9c>)
 800029a:	f001 fd63 	bl	8001d64 <HAL_ADC_ConfigChannel>
 800029e:	b9c0      	cbnz	r0, 80002d2 <MX_ADC1_Init+0x8e>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 80002a4:	2201      	movs	r2, #1
 80002a6:	9201      	str	r2, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80002a8:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80002aa:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80002ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80002b0:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80002b2:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80002b4:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80002b8:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 80002bc:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002be:	4669      	mov	r1, sp
 80002c0:	4807      	ldr	r0, [pc, #28]	@ (80002e0 <MX_ADC1_Init+0x9c>)
 80002c2:	f001 feab 	bl	800201c <HAL_ADCEx_InjectedConfigChannel>
 80002c6:	b938      	cbnz	r0, 80002d8 <MX_ADC1_Init+0x94>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c8:	b00c      	add	sp, #48	@ 0x30
 80002ca:	bd10      	pop	{r4, pc}
    Error_Handler();
 80002cc:	f000 ff8c 	bl	80011e8 <Error_Handler>
 80002d0:	e7db      	b.n	800028a <MX_ADC1_Init+0x46>
    Error_Handler();
 80002d2:	f000 ff89 	bl	80011e8 <Error_Handler>
 80002d6:	e7e3      	b.n	80002a0 <MX_ADC1_Init+0x5c>
    Error_Handler();
 80002d8:	f000 ff86 	bl	80011e8 <Error_Handler>
}
 80002dc:	e7f4      	b.n	80002c8 <MX_ADC1_Init+0x84>
 80002de:	bf00      	nop
 80002e0:	200000c4 	.word	0x200000c4
 80002e4:	40012000 	.word	0x40012000
 80002e8:	0f000001 	.word	0x0f000001

080002ec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002ec:	b510      	push	{r4, lr}
 80002ee:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f0:	2400      	movs	r4, #0
 80002f2:	9408      	str	r4, [sp, #32]
 80002f4:	9409      	str	r4, [sp, #36]	@ 0x24
 80002f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80002f8:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80002fa:	2220      	movs	r2, #32
 80002fc:	4621      	mov	r1, r4
 80002fe:	4668      	mov	r0, sp
 8000300:	f005 fc5b 	bl	8005bba <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000304:	4820      	ldr	r0, [pc, #128]	@ (8000388 <MX_ADC2_Init+0x9c>)
 8000306:	4b21      	ldr	r3, [pc, #132]	@ (800038c <MX_ADC2_Init+0xa0>)
 8000308:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800030a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030e:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000310:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000312:	6104      	str	r4, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000314:	7604      	strb	r4, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000316:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800031a:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031c:	4b1c      	ldr	r3, [pc, #112]	@ (8000390 <MX_ADC2_Init+0xa4>)
 800031e:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000320:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000322:	2301      	movs	r3, #1
 8000324:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000326:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032a:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800032c:	f001 fb48 	bl	80019c0 <HAL_ADC_Init>
 8000330:	bb00      	cbnz	r0, 8000374 <MX_ADC2_Init+0x88>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000332:	2309      	movs	r3, #9
 8000334:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000336:	2301      	movs	r3, #1
 8000338:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800033a:	2300      	movs	r3, #0
 800033c:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800033e:	a908      	add	r1, sp, #32
 8000340:	4811      	ldr	r0, [pc, #68]	@ (8000388 <MX_ADC2_Init+0x9c>)
 8000342:	f001 fd0f 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000346:	b9c0      	cbnz	r0, 800037a <MX_ADC2_Init+0x8e>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000348:	2301      	movs	r3, #1
 800034a:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 800034c:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800034e:	9304      	str	r3, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000350:	2300      	movs	r3, #0
 8000352:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000354:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000358:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800035a:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800035c:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000360:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000364:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000366:	4669      	mov	r1, sp
 8000368:	4807      	ldr	r0, [pc, #28]	@ (8000388 <MX_ADC2_Init+0x9c>)
 800036a:	f001 fe57 	bl	800201c <HAL_ADCEx_InjectedConfigChannel>
 800036e:	b938      	cbnz	r0, 8000380 <MX_ADC2_Init+0x94>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000370:	b00c      	add	sp, #48	@ 0x30
 8000372:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000374:	f000 ff38 	bl	80011e8 <Error_Handler>
 8000378:	e7db      	b.n	8000332 <MX_ADC2_Init+0x46>
    Error_Handler();
 800037a:	f000 ff35 	bl	80011e8 <Error_Handler>
 800037e:	e7e3      	b.n	8000348 <MX_ADC2_Init+0x5c>
    Error_Handler();
 8000380:	f000 ff32 	bl	80011e8 <Error_Handler>
}
 8000384:	e7f4      	b.n	8000370 <MX_ADC2_Init+0x84>
 8000386:	bf00      	nop
 8000388:	2000007c 	.word	0x2000007c
 800038c:	40012100 	.word	0x40012100
 8000390:	0f000001 	.word	0x0f000001

08000394 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000394:	b510      	push	{r4, lr}
 8000396:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000398:	2400      	movs	r4, #0
 800039a:	9408      	str	r4, [sp, #32]
 800039c:	9409      	str	r4, [sp, #36]	@ 0x24
 800039e:	940a      	str	r4, [sp, #40]	@ 0x28
 80003a0:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80003a2:	2220      	movs	r2, #32
 80003a4:	4621      	mov	r1, r4
 80003a6:	4668      	mov	r0, sp
 80003a8:	f005 fc07 	bl	8005bba <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80003ac:	4820      	ldr	r0, [pc, #128]	@ (8000430 <MX_ADC3_Init+0x9c>)
 80003ae:	4b21      	ldr	r3, [pc, #132]	@ (8000434 <MX_ADC3_Init+0xa0>)
 80003b0:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b6:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80003b8:	6084      	str	r4, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80003ba:	6104      	str	r4, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80003bc:	7604      	strb	r4, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80003be:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003c2:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000438 <MX_ADC3_Init+0xa4>)
 80003c6:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c8:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	61c3      	str	r3, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80003ce:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003d2:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80003d4:	f001 faf4 	bl	80019c0 <HAL_ADC_Init>
 80003d8:	bb08      	cbnz	r0, 800041e <MX_ADC3_Init+0x8a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003da:	2303      	movs	r3, #3
 80003dc:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 80003de:	2301      	movs	r3, #1
 80003e0:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80003e2:	2300      	movs	r3, #0
 80003e4:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80003e6:	a908      	add	r1, sp, #32
 80003e8:	4811      	ldr	r0, [pc, #68]	@ (8000430 <MX_ADC3_Init+0x9c>)
 80003ea:	f001 fcbb 	bl	8001d64 <HAL_ADC_ConfigChannel>
 80003ee:	b9c8      	cbnz	r0, 8000424 <MX_ADC3_Init+0x90>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80003f0:	2302      	movs	r3, #2
 80003f2:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80003f8:	9304      	str	r3, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80003fa:	2300      	movs	r3, #0
 80003fc:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80003fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000402:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000404:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000406:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800040a:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 800040e:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000410:	4669      	mov	r1, sp
 8000412:	4807      	ldr	r0, [pc, #28]	@ (8000430 <MX_ADC3_Init+0x9c>)
 8000414:	f001 fe02 	bl	800201c <HAL_ADCEx_InjectedConfigChannel>
 8000418:	b938      	cbnz	r0, 800042a <MX_ADC3_Init+0x96>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800041a:	b00c      	add	sp, #48	@ 0x30
 800041c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800041e:	f000 fee3 	bl	80011e8 <Error_Handler>
 8000422:	e7da      	b.n	80003da <MX_ADC3_Init+0x46>
    Error_Handler();
 8000424:	f000 fee0 	bl	80011e8 <Error_Handler>
 8000428:	e7e2      	b.n	80003f0 <MX_ADC3_Init+0x5c>
    Error_Handler();
 800042a:	f000 fedd 	bl	80011e8 <Error_Handler>
}
 800042e:	e7f4      	b.n	800041a <MX_ADC3_Init+0x86>
 8000430:	20000034 	.word	0x20000034
 8000434:	40012200 	.word	0x40012200
 8000438:	0f000001 	.word	0x0f000001

0800043c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800043c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043e:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	2300      	movs	r3, #0
 8000442:	9309      	str	r3, [sp, #36]	@ 0x24
 8000444:	930a      	str	r3, [sp, #40]	@ 0x28
 8000446:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000448:	930c      	str	r3, [sp, #48]	@ 0x30
 800044a:	930d      	str	r3, [sp, #52]	@ 0x34
  if(adcHandle->Instance==ADC1)
 800044c:	6803      	ldr	r3, [r0, #0]
 800044e:	4a52      	ldr	r2, [pc, #328]	@ (8000598 <HAL_ADC_MspInit+0x15c>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d007      	beq.n	8000464 <HAL_ADC_MspInit+0x28>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000454:	4a51      	ldr	r2, [pc, #324]	@ (800059c <HAL_ADC_MspInit+0x160>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d03d      	beq.n	80004d6 <HAL_ADC_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 800045a:	4a51      	ldr	r2, [pc, #324]	@ (80005a0 <HAL_ADC_MspInit+0x164>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d073      	beq.n	8000548 <HAL_ADC_MspInit+0x10c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000460:	b00f      	add	sp, #60	@ 0x3c
 8000462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000464:	2400      	movs	r4, #0
 8000466:	9401      	str	r4, [sp, #4]
 8000468:	4b4e      	ldr	r3, [pc, #312]	@ (80005a4 <HAL_ADC_MspInit+0x168>)
 800046a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800046c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000470:	645a      	str	r2, [r3, #68]	@ 0x44
 8000472:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000474:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000478:	9201      	str	r2, [sp, #4]
 800047a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800047c:	9402      	str	r4, [sp, #8]
 800047e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000480:	f042 0204 	orr.w	r2, r2, #4
 8000484:	631a      	str	r2, [r3, #48]	@ 0x30
 8000486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000488:	f002 0204 	and.w	r2, r2, #4
 800048c:	9202      	str	r2, [sp, #8]
 800048e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	9403      	str	r4, [sp, #12]
 8000492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000494:	f042 0201 	orr.w	r2, r2, #1
 8000498:	631a      	str	r2, [r3, #48]	@ 0x30
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	9303      	str	r3, [sp, #12]
 80004a2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a4:	2701      	movs	r7, #1
 80004a6:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a8:	2603      	movs	r6, #3
 80004aa:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ac:	ad09      	add	r5, sp, #36	@ 0x24
 80004ae:	4629      	mov	r1, r5
 80004b0:	483d      	ldr	r0, [pc, #244]	@ (80005a8 <HAL_ADC_MspInit+0x16c>)
 80004b2:	f002 fa25 	bl	8002900 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004b6:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b8:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	4629      	mov	r1, r5
 80004be:	483b      	ldr	r0, [pc, #236]	@ (80005ac <HAL_ADC_MspInit+0x170>)
 80004c0:	f002 fa1e 	bl	8002900 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80004c4:	4622      	mov	r2, r4
 80004c6:	2105      	movs	r1, #5
 80004c8:	2012      	movs	r0, #18
 80004ca:	f001 ffa5 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80004ce:	2012      	movs	r0, #18
 80004d0:	f001 ffb2 	bl	8002438 <HAL_NVIC_EnableIRQ>
 80004d4:	e7c4      	b.n	8000460 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80004d6:	2400      	movs	r4, #0
 80004d8:	9404      	str	r4, [sp, #16]
 80004da:	4b32      	ldr	r3, [pc, #200]	@ (80005a4 <HAL_ADC_MspInit+0x168>)
 80004dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80004e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80004e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004e6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80004ea:	9204      	str	r2, [sp, #16]
 80004ec:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	9405      	str	r4, [sp, #20]
 80004f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004f2:	f042 0201 	orr.w	r2, r2, #1
 80004f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80004f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004fa:	f002 0201 	and.w	r2, r2, #1
 80004fe:	9205      	str	r2, [sp, #20]
 8000500:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	9406      	str	r4, [sp, #24]
 8000504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000506:	f042 0202 	orr.w	r2, r2, #2
 800050a:	631a      	str	r2, [r3, #48]	@ 0x30
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	9306      	str	r3, [sp, #24]
 8000514:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000516:	2702      	movs	r7, #2
 8000518:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051a:	2603      	movs	r6, #3
 800051c:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	ad09      	add	r5, sp, #36	@ 0x24
 8000520:	4629      	mov	r1, r5
 8000522:	4822      	ldr	r0, [pc, #136]	@ (80005ac <HAL_ADC_MspInit+0x170>)
 8000524:	f002 f9ec 	bl	8002900 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000528:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052a:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	4629      	mov	r1, r5
 8000530:	481f      	ldr	r0, [pc, #124]	@ (80005b0 <HAL_ADC_MspInit+0x174>)
 8000532:	f002 f9e5 	bl	8002900 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000536:	4622      	mov	r2, r4
 8000538:	2105      	movs	r1, #5
 800053a:	2012      	movs	r0, #18
 800053c:	f001 ff6c 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000540:	2012      	movs	r0, #18
 8000542:	f001 ff79 	bl	8002438 <HAL_NVIC_EnableIRQ>
 8000546:	e78b      	b.n	8000460 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000548:	2400      	movs	r4, #0
 800054a:	9407      	str	r4, [sp, #28]
 800054c:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <HAL_ADC_MspInit+0x168>)
 800054e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000554:	645a      	str	r2, [r3, #68]	@ 0x44
 8000556:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000558:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800055c:	9207      	str	r2, [sp, #28]
 800055e:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	9408      	str	r4, [sp, #32]
 8000562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000564:	f042 0201 	orr.w	r2, r2, #1
 8000568:	631a      	str	r2, [r3, #48]	@ 0x30
 800056a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	9308      	str	r3, [sp, #32]
 8000572:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000574:	230c      	movs	r3, #12
 8000576:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000578:	2303      	movs	r3, #3
 800057a:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	a909      	add	r1, sp, #36	@ 0x24
 800057e:	480b      	ldr	r0, [pc, #44]	@ (80005ac <HAL_ADC_MspInit+0x170>)
 8000580:	f002 f9be 	bl	8002900 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000584:	4622      	mov	r2, r4
 8000586:	2105      	movs	r1, #5
 8000588:	2012      	movs	r0, #18
 800058a:	f001 ff45 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800058e:	2012      	movs	r0, #18
 8000590:	f001 ff52 	bl	8002438 <HAL_NVIC_EnableIRQ>
}
 8000594:	e764      	b.n	8000460 <HAL_ADC_MspInit+0x24>
 8000596:	bf00      	nop
 8000598:	40012000 	.word	0x40012000
 800059c:	40012100 	.word	0x40012100
 80005a0:	40012200 	.word	0x40012200
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020800 	.word	0x40020800
 80005ac:	40020000 	.word	0x40020000
 80005b0:	40020400 	.word	0x40020400

080005b4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005b4:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005b6:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <MX_CAN1_Init+0x30>)
 80005b8:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <MX_CAN1_Init+0x34>)
 80005ba:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 80005bc:	2310      	movs	r3, #16
 80005be:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c4:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005c6:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005c8:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005ca:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005cc:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005ce:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005d0:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005d2:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005d4:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005d6:	f001 fe25 	bl	8002224 <HAL_CAN_Init>
 80005da:	b900      	cbnz	r0, 80005de <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005de:	f000 fe03 	bl	80011e8 <Error_Handler>
}
 80005e2:	e7fb      	b.n	80005dc <MX_CAN1_Init+0x28>
 80005e4:	2000010c 	.word	0x2000010c
 80005e8:	40006400 	.word	0x40006400

080005ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ec:	b500      	push	{lr}
 80005ee:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	2300      	movs	r3, #0
 80005f2:	9303      	str	r3, [sp, #12]
 80005f4:	9304      	str	r3, [sp, #16]
 80005f6:	9305      	str	r3, [sp, #20]
 80005f8:	9306      	str	r3, [sp, #24]
 80005fa:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 80005fc:	6802      	ldr	r2, [r0, #0]
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <HAL_CAN_MspInit+0x68>)
 8000600:	429a      	cmp	r2, r3
 8000602:	d002      	beq.n	800060a <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000604:	b009      	add	sp, #36	@ 0x24
 8000606:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800060a:	2100      	movs	r1, #0
 800060c:	9101      	str	r1, [sp, #4]
 800060e:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 8000612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000614:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000618:	641a      	str	r2, [r3, #64]	@ 0x40
 800061a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800061c:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000620:	9201      	str	r2, [sp, #4]
 8000622:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	9102      	str	r1, [sp, #8]
 8000626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000628:	f042 0202 	orr.w	r2, r2, #2
 800062c:	631a      	str	r2, [r3, #48]	@ 0x30
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000638:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800063c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000642:	2303      	movs	r3, #3
 8000644:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000646:	2309      	movs	r3, #9
 8000648:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	a903      	add	r1, sp, #12
 800064c:	4802      	ldr	r0, [pc, #8]	@ (8000658 <HAL_CAN_MspInit+0x6c>)
 800064e:	f002 f957 	bl	8002900 <HAL_GPIO_Init>
}
 8000652:	e7d7      	b.n	8000604 <HAL_CAN_MspInit+0x18>
 8000654:	40006400 	.word	0x40006400
 8000658:	40020400 	.word	0x40020400

0800065c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800065c:	2884      	cmp	r0, #132	@ 0x84
 800065e:	d001      	beq.n	8000664 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8000660:	3003      	adds	r0, #3
 8000662:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000664:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8000666:	4770      	bx	lr

08000668 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000668:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800066a:	f004 fe53 	bl	8005314 <vTaskStartScheduler>
  
  return osOK;
}
 800066e:	2000      	movs	r0, #0
 8000670:	bd08      	pop	{r3, pc}

08000672 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000676:	b087      	sub	sp, #28
 8000678:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800067a:	6944      	ldr	r4, [r0, #20]
 800067c:	b1c4      	cbz	r4, 80006b0 <osThreadCreate+0x3e>
 800067e:	6985      	ldr	r5, [r0, #24]
 8000680:	b1b5      	cbz	r5, 80006b0 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000682:	6847      	ldr	r7, [r0, #4]
 8000684:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8000688:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800068c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8000690:	f7ff ffe4 	bl	800065c <makeFreeRtosPriority>
 8000694:	9502      	str	r5, [sp, #8]
 8000696:	9401      	str	r4, [sp, #4]
 8000698:	9000      	str	r0, [sp, #0]
 800069a:	4633      	mov	r3, r6
 800069c:	464a      	mov	r2, r9
 800069e:	4641      	mov	r1, r8
 80006a0:	4638      	mov	r0, r7
 80006a2:	f004 fdc9 	bl	8005238 <xTaskCreateStatic>
 80006a6:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80006a8:	9805      	ldr	r0, [sp, #20]
}
 80006aa:	b007      	add	sp, #28
 80006ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80006b0:	6844      	ldr	r4, [r0, #4]
 80006b2:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80006b4:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80006b6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80006ba:	f7ff ffcf 	bl	800065c <makeFreeRtosPriority>
 80006be:	ab05      	add	r3, sp, #20
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	9000      	str	r0, [sp, #0]
 80006c4:	4633      	mov	r3, r6
 80006c6:	b2ba      	uxth	r2, r7
 80006c8:	4629      	mov	r1, r5
 80006ca:	4620      	mov	r0, r4
 80006cc:	f004 fdef 	bl	80052ae <xTaskCreate>
 80006d0:	2801      	cmp	r0, #1
 80006d2:	d0e9      	beq.n	80006a8 <osThreadCreate+0x36>
      return NULL;
 80006d4:	2000      	movs	r0, #0
 80006d6:	e7e8      	b.n	80006aa <osThreadCreate+0x38>

080006d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80006d8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80006da:	b900      	cbnz	r0, 80006de <osDelay+0x6>
 80006dc:	2001      	movs	r0, #1
 80006de:	f004 ff63 	bl	80055a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80006e2:	2000      	movs	r0, #0
 80006e4:	bd08      	pop	{r3, pc}
	...

080006e8 <controller_init>:
#include "./vbus.h"

drv8323_t g_driver;
static uint8_t g_tmp[8] = {0, 0, 0, 0, 0, 0, 0x80, 0x7f};

void controller_init(void) {
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	b087      	sub	sp, #28
  /// 初始化串口
  dev_usart_init();
 80006ec:	f000 f97c 	bl	80009e8 <dev_usart_init>

  /// 配置DRV8323

  // 使用PWM_MODE_3X控制时将互补引脚拉低
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80006f0:	4c32      	ldr	r4, [pc, #200]	@ (80007bc <controller_init+0xd4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f8:	4620      	mov	r0, r4
 80006fa:	f002 f9f1 	bl	8002ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000704:	4620      	mov	r0, r4
 8000706:	f002 f9eb 	bl	8002ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000710:	4620      	mov	r0, r4
 8000712:	f002 f9e5 	bl	8002ae0 <HAL_GPIO_WritePin>

  drv8323_init(&g_driver, &hspi3);
 8000716:	4e2a      	ldr	r6, [pc, #168]	@ (80007c0 <controller_init+0xd8>)
 8000718:	492a      	ldr	r1, [pc, #168]	@ (80007c4 <controller_init+0xdc>)
 800071a:	4630      	mov	r0, r6
 800071c:	f000 f9fc 	bl	8000b18 <drv8323_init>
  drv8323_calibrate(&g_driver);
 8000720:	4630      	mov	r0, r6
 8000722:	f000 faa5 	bl	8000c70 <drv8323_calibrate>
  HAL_Delay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f001 f89c 	bl	8001864 <HAL_Delay>
  drv8323_write_dcr(&g_driver, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0,
 800072c:	2501      	movs	r5, #1
 800072e:	9505      	str	r5, [sp, #20]
 8000730:	2400      	movs	r4, #0
 8000732:	9404      	str	r4, [sp, #16]
 8000734:	9403      	str	r4, [sp, #12]
 8000736:	9402      	str	r4, [sp, #8]
 8000738:	9401      	str	r4, [sp, #4]
 800073a:	9500      	str	r5, [sp, #0]
 800073c:	4623      	mov	r3, r4
 800073e:	462a      	mov	r2, r5
 8000740:	4621      	mov	r1, r4
 8000742:	4630      	mov	r0, r6
 8000744:	f000 fa1a 	bl	8000b7c <drv8323_write_dcr>
                    0x0, 0x0, 0x1);
  HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 f88b 	bl	8001864 <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1,
 800074e:	2703      	movs	r7, #3
 8000750:	9705      	str	r7, [sp, #20]
 8000752:	9504      	str	r5, [sp, #16]
 8000754:	9503      	str	r5, [sp, #12]
 8000756:	9502      	str	r5, [sp, #8]
 8000758:	9401      	str	r4, [sp, #4]
 800075a:	9700      	str	r7, [sp, #0]
 800075c:	4623      	mov	r3, r4
 800075e:	462a      	mov	r2, r5
 8000760:	4621      	mov	r1, r4
 8000762:	4630      	mov	r0, r6
 8000764:	f000 fa4c 	bl	8000c00 <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f001 f87b 	bl	8001864 <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0,
 800076e:	9705      	str	r7, [sp, #20]
 8000770:	9404      	str	r4, [sp, #16]
 8000772:	9403      	str	r4, [sp, #12]
 8000774:	9402      	str	r4, [sp, #8]
 8000776:	9501      	str	r5, [sp, #4]
 8000778:	9700      	str	r7, [sp, #0]
 800077a:	4623      	mov	r3, r4
 800077c:	462a      	mov	r2, r5
 800077e:	4621      	mov	r1, r4
 8000780:	4630      	mov	r0, r6
 8000782:	f000 fa3d 	bl	8000c00 <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 8000786:	200a      	movs	r0, #10
 8000788:	f001 f86c 	bl	8001864 <HAL_Delay>
  drv8323_write_ocpcr(&g_driver, TRETRY_50US, DEADTIME_50NS, OCP_NONE,
 800078c:	230f      	movs	r3, #15
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	9700      	str	r7, [sp, #0]
 8000792:	463b      	mov	r3, r7
 8000794:	4622      	mov	r2, r4
 8000796:	4629      	mov	r1, r5
 8000798:	4630      	mov	r0, r6
 800079a:	f000 fa1a 	bl	8000bd2 <drv8323_write_ocpcr>
                      OCP_DEG_8US, VDS_LVL_1_88);
  drv8323_enable_gd(&g_driver);
 800079e:	4630      	mov	r0, r6
 80007a0:	f000 fa59 	bl	8000c56 <drv8323_enable_gd>

  /// 电流采样初始化
  current_init();
 80007a4:	f000 f908 	bl	80009b8 <current_init>
  /// VBUS电压采样初始化
  vbus_init();
 80007a8:	f005 f9b6 	bl	8005b18 <vbus_init>
  /// 启动PWM
  pwm_start();
 80007ac:	f000 ff28 	bl	8001600 <pwm_start>

  state_set(STATE_IDLE);
 80007b0:	4628      	mov	r0, r5
 80007b2:	f000 ffa7 	bl	8001704 <state_set>
}
 80007b6:	b007      	add	sp, #28
 80007b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40020400 	.word	0x40020400
 80007c0:	20000134 	.word	0x20000134
 80007c4:	20004244 	.word	0x20004244

080007c8 <controller_step>:

void controller_step(void) {
 80007c8:	b500      	push	{lr}
 80007ca:	b083      	sub	sp, #12
  float vbus = vbus_get();
 80007cc:	f005 f9ac 	bl	8005b28 <vbus_get>
 80007d0:	ed8d 0a01 	vstr	s0, [sp, #4]
  memcpy(g_tmp, &vbus, sizeof(vbus));
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <controller_step+0x20>)
 80007d6:	9b01      	ldr	r3, [sp, #4]
 80007d8:	6003      	str	r3, [r0, #0]
  dev_usart_write(g_tmp, sizeof(g_tmp));
 80007da:	2108      	movs	r1, #8
 80007dc:	f000 f910 	bl	8000a00 <dev_usart_write>
 80007e0:	b003      	add	sp, #12
 80007e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80007e6:	bf00      	nop
 80007e8:	20000000 	.word	0x20000000

080007ec <HAL_ADCEx_InjectedConvCpltCallback>:
static float g_current[3] = {0.0f, 0.0f, 0.0f};

static uint8_t g_tmp[16] = {0, 0, 0, 0, 0, 0, 0,    0,
                            0, 0, 0, 0, 0, 0, 0x80, 0x7f};

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80007ec:	b508      	push	{r3, lr}
  static int16_t adc1_cnt = 0;
  static int16_t adc2_cnt = 0;
  static int16_t adc3_cnd = 0;

  if (ADC1 == hadc->Instance) {
 80007ee:	6803      	ldr	r3, [r0, #0]
 80007f0:	4a5b      	ldr	r2, [pc, #364]	@ (8000960 <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d013      	beq.n	800081e <HAL_ADCEx_InjectedConvCpltCallback+0x32>
        g_adc1_state = 1;
      }
    } else {
      g_ia = (adc1_in0 - g_ia_offset) * g_gain;
    }
  } else if (ADC2 == hadc->Instance) {
 80007f6:	4a5b      	ldr	r2, [pc, #364]	@ (8000964 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d040      	beq.n	800087e <HAL_ADCEx_InjectedConvCpltCallback+0x92>
        g_adc2_state = 1;
      }
    } else {
      g_ib = (adc2_in1 - g_ib_offset) * g_gain;
    }
  } else if (ADC3 == hadc->Instance) {
 80007fc:	4a5a      	ldr	r2, [pc, #360]	@ (8000968 <HAL_ADCEx_InjectedConvCpltCallback+0x17c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d06d      	beq.n	80008de <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
    } else {
      g_ic = (adc3_in2 - g_ic_offset) * g_gain;
    }
  }

  if (!g_adc1_state || !g_adc2_state || !g_adc3_state) {
 8000802:	4a5a      	ldr	r2, [pc, #360]	@ (800096c <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	b14a      	cbz	r2, 800081c <HAL_ADCEx_InjectedConvCpltCallback+0x30>
 8000808:	4a59      	ldr	r2, [pc, #356]	@ (8000970 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	b132      	cbz	r2, 800081c <HAL_ADCEx_InjectedConvCpltCallback+0x30>
 800080e:	4a59      	ldr	r2, [pc, #356]	@ (8000974 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	b11a      	cbz	r2, 800081c <HAL_ADCEx_InjectedConvCpltCallback+0x30>
    return;
  }

  if (ADC1 == hadc->Instance) {
 8000814:	4a52      	ldr	r2, [pc, #328]	@ (8000960 <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 8000816:	4293      	cmp	r3, r2
 8000818:	f000 8092 	beq.w	8000940 <HAL_ADCEx_InjectedConvCpltCallback+0x154>
    g_current[2] = g_ic;

    // memcpy(g_tmp, g_current, sizeof(g_current));
    // dev_usart_write(g_tmp, sizeof(g_tmp));
  }
}
 800081c:	bd08      	pop	{r3, pc}
    float adc1_in0 = hadc1.Instance->JDR1;
 800081e:	4a56      	ldr	r2, [pc, #344]	@ (8000978 <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8000826:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (0 == g_adc1_state) {
 800082a:	4a50      	ldr	r2, [pc, #320]	@ (800096c <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	b9c2      	cbnz	r2, 8000862 <HAL_ADCEx_InjectedConvCpltCallback+0x76>
      g_ia_offset += adc1_in0;
 8000830:	4a52      	ldr	r2, [pc, #328]	@ (800097c <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 8000832:	ed92 7a00 	vldr	s14, [r2]
 8000836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800083a:	edc2 7a00 	vstr	s15, [r2]
      if (100 == ++adc1_cnt) {
 800083e:	4950      	ldr	r1, [pc, #320]	@ (8000980 <HAL_ADCEx_InjectedConvCpltCallback+0x194>)
 8000840:	880a      	ldrh	r2, [r1, #0]
 8000842:	3201      	adds	r2, #1
 8000844:	b212      	sxth	r2, r2
 8000846:	800a      	strh	r2, [r1, #0]
 8000848:	2a64      	cmp	r2, #100	@ 0x64
 800084a:	d1da      	bne.n	8000802 <HAL_ADCEx_InjectedConvCpltCallback+0x16>
        g_ia_offset /= 100.0f;
 800084c:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8000984 <HAL_ADCEx_InjectedConvCpltCallback+0x198>
 8000850:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000854:	4a49      	ldr	r2, [pc, #292]	@ (800097c <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 8000856:	ed82 7a00 	vstr	s14, [r2]
        g_adc1_state = 1;
 800085a:	4a44      	ldr	r2, [pc, #272]	@ (800096c <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 800085c:	2101      	movs	r1, #1
 800085e:	7011      	strb	r1, [r2, #0]
 8000860:	e7cf      	b.n	8000802 <HAL_ADCEx_InjectedConvCpltCallback+0x16>
      g_ia = (adc1_in0 - g_ia_offset) * g_gain;
 8000862:	4a46      	ldr	r2, [pc, #280]	@ (800097c <HAL_ADCEx_InjectedConvCpltCallback+0x190>)
 8000864:	ed92 7a00 	vldr	s14, [r2]
 8000868:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800086c:	4a46      	ldr	r2, [pc, #280]	@ (8000988 <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 800086e:	ed92 7a00 	vldr	s14, [r2]
 8000872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000876:	4a45      	ldr	r2, [pc, #276]	@ (800098c <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 8000878:	edc2 7a00 	vstr	s15, [r2]
 800087c:	e7c1      	b.n	8000802 <HAL_ADCEx_InjectedConvCpltCallback+0x16>
    float adc2_in1 = hadc2.Instance->JDR1;
 800087e:	4a44      	ldr	r2, [pc, #272]	@ (8000990 <HAL_ADCEx_InjectedConvCpltCallback+0x1a4>)
 8000880:	6812      	ldr	r2, [r2, #0]
 8000882:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8000886:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (0 == g_adc2_state) {
 800088a:	4a39      	ldr	r2, [pc, #228]	@ (8000970 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	b9c2      	cbnz	r2, 80008c2 <HAL_ADCEx_InjectedConvCpltCallback+0xd6>
      g_ib_offset += adc2_in1;
 8000890:	4a40      	ldr	r2, [pc, #256]	@ (8000994 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 8000892:	ed92 7a00 	vldr	s14, [r2]
 8000896:	ee77 7a87 	vadd.f32	s15, s15, s14
 800089a:	edc2 7a00 	vstr	s15, [r2]
      if (100 == ++adc2_cnt) {
 800089e:	493e      	ldr	r1, [pc, #248]	@ (8000998 <HAL_ADCEx_InjectedConvCpltCallback+0x1ac>)
 80008a0:	880a      	ldrh	r2, [r1, #0]
 80008a2:	3201      	adds	r2, #1
 80008a4:	b212      	sxth	r2, r2
 80008a6:	800a      	strh	r2, [r1, #0]
 80008a8:	2a64      	cmp	r2, #100	@ 0x64
 80008aa:	d1aa      	bne.n	8000802 <HAL_ADCEx_InjectedConvCpltCallback+0x16>
        g_ib_offset /= 100.0f;
 80008ac:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8000984 <HAL_ADCEx_InjectedConvCpltCallback+0x198>
 80008b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008b4:	4a37      	ldr	r2, [pc, #220]	@ (8000994 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 80008b6:	ed82 7a00 	vstr	s14, [r2]
        g_adc2_state = 1;
 80008ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000970 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 80008bc:	2101      	movs	r1, #1
 80008be:	7011      	strb	r1, [r2, #0]
 80008c0:	e79f      	b.n	8000802 <HAL_ADCEx_InjectedConvCpltCallback+0x16>
      g_ib = (adc2_in1 - g_ib_offset) * g_gain;
 80008c2:	4a34      	ldr	r2, [pc, #208]	@ (8000994 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 80008c4:	ed92 7a00 	vldr	s14, [r2]
 80008c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008cc:	4a2e      	ldr	r2, [pc, #184]	@ (8000988 <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 80008ce:	ed92 7a00 	vldr	s14, [r2]
 80008d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d6:	4a31      	ldr	r2, [pc, #196]	@ (800099c <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 80008d8:	edc2 7a00 	vstr	s15, [r2]
 80008dc:	e791      	b.n	8000802 <HAL_ADCEx_InjectedConvCpltCallback+0x16>
    float adc3_in2 = hadc3.Instance->JDR1;
 80008de:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <HAL_ADCEx_InjectedConvCpltCallback+0x1b4>)
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 80008e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (0 == g_adc3_state) {
 80008ea:	4a22      	ldr	r2, [pc, #136]	@ (8000974 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	b9ca      	cbnz	r2, 8000924 <HAL_ADCEx_InjectedConvCpltCallback+0x138>
      g_ic_offset += adc3_in2;
 80008f0:	4a2c      	ldr	r2, [pc, #176]	@ (80009a4 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80008f2:	ed92 7a00 	vldr	s14, [r2]
 80008f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008fa:	edc2 7a00 	vstr	s15, [r2]
      if (100 == ++adc3_cnd) {
 80008fe:	492a      	ldr	r1, [pc, #168]	@ (80009a8 <HAL_ADCEx_InjectedConvCpltCallback+0x1bc>)
 8000900:	880a      	ldrh	r2, [r1, #0]
 8000902:	3201      	adds	r2, #1
 8000904:	b212      	sxth	r2, r2
 8000906:	800a      	strh	r2, [r1, #0]
 8000908:	2a64      	cmp	r2, #100	@ 0x64
 800090a:	f47f af7a 	bne.w	8000802 <HAL_ADCEx_InjectedConvCpltCallback+0x16>
        g_ic_offset /= 100.0f;
 800090e:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000984 <HAL_ADCEx_InjectedConvCpltCallback+0x198>
 8000912:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000916:	4a23      	ldr	r2, [pc, #140]	@ (80009a4 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8000918:	ed82 7a00 	vstr	s14, [r2]
        g_adc3_state = 1;
 800091c:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 800091e:	2101      	movs	r1, #1
 8000920:	7011      	strb	r1, [r2, #0]
 8000922:	e76e      	b.n	8000802 <HAL_ADCEx_InjectedConvCpltCallback+0x16>
      g_ic = (adc3_in2 - g_ic_offset) * g_gain;
 8000924:	4a1f      	ldr	r2, [pc, #124]	@ (80009a4 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8000926:	ed92 7a00 	vldr	s14, [r2]
 800092a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800092e:	4a16      	ldr	r2, [pc, #88]	@ (8000988 <HAL_ADCEx_InjectedConvCpltCallback+0x19c>)
 8000930:	ed92 7a00 	vldr	s14, [r2]
 8000934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000938:	4a1c      	ldr	r2, [pc, #112]	@ (80009ac <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 800093a:	edc2 7a00 	vstr	s15, [r2]
 800093e:	e760      	b.n	8000802 <HAL_ADCEx_InjectedConvCpltCallback+0x16>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000940:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000944:	481a      	ldr	r0, [pc, #104]	@ (80009b0 <HAL_ADCEx_InjectedConvCpltCallback+0x1c4>)
 8000946:	f002 f8d1 	bl	8002aec <HAL_GPIO_TogglePin>
    g_current[0] = g_ia;
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 800094c:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_ADCEx_InjectedConvCpltCallback+0x1a0>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	601a      	str	r2, [r3, #0]
    g_current[1] = g_ib;
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	605a      	str	r2, [r3, #4]
    g_current[2] = g_ic;
 8000958:	4a14      	ldr	r2, [pc, #80]	@ (80009ac <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 800095a:	6812      	ldr	r2, [r2, #0]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	e75d      	b.n	800081c <HAL_ADCEx_InjectedConvCpltCallback+0x30>
 8000960:	40012000 	.word	0x40012000
 8000964:	40012100 	.word	0x40012100
 8000968:	40012200 	.word	0x40012200
 800096c:	2000014e 	.word	0x2000014e
 8000970:	2000014d 	.word	0x2000014d
 8000974:	2000014c 	.word	0x2000014c
 8000978:	200000c4 	.word	0x200000c4
 800097c:	20000168 	.word	0x20000168
 8000980:	2000013c 	.word	0x2000013c
 8000984:	42c80000 	.word	0x42c80000
 8000988:	2000015c 	.word	0x2000015c
 800098c:	20000158 	.word	0x20000158
 8000990:	2000007c 	.word	0x2000007c
 8000994:	20000164 	.word	0x20000164
 8000998:	2000013a 	.word	0x2000013a
 800099c:	20000154 	.word	0x20000154
 80009a0:	20000034 	.word	0x20000034
 80009a4:	20000160 	.word	0x20000160
 80009a8:	20000138 	.word	0x20000138
 80009ac:	20000150 	.word	0x20000150
 80009b0:	40020800 	.word	0x40020800
 80009b4:	20000140 	.word	0x20000140

080009b8 <current_init>:

void current_init(void) {
 80009b8:	b508      	push	{r3, lr}
  // 计算增益(计算出电压值 除以 采样电阻值 除以 放大倍数)
  g_gain = (ADC_VOLTAGE_REF / ADC_RESOLUTION) / (SHUNT_RESISTANCE * AMP_GAIN);
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <current_init+0x1c>)
 80009bc:	4a06      	ldr	r2, [pc, #24]	@ (80009d8 <current_init+0x20>)
 80009be:	601a      	str	r2, [r3, #0]

  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80009c0:	4806      	ldr	r0, [pc, #24]	@ (80009dc <current_init+0x24>)
 80009c2:	f001 faa5 	bl	8001f10 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc2);
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <current_init+0x28>)
 80009c8:	f001 faa2 	bl	8001f10 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc3);
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <current_init+0x2c>)
 80009ce:	f001 fa9f 	bl	8001f10 <HAL_ADCEx_InjectedStart_IT>
}
 80009d2:	bd08      	pop	{r3, pc}
 80009d4:	2000015c 	.word	0x2000015c
 80009d8:	3b840000 	.word	0x3b840000
 80009dc:	200000c4 	.word	0x200000c4
 80009e0:	2000007c 	.word	0x2000007c
 80009e4:	20000034 	.word	0x20000034

080009e8 <dev_usart_init>:
extern DMA_HandleTypeDef hdma_usart3_rx;

uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t rx_buffer[RX_BUFFER_SIZE];

int dev_usart_init(void) {
 80009e8:	b508      	push	{r3, lr}
  HAL_UART_Receive_DMA(&huart3, rx_buffer, RX_BUFFER_SIZE);
 80009ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ee:	4902      	ldr	r1, [pc, #8]	@ (80009f8 <dev_usart_init+0x10>)
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <dev_usart_init+0x14>)
 80009f2:	f004 f9f5 	bl	8004de0 <HAL_UART_Receive_DMA>
}
 80009f6:	bd08      	pop	{r3, pc}
 80009f8:	2000016c 	.word	0x2000016c
 80009fc:	20004568 	.word	0x20004568

08000a00 <dev_usart_write>:

int dev_usart_write(const uint8_t* buf, uint16_t size) {
  if (size > TX_BUFFER_SIZE) {
 8000a00:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8000a04:	d80d      	bhi.n	8000a22 <dev_usart_write+0x22>
int dev_usart_write(const uint8_t* buf, uint16_t size) {
 8000a06:	b538      	push	{r3, r4, r5, lr}
 8000a08:	460c      	mov	r4, r1
    return -1;  // 错误：数据长度超过缓冲区限制
  }
  memcpy(tx_buffer, buf, size);
 8000a0a:	4d07      	ldr	r5, [pc, #28]	@ (8000a28 <dev_usart_write+0x28>)
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	4601      	mov	r1, r0
 8000a10:	4628      	mov	r0, r5
 8000a12:	f005 f8ff 	bl	8005c14 <memcpy>
  return HAL_UART_Transmit_DMA(&huart3, tx_buffer, size);
 8000a16:	4622      	mov	r2, r4
 8000a18:	4629      	mov	r1, r5
 8000a1a:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <dev_usart_write+0x2c>)
 8000a1c:	f003 fed0 	bl	80047c0 <HAL_UART_Transmit_DMA>
}
 8000a20:	bd38      	pop	{r3, r4, r5, pc}
    return -1;  // 错误：数据长度超过缓冲区限制
 8000a22:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000a26:	4770      	bx	lr
 8000a28:	2000026c 	.word	0x2000026c
 8000a2c:	20004568 	.word	0x20004568

08000a30 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t size) {
  if (huart->Instance == USART3) {
  }
}
 8000a30:	4770      	bx	lr
	...

08000a34 <HAL_UART_ErrorCallback>:

/// 下面错误处理函数中把奇偶校验错误以及数据溢出错误标志清除
/// 可以直接在调试时打断点查看huart->ErrorCode的值
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
  if (huart->Instance == USART3) {
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <HAL_UART_ErrorCallback+0x4c>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d000      	beq.n	8000a3e <HAL_UART_ErrorCallback+0xa>
 8000a3c:	4770      	bx	lr
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 8000a3e:	b500      	push	{lr}
 8000a40:	b083      	sub	sp, #12
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000a42:	2200      	movs	r2, #0
 8000a44:	9200      	str	r2, [sp, #0]
 8000a46:	6819      	ldr	r1, [r3, #0]
 8000a48:	9100      	str	r1, [sp, #0]
 8000a4a:	6859      	ldr	r1, [r3, #4]
 8000a4c:	9100      	str	r1, [sp, #0]
 8000a4e:	9900      	ldr	r1, [sp, #0]
    __HAL_UART_CLEAR_PEFLAG(huart);
 8000a50:	9201      	str	r2, [sp, #4]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	9201      	str	r2, [sp, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	9b01      	ldr	r3, [sp, #4]
    huart->RxState = HAL_UART_STATE_READY;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buffer, RX_BUFFER_SIZE);
 8000a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a66:	4907      	ldr	r1, [pc, #28]	@ (8000a84 <HAL_UART_ErrorCallback+0x50>)
 8000a68:	f004 f9cc 	bl	8004e04 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_UART_ErrorCallback+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	f023 0308 	bic.w	r3, r3, #8
 8000a76:	6013      	str	r3, [r2, #0]
  }
 8000a78:	b003      	add	sp, #12
 8000a7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a7e:	bf00      	nop
 8000a80:	40004800 	.word	0x40004800
 8000a84:	2000016c 	.word	0x2000016c
 8000a88:	200044a8 	.word	0x200044a8

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a90:	2400      	movs	r4, #0
 8000a92:	9401      	str	r4, [sp, #4]
 8000a94:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_DMA_Init+0x40>)
 8000a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a98:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000a9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000aa8:	4622      	mov	r2, r4
 8000aaa:	2105      	movs	r1, #5
 8000aac:	200c      	movs	r0, #12
 8000aae:	f001 fcb3 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ab2:	200c      	movs	r0, #12
 8000ab4:	f001 fcc0 	bl	8002438 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000ab8:	4622      	mov	r2, r4
 8000aba:	2105      	movs	r1, #5
 8000abc:	200e      	movs	r0, #14
 8000abe:	f001 fcab 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ac2:	200e      	movs	r0, #14
 8000ac4:	f001 fcb8 	bl	8002438 <HAL_NVIC_EnableIRQ>

}
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd10      	pop	{r4, pc}
 8000acc:	40023800 	.word	0x40023800

08000ad0 <_SPI_WRITE>:
#define _CAL(x) HAL_GPIO_WritePin(DRV_CAL_GPIO_Port, DRV_CAL_Pin, x)

// SPI通讯NSS
#define _NSS(x) HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, x)

uint16_t _SPI_WRITE(drv8323_t* self, uint16_t data) {
 8000ad0:	b530      	push	{r4, r5, lr}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	f8ad 100e 	strh.w	r1, [sp, #14]
  uint16_t ret;
  _NSS(0);
 8000ada:	4d0e      	ldr	r5, [pc, #56]	@ (8000b14 <_SPI_WRITE+0x44>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	f001 fffd 	bl	8002ae0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f000 febc 	bl	8001864 <HAL_Delay>
  HAL_StatusTypeDef sta = HAL_SPI_TransmitReceive(
 8000aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	f10d 0216 	add.w	r2, sp, #22
 8000af8:	f10d 010e 	add.w	r1, sp, #14
 8000afc:	6820      	ldr	r0, [r4, #0]
 8000afe:	f002 fdda 	bl	80036b6 <HAL_SPI_TransmitReceive>
      self->hspi, (uint8_t*)&data, (uint8_t*)&ret, 1, DRV8323_SPI_TIMEOUT);
  if (HAL_OK != sta) {
    // warn("_SPI_WRITE FAILED: %d", sta);
  }
  _NSS(1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2104      	movs	r1, #4
 8000b06:	4628      	mov	r0, r5
 8000b08:	f001 ffea 	bl	8002ae0 <HAL_GPIO_WritePin>
  return ret;
}
 8000b0c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8000b10:	b007      	add	sp, #28
 8000b12:	bd30      	pop	{r4, r5, pc}
 8000b14:	40020c00 	.word	0x40020c00

08000b18 <drv8323_init>:

int drv8323_init(drv8323_t* self, SPI_HandleTypeDef* spi) {
 8000b18:	b510      	push	{r4, lr}
  self->hspi = spi;
 8000b1a:	6001      	str	r1, [r0, #0]
  _ENABLE(0);
 8000b1c:	4c0e      	ldr	r4, [pc, #56]	@ (8000b58 <drv8323_init+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b24:	4620      	mov	r0, r4
 8000b26:	f001 ffdb 	bl	8002ae0 <HAL_GPIO_WritePin>
  _CAL(1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2180      	movs	r1, #128	@ 0x80
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f001 ffd6 	bl	8002ae0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b34:	200a      	movs	r0, #10
 8000b36:	f000 fe95 	bl	8001864 <HAL_Delay>
  _ENABLE(1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b40:	4620      	mov	r0, r4
 8000b42:	f001 ffcd 	bl	8002ae0 <HAL_GPIO_WritePin>
  _CAL(0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2180      	movs	r1, #128	@ 0x80
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f001 ffc8 	bl	8002ae0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b50:	200a      	movs	r0, #10
 8000b52:	f000 fe87 	bl	8001864 <HAL_Delay>
}
 8000b56:	bd10      	pop	{r4, pc}
 8000b58:	40020800 	.word	0x40020800

08000b5c <drv8323_read_register>:
uint16_t drv8323_read_fsr2(drv8323_t* self) {
  uint16_t val = (1 << 15) | (FSR2 << 11);
  return _SPI_WRITE(self, val);
}

uint16_t drv8323_read_register(drv8323_t* self, uint16_t reg) {
 8000b5c:	b508      	push	{r3, lr}
  uint16_t ret = _SPI_WRITE(self, (1 << 15) | (reg << 11));
 8000b5e:	ea6f 7101 	mvn.w	r1, r1, lsl #28
 8000b62:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000b66:	b289      	uxth	r1, r1
 8000b68:	f7ff ffb2 	bl	8000ad0 <_SPI_WRITE>
  return ret;
}
 8000b6c:	bd08      	pop	{r3, pc}

08000b6e <drv8323_write_register>:

void drv8323_write_register(drv8323_t* self, uint16_t reg, uint16_t val) {
 8000b6e:	b508      	push	{r3, lr}
  _SPI_WRITE(self, (reg << 11) | val);
 8000b70:	ea42 21c1 	orr.w	r1, r2, r1, lsl #11
 8000b74:	b289      	uxth	r1, r1
 8000b76:	f7ff ffab 	bl	8000ad0 <_SPI_WRITE>
}
 8000b7a:	bd08      	pop	{r3, pc}

08000b7c <drv8323_write_dcr>:

void drv8323_write_dcr(drv8323_t* self, uint16_t dis_cpuv, uint16_t dis_gdf,
                       uint16_t otw_rep, uint16_t pwm_mode, uint16_t pwm_com,
                       uint16_t pwm_dir, uint16_t coast, uint16_t brake,
                       uint16_t clr_flt) {
 8000b7c:	b508      	push	{r3, lr}
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 8000b7e:	0249      	lsls	r1, r1, #9
 8000b80:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8000b84:	b209      	sxth	r1, r1
 8000b86:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b8a:	b209      	sxth	r1, r1
 8000b8c:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 8000b90:	b21b      	sxth	r3, r3
                 (otw_rep << 7) | (pwm_mode << 5) | (pwm_com << 4) |
 8000b92:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8000b96:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000ba0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8000baa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bae:	b21b      	sxth	r3, r3
                 (pwm_dir << 3) | (coast << 2) | (brake << 1) | clr_flt;
 8000bb0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8000bb4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8000bbe:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8000bc2:	b21b      	sxth	r3, r3
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 8000bc4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8000bc8:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 8000bca:	b289      	uxth	r1, r1
 8000bcc:	f7ff ff80 	bl	8000ad0 <_SPI_WRITE>
}
 8000bd0:	bd08      	pop	{r3, pc}

08000bd2 <drv8323_write_ocpcr>:
  _SPI_WRITE(self, val);
}

void drv8323_write_ocpcr(drv8323_t* self, uint16_t tretry, uint16_t dead_time,
                         uint16_t ocp_mode, uint16_t ocp_deg,
                         uint16_t vds_lvl) {
 8000bd2:	b508      	push	{r3, lr}
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 8000bd4:	0289      	lsls	r1, r1, #10
 8000bd6:	f441 5120 	orr.w	r1, r1, #10240	@ 0x2800
 8000bda:	b209      	sxth	r1, r1
 8000bdc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000be0:	b209      	sxth	r1, r1
 8000be2:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 8000be6:	b21b      	sxth	r3, r3
                 (ocp_mode << 6) | (ocp_deg << 4) | vds_lvl;
 8000be8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8000bec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000bf0:	b21b      	sxth	r3, r3
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 8000bf2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000bf6:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 8000bf8:	b289      	uxth	r1, r1
 8000bfa:	f7ff ff69 	bl	8000ad0 <_SPI_WRITE>
}
 8000bfe:	bd08      	pop	{r3, pc}

08000c00 <drv8323_write_csacr>:

void drv8323_write_csacr(drv8323_t* self, uint16_t csa_fet, uint16_t vref_div,
                         uint16_t ls_ref, uint16_t csa_gain, uint16_t dis_sen,
                         uint16_t csa_cal_a, uint16_t csa_cal_b,
                         uint16_t csa_cal_c, uint16_t sen_lvl) {
 8000c00:	b508      	push	{r3, lr}
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 8000c02:	0289      	lsls	r1, r1, #10
 8000c04:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 8000c08:	b209      	sxth	r1, r1
 8000c0a:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8000c0e:	b209      	sxth	r1, r1
 8000c10:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8000c14:	b21b      	sxth	r3, r3
                 (ls_ref << 8) | (csa_gain << 6) | (dis_sen << 5) |
 8000c16:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8000c1a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000c24:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8000c2e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c32:	b21b      	sxth	r3, r3
                 (csa_cal_a << 4) | (csa_cal_b << 3) | (csa_cal_c << 2) |
 8000c34:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8000c38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8000c42:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8000c46:	b21b      	sxth	r3, r3
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 8000c48:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8000c4c:	4319      	orrs	r1, r3
                 sen_lvl;
  _SPI_WRITE(self, val);
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	f7ff ff3e 	bl	8000ad0 <_SPI_WRITE>
}
 8000c54:	bd08      	pop	{r3, pc}

08000c56 <drv8323_enable_gd>:

void drv8323_enable_gd(drv8323_t* self) {
 8000c56:	b510      	push	{r4, lr}
 8000c58:	4604      	mov	r4, r0
  uint16_t val = (drv8323_read_register(self, DCR)) & (~(0x1 << 2));
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	f7ff ff7e 	bl	8000b5c <drv8323_read_register>
 8000c60:	f020 0204 	bic.w	r2, r0, #4
 8000c64:	b292      	uxth	r2, r2
  drv8323_write_register(self, DCR, val);
 8000c66:	2102      	movs	r1, #2
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f7ff ff80 	bl	8000b6e <drv8323_write_register>
}
 8000c6e:	bd10      	pop	{r4, pc}

08000c70 <drv8323_calibrate>:
void drv8323_disable_gd(drv8323_t* self) {
  uint16_t val = (drv8323_read_register(self, DCR)) | (0x1 << 2);
  drv8323_write_register(self, DCR, val);
}

void drv8323_calibrate(drv8323_t* self) {
 8000c70:	b508      	push	{r3, lr}
  uint16_t val = 0x1 << 4 + 0x1 << 3 + 0x1 << 2;
  drv8323_write_register(self, CSACR, val);
 8000c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c76:	2106      	movs	r1, #6
 8000c78:	f7ff ff79 	bl	8000b6e <drv8323_write_register>
}
 8000c7c:	bd08      	pop	{r3, pc}

08000c7e <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000c7e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;) {
    controller_step();
 8000c80:	f7ff fda2 	bl	80007c8 <controller_step>
    osDelay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f7ff fd27 	bl	80006d8 <osDelay>
  for (;;) {
 8000c8a:	e7f9      	b.n	8000c80 <StartDefaultTask+0x2>

08000c8c <StartStateTask>:
 * @brief Function implementing the stateTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateTask */
void StartStateTask(void const *argument) {
 8000c8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartStateTask */
  /* Infinite loop */
  for (;;) {
    state_step();
 8000c8e:	f000 fd6f 	bl	8001770 <state_step>
    osDelay(100);
 8000c92:	2064      	movs	r0, #100	@ 0x64
 8000c94:	f7ff fd20 	bl	80006d8 <osDelay>
  for (;;) {
 8000c98:	e7f9      	b.n	8000c8e <StartStateTask+0x2>
	...

08000c9c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <vApplicationGetIdleTaskMemory+0x10>)
 8000c9e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <vApplicationGetIdleTaskMemory+0x14>)
 8000ca2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000056c 	.word	0x2000056c
 8000cb0:	2000036c 	.word	0x2000036c

08000cb4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000cb4:	b510      	push	{r4, lr}
 8000cb6:	b08e      	sub	sp, #56	@ 0x38
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000cb8:	4c12      	ldr	r4, [pc, #72]	@ (8000d04 <MX_FREERTOS_Init+0x50>)
 8000cba:	f10d 0c1c 	add.w	ip, sp, #28
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000cc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000cc8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000ccc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	a807      	add	r0, sp, #28
 8000cd4:	f7ff fccd 	bl	8000672 <osThreadCreate>
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <MX_FREERTOS_Init+0x54>)
 8000cda:	6018      	str	r0, [r3, #0]
  osThreadDef(stateTask, StartStateTask, osPriorityNormal, 0, 128);
 8000cdc:	46ee      	mov	lr, sp
 8000cde:	f104 0c1c 	add.w	ip, r4, #28
 8000ce2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ce6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000cea:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8000cee:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  stateTaskHandle = osThreadCreate(osThread(stateTask), NULL);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4668      	mov	r0, sp
 8000cf6:	f7ff fcbc 	bl	8000672 <osThreadCreate>
 8000cfa:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <MX_FREERTOS_Init+0x58>)
 8000cfc:	6018      	str	r0, [r3, #0]
}
 8000cfe:	b00e      	add	sp, #56	@ 0x38
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	bf00      	nop
 8000d04:	08005f40 	.word	0x08005f40
 8000d08:	200005c4 	.word	0x200005c4
 8000d0c:	200005c0 	.word	0x200005c0

08000d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d14:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	ad05      	add	r5, sp, #20
 8000d18:	2400      	movs	r4, #0
 8000d1a:	9405      	str	r4, [sp, #20]
 8000d1c:	9406      	str	r4, [sp, #24]
 8000d1e:	9407      	str	r4, [sp, #28]
 8000d20:	9408      	str	r4, [sp, #32]
 8000d22:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	9400      	str	r4, [sp, #0]
 8000d26:	4b45      	ldr	r3, [pc, #276]	@ (8000e3c <MX_GPIO_Init+0x12c>)
 8000d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2a:	f042 0204 	orr.w	r2, r2, #4
 8000d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d32:	f002 0204 	and.w	r2, r2, #4
 8000d36:	9200      	str	r2, [sp, #0]
 8000d38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	9401      	str	r4, [sp, #4]
 8000d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d46:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000d4a:	9201      	str	r2, [sp, #4]
 8000d4c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	9402      	str	r4, [sp, #8]
 8000d50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d52:	f042 0201 	orr.w	r2, r2, #1
 8000d56:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d5a:	f002 0201 	and.w	r2, r2, #1
 8000d5e:	9202      	str	r2, [sp, #8]
 8000d60:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	9403      	str	r4, [sp, #12]
 8000d64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d66:	f042 0202 	orr.w	r2, r2, #2
 8000d6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d6e:	f002 0202 	and.w	r2, r2, #2
 8000d72:	9203      	str	r2, [sp, #12]
 8000d74:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	9404      	str	r4, [sp, #16]
 8000d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d7a:	f042 0208 	orr.w	r2, r2, #8
 8000d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	9304      	str	r3, [sp, #16]
 8000d88:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 8000d8a:	4f2d      	ldr	r7, [pc, #180]	@ (8000e40 <MX_GPIO_Init+0x130>)
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	f242 11ce 	movw	r1, #8654	@ 0x21ce
 8000d92:	4638      	mov	r0, r7
 8000d94:	f001 fea4 	bl	8002ae0 <HAL_GPIO_WritePin>
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|ENCODER_CAL_Pin, GPIO_PIN_RESET);
 8000d98:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8000e44 <MX_GPIO_Init+0x134>
 8000d9c:	4622      	mov	r2, r4
 8000d9e:	f248 0120 	movw	r1, #32800	@ 0x8020
 8000da2:	4650      	mov	r0, sl
 8000da4:	f001 fe9c 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|CAN_STB_Pin, GPIO_PIN_RESET);
 8000da8:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8000e48 <MX_GPIO_Init+0x138>
 8000dac:	4622      	mov	r2, r4
 8000dae:	f24e 0120 	movw	r1, #57376	@ 0xe020
 8000db2:	4640      	mov	r0, r8
 8000db4:	f001 fe94 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_SET);
 8000db8:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000e4c <MX_GPIO_Init+0x13c>
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4648      	mov	r0, r9
 8000dc2:	f001 fe8d 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_SPI_NSS_GPIO_Port, ENCODER_SPI_NSS_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4640      	mov	r0, r8
 8000dcc:	f001 fe88 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 LED_3_Pin LED_2_Pin LED_1_Pin
                           TIM1_BREAK_Pin DRV_CAL_Pin DRV_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 8000dd0:	f242 13ce 	movw	r3, #8654	@ 0x21ce
 8000dd4:	9305      	str	r3, [sp, #20]
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	4629      	mov	r1, r5
 8000de0:	4638      	mov	r0, r7
 8000de2:	f001 fd8d 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 ENCODER_CAL_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|ENCODER_CAL_Pin;
 8000de6:	f248 0320 	movw	r3, #32800	@ 0x8020
 8000dea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	4629      	mov	r1, r5
 8000df4:	4650      	mov	r0, sl
 8000df6:	f001 fd83 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 ENCODER_SPI_NSS_Pin
                           CAN_STB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|ENCODER_SPI_NSS_Pin
 8000dfa:	f24e 0328 	movw	r3, #57384	@ 0xe028
 8000dfe:	9305      	str	r3, [sp, #20]
                          |CAN_STB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	4629      	mov	r1, r5
 8000e08:	4640      	mov	r0, r8
 8000e0a:	f001 fd79 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 8000e0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e12:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e18:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4638      	mov	r0, r7
 8000e20:	f001 fd6e 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = DRV_SPI_NSS_Pin;
 8000e24:	2304      	movs	r3, #4
 8000e26:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DRV_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	4629      	mov	r1, r5
 8000e30:	4648      	mov	r0, r9
 8000e32:	f001 fd65 	bl	8002900 <HAL_GPIO_Init>

}
 8000e36:	b00a      	add	sp, #40	@ 0x28
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020c00 	.word	0x40020c00

08000e50 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000e50:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000e52:	f012 0f07 	tst.w	r2, #7
 8000e56:	d01e      	beq.n	8000e96 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000e58:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e5a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000e5e:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8000e62:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e64:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000e66:	480e      	ldr	r0, [pc, #56]	@ (8000ea0 <prvHeapInit+0x50>)
 8000e68:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000e6e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000e70:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e72:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8000e76:	480b      	ldr	r0, [pc, #44]	@ (8000ea4 <prvHeapInit+0x54>)
 8000e78:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8000e7a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000e7c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000e7e:	1a99      	subs	r1, r3, r2
 8000e80:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000e82:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <prvHeapInit+0x58>)
 8000e86:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <prvHeapInit+0x5c>)
 8000e8a:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <prvHeapInit+0x60>)
 8000e8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000e96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000e9a:	e7e4      	b.n	8000e66 <prvHeapInit+0x16>
 8000e9c:	200005e8 	.word	0x200005e8
 8000ea0:	200005e0 	.word	0x200005e0
 8000ea4:	200005dc 	.word	0x200005dc
 8000ea8:	200005d4 	.word	0x200005d4
 8000eac:	200005d8 	.word	0x200005d8
 8000eb0:	200005c8 	.word	0x200005c8

08000eb4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <prvInsertBlockIntoFreeList+0x5c>)
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4283      	cmp	r3, r0
 8000ebc:	d3fb      	bcc.n	8000eb6 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ebe:	6851      	ldr	r1, [r2, #4]
 8000ec0:	eb02 0c01 	add.w	ip, r2, r1
 8000ec4:	4584      	cmp	ip, r0
 8000ec6:	d009      	beq.n	8000edc <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ec8:	6841      	ldr	r1, [r0, #4]
 8000eca:	eb00 0c01 	add.w	ip, r0, r1
 8000ece:	4563      	cmp	r3, ip
 8000ed0:	d009      	beq.n	8000ee6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ed2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000ed4:	4290      	cmp	r0, r2
 8000ed6:	d019      	beq.n	8000f0c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ed8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8000eda:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000edc:	6840      	ldr	r0, [r0, #4]
 8000ede:	4401      	add	r1, r0
 8000ee0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	e7f0      	b.n	8000ec8 <prvInsertBlockIntoFreeList+0x14>
{
 8000ee6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f14 <prvInsertBlockIntoFreeList+0x60>)
 8000eea:	6824      	ldr	r4, [r4, #0]
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d00b      	beq.n	8000f08 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4419      	add	r1, r3
 8000ef4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8000efc:	4290      	cmp	r0, r2
 8000efe:	d000      	beq.n	8000f02 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f00:	6010      	str	r0, [r2, #0]
	}
}
 8000f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f06:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000f08:	6004      	str	r4, [r0, #0]
 8000f0a:	e7f7      	b.n	8000efc <prvInsertBlockIntoFreeList+0x48>
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200005e0 	.word	0x200005e0
 8000f14:	200005dc 	.word	0x200005dc

08000f18 <pvPortMalloc>:
{
 8000f18:	b538      	push	{r3, r4, r5, lr}
 8000f1a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8000f1c:	f004 fa34 	bl	8005388 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8000f20:	4b38      	ldr	r3, [pc, #224]	@ (8001004 <pvPortMalloc+0xec>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	b1b3      	cbz	r3, 8000f54 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f26:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <pvPortMalloc+0xf0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	421c      	tst	r4, r3
 8000f2c:	d150      	bne.n	8000fd0 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d050      	beq.n	8000fd4 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8000f32:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f36:	f014 0f07 	tst.w	r4, #7
 8000f3a:	d002      	beq.n	8000f42 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f3c:	f022 0207 	bic.w	r2, r2, #7
 8000f40:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d055      	beq.n	8000ff2 <pvPortMalloc+0xda>
 8000f46:	4b31      	ldr	r3, [pc, #196]	@ (800100c <pvPortMalloc+0xf4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d353      	bcc.n	8000ff6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8000f4e:	4930      	ldr	r1, [pc, #192]	@ (8001010 <pvPortMalloc+0xf8>)
 8000f50:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f52:	e004      	b.n	8000f5e <pvPortMalloc+0x46>
			prvHeapInit();
 8000f54:	f7ff ff7c 	bl	8000e50 <prvHeapInit>
 8000f58:	e7e5      	b.n	8000f26 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000f5a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000f5c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f5e:	6863      	ldr	r3, [r4, #4]
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d202      	bcs.n	8000f6a <pvPortMalloc+0x52>
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f7      	bne.n	8000f5a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <pvPortMalloc+0xec>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	d043      	beq.n	8000ffa <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000f72:	680d      	ldr	r5, [r1, #0]
 8000f74:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000f7a:	6863      	ldr	r3, [r4, #4]
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d910      	bls.n	8000fa4 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000f82:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f84:	f010 0f07 	tst.w	r0, #7
 8000f88:	d008      	beq.n	8000f9c <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f8e:	f383 8811 	msr	BASEPRI, r3
 8000f92:	f3bf 8f6f 	isb	sy
 8000f96:	f3bf 8f4f 	dsb	sy
 8000f9a:	e7fe      	b.n	8000f9a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000f9c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000f9e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000fa0:	f7ff ff88 	bl	8000eb4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000fa4:	6862      	ldr	r2, [r4, #4]
 8000fa6:	4919      	ldr	r1, [pc, #100]	@ (800100c <pvPortMalloc+0xf4>)
 8000fa8:	680b      	ldr	r3, [r1, #0]
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000fae:	4919      	ldr	r1, [pc, #100]	@ (8001014 <pvPortMalloc+0xfc>)
 8000fb0:	6809      	ldr	r1, [r1, #0]
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	d201      	bcs.n	8000fba <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000fb6:	4917      	ldr	r1, [pc, #92]	@ (8001014 <pvPortMalloc+0xfc>)
 8000fb8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <pvPortMalloc+0xf0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8000fc6:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <pvPortMalloc+0x100>)
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e002      	b.n	8000fd6 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8000fd0:	2500      	movs	r5, #0
 8000fd2:	e000      	b.n	8000fd6 <pvPortMalloc+0xbe>
 8000fd4:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8000fd6:	f004 fa6b 	bl	80054b0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fda:	f015 0f07 	tst.w	r5, #7
 8000fde:	d00e      	beq.n	8000ffe <pvPortMalloc+0xe6>
 8000fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fe4:	f383 8811 	msr	BASEPRI, r3
 8000fe8:	f3bf 8f6f 	isb	sy
 8000fec:	f3bf 8f4f 	dsb	sy
 8000ff0:	e7fe      	b.n	8000ff0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	e7ef      	b.n	8000fd6 <pvPortMalloc+0xbe>
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	e7ed      	b.n	8000fd6 <pvPortMalloc+0xbe>
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	e7eb      	b.n	8000fd6 <pvPortMalloc+0xbe>
}
 8000ffe:	4628      	mov	r0, r5
 8001000:	bd38      	pop	{r3, r4, r5, pc}
 8001002:	bf00      	nop
 8001004:	200005dc 	.word	0x200005dc
 8001008:	200005c8 	.word	0x200005c8
 800100c:	200005d8 	.word	0x200005d8
 8001010:	200005e0 	.word	0x200005e0
 8001014:	200005d4 	.word	0x200005d4
 8001018:	200005d0 	.word	0x200005d0

0800101c <vPortFree>:
	if( pv != NULL )
 800101c:	2800      	cmp	r0, #0
 800101e:	d034      	beq.n	800108a <vPortFree+0x6e>
{
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8001024:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001028:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800102c:	4a17      	ldr	r2, [pc, #92]	@ (800108c <vPortFree+0x70>)
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	4213      	tst	r3, r2
 8001032:	d108      	bne.n	8001046 <vPortFree+0x2a>
 8001034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	e7fe      	b.n	8001044 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001046:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800104a:	b141      	cbz	r1, 800105e <vPortFree+0x42>
 800104c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001050:	f383 8811 	msr	BASEPRI, r3
 8001054:	f3bf 8f6f 	isb	sy
 8001058:	f3bf 8f4f 	dsb	sy
 800105c:	e7fe      	b.n	800105c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800105e:	ea23 0302 	bic.w	r3, r3, r2
 8001062:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001066:	f004 f98f 	bl	8005388 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800106a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800106e:	4a08      	ldr	r2, [pc, #32]	@ (8001090 <vPortFree+0x74>)
 8001070:	6813      	ldr	r3, [r2, #0]
 8001072:	440b      	add	r3, r1
 8001074:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001076:	4628      	mov	r0, r5
 8001078:	f7ff ff1c 	bl	8000eb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800107c:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <vPortFree+0x78>)
 800107e:	6813      	ldr	r3, [r2, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8001084:	f004 fa14 	bl	80054b0 <xTaskResumeAll>
}
 8001088:	bd38      	pop	{r3, r4, r5, pc}
 800108a:	4770      	bx	lr
 800108c:	200005c8 	.word	0x200005c8
 8001090:	200005d8 	.word	0x200005d8
 8001094:	200005cc 	.word	0x200005cc

08001098 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001098:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109a:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <MX_I2C1_Init+0x30>)
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <MX_I2C1_Init+0x34>)
 800109e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_I2C1_Init+0x38>)
 80010a2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a4:	2300      	movs	r3, #0
 80010a6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010ae:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b8:	f001 fd22 	bl	8002b00 <HAL_I2C_Init>
 80010bc:	b900      	cbnz	r0, 80010c0 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010c0:	f000 f892 	bl	80011e8 <Error_Handler>
}
 80010c4:	e7fb      	b.n	80010be <MX_I2C1_Init+0x26>
 80010c6:	bf00      	nop
 80010c8:	200041e8 	.word	0x200041e8
 80010cc:	40005400 	.word	0x40005400
 80010d0:	000186a0 	.word	0x000186a0

080010d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d4:	b530      	push	{r4, r5, lr}
 80010d6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	2300      	movs	r3, #0
 80010da:	9303      	str	r3, [sp, #12]
 80010dc:	9304      	str	r3, [sp, #16]
 80010de:	9305      	str	r3, [sp, #20]
 80010e0:	9306      	str	r3, [sp, #24]
 80010e2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80010e4:	6802      	ldr	r2, [r0, #0]
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <HAL_I2C_MspInit+0x64>)
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d001      	beq.n	80010f0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ec:	b009      	add	sp, #36	@ 0x24
 80010ee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	2500      	movs	r5, #0
 80010f2:	9501      	str	r5, [sp, #4]
 80010f4:	4c11      	ldr	r4, [pc, #68]	@ (800113c <HAL_I2C_MspInit+0x68>)
 80010f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80010fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001108:	23c0      	movs	r3, #192	@ 0xc0
 800110a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110c:	2312      	movs	r3, #18
 800110e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001114:	2304      	movs	r3, #4
 8001116:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	a903      	add	r1, sp, #12
 800111a:	4809      	ldr	r0, [pc, #36]	@ (8001140 <HAL_I2C_MspInit+0x6c>)
 800111c:	f001 fbf0 	bl	8002900 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001120:	9502      	str	r5, [sp, #8]
 8001122:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001128:	6423      	str	r3, [r4, #64]	@ 0x40
 800112a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800112c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	9b02      	ldr	r3, [sp, #8]
}
 8001134:	e7da      	b.n	80010ec <HAL_I2C_MspInit+0x18>
 8001136:	bf00      	nop
 8001138:	40005400 	.word	0x40005400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400

08001144 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001144:	f100 0308 	add.w	r3, r0, #8
 8001148:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800114a:	f04f 32ff 	mov.w	r2, #4294967295
 800114e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001150:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001152:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001158:	4770      	bx	lr

0800115a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800115a:	2300      	movs	r3, #0
 800115c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800115e:	4770      	bx	lr

08001160 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001160:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001162:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001168:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800116a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800116c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800116e:	6803      	ldr	r3, [r0, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	6003      	str	r3, [r0, #0]
}
 8001174:	4770      	bx	lr

08001176 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001176:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001178:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800117a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800117e:	d011      	beq.n	80011a4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001180:	f100 0308 	add.w	r3, r0, #8
 8001184:	461c      	mov	r4, r3
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	42aa      	cmp	r2, r5
 800118c:	d9fa      	bls.n	8001184 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800118e:	6863      	ldr	r3, [r4, #4]
 8001190:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001192:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001194:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001196:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001198:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800119a:	6803      	ldr	r3, [r0, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	6003      	str	r3, [r0, #0]
}
 80011a0:	bc30      	pop	{r4, r5}
 80011a2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80011a4:	6904      	ldr	r4, [r0, #16]
 80011a6:	e7f2      	b.n	800118e <vListInsert+0x18>

080011a8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80011a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80011aa:	6841      	ldr	r1, [r0, #4]
 80011ac:	6882      	ldr	r2, [r0, #8]
 80011ae:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80011b0:	6841      	ldr	r1, [r0, #4]
 80011b2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4282      	cmp	r2, r0
 80011b8:	d006      	beq.n	80011c8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80011ba:	2200      	movs	r2, #0
 80011bc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	3a01      	subs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80011c4:	6818      	ldr	r0, [r3, #0]
}
 80011c6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80011c8:	6882      	ldr	r2, [r0, #8]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	e7f5      	b.n	80011ba <uxListRemove+0x12>
	...

080011d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80011d2:	6802      	ldr	r2, [r0, #0]
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d000      	beq.n	80011dc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011da:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80011dc:	f000 fb30 	bl	8001840 <HAL_IncTick>
}
 80011e0:	e7fb      	b.n	80011da <HAL_TIM_PeriodElapsedCallback+0xa>
 80011e2:	bf00      	nop
 80011e4:	40001000 	.word	0x40001000

080011e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80011ea:	e7fe      	b.n	80011ea <Error_Handler+0x2>

080011ec <SystemClock_Config>:
{
 80011ec:	b510      	push	{r4, lr}
 80011ee:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f0:	ac07      	add	r4, sp, #28
 80011f2:	2234      	movs	r2, #52	@ 0x34
 80011f4:	2100      	movs	r1, #0
 80011f6:	4620      	mov	r0, r4
 80011f8:	f004 fcdf 	bl	8005bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	9303      	str	r3, [sp, #12]
 8001202:	9304      	str	r3, [sp, #16]
 8001204:	9305      	str	r3, [sp, #20]
 8001206:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	4a20      	ldr	r2, [pc, #128]	@ (800128c <SystemClock_Config+0xa0>)
 800120c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800120e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001212:	6411      	str	r1, [r2, #64]	@ 0x40
 8001214:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001216:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <SystemClock_Config+0xa4>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001246:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001248:	2208      	movs	r2, #8
 800124a:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800124c:	22a0      	movs	r2, #160	@ 0xa0
 800124e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001250:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001252:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001254:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	4620      	mov	r0, r4
 8001258:	f001 ff08 	bl	800306c <HAL_RCC_OscConfig>
 800125c:	b990      	cbnz	r0, 8001284 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800126a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800126e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001274:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001276:	2105      	movs	r1, #5
 8001278:	a802      	add	r0, sp, #8
 800127a:	f001 fd41 	bl	8002d00 <HAL_RCC_ClockConfig>
 800127e:	b918      	cbnz	r0, 8001288 <SystemClock_Config+0x9c>
}
 8001280:	b014      	add	sp, #80	@ 0x50
 8001282:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001284:	f7ff ffb0 	bl	80011e8 <Error_Handler>
    Error_Handler();
 8001288:	f7ff ffae 	bl	80011e8 <Error_Handler>
 800128c:	40023800 	.word	0x40023800
 8001290:	40007000 	.word	0x40007000

08001294 <main>:
{
 8001294:	b508      	push	{r3, lr}
  HAL_Init();
 8001296:	f000 fab9 	bl	800180c <HAL_Init>
  SystemClock_Config();
 800129a:	f7ff ffa7 	bl	80011ec <SystemClock_Config>
  MX_GPIO_Init();
 800129e:	f7ff fd37 	bl	8000d10 <MX_GPIO_Init>
  MX_DMA_Init();
 80012a2:	f7ff fbf3 	bl	8000a8c <MX_DMA_Init>
  MX_CAN1_Init();
 80012a6:	f7ff f985 	bl	80005b4 <MX_CAN1_Init>
  MX_TIM1_Init();
 80012aa:	f004 fae3 	bl	8005874 <MX_TIM1_Init>
  MX_ADC1_Init();
 80012ae:	f7fe ffc9 	bl	8000244 <MX_ADC1_Init>
  MX_ADC2_Init();
 80012b2:	f7ff f81b 	bl	80002ec <MX_ADC2_Init>
  MX_ADC3_Init();
 80012b6:	f7ff f86d 	bl	8000394 <MX_ADC3_Init>
  MX_I2C1_Init();
 80012ba:	f7ff feed 	bl	8001098 <MX_I2C1_Init>
  MX_SPI3_Init();
 80012be:	f000 f9c9 	bl	8001654 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80012c2:	f004 fb73 	bl	80059ac <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80012c6:	f004 f9e1 	bl	800568c <MX_TIM3_Init>
  HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	@ 0x64
 80012cc:	f000 faca 	bl	8001864 <HAL_Delay>
  controller_init();
 80012d0:	f7ff fa0a 	bl	80006e8 <controller_init>
  MX_FREERTOS_Init();
 80012d4:	f7ff fcee 	bl	8000cb4 <MX_FREERTOS_Init>
  osKernelStart();
 80012d8:	f7ff f9c6 	bl	8000668 <osKernelStart>
  while (1) {
 80012dc:	e7fe      	b.n	80012dc <main+0x48>
	...

080012e0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80012e0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <prvTaskExitError+0x3c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ee:	d008      	beq.n	8001302 <prvTaskExitError+0x22>
 80012f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012f4:	f383 8811 	msr	BASEPRI, r3
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	f3bf 8f4f 	dsb	sy
 8001300:	e7fe      	b.n	8001300 <prvTaskExitError+0x20>
 8001302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001306:	f383 8811 	msr	BASEPRI, r3
 800130a:	f3bf 8f6f 	isb	sy
 800130e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001312:	9b01      	ldr	r3, [sp, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0fc      	beq.n	8001312 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001318:	b002      	add	sp, #8
 800131a:	4770      	bx	lr
 800131c:	20000008 	.word	0x20000008

08001320 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001320:	4808      	ldr	r0, [pc, #32]	@ (8001344 <prvPortStartFirstTask+0x24>)
 8001322:	6800      	ldr	r0, [r0, #0]
 8001324:	6800      	ldr	r0, [r0, #0]
 8001326:	f380 8808 	msr	MSP, r0
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	f380 8814 	msr	CONTROL, r0
 8001332:	b662      	cpsie	i
 8001334:	b661      	cpsie	f
 8001336:	f3bf 8f4f 	dsb	sy
 800133a:	f3bf 8f6f 	isb	sy
 800133e:	df00      	svc	0
 8001340:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001342:	0000      	.short	0x0000
 8001344:	e000ed08 	.word	0xe000ed08

08001348 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001348:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001358 <vPortEnableVFP+0x10>
 800134c:	6801      	ldr	r1, [r0, #0]
 800134e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001352:	6001      	str	r1, [r0, #0]
 8001354:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001356:	0000      	.short	0x0000
 8001358:	e000ed88 	.word	0xe000ed88

0800135c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800135c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001360:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001364:	f021 0101 	bic.w	r1, r1, #1
 8001368:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <pxPortInitialiseStack+0x28>)
 800136e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001372:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001376:	f06f 0302 	mvn.w	r3, #2
 800137a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800137e:	3844      	subs	r0, #68	@ 0x44
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	080012e1 	.word	0x080012e1
	...

08001390 <SVC_Handler>:
	__asm volatile (
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <pxCurrentTCBConst2>)
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	6808      	ldr	r0, [r1, #0]
 8001396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800139a:	f380 8809 	msr	PSP, r0
 800139e:	f3bf 8f6f 	isb	sy
 80013a2:	f04f 0000 	mov.w	r0, #0
 80013a6:	f380 8811 	msr	BASEPRI, r0
 80013aa:	4770      	bx	lr
 80013ac:	f3af 8000 	nop.w

080013b0 <pxCurrentTCBConst2>:
 80013b0:	20004414 	.word	0x20004414

080013b4 <vPortEnterCritical>:
 80013b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013b8:	f383 8811 	msr	BASEPRI, r3
 80013bc:	f3bf 8f6f 	isb	sy
 80013c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80013c4:	4a0b      	ldr	r2, [pc, #44]	@ (80013f4 <vPortEnterCritical+0x40>)
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d000      	beq.n	80013d2 <vPortEnterCritical+0x1e>
}
 80013d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80013d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80013d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80013da:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80013de:	d0f7      	beq.n	80013d0 <vPortEnterCritical+0x1c>
 80013e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013e4:	f383 8811 	msr	BASEPRI, r3
 80013e8:	f3bf 8f6f 	isb	sy
 80013ec:	f3bf 8f4f 	dsb	sy
 80013f0:	e7fe      	b.n	80013f0 <vPortEnterCritical+0x3c>
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008

080013f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80013f8:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <vPortExitCritical+0x28>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	b943      	cbnz	r3, 8001410 <vPortExitCritical+0x18>
 80013fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001402:	f383 8811 	msr	BASEPRI, r3
 8001406:	f3bf 8f6f 	isb	sy
 800140a:	f3bf 8f4f 	dsb	sy
 800140e:	e7fe      	b.n	800140e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001410:	3b01      	subs	r3, #1
 8001412:	4a03      	ldr	r2, [pc, #12]	@ (8001420 <vPortExitCritical+0x28>)
 8001414:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001416:	b90b      	cbnz	r3, 800141c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001418:	f383 8811 	msr	BASEPRI, r3
}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008
	...

08001430 <PendSV_Handler>:
	__asm volatile
 8001430:	f3ef 8009 	mrs	r0, PSP
 8001434:	f3bf 8f6f 	isb	sy
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <pxCurrentTCBConst>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f01e 0f10 	tst.w	lr, #16
 8001440:	bf08      	it	eq
 8001442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800144a:	6010      	str	r0, [r2, #0]
 800144c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001454:	f380 8811 	msr	BASEPRI, r0
 8001458:	f3bf 8f4f 	dsb	sy
 800145c:	f3bf 8f6f 	isb	sy
 8001460:	f004 f8c8 	bl	80055f4 <vTaskSwitchContext>
 8001464:	f04f 0000 	mov.w	r0, #0
 8001468:	f380 8811 	msr	BASEPRI, r0
 800146c:	bc09      	pop	{r0, r3}
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	6808      	ldr	r0, [r1, #0]
 8001472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001476:	f01e 0f10 	tst.w	lr, #16
 800147a:	bf08      	it	eq
 800147c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001480:	f380 8809 	msr	PSP, r0
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w

08001490 <pxCurrentTCBConst>:
 8001490:	20004414 	.word	0x20004414

08001494 <SysTick_Handler>:
{
 8001494:	b508      	push	{r3, lr}
	__asm volatile
 8001496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800149a:	f383 8811 	msr	BASEPRI, r3
 800149e:	f3bf 8f6f 	isb	sy
 80014a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80014a6:	f003 ff77 	bl	8005398 <xTaskIncrementTick>
 80014aa:	b128      	cbz	r0, 80014b8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80014ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80014b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80014b8:	2300      	movs	r3, #0
 80014ba:	f383 8811 	msr	BASEPRI, r3
}
 80014be:	bd08      	pop	{r3, pc}

080014c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80014c0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80014c4:	2300      	movs	r3, #0
 80014c6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80014c8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80014ca:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <vPortSetupTimerInterrupt+0x20>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4905      	ldr	r1, [pc, #20]	@ (80014e4 <vPortSetupTimerInterrupt+0x24>)
 80014d0:	fba1 1303 	umull	r1, r3, r1, r3
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80014da:	2307      	movs	r3, #7
 80014dc:	6113      	str	r3, [r2, #16]
}
 80014de:	4770      	bx	lr
 80014e0:	20000014 	.word	0x20000014
 80014e4:	10624dd3 	.word	0x10624dd3

080014e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80014e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80014ec:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80014f0:	4b3d      	ldr	r3, [pc, #244]	@ (80015e8 <xPortStartScheduler+0x100>)
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d01c      	beq.n	8001530 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80014f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80014fa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <xPortStartScheduler+0x104>)
 8001500:	429a      	cmp	r2, r3
 8001502:	d01e      	beq.n	8001542 <xPortStartScheduler+0x5a>
{
 8001504:	b530      	push	{r4, r5, lr}
 8001506:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001508:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <xPortStartScheduler+0x108>)
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001510:	22ff      	movs	r2, #255	@ 0xff
 8001512:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800151c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001520:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001524:	4a33      	ldr	r2, [pc, #204]	@ (80015f4 <xPortStartScheduler+0x10c>)
 8001526:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <xPortStartScheduler+0x110>)
 800152a:	2207      	movs	r2, #7
 800152c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800152e:	e01b      	b.n	8001568 <xPortStartScheduler+0x80>
	__asm volatile
 8001530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001534:	f383 8811 	msr	BASEPRI, r3
 8001538:	f3bf 8f6f 	isb	sy
 800153c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001540:	e7fe      	b.n	8001540 <xPortStartScheduler+0x58>
 8001542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001546:	f383 8811 	msr	BASEPRI, r3
 800154a:	f3bf 8f6f 	isb	sy
 800154e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001552:	e7fe      	b.n	8001552 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8001554:	4a28      	ldr	r2, [pc, #160]	@ (80015f8 <xPortStartScheduler+0x110>)
 8001556:	6813      	ldr	r3, [r2, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800155c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001568:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800156c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001570:	d1f0      	bne.n	8001554 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <xPortStartScheduler+0x110>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d008      	beq.n	800158c <xPortStartScheduler+0xa4>
 800157a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	e7fe      	b.n	800158a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	4a1a      	ldr	r2, [pc, #104]	@ (80015f8 <xPortStartScheduler+0x110>)
 8001590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001592:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001596:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4a14      	ldr	r2, [pc, #80]	@ (80015f0 <xPortStartScheduler+0x108>)
 800159e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80015a0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80015a4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ac:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80015b0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80015b4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80015b8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80015bc:	f7ff ff80 	bl	80014c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80015c0:	2500      	movs	r5, #0
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <xPortStartScheduler+0x114>)
 80015c4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80015c6:	f7ff febf 	bl	8001348 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80015ca:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80015ce:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80015d2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80015d6:	f7ff fea3 	bl	8001320 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80015da:	f004 f80b 	bl	80055f4 <vTaskSwitchContext>
	prvTaskExitError();
 80015de:	f7ff fe7f 	bl	80012e0 <prvTaskExitError>
}
 80015e2:	4628      	mov	r0, r5
 80015e4:	b003      	add	sp, #12
 80015e6:	bd30      	pop	{r4, r5, pc}
 80015e8:	410fc271 	.word	0x410fc271
 80015ec:	410fc270 	.word	0x410fc270
 80015f0:	e000e400 	.word	0xe000e400
 80015f4:	20004240 	.word	0x20004240
 80015f8:	2000423c 	.word	0x2000423c
 80015fc:	20000008 	.word	0x20000008

08001600 <pwm_start>:
#include "./pwm.h"

void pwm_start(void) {
 8001600:	b510      	push	{r4, lr}
  TIM1->ARR = 8000 - 1;
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <pwm_start+0x4c>)
 8001604:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001608:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 800160a:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 800160e:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001610:	4c0f      	ldr	r4, [pc, #60]	@ (8001650 <pwm_start+0x50>)
 8001612:	2100      	movs	r1, #0
 8001614:	4620      	mov	r0, r4
 8001616:	f002 fd79 	bl	800410c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800161a:	2104      	movs	r1, #4
 800161c:	4620      	mov	r0, r4
 800161e:	f002 fd75 	bl	800410c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001622:	2108      	movs	r1, #8
 8001624:	4620      	mov	r0, r4
 8001626:	f002 fd71 	bl	800410c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800162a:	2100      	movs	r1, #0
 800162c:	4620      	mov	r0, r4
 800162e:	f002 fe65 	bl	80042fc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001632:	2104      	movs	r1, #4
 8001634:	4620      	mov	r0, r4
 8001636:	f002 fe61 	bl	80042fc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800163a:	2108      	movs	r1, #8
 800163c:	4620      	mov	r0, r4
 800163e:	f002 fe5d 	bl	80042fc <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001642:	210c      	movs	r1, #12
 8001644:	4620      	mov	r0, r4
 8001646:	f002 fd61 	bl	800410c <HAL_TIM_PWM_Start>
}
 800164a:	bd10      	pop	{r4, pc}
 800164c:	40010000 	.word	0x40010000
 8001650:	20004460 	.word	0x20004460

08001654 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001654:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_SPI3_Init+0x38>)
 8001658:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <MX_SPI3_Init+0x3c>)
 800165a:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800165c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001660:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001662:	2300      	movs	r3, #0
 8001664:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001666:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001668:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166a:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800166c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001670:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001672:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001674:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001676:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800167a:	230a      	movs	r3, #10
 800167c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800167e:	f001 ffbb 	bl	80035f8 <HAL_SPI_Init>
 8001682:	b900      	cbnz	r0, 8001686 <MX_SPI3_Init+0x32>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001684:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001686:	f7ff fdaf 	bl	80011e8 <Error_Handler>
}
 800168a:	e7fb      	b.n	8001684 <MX_SPI3_Init+0x30>
 800168c:	20004244 	.word	0x20004244
 8001690:	40003c00 	.word	0x40003c00

08001694 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001694:	b500      	push	{lr}
 8001696:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	2300      	movs	r3, #0
 800169a:	9303      	str	r3, [sp, #12]
 800169c:	9304      	str	r3, [sp, #16]
 800169e:	9305      	str	r3, [sp, #20]
 80016a0:	9306      	str	r3, [sp, #24]
 80016a2:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 80016a4:	6802      	ldr	r2, [r0, #0]
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_SPI_MspInit+0x68>)
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d002      	beq.n	80016b2 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80016ac:	b009      	add	sp, #36	@ 0x24
 80016ae:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016b2:	2100      	movs	r1, #0
 80016b4:	9101      	str	r1, [sp, #4]
 80016b6:	f503 33fe 	add.w	r3, r3, #130048	@ 0x1fc00
 80016ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80016c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016c4:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80016c8:	9201      	str	r2, [sp, #4]
 80016ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016cc:	9102      	str	r1, [sp, #8]
 80016ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016d0:	f042 0204 	orr.w	r2, r2, #4
 80016d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80016e0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016ee:	2306      	movs	r3, #6
 80016f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	a903      	add	r1, sp, #12
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <HAL_SPI_MspInit+0x6c>)
 80016f6:	f001 f903 	bl	8002900 <HAL_GPIO_Init>
}
 80016fa:	e7d7      	b.n	80016ac <HAL_SPI_MspInit+0x18>
 80016fc:	40003c00 	.word	0x40003c00
 8001700:	40020800 	.word	0x40020800

08001704 <state_set>:
#include "gpio.h"

static state_e g_state = STATE_INIT;
static uint8_t g_led_state = 0x01;

void state_set(state_e state) { g_state = state; }
 8001704:	4b01      	ldr	r3, [pc, #4]	@ (800170c <state_set+0x8>)
 8001706:	7018      	strb	r0, [r3, #0]
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000429d 	.word	0x2000429d

08001710 <led_ctl>:

void led_ctl(uint8_t led_state) {
 8001710:	b510      	push	{r4, lr}
 8001712:	4604      	mov	r4, r0
  if (led_state & 0x01) {
 8001714:	f010 0f01 	tst.w	r0, #1
 8001718:	d015      	beq.n	8001746 <led_ctl+0x36>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2108      	movs	r1, #8
 800171e:	4813      	ldr	r0, [pc, #76]	@ (800176c <led_ctl+0x5c>)
 8001720:	f001 f9de 	bl	8002ae0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x02) {
 8001724:	f014 0f02 	tst.w	r4, #2
 8001728:	d013      	beq.n	8001752 <led_ctl+0x42>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2104      	movs	r1, #4
 800172e:	480f      	ldr	r0, [pc, #60]	@ (800176c <led_ctl+0x5c>)
 8001730:	f001 f9d6 	bl	8002ae0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x04) {
 8001734:	f014 0f04 	tst.w	r4, #4
 8001738:	d011      	beq.n	800175e <led_ctl+0x4e>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2102      	movs	r1, #2
 800173e:	480b      	ldr	r0, [pc, #44]	@ (800176c <led_ctl+0x5c>)
 8001740:	f001 f9ce 	bl	8002ae0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
  }
}
 8001744:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	2108      	movs	r1, #8
 800174a:	4808      	ldr	r0, [pc, #32]	@ (800176c <led_ctl+0x5c>)
 800174c:	f001 f9c8 	bl	8002ae0 <HAL_GPIO_WritePin>
 8001750:	e7e8      	b.n	8001724 <led_ctl+0x14>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	2104      	movs	r1, #4
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <led_ctl+0x5c>)
 8001758:	f001 f9c2 	bl	8002ae0 <HAL_GPIO_WritePin>
 800175c:	e7ea      	b.n	8001734 <led_ctl+0x24>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2102      	movs	r1, #2
 8001762:	4802      	ldr	r0, [pc, #8]	@ (800176c <led_ctl+0x5c>)
 8001764:	f001 f9bc 	bl	8002ae0 <HAL_GPIO_WritePin>
}
 8001768:	e7ec      	b.n	8001744 <led_ctl+0x34>
 800176a:	bf00      	nop
 800176c:	40020800 	.word	0x40020800

08001770 <state_step>:

void state_step(void) {
 8001770:	b508      	push	{r3, lr}
  if (STATE_INIT == g_state) {
 8001772:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <state_step+0x90>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b04      	cmp	r3, #4
 8001778:	d809      	bhi.n	800178e <state_step+0x1e>
 800177a:	e8df f003 	tbb	[pc, r3]
 800177e:	2503      	.short	0x2503
 8001780:	092b      	.short	0x092b
 8001782:	3b          	.byte	0x3b
 8001783:	00          	.byte	0x00
    g_led_state = 0x07;
 8001784:	2007      	movs	r0, #7
 8001786:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <state_step+0x94>)
 8001788:	7018      	strb	r0, [r3, #0]
    led_ctl(g_led_state);
 800178a:	f7ff ffc1 	bl	8001710 <led_ctl>

  else if (STATE_ERROR == g_state) {
    g_led_state = 0x02;
    led_ctl(g_led_state);
  }
 800178e:	bd08      	pop	{r3, pc}
    led_ctl(g_led_state);
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <state_step+0x94>)
 8001792:	7818      	ldrb	r0, [r3, #0]
 8001794:	f7ff ffbc 	bl	8001710 <led_ctl>
    if (0 == dir) {
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <state_step+0x98>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b953      	cbnz	r3, 80017b4 <state_step+0x44>
      g_led_state = g_led_state << 1;
 800179e:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <state_step+0x94>)
 80017a0:	7813      	ldrb	r3, [r2, #0]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	7013      	strb	r3, [r2, #0]
      if (0x04 == g_led_state) {
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d1f0      	bne.n	800178e <state_step+0x1e>
        dir = 1;
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <state_step+0x98>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e7ec      	b.n	800178e <state_step+0x1e>
      g_led_state = g_led_state >> 1;
 80017b4:	4a13      	ldr	r2, [pc, #76]	@ (8001804 <state_step+0x94>)
 80017b6:	7813      	ldrb	r3, [r2, #0]
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	7013      	strb	r3, [r2, #0]
      if (0x01 == g_led_state) {
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d1e6      	bne.n	800178e <state_step+0x1e>
        dir = 0;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <state_step+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e7e2      	b.n	800178e <state_step+0x1e>
    g_led_state = 0x04;
 80017c8:	2004      	movs	r0, #4
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <state_step+0x94>)
 80017cc:	7018      	strb	r0, [r3, #0]
    led_ctl(g_led_state);
 80017ce:	f7ff ff9f 	bl	8001710 <led_ctl>
 80017d2:	e7dc      	b.n	800178e <state_step+0x1e>
    if (0x01 != g_led_state) {
 80017d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <state_step+0x94>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d007      	beq.n	80017ec <state_step+0x7c>
      g_led_state = 0x01;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <state_step+0x94>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
    led_ctl(g_led_state);
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <state_step+0x94>)
 80017e4:	7818      	ldrb	r0, [r3, #0]
 80017e6:	f7ff ff93 	bl	8001710 <led_ctl>
 80017ea:	e7d0      	b.n	800178e <state_step+0x1e>
      g_led_state = 0x00;
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <state_step+0x94>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e7f6      	b.n	80017e2 <state_step+0x72>
    g_led_state = 0x02;
 80017f4:	2002      	movs	r0, #2
 80017f6:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <state_step+0x94>)
 80017f8:	7018      	strb	r0, [r3, #0]
    led_ctl(g_led_state);
 80017fa:	f7ff ff89 	bl	8001710 <led_ctl>
 80017fe:	e7c6      	b.n	800178e <state_step+0x1e>
 8001800:	2000429d 	.word	0x2000429d
 8001804:	2000000c 	.word	0x2000000c
 8001808:	2000429c 	.word	0x2000429c

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_Init+0x30>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001816:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800181e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001826:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f000 fde3 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182e:	200f      	movs	r0, #15
 8001830:	f002 fe4e 	bl	80044d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f001 fa42 	bl	8002cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001838:	2000      	movs	r0, #0
 800183a:	bd08      	pop	{r3, pc}
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001840:	4a03      	ldr	r2, [pc, #12]	@ (8001850 <HAL_IncTick+0x10>)
 8001842:	6811      	ldr	r1, [r2, #0]
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_IncTick+0x14>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	440b      	add	r3, r1
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200042a0 	.word	0x200042a0
 8001854:	2000000d 	.word	0x2000000d

08001858 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001858:	4b01      	ldr	r3, [pc, #4]	@ (8001860 <HAL_GetTick+0x8>)
 800185a:	6818      	ldr	r0, [r3, #0]
}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200042a0 	.word	0x200042a0

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b538      	push	{r3, r4, r5, lr}
 8001866:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fff6 	bl	8001858 <HAL_GetTick>
 800186c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001872:	d002      	beq.n	800187a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <HAL_Delay+0x24>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187a:	f7ff ffed 	bl	8001858 <HAL_GetTick>
 800187e:	1b40      	subs	r0, r0, r5
 8001880:	42a0      	cmp	r0, r4
 8001882:	d3fa      	bcc.n	800187a <HAL_Delay+0x16>
  {
  }
}
 8001884:	bd38      	pop	{r3, r4, r5, pc}
 8001886:	bf00      	nop
 8001888:	2000000d 	.word	0x2000000d

0800188c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800188c:	4b4a      	ldr	r3, [pc, #296]	@ (80019b8 <ADC_Init+0x12c>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001894:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	6841      	ldr	r1, [r0, #4]
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800189e:	6802      	ldr	r2, [r0, #0]
 80018a0:	6853      	ldr	r3, [r2, #4]
 80018a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018a6:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018a8:	6802      	ldr	r2, [r0, #0]
 80018aa:	6853      	ldr	r3, [r2, #4]
 80018ac:	6901      	ldr	r1, [r0, #16]
 80018ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80018b2:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018b4:	6802      	ldr	r2, [r0, #0]
 80018b6:	6853      	ldr	r3, [r2, #4]
 80018b8:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80018bc:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018be:	6802      	ldr	r2, [r0, #0]
 80018c0:	6853      	ldr	r3, [r2, #4]
 80018c2:	6881      	ldr	r1, [r0, #8]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c8:	6802      	ldr	r2, [r0, #0]
 80018ca:	6893      	ldr	r3, [r2, #8]
 80018cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80018d0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018d2:	6802      	ldr	r2, [r0, #0]
 80018d4:	6893      	ldr	r3, [r2, #8]
 80018d6:	68c1      	ldr	r1, [r0, #12]
 80018d8:	430b      	orrs	r3, r1
 80018da:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018dc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80018de:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <ADC_Init+0x130>)
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d057      	beq.n	8001994 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e4:	6802      	ldr	r2, [r0, #0]
 80018e6:	6893      	ldr	r3, [r2, #8]
 80018e8:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80018ec:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018ee:	6802      	ldr	r2, [r0, #0]
 80018f0:	6893      	ldr	r3, [r2, #8]
 80018f2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f8:	6802      	ldr	r2, [r0, #0]
 80018fa:	6893      	ldr	r3, [r2, #8]
 80018fc:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001900:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001902:	6802      	ldr	r2, [r0, #0]
 8001904:	6893      	ldr	r3, [r2, #8]
 8001906:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001908:	430b      	orrs	r3, r1
 800190a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800190c:	6802      	ldr	r2, [r0, #0]
 800190e:	6893      	ldr	r3, [r2, #8]
 8001910:	f023 0302 	bic.w	r3, r3, #2
 8001914:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001916:	6802      	ldr	r2, [r0, #0]
 8001918:	6893      	ldr	r3, [r2, #8]
 800191a:	7e01      	ldrb	r1, [r0, #24]
 800191c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001920:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001922:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d03f      	beq.n	80019aa <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800192a:	6802      	ldr	r2, [r0, #0]
 800192c:	6853      	ldr	r3, [r2, #4]
 800192e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001932:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001934:	6802      	ldr	r2, [r0, #0]
 8001936:	6853      	ldr	r3, [r2, #4]
 8001938:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800193c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800193e:	6801      	ldr	r1, [r0, #0]
 8001940:	684b      	ldr	r3, [r1, #4]
 8001942:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001944:	3a01      	subs	r2, #1
 8001946:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800194a:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800194c:	6802      	ldr	r2, [r0, #0]
 800194e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001950:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001954:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001956:	6801      	ldr	r1, [r0, #0]
 8001958:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800195a:	69c2      	ldr	r2, [r0, #28]
 800195c:	3a01      	subs	r2, #1
 800195e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001962:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001964:	6802      	ldr	r2, [r0, #0]
 8001966:	6893      	ldr	r3, [r2, #8]
 8001968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800196c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800196e:	6802      	ldr	r2, [r0, #0]
 8001970:	6893      	ldr	r3, [r2, #8]
 8001972:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001976:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800197a:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800197c:	6802      	ldr	r2, [r0, #0]
 800197e:	6893      	ldr	r3, [r2, #8]
 8001980:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001984:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001986:	6802      	ldr	r2, [r0, #0]
 8001988:	6893      	ldr	r3, [r2, #8]
 800198a:	6941      	ldr	r1, [r0, #20]
 800198c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001990:	6093      	str	r3, [r2, #8]
}
 8001992:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001994:	6802      	ldr	r2, [r0, #0]
 8001996:	6893      	ldr	r3, [r2, #8]
 8001998:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800199c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199e:	6802      	ldr	r2, [r0, #0]
 80019a0:	6893      	ldr	r3, [r2, #8]
 80019a2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80019a6:	6093      	str	r3, [r2, #8]
 80019a8:	e7b0      	b.n	800190c <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019aa:	6802      	ldr	r2, [r0, #0]
 80019ac:	6853      	ldr	r3, [r2, #4]
 80019ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80019b2:	6053      	str	r3, [r2, #4]
 80019b4:	e7ca      	b.n	800194c <ADC_Init+0xc0>
 80019b6:	bf00      	nop
 80019b8:	40012300 	.word	0x40012300
 80019bc:	0f000001 	.word	0x0f000001

080019c0 <HAL_ADC_Init>:
  if (hadc == NULL)
 80019c0:	b338      	cbz	r0, 8001a12 <HAL_ADC_Init+0x52>
{
 80019c2:	b510      	push	{r4, lr}
 80019c4:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80019c8:	b143      	cbz	r3, 80019dc <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019cc:	f013 0f10 	tst.w	r3, #16
 80019d0:	d00b      	beq.n	80019ea <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80019d2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80019d4:	2300      	movs	r3, #0
 80019d6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80019da:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80019dc:	f7fe fd2e 	bl	800043c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80019e0:	2300      	movs	r3, #0
 80019e2:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 80019e4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 80019e8:	e7ef      	b.n	80019ca <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80019ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019f0:	f023 0302 	bic.w	r3, r3, #2
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff ff46 	bl	800188c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001a00:	2000      	movs	r0, #0
 8001a02:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6423      	str	r3, [r4, #64]	@ 0x40
 8001a10:	e7e0      	b.n	80019d4 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
}
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_ADC_Start>:
{
 8001a18:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001a1e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	f000 8089 	beq.w	8001b3a <HAL_ADC_Start+0x122>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a2e:	6803      	ldr	r3, [r0, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	f012 0f01 	tst.w	r2, #1
 8001a36:	d113      	bne.n	8001a60 <HAL_ADC_Start+0x48>
    __HAL_ADC_ENABLE(hadc);
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a40:	4b41      	ldr	r3, [pc, #260]	@ (8001b48 <HAL_ADC_Start+0x130>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a41      	ldr	r2, [pc, #260]	@ (8001b4c <HAL_ADC_Start+0x134>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a50:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001a52:	e002      	b.n	8001a5a <HAL_ADC_Start+0x42>
      counter--;
 8001a54:	9b01      	ldr	r3, [sp, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001a5a:	9b01      	ldr	r3, [sp, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f9      	bne.n	8001a54 <HAL_ADC_Start+0x3c>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a60:	6802      	ldr	r2, [r0, #0]
 8001a62:	6893      	ldr	r3, [r2, #8]
 8001a64:	f013 0f01 	tst.w	r3, #1
 8001a68:	d05c      	beq.n	8001b24 <HAL_ADC_Start+0x10c>
    ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001a6c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a78:	6403      	str	r3, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a7a:	6853      	ldr	r3, [r2, #4]
 8001a7c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001a80:	d005      	beq.n	8001a8e <HAL_ADC_Start+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a82:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001a84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a8c:	6403      	str	r3, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a8e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001a90:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001a94:	d01b      	beq.n	8001ace <HAL_ADC_Start+0xb6>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a96:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001a98:	f023 0306 	bic.w	r3, r3, #6
 8001a9c:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aa4:	f06f 0322 	mvn.w	r3, #34	@ 0x22
 8001aa8:	6013      	str	r3, [r2, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001aaa:	4b29      	ldr	r3, [pc, #164]	@ (8001b50 <HAL_ADC_Start+0x138>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f013 0f1f 	tst.w	r3, #31
 8001ab2:	d127      	bne.n	8001b04 <HAL_ADC_Start+0xec>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ab4:	6803      	ldr	r3, [r0, #0]
 8001ab6:	4a27      	ldr	r2, [pc, #156]	@ (8001b54 <HAL_ADC_Start+0x13c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d011      	beq.n	8001ae0 <HAL_ADC_Start+0xc8>
 8001abc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_ADC_Start+0xbc>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ac4:	4a24      	ldr	r2, [pc, #144]	@ (8001b58 <HAL_ADC_Start+0x140>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d014      	beq.n	8001af4 <HAL_ADC_Start+0xdc>
  return HAL_OK;
 8001aca:	2000      	movs	r0, #0
 8001acc:	e033      	b.n	8001b36 <HAL_ADC_Start+0x11e>
      ADC_CLEAR_ERRORCODE(hadc);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	6443      	str	r3, [r0, #68]	@ 0x44
 8001ad2:	e7e4      	b.n	8001a9e <HAL_ADC_Start+0x86>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ad4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8001ad8:	6852      	ldr	r2, [r2, #4]
 8001ada:	f012 0f1f 	tst.w	r2, #31
 8001ade:	d1f1      	bne.n	8001ac4 <HAL_ADC_Start+0xac>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001ae6:	d12a      	bne.n	8001b3e <HAL_ADC_Start+0x126>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001af0:	2000      	movs	r0, #0
 8001af2:	e020      	b.n	8001b36 <HAL_ADC_Start+0x11e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001af4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001af8:	6852      	ldr	r2, [r2, #4]
 8001afa:	f012 0f10 	tst.w	r2, #16
 8001afe:	d0ef      	beq.n	8001ae0 <HAL_ADC_Start+0xc8>
  return HAL_OK;
 8001b00:	2000      	movs	r0, #0
 8001b02:	e018      	b.n	8001b36 <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b04:	6803      	ldr	r3, [r0, #0]
 8001b06:	4a13      	ldr	r2, [pc, #76]	@ (8001b54 <HAL_ADC_Start+0x13c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d001      	beq.n	8001b10 <HAL_ADC_Start+0xf8>
  return HAL_OK;
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	e012      	b.n	8001b36 <HAL_ADC_Start+0x11e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001b16:	d114      	bne.n	8001b42 <HAL_ADC_Start+0x12a>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001b20:	2000      	movs	r0, #0
 8001b22:	e008      	b.n	8001b36 <HAL_ADC_Start+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b24:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 8001b34:	2000      	movs	r0, #0
}
 8001b36:	b002      	add	sp, #8
 8001b38:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	e7fb      	b.n	8001b36 <HAL_ADC_Start+0x11e>
  return HAL_OK;
 8001b3e:	2000      	movs	r0, #0
 8001b40:	e7f9      	b.n	8001b36 <HAL_ADC_Start+0x11e>
 8001b42:	2000      	movs	r0, #0
 8001b44:	e7f7      	b.n	8001b36 <HAL_ADC_Start+0x11e>
 8001b46:	bf00      	nop
 8001b48:	20000014 	.word	0x20000014
 8001b4c:	431bde83 	.word	0x431bde83
 8001b50:	40012300 	.word	0x40012300
 8001b54:	40012000 	.word	0x40012000
 8001b58:	40012200 	.word	0x40012200

08001b5c <HAL_ADC_PollForConversion>:
{
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	4604      	mov	r4, r0
 8001b60:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b62:	6803      	ldr	r3, [r0, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001b6a:	d003      	beq.n	8001b74 <HAL_ADC_PollForConversion+0x18>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b6c:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b6e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b72:	d119      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x4c>
  tickstart = HAL_GetTick();
 8001b74:	f7ff fe70 	bl	8001858 <HAL_GetTick>
 8001b78:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f012 0f02 	tst.w	r2, #2
 8001b82:	d120      	bne.n	8001bc6 <HAL_ADC_PollForConversion+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001b84:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b88:	d0f7      	beq.n	8001b7a <HAL_ADC_PollForConversion+0x1e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b8a:	b9b5      	cbnz	r5, 8001bba <HAL_ADC_PollForConversion+0x5e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f013 0f02 	tst.w	r3, #2
 8001b94:	d1f1      	bne.n	8001b7a <HAL_ADC_PollForConversion+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	e032      	b.n	8001c0e <HAL_ADC_PollForConversion+0xb2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001baa:	f043 0320 	orr.w	r3, r3, #32
 8001bae:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	e029      	b.n	8001c0e <HAL_ADC_PollForConversion+0xb2>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bba:	f7ff fe4d 	bl	8001858 <HAL_GetTick>
 8001bbe:	1b80      	subs	r0, r0, r6
 8001bc0:	42a8      	cmp	r0, r5
 8001bc2:	d9da      	bls.n	8001b7a <HAL_ADC_PollForConversion+0x1e>
 8001bc4:	e7e2      	b.n	8001b8c <HAL_ADC_PollForConversion+0x30>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bc6:	f06f 0212 	mvn.w	r2, #18
 8001bca:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd2:	6423      	str	r3, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001bdc:	d116      	bne.n	8001c0c <HAL_ADC_PollForConversion+0xb0>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bde:	7e20      	ldrb	r0, [r4, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001be0:	b9b0      	cbnz	r0, 8001c10 <HAL_ADC_PollForConversion+0xb4>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001be4:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001be8:	d003      	beq.n	8001bf2 <HAL_ADC_PollForConversion+0x96>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001bea:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bec:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001bf0:	d10d      	bne.n	8001c0e <HAL_ADC_PollForConversion+0xb2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bf2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bf8:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bfa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bfc:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001c00:	d105      	bne.n	8001c0e <HAL_ADC_PollForConversion+0xb2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6423      	str	r3, [r4, #64]	@ 0x40
 8001c0a:	e000      	b.n	8001c0e <HAL_ADC_PollForConversion+0xb2>
  return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
}
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001c10:	2000      	movs	r0, #0
 8001c12:	e7fc      	b.n	8001c0e <HAL_ADC_PollForConversion+0xb2>

08001c14 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001c14:	6803      	ldr	r3, [r0, #0]
 8001c16:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8001c18:	4770      	bx	lr

08001c1a <HAL_ADC_ConvCpltCallback>:
}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_ADC_LevelOutOfWindowCallback>:
}
 8001c1c:	4770      	bx	lr

08001c1e <HAL_ADC_ErrorCallback>:
}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_ADC_IRQHandler>:
{
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 8001c24:	6803      	ldr	r3, [r0, #0]
 8001c26:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c28:	685d      	ldr	r5, [r3, #4]
  if (tmp1 && tmp2)
 8001c2a:	f016 0f02 	tst.w	r6, #2
 8001c2e:	d02f      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x70>
 8001c30:	f005 0220 	and.w	r2, r5, #32
 8001c34:	b362      	cbz	r2, 8001c90 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c36:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001c38:	f012 0f10 	tst.w	r2, #16
 8001c3c:	d103      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c3e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c44:	6402      	str	r2, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001c4c:	d119      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x62>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c4e:	7e22      	ldrb	r2, [r4, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c50:	b9ba      	cbnz	r2, 8001c82 <HAL_ADC_IRQHandler+0x62>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c54:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001c58:	d003      	beq.n	8001c62 <HAL_ADC_IRQHandler+0x42>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c5a:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c5c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001c60:	d10f      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	f022 0220 	bic.w	r2, r2, #32
 8001c68:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c70:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c74:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001c78:	d103      	bne.n	8001c82 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7ff ffc9 	bl	8001c1a <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	f06f 0212 	mvn.w	r2, #18
 8001c8e:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c90:	f005 0380 	and.w	r3, r5, #128	@ 0x80
  if (tmp1 && tmp2)
 8001c94:	f016 0f04 	tst.w	r6, #4
 8001c98:	d037      	beq.n	8001d0a <HAL_ADC_IRQHandler+0xea>
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d035      	beq.n	8001d0a <HAL_ADC_IRQHandler+0xea>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ca0:	f013 0f10 	tst.w	r3, #16
 8001ca4:	d103      	bne.n	8001cae <HAL_ADC_IRQHandler+0x8e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ca6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ca8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cac:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 8001cb6:	d121      	bne.n	8001cfc <HAL_ADC_IRQHandler+0xdc>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cba:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 8001cbe:	d003      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0xa8>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cc0:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cc2:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001cc6:	d119      	bne.n	8001cfc <HAL_ADC_IRQHandler+0xdc>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cc8:	685a      	ldr	r2, [r3, #4]
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cca:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001cce:	d115      	bne.n	8001cfc <HAL_ADC_IRQHandler+0xdc>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cd0:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cd2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001cd6:	d111      	bne.n	8001cfc <HAL_ADC_IRQHandler+0xdc>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001cd8:	7e22      	ldrb	r2, [r4, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cda:	b97a      	cbnz	r2, 8001cfc <HAL_ADC_IRQHandler+0xdc>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ce2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ce4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cea:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cee:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001cf2:	d103      	bne.n	8001cfc <HAL_ADC_IRQHandler+0xdc>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7fe fd75 	bl	80007ec <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	f06f 020c 	mvn.w	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d0a:	f005 0340 	and.w	r3, r5, #64	@ 0x40
  if (tmp1 && tmp2)
 8001d0e:	f016 0f01 	tst.w	r6, #1
 8001d12:	d005      	beq.n	8001d20 <HAL_ADC_IRQHandler+0x100>
 8001d14:	b123      	cbz	r3, 8001d20 <HAL_ADC_IRQHandler+0x100>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f013 0f01 	tst.w	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <HAL_ADC_IRQHandler+0x10e>
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d20:	f005 6580 	and.w	r5, r5, #67108864	@ 0x4000000
  if (tmp1 && tmp2)
 8001d24:	f016 0f20 	tst.w	r6, #32
 8001d28:	d000      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x10c>
 8001d2a:	b965      	cbnz	r5, 8001d46 <HAL_ADC_IRQHandler+0x126>
}
 8001d2c:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d34:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ff70 	bl	8001c1c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	f06f 0201 	mvn.w	r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e7ec      	b.n	8001d20 <HAL_ADC_IRQHandler+0x100>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d46:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	f06f 0520 	mvn.w	r5, #32
 8001d54:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7ff ff61 	bl	8001c1e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	601d      	str	r5, [r3, #0]
}
 8001d60:	e7e4      	b.n	8001d2c <HAL_ADC_IRQHandler+0x10c>
	...

08001d64 <HAL_ADC_ConfigChannel>:
{
 8001d64:	b430      	push	{r4, r5}
 8001d66:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001d68:	2200      	movs	r2, #0
 8001d6a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001d6c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001d70:	2a01      	cmp	r2, #1
 8001d72:	f000 80c0 	beq.w	8001ef6 <HAL_ADC_ConfigChannel+0x192>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d7e:	680a      	ldr	r2, [r1, #0]
 8001d80:	2a09      	cmp	r2, #9
 8001d82:	d940      	bls.n	8001e06 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d84:	6804      	ldr	r4, [r0, #0]
 8001d86:	68e0      	ldr	r0, [r4, #12]
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d8e:	3a1e      	subs	r2, #30
 8001d90:	f04f 0c07 	mov.w	ip, #7
 8001d94:	fa0c f202 	lsl.w	r2, ip, r2
 8001d98:	ea20 0202 	bic.w	r2, r0, r2
 8001d9c:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d9e:	681c      	ldr	r4, [r3, #0]
 8001da0:	68e0      	ldr	r0, [r4, #12]
 8001da2:	880a      	ldrh	r2, [r1, #0]
 8001da4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001da8:	3a1e      	subs	r2, #30
 8001daa:	688d      	ldr	r5, [r1, #8]
 8001dac:	fa05 f202 	lsl.w	r2, r5, r2
 8001db0:	4302      	orrs	r2, r0
 8001db2:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001db4:	684a      	ldr	r2, [r1, #4]
 8001db6:	2a06      	cmp	r2, #6
 8001db8:	d83c      	bhi.n	8001e34 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dba:	681c      	ldr	r4, [r3, #0]
 8001dbc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001dbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001dc2:	3a05      	subs	r2, #5
 8001dc4:	f04f 0c1f 	mov.w	ip, #31
 8001dc8:	fa0c f202 	lsl.w	r2, ip, r2
 8001dcc:	ea20 0202 	bic.w	r2, r0, r2
 8001dd0:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dd2:	681c      	ldr	r4, [r3, #0]
 8001dd4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001dd6:	684a      	ldr	r2, [r1, #4]
 8001dd8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ddc:	3a05      	subs	r2, #5
 8001dde:	f8b1 c000 	ldrh.w	ip, [r1]
 8001de2:	fa0c f202 	lsl.w	r2, ip, r2
 8001de6:	4302      	orrs	r2, r0
 8001de8:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	4a43      	ldr	r2, [pc, #268]	@ (8001efc <HAL_ADC_ConfigChannel+0x198>)
 8001dee:	4290      	cmp	r0, r2
 8001df0:	d050      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	4a41      	ldr	r2, [pc, #260]	@ (8001efc <HAL_ADC_ConfigChannel+0x198>)
 8001df6:	4290      	cmp	r0, r2
 8001df8:	d059      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001e00:	b002      	add	sp, #8
 8001e02:	bc30      	pop	{r4, r5}
 8001e04:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e06:	6804      	ldr	r4, [r0, #0]
 8001e08:	6920      	ldr	r0, [r4, #16]
 8001e0a:	b292      	uxth	r2, r2
 8001e0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e10:	f04f 0c07 	mov.w	ip, #7
 8001e14:	fa0c f202 	lsl.w	r2, ip, r2
 8001e18:	ea20 0202 	bic.w	r2, r0, r2
 8001e1c:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e1e:	681c      	ldr	r4, [r3, #0]
 8001e20:	6920      	ldr	r0, [r4, #16]
 8001e22:	880a      	ldrh	r2, [r1, #0]
 8001e24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e28:	688d      	ldr	r5, [r1, #8]
 8001e2a:	fa05 f202 	lsl.w	r2, r5, r2
 8001e2e:	4302      	orrs	r2, r0
 8001e30:	6122      	str	r2, [r4, #16]
 8001e32:	e7bf      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001e34:	2a0c      	cmp	r2, #12
 8001e36:	d816      	bhi.n	8001e66 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e38:	681d      	ldr	r5, [r3, #0]
 8001e3a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001e3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e40:	3a23      	subs	r2, #35	@ 0x23
 8001e42:	241f      	movs	r4, #31
 8001e44:	fa04 f202 	lsl.w	r2, r4, r2
 8001e48:	ea20 0202 	bic.w	r2, r0, r2
 8001e4c:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e4e:	681d      	ldr	r5, [r3, #0]
 8001e50:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001e52:	684a      	ldr	r2, [r1, #4]
 8001e54:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e58:	3a23      	subs	r2, #35	@ 0x23
 8001e5a:	880c      	ldrh	r4, [r1, #0]
 8001e5c:	fa04 f202 	lsl.w	r2, r4, r2
 8001e60:	4302      	orrs	r2, r0
 8001e62:	632a      	str	r2, [r5, #48]	@ 0x30
 8001e64:	e7c1      	b.n	8001dea <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e66:	681d      	ldr	r5, [r3, #0]
 8001e68:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001e6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e6e:	3a41      	subs	r2, #65	@ 0x41
 8001e70:	241f      	movs	r4, #31
 8001e72:	fa04 f202 	lsl.w	r2, r4, r2
 8001e76:	ea20 0202 	bic.w	r2, r0, r2
 8001e7a:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e7c:	681d      	ldr	r5, [r3, #0]
 8001e7e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001e80:	684a      	ldr	r2, [r1, #4]
 8001e82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e86:	3a41      	subs	r2, #65	@ 0x41
 8001e88:	880c      	ldrh	r4, [r1, #0]
 8001e8a:	fa04 f202 	lsl.w	r2, r4, r2
 8001e8e:	4302      	orrs	r2, r0
 8001e90:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001e92:	e7aa      	b.n	8001dea <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e94:	680a      	ldr	r2, [r1, #0]
 8001e96:	2a12      	cmp	r2, #18
 8001e98:	d1ab      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e9a:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <HAL_ADC_ConfigChannel+0x19c>)
 8001e9c:	6850      	ldr	r0, [r2, #4]
 8001e9e:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8001ea2:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ea4:	6850      	ldr	r0, [r2, #4]
 8001ea6:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001eaa:	6050      	str	r0, [r2, #4]
 8001eac:	e7a1      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eae:	680a      	ldr	r2, [r1, #0]
 8001eb0:	4814      	ldr	r0, [pc, #80]	@ (8001f04 <HAL_ADC_ConfigChannel+0x1a0>)
 8001eb2:	4282      	cmp	r2, r0
 8001eb4:	d001      	beq.n	8001eba <HAL_ADC_ConfigChannel+0x156>
 8001eb6:	2a11      	cmp	r2, #17
 8001eb8:	d19f      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001eba:	4a11      	ldr	r2, [pc, #68]	@ (8001f00 <HAL_ADC_ConfigChannel+0x19c>)
 8001ebc:	6850      	ldr	r0, [r2, #4]
 8001ebe:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001ec2:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ec4:	6850      	ldr	r0, [r2, #4]
 8001ec6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001eca:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ecc:	6809      	ldr	r1, [r1, #0]
 8001ece:	4a0d      	ldr	r2, [pc, #52]	@ (8001f04 <HAL_ADC_ConfigChannel+0x1a0>)
 8001ed0:	4291      	cmp	r1, r2
 8001ed2:	d192      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <HAL_ADC_ConfigChannel+0x1a4>)
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <HAL_ADC_ConfigChannel+0x1a8>)
 8001eda:	fba1 1202 	umull	r1, r2, r1, r2
 8001ede:	0c92      	lsrs	r2, r2, #18
 8001ee0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ee4:	0052      	lsls	r2, r2, #1
 8001ee6:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001ee8:	9a01      	ldr	r2, [sp, #4]
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	d085      	beq.n	8001dfa <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8001eee:	9a01      	ldr	r2, [sp, #4]
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	9201      	str	r2, [sp, #4]
 8001ef4:	e7f8      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	e782      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x9c>
 8001efa:	bf00      	nop
 8001efc:	40012000 	.word	0x40012000
 8001f00:	40012300 	.word	0x40012300
 8001f04:	10000012 	.word	0x10000012
 8001f08:	20000014 	.word	0x20000014
 8001f0c:	431bde83 	.word	0x431bde83

08001f10 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8001f10:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	9301      	str	r3, [sp, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f16:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d06c      	beq.n	8001ff8 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f24:	6803      	ldr	r3, [r0, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	f012 0f01 	tst.w	r2, #1
 8001f2c:	d113      	bne.n	8001f56 <HAL_ADCEx_InjectedStart_IT+0x46>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f36:	4b35      	ldr	r3, [pc, #212]	@ (800200c <HAL_ADCEx_InjectedStart_IT+0xfc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a35      	ldr	r2, [pc, #212]	@ (8002010 <HAL_ADCEx_InjectedStart_IT+0x100>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	0c9b      	lsrs	r3, r3, #18
 8001f42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f46:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001f48:	e002      	b.n	8001f50 <HAL_ADCEx_InjectedStart_IT+0x40>
    {
      counter--;
 8001f4a:	9b01      	ldr	r3, [sp, #4]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001f50:	9b01      	ldr	r3, [sp, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f9      	bne.n	8001f4a <HAL_ADCEx_InjectedStart_IT+0x3a>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f56:	6802      	ldr	r2, [r0, #0]
 8001f58:	6893      	ldr	r3, [r2, #8]
 8001f5a:	f013 0f01 	tst.w	r3, #1
 8001f5e:	d040      	beq.n	8001fe2 <HAL_ADCEx_InjectedStart_IT+0xd2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001f60:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f6e:	6403      	str	r3, [r0, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f70:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f72:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f76:	d101      	bne.n	8001f7c <HAL_ADCEx_InjectedStart_IT+0x6c>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	6443      	str	r3, [r0, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001f82:	f06f 0304 	mvn.w	r3, #4
 8001f86:	6013      	str	r3, [r2, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001f88:	6802      	ldr	r2, [r0, #0]
 8001f8a:	6853      	ldr	r3, [r2, #4]
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f90:	6053      	str	r3, [r2, #4]
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <HAL_ADCEx_InjectedStart_IT+0x104>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f013 0f1f 	tst.w	r3, #31
 8001f9a:	d10e      	bne.n	8001fba <HAL_ADCEx_InjectedStart_IT+0xaa>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001f9c:	6802      	ldr	r2, [r0, #0]
 8001f9e:	6891      	ldr	r1, [r2, #8]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001fa0:	6853      	ldr	r3, [r2, #4]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if (tmp1 && tmp2)
 8001fa6:	f411 1f40 	tst.w	r1, #3145728	@ 0x300000
 8001faa:	d127      	bne.n	8001ffc <HAL_ADCEx_InjectedStart_IT+0xec>
 8001fac:	bb43      	cbnz	r3, 8002000 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001fae:	6893      	ldr	r3, [r2, #8]
 8001fb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fb4:	6093      	str	r3, [r2, #8]
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	e01c      	b.n	8001ff4 <HAL_ADCEx_InjectedStart_IT+0xe4>
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001fba:	6803      	ldr	r3, [r0, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8001fc8:	4813      	ldr	r0, [pc, #76]	@ (8002018 <HAL_ADCEx_InjectedStart_IT+0x108>)
 8001fca:	4283      	cmp	r3, r0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_ADCEx_InjectedStart_IT+0xc2>
  return HAL_OK;
 8001fce:	2000      	movs	r0, #0
 8001fd0:	e010      	b.n	8001ff4 <HAL_ADCEx_InjectedStart_IT+0xe4>
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8001fd2:	b9ba      	cbnz	r2, 8002004 <HAL_ADCEx_InjectedStart_IT+0xf4>
 8001fd4:	b9c1      	cbnz	r1, 8002008 <HAL_ADCEx_InjectedStart_IT+0xf8>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001fdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001fde:	2000      	movs	r0, #0
 8001fe0:	e008      	b.n	8001ff4 <HAL_ADCEx_InjectedStart_IT+0xe4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fea:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 8001ff2:	2000      	movs	r0, #0
}
 8001ff4:	b002      	add	sp, #8
 8001ff6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	e7fb      	b.n	8001ff4 <HAL_ADCEx_InjectedStart_IT+0xe4>
  return HAL_OK;
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	e7f9      	b.n	8001ff4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8002000:	2000      	movs	r0, #0
 8002002:	e7f7      	b.n	8001ff4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8002004:	2000      	movs	r0, #0
 8002006:	e7f5      	b.n	8001ff4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8002008:	2000      	movs	r0, #0
 800200a:	e7f3      	b.n	8001ff4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 800200c:	20000014 	.word	0x20000014
 8002010:	431bde83 	.word	0x431bde83
 8002014:	40012300 	.word	0x40012300
 8002018:	40012000 	.word	0x40012000

0800201c <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002020:	2a01      	cmp	r2, #1
 8002022:	f000 80f4 	beq.w	800220e <HAL_ADCEx_InjectedConfigChannel+0x1f2>
{
 8002026:	b430      	push	{r4, r5}
 8002028:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800202a:	2201      	movs	r2, #1
 800202c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002030:	680a      	ldr	r2, [r1, #0]
 8002032:	2a09      	cmp	r2, #9
 8002034:	f240 8089 	bls.w	800214a <HAL_ADCEx_InjectedConfigChannel+0x12e>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002038:	6805      	ldr	r5, [r0, #0]
 800203a:	68e8      	ldr	r0, [r5, #12]
 800203c:	b292      	uxth	r2, r2
 800203e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002042:	3a1e      	subs	r2, #30
 8002044:	2407      	movs	r4, #7
 8002046:	fa04 f202 	lsl.w	r2, r4, r2
 800204a:	ea20 0202 	bic.w	r2, r0, r2
 800204e:	60ea      	str	r2, [r5, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002050:	681d      	ldr	r5, [r3, #0]
 8002052:	68e8      	ldr	r0, [r5, #12]
 8002054:	688c      	ldr	r4, [r1, #8]
 8002056:	880a      	ldrh	r2, [r1, #0]
 8002058:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800205c:	3a1e      	subs	r2, #30
 800205e:	4094      	lsls	r4, r2
 8002060:	4320      	orrs	r0, r4
 8002062:	60e8      	str	r0, [r5, #12]
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002068:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800206c:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800206e:	681c      	ldr	r4, [r3, #0]
 8002070:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002072:	6908      	ldr	r0, [r1, #16]
 8002074:	3801      	subs	r0, #1
 8002076:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800207a:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800207c:	681c      	ldr	r4, [r3, #0]
 800207e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002080:	684a      	ldr	r2, [r1, #4]
 8002082:	690d      	ldr	r5, [r1, #16]
 8002084:	1b52      	subs	r2, r2, r5
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	3203      	adds	r2, #3
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002090:	f04f 0c1f 	mov.w	ip, #31
 8002094:	fa0c f202 	lsl.w	r2, ip, r2
 8002098:	ea20 0202 	bic.w	r2, r0, r2
 800209c:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800209e:	681c      	ldr	r4, [r3, #0]
 80020a0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80020a2:	684a      	ldr	r2, [r1, #4]
 80020a4:	690d      	ldr	r5, [r1, #16]
 80020a6:	1b52      	subs	r2, r2, r5
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	3203      	adds	r2, #3
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80020b2:	f8b1 c000 	ldrh.w	ip, [r1]
 80020b6:	fa0c f202 	lsl.w	r2, ip, r2
 80020ba:	4302      	orrs	r2, r0
 80020bc:	63a2      	str	r2, [r4, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80020be:	6988      	ldr	r0, [r1, #24]
 80020c0:	4a54      	ldr	r2, [pc, #336]	@ (8002214 <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 80020c2:	4290      	cmp	r0, r2
 80020c4:	d056      	beq.n	8002174 <HAL_ADCEx_InjectedConfigChannel+0x158>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	6882      	ldr	r2, [r0, #8]
 80020ca:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80020ce:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	6882      	ldr	r2, [r0, #8]
 80020d4:	698c      	ldr	r4, [r1, #24]
 80020d6:	4322      	orrs	r2, r4
 80020d8:	6082      	str	r2, [r0, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	6882      	ldr	r2, [r0, #8]
 80020de:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80020e2:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	6882      	ldr	r2, [r0, #8]
 80020e8:	69cc      	ldr	r4, [r1, #28]
 80020ea:	4322      	orrs	r2, r4
 80020ec:	6082      	str	r2, [r0, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80020ee:	7d4a      	ldrb	r2, [r1, #21]
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d04a      	beq.n	800218a <HAL_ADCEx_InjectedConfigChannel+0x16e>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	6842      	ldr	r2, [r0, #4]
 80020f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020fc:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80020fe:	7d0a      	ldrb	r2, [r1, #20]
 8002100:	2a00      	cmp	r2, #0
 8002102:	d048      	beq.n	8002196 <HAL_ADCEx_InjectedConfigChannel+0x17a>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	6842      	ldr	r2, [r0, #4]
 8002108:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800210c:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 800210e:	684a      	ldr	r2, [r1, #4]
 8002110:	2a02      	cmp	r2, #2
 8002112:	d046      	beq.n	80021a2 <HAL_ADCEx_InjectedConfigChannel+0x186>
 8002114:	2a03      	cmp	r2, #3
 8002116:	d04f      	beq.n	80021b8 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 8002118:	2a01      	cmp	r2, #1
 800211a:	d158      	bne.n	80021ce <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	6942      	ldr	r2, [r0, #20]
 8002120:	f36f 020b 	bfc	r2, #0, #12
 8002124:	6142      	str	r2, [r0, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	6942      	ldr	r2, [r0, #20]
 800212a:	68cc      	ldr	r4, [r1, #12]
 800212c:	4322      	orrs	r2, r4
 800212e:	6142      	str	r2, [r0, #20]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	4a39      	ldr	r2, [pc, #228]	@ (8002218 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 8002134:	4290      	cmp	r0, r2
 8002136:	d055      	beq.n	80021e4 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	4a37      	ldr	r2, [pc, #220]	@ (8002218 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 800213c:	4290      	cmp	r0, r2
 800213e:	d05a      	beq.n	80021f6 <HAL_ADCEx_InjectedConfigChannel+0x1da>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002140:	2000      	movs	r0, #0
 8002142:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 8002146:	bc30      	pop	{r4, r5}
 8002148:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800214a:	6805      	ldr	r5, [r0, #0]
 800214c:	6928      	ldr	r0, [r5, #16]
 800214e:	b292      	uxth	r2, r2
 8002150:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002154:	2407      	movs	r4, #7
 8002156:	fa04 f202 	lsl.w	r2, r4, r2
 800215a:	ea20 0202 	bic.w	r2, r0, r2
 800215e:	612a      	str	r2, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002160:	681d      	ldr	r5, [r3, #0]
 8002162:	6928      	ldr	r0, [r5, #16]
 8002164:	688c      	ldr	r4, [r1, #8]
 8002166:	880a      	ldrh	r2, [r1, #0]
 8002168:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800216c:	4094      	lsls	r4, r2
 800216e:	4320      	orrs	r0, r4
 8002170:	6128      	str	r0, [r5, #16]
 8002172:	e777      	b.n	8002064 <HAL_ADCEx_InjectedConfigChannel+0x48>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	6882      	ldr	r2, [r0, #8]
 8002178:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800217c:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	6882      	ldr	r2, [r0, #8]
 8002182:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002186:	6082      	str	r2, [r0, #8]
 8002188:	e7b1      	b.n	80020ee <HAL_ADCEx_InjectedConfigChannel+0xd2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	6842      	ldr	r2, [r0, #4]
 800218e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002192:	6042      	str	r2, [r0, #4]
 8002194:	e7b3      	b.n	80020fe <HAL_ADCEx_InjectedConfigChannel+0xe2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	6842      	ldr	r2, [r0, #4]
 800219a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800219e:	6042      	str	r2, [r0, #4]
 80021a0:	e7b5      	b.n	800210e <HAL_ADCEx_InjectedConfigChannel+0xf2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	6982      	ldr	r2, [r0, #24]
 80021a6:	f36f 020b 	bfc	r2, #0, #12
 80021aa:	6182      	str	r2, [r0, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	6982      	ldr	r2, [r0, #24]
 80021b0:	68cc      	ldr	r4, [r1, #12]
 80021b2:	4322      	orrs	r2, r4
 80021b4:	6182      	str	r2, [r0, #24]
      break;
 80021b6:	e7bb      	b.n	8002130 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	69c2      	ldr	r2, [r0, #28]
 80021bc:	f36f 020b 	bfc	r2, #0, #12
 80021c0:	61c2      	str	r2, [r0, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	69c2      	ldr	r2, [r0, #28]
 80021c6:	68cc      	ldr	r4, [r1, #12]
 80021c8:	4322      	orrs	r2, r4
 80021ca:	61c2      	str	r2, [r0, #28]
      break;
 80021cc:	e7b0      	b.n	8002130 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	6a02      	ldr	r2, [r0, #32]
 80021d2:	f36f 020b 	bfc	r2, #0, #12
 80021d6:	6202      	str	r2, [r0, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	6a02      	ldr	r2, [r0, #32]
 80021dc:	68cc      	ldr	r4, [r1, #12]
 80021de:	4322      	orrs	r2, r4
 80021e0:	6202      	str	r2, [r0, #32]
      break;
 80021e2:	e7a5      	b.n	8002130 <HAL_ADCEx_InjectedConfigChannel+0x114>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80021e4:	680a      	ldr	r2, [r1, #0]
 80021e6:	2a12      	cmp	r2, #18
 80021e8:	d1a6      	bne.n	8002138 <HAL_ADCEx_InjectedConfigChannel+0x11c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021ea:	480c      	ldr	r0, [pc, #48]	@ (800221c <HAL_ADCEx_InjectedConfigChannel+0x200>)
 80021ec:	6842      	ldr	r2, [r0, #4]
 80021ee:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80021f2:	6042      	str	r2, [r0, #4]
 80021f4:	e7a0      	b.n	8002138 <HAL_ADCEx_InjectedConfigChannel+0x11c>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80021f6:	680a      	ldr	r2, [r1, #0]
 80021f8:	4909      	ldr	r1, [pc, #36]	@ (8002220 <HAL_ADCEx_InjectedConfigChannel+0x204>)
 80021fa:	428a      	cmp	r2, r1
 80021fc:	d001      	beq.n	8002202 <HAL_ADCEx_InjectedConfigChannel+0x1e6>
 80021fe:	2a11      	cmp	r2, #17
 8002200:	d19e      	bne.n	8002140 <HAL_ADCEx_InjectedConfigChannel+0x124>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002202:	4906      	ldr	r1, [pc, #24]	@ (800221c <HAL_ADCEx_InjectedConfigChannel+0x200>)
 8002204:	684a      	ldr	r2, [r1, #4]
 8002206:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800220a:	604a      	str	r2, [r1, #4]
 800220c:	e798      	b.n	8002140 <HAL_ADCEx_InjectedConfigChannel+0x124>
  __HAL_LOCK(hadc);
 800220e:	2002      	movs	r0, #2
}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	000f0001 	.word	0x000f0001
 8002218:	40012000 	.word	0x40012000
 800221c:	40012300 	.word	0x40012300
 8002220:	10000012 	.word	0x10000012

08002224 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002224:	2800      	cmp	r0, #0
 8002226:	f000 80a1 	beq.w	800236c <HAL_CAN_Init+0x148>
{
 800222a:	b538      	push	{r3, r4, r5, lr}
 800222c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800222e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002232:	b1d3      	cbz	r3, 800226a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002234:	6822      	ldr	r2, [r4, #0]
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800223e:	f7ff fb0b 	bl	8001858 <HAL_GetTick>
 8002242:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	f012 0f01 	tst.w	r2, #1
 800224c:	d110      	bne.n	8002270 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800224e:	f7ff fb03 	bl	8001858 <HAL_GetTick>
 8002252:	1b40      	subs	r0, r0, r5
 8002254:	280a      	cmp	r0, #10
 8002256:	d9f5      	bls.n	8002244 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002258:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800225a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800225e:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002260:	2305      	movs	r3, #5
 8002262:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8002266:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002268:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800226a:	f7fe f9bf 	bl	80005ec <HAL_CAN_MspInit>
 800226e:	e7e1      	b.n	8002234 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f022 0202 	bic.w	r2, r2, #2
 8002276:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002278:	f7ff faee 	bl	8001858 <HAL_GetTick>
 800227c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	f012 0f02 	tst.w	r2, #2
 8002286:	d00d      	beq.n	80022a4 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002288:	f7ff fae6 	bl	8001858 <HAL_GetTick>
 800228c:	1b40      	subs	r0, r0, r5
 800228e:	280a      	cmp	r0, #10
 8002290:	d9f5      	bls.n	800227e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002292:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002298:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800229a:	2305      	movs	r3, #5
 800229c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80022a0:	2001      	movs	r0, #1
 80022a2:	e7e1      	b.n	8002268 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022a4:	7e22      	ldrb	r2, [r4, #24]
 80022a6:	2a01      	cmp	r2, #1
 80022a8:	d03d      	beq.n	8002326 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022b0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80022b2:	7e63      	ldrb	r3, [r4, #25]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d03b      	beq.n	8002330 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022c0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022c2:	7ea3      	ldrb	r3, [r4, #26]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d039      	beq.n	800233c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022c8:	6822      	ldr	r2, [r4, #0]
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	f023 0320 	bic.w	r3, r3, #32
 80022d0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022d2:	7ee3      	ldrb	r3, [r4, #27]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d037      	beq.n	8002348 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022d8:	6822      	ldr	r2, [r4, #0]
 80022da:	6813      	ldr	r3, [r2, #0]
 80022dc:	f043 0310 	orr.w	r3, r3, #16
 80022e0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022e2:	7f23      	ldrb	r3, [r4, #28]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d035      	beq.n	8002354 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022e8:	6822      	ldr	r2, [r4, #0]
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	f023 0308 	bic.w	r3, r3, #8
 80022f0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022f2:	7f63      	ldrb	r3, [r4, #29]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d033      	beq.n	8002360 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002302:	68a3      	ldr	r3, [r4, #8]
 8002304:	68e2      	ldr	r2, [r4, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	6922      	ldr	r2, [r4, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	6962      	ldr	r2, [r4, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	6862      	ldr	r2, [r4, #4]
 8002312:	3a01      	subs	r2, #1
 8002314:	6821      	ldr	r1, [r4, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800231a:	2000      	movs	r0, #0
 800231c:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800231e:	2301      	movs	r3, #1
 8002320:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002324:	e7a0      	b.n	8002268 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e7c0      	b.n	80022b2 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002330:	6822      	ldr	r2, [r4, #0]
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e7c2      	b.n	80022c2 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	6813      	ldr	r3, [r2, #0]
 8002340:	f043 0320 	orr.w	r3, r3, #32
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e7c4      	b.n	80022d2 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002348:	6822      	ldr	r2, [r4, #0]
 800234a:	6813      	ldr	r3, [r2, #0]
 800234c:	f023 0310 	bic.w	r3, r3, #16
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e7c6      	b.n	80022e2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002354:	6822      	ldr	r2, [r4, #0]
 8002356:	6813      	ldr	r3, [r2, #0]
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e7c8      	b.n	80022f2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002360:	6822      	ldr	r2, [r4, #0]
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e7ca      	b.n	8002302 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800236c:	2001      	movs	r0, #1
}
 800236e:	4770      	bx	lr

08002370 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002370:	2800      	cmp	r0, #0
 8002372:	db07      	blt.n	8002384 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002374:	f000 021f 	and.w	r2, r0, #31
 8002378:	0940      	lsrs	r0, r0, #5
 800237a:	2301      	movs	r3, #1
 800237c:	4093      	lsls	r3, r2
 800237e:	4a02      	ldr	r2, [pc, #8]	@ (8002388 <__NVIC_EnableIRQ+0x18>)
 8002380:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800238c:	2800      	cmp	r0, #0
 800238e:	db08      	blt.n	80023a2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002390:	0109      	lsls	r1, r1, #4
 8002392:	b2c9      	uxtb	r1, r1
 8002394:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002398:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800239c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80023a0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	f000 000f 	and.w	r0, r0, #15
 80023a6:	0109      	lsls	r1, r1, #4
 80023a8:	b2c9      	uxtb	r1, r1
 80023aa:	4b01      	ldr	r3, [pc, #4]	@ (80023b0 <__NVIC_SetPriority+0x24>)
 80023ac:	5419      	strb	r1, [r3, r0]
  }
}
 80023ae:	4770      	bx	lr
 80023b0:	e000ed14 	.word	0xe000ed14

080023b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ba:	f1c0 0c07 	rsb	ip, r0, #7
 80023be:	f1bc 0f04 	cmp.w	ip, #4
 80023c2:	bf28      	it	cs
 80023c4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c8:	1d03      	adds	r3, r0, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d90f      	bls.n	80023ee <NVIC_EncodePriority+0x3a>
 80023ce:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 3eff 	mov.w	lr, #4294967295
 80023d4:	fa0e f00c 	lsl.w	r0, lr, ip
 80023d8:	ea21 0100 	bic.w	r1, r1, r0
 80023dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023de:	fa0e fe03 	lsl.w	lr, lr, r3
 80023e2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80023e6:	ea41 0002 	orr.w	r0, r1, r2
 80023ea:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	2300      	movs	r3, #0
 80023f0:	e7ee      	b.n	80023d0 <NVIC_EncodePriority+0x1c>
	...

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80023f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002400:	0200      	lsls	r0, r0, #8
 8002402:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002406:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002408:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800240c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002410:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002418:	b510      	push	{r4, lr}
 800241a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800241c:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <HAL_NVIC_SetPriority+0x1c>)
 800241e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002420:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002424:	f7ff ffc6 	bl	80023b4 <NVIC_EncodePriority>
 8002428:	4601      	mov	r1, r0
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff ffae 	bl	800238c <__NVIC_SetPriority>
}
 8002430:	bd10      	pop	{r4, pc}
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243a:	f7ff ff99 	bl	8002370 <__NVIC_EnableIRQ>
}
 800243e:	bd08      	pop	{r3, pc}

08002440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002440:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002442:	6805      	ldr	r5, [r0, #0]
 8002444:	682c      	ldr	r4, [r5, #0]
 8002446:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 800244a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800244c:	6804      	ldr	r4, [r0, #0]
 800244e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002450:	6883      	ldr	r3, [r0, #8]
 8002452:	2b40      	cmp	r3, #64	@ 0x40
 8002454:	d005      	beq.n	8002462 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002456:	6803      	ldr	r3, [r0, #0]
 8002458:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800245a:	6803      	ldr	r3, [r0, #0]
 800245c:	60da      	str	r2, [r3, #12]
  }
}
 800245e:	bc30      	pop	{r4, r5}
 8002460:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002462:	6803      	ldr	r3, [r0, #0]
 8002464:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002466:	6803      	ldr	r3, [r0, #0]
 8002468:	60d9      	str	r1, [r3, #12]
 800246a:	e7f8      	b.n	800245e <DMA_SetConfig+0x1e>

0800246c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800246c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800246e:	6803      	ldr	r3, [r0, #0]
 8002470:	b2d9      	uxtb	r1, r3
 8002472:	3910      	subs	r1, #16
 8002474:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <DMA_CalcBaseAndBitshift+0x34>)
 8002476:	fba2 4201 	umull	r4, r2, r2, r1
 800247a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800247c:	4c09      	ldr	r4, [pc, #36]	@ (80024a4 <DMA_CalcBaseAndBitshift+0x38>)
 800247e:	5ca2      	ldrb	r2, [r4, r2]
 8002480:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002482:	295f      	cmp	r1, #95	@ 0x5f
 8002484:	d907      	bls.n	8002496 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002486:	f36f 0309 	bfc	r3, #0, #10
 800248a:	3304      	adds	r3, #4
 800248c:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800248e:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8002490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002494:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002496:	f36f 0309 	bfc	r3, #0, #10
 800249a:	6583      	str	r3, [r0, #88]	@ 0x58
 800249c:	e7f7      	b.n	800248e <DMA_CalcBaseAndBitshift+0x22>
 800249e:	bf00      	nop
 80024a0:	aaaaaaab 	.word	0xaaaaaaab
 80024a4:	08005f98 	.word	0x08005f98

080024a8 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024a8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024aa:	6982      	ldr	r2, [r0, #24]
 80024ac:	b992      	cbnz	r2, 80024d4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d00a      	beq.n	80024c8 <DMA_CheckFifoParam+0x20>
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d002      	beq.n	80024bc <DMA_CheckFifoParam+0x14>
 80024b6:	b10b      	cbz	r3, 80024bc <DMA_CheckFifoParam+0x14>
 80024b8:	2000      	movs	r0, #0
 80024ba:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024bc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80024be:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80024c2:	d128      	bne.n	8002516 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2000      	movs	r0, #0
 80024c6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80024ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024ce:	d024      	beq.n	800251a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2000      	movs	r0, #0
 80024d2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024d4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80024d8:	d009      	beq.n	80024ee <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d925      	bls.n	800252a <DMA_CheckFifoParam+0x82>
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d125      	bne.n	800252e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80024e4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80024e8:	d123      	bne.n	8002532 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2000      	movs	r0, #0
 80024ec:	4770      	bx	lr
    switch (tmp)
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d803      	bhi.n	80024fa <DMA_CheckFifoParam+0x52>
 80024f2:	e8df f003 	tbb	[pc, r3]
 80024f6:	0414      	.short	0x0414
 80024f8:	0a14      	.short	0x0a14
 80024fa:	2000      	movs	r0, #0
 80024fc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002500:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002504:	d10d      	bne.n	8002522 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2000      	movs	r0, #0
 8002508:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800250a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800250c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002510:	d009      	beq.n	8002526 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2000      	movs	r0, #0
 8002514:	4770      	bx	lr
        status = HAL_ERROR;
 8002516:	2001      	movs	r0, #1
 8002518:	4770      	bx	lr
        status = HAL_ERROR;
 800251a:	2001      	movs	r0, #1
 800251c:	4770      	bx	lr
      status = HAL_ERROR;
 800251e:	2001      	movs	r0, #1
 8002520:	4770      	bx	lr
        status = HAL_ERROR;
 8002522:	2001      	movs	r0, #1
 8002524:	4770      	bx	lr
        status = HAL_ERROR;
 8002526:	2001      	movs	r0, #1
 8002528:	4770      	bx	lr
      status = HAL_ERROR;
 800252a:	2001      	movs	r0, #1
 800252c:	4770      	bx	lr
    switch (tmp)
 800252e:	2000      	movs	r0, #0
 8002530:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8002532:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002534:	4770      	bx	lr
	...

08002538 <HAL_DMA_Init>:
{
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff f98c 	bl	8001858 <HAL_GetTick>
  if(hdma == NULL)
 8002540:	2c00      	cmp	r4, #0
 8002542:	d05b      	beq.n	80025fc <HAL_DMA_Init+0xc4>
 8002544:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002546:	2302      	movs	r3, #2
 8002548:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800254c:	2300      	movs	r3, #0
 800254e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002552:	6822      	ldr	r2, [r4, #0]
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f012 0f01 	tst.w	r2, #1
 8002564:	d00a      	beq.n	800257c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002566:	f7ff f977 	bl	8001858 <HAL_GetTick>
 800256a:	1b43      	subs	r3, r0, r5
 800256c:	2b05      	cmp	r3, #5
 800256e:	d9f5      	bls.n	800255c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002570:	2320      	movs	r3, #32
 8002572:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002574:	2003      	movs	r0, #3
 8002576:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800257a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800257c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800257e:	4920      	ldr	r1, [pc, #128]	@ (8002600 <HAL_DMA_Init+0xc8>)
 8002580:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002582:	6862      	ldr	r2, [r4, #4]
 8002584:	68a0      	ldr	r0, [r4, #8]
 8002586:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002588:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258c:	6920      	ldr	r0, [r4, #16]
 800258e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002590:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002592:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002594:	69a0      	ldr	r0, [r4, #24]
 8002596:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002598:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800259c:	6a20      	ldr	r0, [r4, #32]
 800259e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a0:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80025a4:	2904      	cmp	r1, #4
 80025a6:	d01e      	beq.n	80025e6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80025a8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80025aa:	6826      	ldr	r6, [r4, #0]
 80025ac:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025ae:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80025b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80025b4:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d107      	bne.n	80025ca <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80025ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80025bc:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80025c0:	b11b      	cbz	r3, 80025ca <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025c2:	4620      	mov	r0, r4
 80025c4:	f7ff ff70 	bl	80024a8 <DMA_CheckFifoParam>
 80025c8:	b990      	cbnz	r0, 80025f0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80025ca:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff ff4d 	bl	800246c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80025d4:	233f      	movs	r3, #63	@ 0x3f
 80025d6:	4093      	lsls	r3, r2
 80025d8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025da:	2000      	movs	r0, #0
 80025dc:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80025de:	2301      	movs	r3, #1
 80025e0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80025e4:	e7c9      	b.n	800257a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80025e8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80025ea:	4301      	orrs	r1, r0
 80025ec:	430a      	orrs	r2, r1
 80025ee:	e7db      	b.n	80025a8 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f0:	2340      	movs	r3, #64	@ 0x40
 80025f2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80025f4:	2001      	movs	r0, #1
 80025f6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80025fa:	e7be      	b.n	800257a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80025fc:	2001      	movs	r0, #1
 80025fe:	e7bc      	b.n	800257a <HAL_DMA_Init+0x42>
 8002600:	f010803f 	.word	0xf010803f

08002604 <HAL_DMA_Start_IT>:
{
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002608:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800260a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800260e:	2801      	cmp	r0, #1
 8002610:	d02a      	beq.n	8002668 <HAL_DMA_Start_IT+0x64>
 8002612:	2001      	movs	r0, #1
 8002614:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002618:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 800261c:	2801      	cmp	r0, #1
 800261e:	d004      	beq.n	800262a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002620:	2300      	movs	r3, #0
 8002622:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8002626:	2002      	movs	r0, #2
}
 8002628:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800262a:	2002      	movs	r0, #2
 800262c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	2000      	movs	r0, #0
 8002632:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff ff03 	bl	8002440 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800263c:	233f      	movs	r3, #63	@ 0x3f
 800263e:	4093      	lsls	r3, r2
 8002640:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	6813      	ldr	r3, [r2, #0]
 8002646:	f043 0316 	orr.w	r3, r3, #22
 800264a:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800264c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800264e:	b123      	cbz	r3, 800265a <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002650:	6822      	ldr	r2, [r4, #0]
 8002652:	6813      	ldr	r3, [r2, #0]
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800265a:	6822      	ldr	r2, [r4, #0]
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2000      	movs	r0, #0
 8002666:	e7df      	b.n	8002628 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002668:	2002      	movs	r0, #2
 800266a:	e7dd      	b.n	8002628 <HAL_DMA_Start_IT+0x24>

0800266c <HAL_DMA_Abort>:
{
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002670:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8002672:	f7ff f8f1 	bl	8001858 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002676:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800267a:	2b02      	cmp	r3, #2
 800267c:	d006      	beq.n	800268c <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002682:	2300      	movs	r3, #0
 8002684:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002688:	2001      	movs	r0, #1
}
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	f023 0316 	bic.w	r3, r3, #22
 8002696:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002698:	6822      	ldr	r2, [r4, #0]
 800269a:	6953      	ldr	r3, [r2, #20]
 800269c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026a0:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026a4:	b1e3      	cbz	r3, 80026e0 <HAL_DMA_Abort+0x74>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a6:	6822      	ldr	r2, [r4, #0]
 80026a8:	6813      	ldr	r3, [r2, #0]
 80026aa:	f023 0308 	bic.w	r3, r3, #8
 80026ae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80026b0:	6822      	ldr	r2, [r4, #0]
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f013 0f01 	tst.w	r3, #1
 80026c2:	d011      	beq.n	80026e8 <HAL_DMA_Abort+0x7c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026c4:	f7ff f8c8 	bl	8001858 <HAL_GetTick>
 80026c8:	1b43      	subs	r3, r0, r5
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d9f5      	bls.n	80026ba <HAL_DMA_Abort+0x4e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ce:	2320      	movs	r3, #32
 80026d0:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026d2:	2003      	movs	r0, #3
 80026d4:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80026d8:	2300      	movs	r3, #0
 80026da:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 80026de:	e7d4      	b.n	800268a <HAL_DMA_Abort+0x1e>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1df      	bne.n	80026a6 <HAL_DMA_Abort+0x3a>
 80026e6:	e7e3      	b.n	80026b0 <HAL_DMA_Abort+0x44>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80026ea:	233f      	movs	r3, #63	@ 0x3f
 80026ec:	4093      	lsls	r3, r2
 80026ee:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80026fc:	e7c5      	b.n	800268a <HAL_DMA_Abort+0x1e>

080026fe <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026fe:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800270e:	2305      	movs	r3, #5
 8002710:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002714:	6802      	ldr	r2, [r0, #0]
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800271e:	2000      	movs	r0, #0
}
 8002720:	4770      	bx	lr
	...

08002724 <HAL_DMA_IRQHandler>:
{
 8002724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002726:	b083      	sub	sp, #12
 8002728:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800272e:	4b72      	ldr	r3, [pc, #456]	@ (80028f8 <HAL_DMA_IRQHandler+0x1d4>)
 8002730:	681d      	ldr	r5, [r3, #0]
 8002732:	4b72      	ldr	r3, [pc, #456]	@ (80028fc <HAL_DMA_IRQHandler+0x1d8>)
 8002734:	fba3 3505 	umull	r3, r5, r3, r5
 8002738:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 800273c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800273e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002740:	2308      	movs	r3, #8
 8002742:	4093      	lsls	r3, r2
 8002744:	4233      	tst	r3, r6
 8002746:	d010      	beq.n	800276a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002748:	6803      	ldr	r3, [r0, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f012 0f04 	tst.w	r2, #4
 8002750:	d00b      	beq.n	800276a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	f022 0204 	bic.w	r2, r2, #4
 8002758:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800275a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800275c:	2308      	movs	r3, #8
 800275e:	4093      	lsls	r3, r2
 8002760:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002762:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800276a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800276c:	2301      	movs	r3, #1
 800276e:	4093      	lsls	r3, r2
 8002770:	4233      	tst	r3, r6
 8002772:	d009      	beq.n	8002788 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002774:	6822      	ldr	r2, [r4, #0]
 8002776:	6952      	ldr	r2, [r2, #20]
 8002778:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800277c:	d004      	beq.n	8002788 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800277e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002780:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002782:	f043 0302 	orr.w	r3, r3, #2
 8002786:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800278a:	2304      	movs	r3, #4
 800278c:	4093      	lsls	r3, r2
 800278e:	4233      	tst	r3, r6
 8002790:	d009      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002792:	6822      	ldr	r2, [r4, #0]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	f012 0f02 	tst.w	r2, #2
 800279a:	d004      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800279c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800279e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027a6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80027a8:	2310      	movs	r3, #16
 80027aa:	4093      	lsls	r3, r2
 80027ac:	4233      	tst	r3, r6
 80027ae:	d024      	beq.n	80027fa <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027b0:	6822      	ldr	r2, [r4, #0]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	f012 0f08 	tst.w	r2, #8
 80027b8:	d01f      	beq.n	80027fa <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ba:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80027c4:	d00d      	beq.n	80027e2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80027cc:	d104      	bne.n	80027d8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80027ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027d0:	b19b      	cbz	r3, 80027fa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80027d2:	4620      	mov	r0, r4
 80027d4:	4798      	blx	r3
 80027d6:	e010      	b.n	80027fa <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027d8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80027da:	b173      	cbz	r3, 80027fa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80027dc:	4620      	mov	r0, r4
 80027de:	4798      	blx	r3
 80027e0:	e00b      	b.n	80027fa <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80027e8:	d103      	bne.n	80027f2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f022 0208 	bic.w	r2, r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027f4:	b10b      	cbz	r3, 80027fa <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80027f6:	4620      	mov	r0, r4
 80027f8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027fa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80027fc:	2320      	movs	r3, #32
 80027fe:	4093      	lsls	r3, r2
 8002800:	4233      	tst	r3, r6
 8002802:	d054      	beq.n	80028ae <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002804:	6822      	ldr	r2, [r4, #0]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f012 0f10 	tst.w	r2, #16
 800280c:	d04f      	beq.n	80028ae <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800280e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002810:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002814:	2b05      	cmp	r3, #5
 8002816:	d00e      	beq.n	8002836 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002820:	d033      	beq.n	800288a <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002828:	d12a      	bne.n	8002880 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 800282a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03e      	beq.n	80028ae <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8002830:	4620      	mov	r0, r4
 8002832:	4798      	blx	r3
 8002834:	e03b      	b.n	80028ae <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	f023 0316 	bic.w	r3, r3, #22
 800283e:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	6953      	ldr	r3, [r2, #20]
 8002844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002848:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800284a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800284c:	b1a3      	cbz	r3, 8002878 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	6813      	ldr	r3, [r2, #0]
 8002852:	f023 0308 	bic.w	r3, r3, #8
 8002856:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002858:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800285a:	233f      	movs	r3, #63	@ 0x3f
 800285c:	4093      	lsls	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002860:	2301      	movs	r3, #1
 8002862:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002866:	2300      	movs	r3, #0
 8002868:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800286c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03f      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8002872:	4620      	mov	r0, r4
 8002874:	4798      	blx	r3
        return;
 8002876:	e03c      	b.n	80028f2 <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002878:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e7      	bne.n	800284e <HAL_DMA_IRQHandler+0x12a>
 800287e:	e7eb      	b.n	8002858 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8002880:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002882:	b1a3      	cbz	r3, 80028ae <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8002884:	4620      	mov	r0, r4
 8002886:	4798      	blx	r3
 8002888:	e011      	b.n	80028ae <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002890:	d109      	bne.n	80028a6 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f022 0210 	bic.w	r2, r2, #16
 8002898:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800289a:	2301      	movs	r3, #1
 800289c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80028a0:	2300      	movs	r3, #0
 80028a2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80028a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80028a8:	b10b      	cbz	r3, 80028ae <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 80028aa:	4620      	mov	r0, r4
 80028ac:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80028b0:	b1fb      	cbz	r3, 80028f2 <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80028b4:	f013 0f01 	tst.w	r3, #1
 80028b8:	d017      	beq.n	80028ea <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 80028ba:	2305      	movs	r3, #5
 80028bc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80028c0:	6822      	ldr	r2, [r4, #0]
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	3301      	adds	r3, #1
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	42ab      	cmp	r3, r5
 80028d2:	d804      	bhi.n	80028de <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f013 0f01 	tst.w	r3, #1
 80028dc:	d1f5      	bne.n	80028ca <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 80028de:	2301      	movs	r3, #1
 80028e0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80028e4:	2300      	movs	r3, #0
 80028e6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80028ea:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80028ec:	b10b      	cbz	r3, 80028f2 <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 80028ee:	4620      	mov	r0, r4
 80028f0:	4798      	blx	r3
}
 80028f2:	b003      	add	sp, #12
 80028f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000014 	.word	0x20000014
 80028fc:	1b4e81b5 	.word	0x1b4e81b5

08002900 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002900:	2300      	movs	r3, #0
 8002902:	2b0f      	cmp	r3, #15
 8002904:	f200 80e3 	bhi.w	8002ace <HAL_GPIO_Init+0x1ce>
{
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	e065      	b.n	80029da <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800290e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002910:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002914:	2403      	movs	r4, #3
 8002916:	fa04 f40e 	lsl.w	r4, r4, lr
 800291a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291e:	68cc      	ldr	r4, [r1, #12]
 8002920:	fa04 f40e 	lsl.w	r4, r4, lr
 8002924:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002926:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002928:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800292a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292e:	684a      	ldr	r2, [r1, #4]
 8002930:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002934:	409a      	lsls	r2, r3
 8002936:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8002938:	6042      	str	r2, [r0, #4]
 800293a:	e05c      	b.n	80029f6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800293c:	08dc      	lsrs	r4, r3, #3
 800293e:	3408      	adds	r4, #8
 8002940:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002944:	f003 0507 	and.w	r5, r3, #7
 8002948:	00ad      	lsls	r5, r5, #2
 800294a:	f04f 0e0f 	mov.w	lr, #15
 800294e:	fa0e fe05 	lsl.w	lr, lr, r5
 8002952:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002956:	690a      	ldr	r2, [r1, #16]
 8002958:	40aa      	lsls	r2, r5
 800295a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800295e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002962:	e05c      	b.n	8002a1e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002964:	2206      	movs	r2, #6
 8002966:	e000      	b.n	800296a <HAL_GPIO_Init+0x6a>
 8002968:	2200      	movs	r2, #0
 800296a:	fa02 f20e 	lsl.w	r2, r2, lr
 800296e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	3402      	adds	r4, #2
 8002972:	4d57      	ldr	r5, [pc, #348]	@ (8002ad0 <HAL_GPIO_Init+0x1d0>)
 8002974:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002978:	4a56      	ldr	r2, [pc, #344]	@ (8002ad4 <HAL_GPIO_Init+0x1d4>)
 800297a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800297c:	ea6f 020c 	mvn.w	r2, ip
 8002980:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002984:	684e      	ldr	r6, [r1, #4]
 8002986:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800298a:	d001      	beq.n	8002990 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800298c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002990:	4c50      	ldr	r4, [pc, #320]	@ (8002ad4 <HAL_GPIO_Init+0x1d4>)
 8002992:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002994:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002996:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800299a:	684e      	ldr	r6, [r1, #4]
 800299c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80029a0:	d001      	beq.n	80029a6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80029a2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80029a6:	4c4b      	ldr	r4, [pc, #300]	@ (8002ad4 <HAL_GPIO_Init+0x1d4>)
 80029a8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80029aa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80029ac:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029b0:	684e      	ldr	r6, [r1, #4]
 80029b2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80029b6:	d001      	beq.n	80029bc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80029b8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80029bc:	4c45      	ldr	r4, [pc, #276]	@ (8002ad4 <HAL_GPIO_Init+0x1d4>)
 80029be:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c4:	684d      	ldr	r5, [r1, #4]
 80029c6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80029ca:	d001      	beq.n	80029d0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80029cc:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80029d0:	4c40      	ldr	r4, [pc, #256]	@ (8002ad4 <HAL_GPIO_Init+0x1d4>)
 80029d2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d4:	3301      	adds	r3, #1
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	d877      	bhi.n	8002aca <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 80029da:	2201      	movs	r2, #1
 80029dc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	680c      	ldr	r4, [r1, #0]
 80029e0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80029e4:	ea32 0404 	bics.w	r4, r2, r4
 80029e8:	d1f4      	bne.n	80029d4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	684c      	ldr	r4, [r1, #4]
 80029ec:	f004 0403 	and.w	r4, r4, #3
 80029f0:	3c01      	subs	r4, #1
 80029f2:	2c01      	cmp	r4, #1
 80029f4:	d98b      	bls.n	800290e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f6:	684a      	ldr	r2, [r1, #4]
 80029f8:	f002 0203 	and.w	r2, r2, #3
 80029fc:	2a03      	cmp	r2, #3
 80029fe:	d009      	beq.n	8002a14 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002a00:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a02:	005d      	lsls	r5, r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	40aa      	lsls	r2, r5
 8002a08:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0c:	688a      	ldr	r2, [r1, #8]
 8002a0e:	40aa      	lsls	r2, r5
 8002a10:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8002a12:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a14:	684a      	ldr	r2, [r1, #4]
 8002a16:	f002 0203 	and.w	r2, r2, #3
 8002a1a:	2a02      	cmp	r2, #2
 8002a1c:	d08e      	beq.n	800293c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8002a1e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a20:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f20e 	lsl.w	r2, r2, lr
 8002a2a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a2e:	684a      	ldr	r2, [r1, #4]
 8002a30:	f002 0203 	and.w	r2, r2, #3
 8002a34:	fa02 f20e 	lsl.w	r2, r2, lr
 8002a38:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002a3a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a3c:	684a      	ldr	r2, [r1, #4]
 8002a3e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8002a42:	d0c7      	beq.n	80029d4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a44:	2200      	movs	r2, #0
 8002a46:	9201      	str	r2, [sp, #4]
 8002a48:	4a23      	ldr	r2, [pc, #140]	@ (8002ad8 <HAL_GPIO_Init+0x1d8>)
 8002a4a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002a4c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002a50:	6454      	str	r4, [r2, #68]	@ 0x44
 8002a52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a54:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002a58:	9201      	str	r2, [sp, #4]
 8002a5a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a5c:	089c      	lsrs	r4, r3, #2
 8002a5e:	1ca5      	adds	r5, r4, #2
 8002a60:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <HAL_GPIO_Init+0x1d0>)
 8002a62:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a66:	f003 0e03 	and.w	lr, r3, #3
 8002a6a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f20e 	lsl.w	r2, r2, lr
 8002a74:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a78:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <HAL_GPIO_Init+0x1dc>)
 8002a7a:	4290      	cmp	r0, r2
 8002a7c:	f43f af74 	beq.w	8002968 <HAL_GPIO_Init+0x68>
 8002a80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a84:	4290      	cmp	r0, r2
 8002a86:	d016      	beq.n	8002ab6 <HAL_GPIO_Init+0x1b6>
 8002a88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a8c:	4290      	cmp	r0, r2
 8002a8e:	d014      	beq.n	8002aba <HAL_GPIO_Init+0x1ba>
 8002a90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a94:	4290      	cmp	r0, r2
 8002a96:	d012      	beq.n	8002abe <HAL_GPIO_Init+0x1be>
 8002a98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a9c:	4290      	cmp	r0, r2
 8002a9e:	d010      	beq.n	8002ac2 <HAL_GPIO_Init+0x1c2>
 8002aa0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002aa4:	4290      	cmp	r0, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_GPIO_Init+0x1c6>
 8002aa8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002aac:	4290      	cmp	r0, r2
 8002aae:	f43f af59 	beq.w	8002964 <HAL_GPIO_Init+0x64>
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	e759      	b.n	800296a <HAL_GPIO_Init+0x6a>
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	e757      	b.n	800296a <HAL_GPIO_Init+0x6a>
 8002aba:	2202      	movs	r2, #2
 8002abc:	e755      	b.n	800296a <HAL_GPIO_Init+0x6a>
 8002abe:	2203      	movs	r2, #3
 8002ac0:	e753      	b.n	800296a <HAL_GPIO_Init+0x6a>
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	e751      	b.n	800296a <HAL_GPIO_Init+0x6a>
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	e74f      	b.n	800296a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8002aca:	b002      	add	sp, #8
 8002acc:	bd70      	pop	{r4, r5, r6, pc}
 8002ace:	4770      	bx	lr
 8002ad0:	40013800 	.word	0x40013800
 8002ad4:	40013c00 	.word	0x40013c00
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020000 	.word	0x40020000

08002ae0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	b10a      	cbz	r2, 8002ae6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae2:	6181      	str	r1, [r0, #24]
 8002ae4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae6:	0409      	lsls	r1, r1, #16
 8002ae8:	6181      	str	r1, [r0, #24]
  }
}
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aec:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aee:	ea01 0203 	and.w	r2, r1, r3
 8002af2:	ea21 0103 	bic.w	r1, r1, r3
 8002af6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002afa:	6181      	str	r1, [r0, #24]
}
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b00:	2800      	cmp	r0, #0
 8002b02:	f000 80cc 	beq.w	8002c9e <HAL_I2C_Init+0x19e>
{
 8002b06:	b570      	push	{r4, r5, r6, lr}
 8002b08:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d077      	beq.n	8002c02 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b12:	2324      	movs	r3, #36	@ 0x24
 8002b14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b18:	6822      	ldr	r2, [r4, #0]
 8002b1a:	6813      	ldr	r3, [r2, #0]
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b22:	6822      	ldr	r2, [r4, #0]
 8002b24:	6813      	ldr	r3, [r2, #0]
 8002b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b2a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b2c:	6822      	ldr	r2, [r4, #0]
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002b34:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b36:	f000 f999 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b3a:	6862      	ldr	r2, [r4, #4]
 8002b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca8 <HAL_I2C_Init+0x1a8>)
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d864      	bhi.n	8002c0c <HAL_I2C_Init+0x10c>
 8002b42:	4b5a      	ldr	r3, [pc, #360]	@ (8002cac <HAL_I2C_Init+0x1ac>)
 8002b44:	4298      	cmp	r0, r3
 8002b46:	bf8c      	ite	hi
 8002b48:	2300      	movhi	r3, #0
 8002b4a:	2301      	movls	r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 80a8 	bne.w	8002ca2 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b52:	4957      	ldr	r1, [pc, #348]	@ (8002cb0 <HAL_I2C_Init+0x1b0>)
 8002b54:	fba1 3100 	umull	r3, r1, r1, r0
 8002b58:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b5a:	6825      	ldr	r5, [r4, #0]
 8002b5c:	686a      	ldr	r2, [r5, #4]
 8002b5e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002b62:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002b66:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b68:	6821      	ldr	r1, [r4, #0]
 8002b6a:	6a0a      	ldr	r2, [r1, #32]
 8002b6c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002b70:	6866      	ldr	r6, [r4, #4]
 8002b72:	4d4d      	ldr	r5, [pc, #308]	@ (8002ca8 <HAL_I2C_Init+0x1a8>)
 8002b74:	42ae      	cmp	r6, r5
 8002b76:	d84f      	bhi.n	8002c18 <HAL_I2C_Init+0x118>
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b7e:	6821      	ldr	r1, [r4, #0]
 8002b80:	69ca      	ldr	r2, [r1, #28]
 8002b82:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002b86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b8a:	6865      	ldr	r5, [r4, #4]
 8002b8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ca8 <HAL_I2C_Init+0x1a8>)
 8002b8e:	429d      	cmp	r5, r3
 8002b90:	d84c      	bhi.n	8002c2c <HAL_I2C_Init+0x12c>
 8002b92:	1e43      	subs	r3, r0, #1
 8002b94:	006d      	lsls	r5, r5, #1
 8002b96:	fbb3 f3f5 	udiv	r3, r3, r5
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002ba0:	4203      	tst	r3, r0
 8002ba2:	d078      	beq.n	8002c96 <HAL_I2C_Init+0x196>
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bac:	6821      	ldr	r1, [r4, #0]
 8002bae:	680b      	ldr	r3, [r1, #0]
 8002bb0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002bb4:	69e2      	ldr	r2, [r4, #28]
 8002bb6:	6a20      	ldr	r0, [r4, #32]
 8002bb8:	4302      	orrs	r2, r0
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bbe:	6821      	ldr	r1, [r4, #0]
 8002bc0:	688b      	ldr	r3, [r1, #8]
 8002bc2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bca:	6922      	ldr	r2, [r4, #16]
 8002bcc:	68e0      	ldr	r0, [r4, #12]
 8002bce:	4302      	orrs	r2, r0
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd4:	6821      	ldr	r1, [r4, #0]
 8002bd6:	68cb      	ldr	r3, [r1, #12]
 8002bd8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bdc:	6962      	ldr	r2, [r4, #20]
 8002bde:	69a0      	ldr	r0, [r4, #24]
 8002be0:	4302      	orrs	r2, r0
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be6:	6822      	ldr	r2, [r4, #0]
 8002be8:	6813      	ldr	r3, [r2, #0]
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfa:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002c02:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002c06:	f7fe fa65 	bl	80010d4 <HAL_I2C_MspInit>
 8002c0a:	e782      	b.n	8002b12 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0c:	4b29      	ldr	r3, [pc, #164]	@ (8002cb4 <HAL_I2C_Init+0x1b4>)
 8002c0e:	4298      	cmp	r0, r3
 8002c10:	bf8c      	ite	hi
 8002c12:	2300      	movhi	r3, #0
 8002c14:	2301      	movls	r3, #1
 8002c16:	e799      	b.n	8002b4c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c18:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002c1c:	fb05 f303 	mul.w	r3, r5, r3
 8002c20:	4d25      	ldr	r5, [pc, #148]	@ (8002cb8 <HAL_I2C_Init+0x1b8>)
 8002c22:	fba5 5303 	umull	r5, r3, r5, r3
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	3301      	adds	r3, #1
 8002c2a:	e7a6      	b.n	8002b7a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c2c:	68a6      	ldr	r6, [r4, #8]
 8002c2e:	b9be      	cbnz	r6, 8002c60 <HAL_I2C_Init+0x160>
 8002c30:	1e43      	subs	r3, r0, #1
 8002c32:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8002c36:	fbb3 f3fc 	udiv	r3, r3, ip
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	bb43      	cbnz	r3, 8002c9a <HAL_I2C_Init+0x19a>
 8002c48:	b9c6      	cbnz	r6, 8002c7c <HAL_I2C_Init+0x17c>
 8002c4a:	1e43      	subs	r3, r0, #1
 8002c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c50:	fbb3 f3f5 	udiv	r3, r3, r5
 8002c54:	3301      	adds	r3, #1
 8002c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c5e:	e7a3      	b.n	8002ba8 <HAL_I2C_Init+0xa8>
 8002c60:	1e43      	subs	r3, r0, #1
 8002c62:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002c66:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002c6a:	fbb3 f3fc 	udiv	r3, r3, ip
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	e7e4      	b.n	8002c46 <HAL_I2C_Init+0x146>
 8002c7c:	1e43      	subs	r3, r0, #1
 8002c7e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002c82:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002c86:	fbb3 f3f5 	udiv	r3, r3, r5
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c94:	e788      	b.n	8002ba8 <HAL_I2C_Init+0xa8>
 8002c96:	2304      	movs	r3, #4
 8002c98:	e786      	b.n	8002ba8 <HAL_I2C_Init+0xa8>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e784      	b.n	8002ba8 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
}
 8002ca0:	4770      	bx	lr
    return HAL_ERROR;
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	e7ac      	b.n	8002c00 <HAL_I2C_Init+0x100>
 8002ca6:	bf00      	nop
 8002ca8:	000186a0 	.word	0x000186a0
 8002cac:	001e847f 	.word	0x001e847f
 8002cb0:	431bde83 	.word	0x431bde83
 8002cb4:	003d08ff 	.word	0x003d08ff
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cbc:	b500      	push	{lr}
 8002cbe:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	9200      	str	r2, [sp, #0]
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <HAL_MspInit+0x40>)
 8002cc6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cc8:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002ccc:	6459      	str	r1, [r3, #68]	@ 0x44
 8002cce:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cd0:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8002cd4:	9100      	str	r1, [sp, #0]
 8002cd6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd8:	9201      	str	r2, [sp, #4]
 8002cda:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002cdc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002ce0:	6419      	str	r1, [r3, #64]	@ 0x40
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cec:	210f      	movs	r1, #15
 8002cee:	f06f 0001 	mvn.w	r0, #1
 8002cf2:	f7ff fb91 	bl	8002418 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf6:	b003      	add	sp, #12
 8002cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cfc:	40023800 	.word	0x40023800

08002d00 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d00:	2800      	cmp	r0, #0
 8002d02:	f000 809b 	beq.w	8002e3c <HAL_RCC_ClockConfig+0x13c>
{
 8002d06:	b570      	push	{r4, r5, r6, lr}
 8002d08:	460d      	mov	r5, r1
 8002d0a:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e4c <HAL_RCC_ClockConfig+0x14c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	428b      	cmp	r3, r1
 8002d16:	d208      	bcs.n	8002d2a <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d18:	b2cb      	uxtb	r3, r1
 8002d1a:	4a4c      	ldr	r2, [pc, #304]	@ (8002e4c <HAL_RCC_ClockConfig+0x14c>)
 8002d1c:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	428b      	cmp	r3, r1
 8002d26:	f040 808b 	bne.w	8002e40 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	f013 0f02 	tst.w	r3, #2
 8002d30:	d017      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d32:	f013 0f04 	tst.w	r3, #4
 8002d36:	d004      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4a45      	ldr	r2, [pc, #276]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002d3a:	6893      	ldr	r3, [r2, #8]
 8002d3c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d40:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f013 0f08 	tst.w	r3, #8
 8002d48:	d004      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4a:	4a41      	ldr	r2, [pc, #260]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002d4c:	6893      	ldr	r3, [r2, #8]
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4a3e      	ldr	r2, [pc, #248]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002d56:	6893      	ldr	r3, [r2, #8]
 8002d58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d5c:	68a1      	ldr	r1, [r4, #8]
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	f013 0f01 	tst.w	r3, #1
 8002d68:	d032      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	6863      	ldr	r3, [r4, #4]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d021      	beq.n	8002db4 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d70:	1e9a      	subs	r2, r3, #2
 8002d72:	2a01      	cmp	r2, #1
 8002d74:	d925      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4a36      	ldr	r2, [pc, #216]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	f012 0f02 	tst.w	r2, #2
 8002d7e:	d061      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d80:	4933      	ldr	r1, [pc, #204]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002d82:	688a      	ldr	r2, [r1, #8]
 8002d84:	f022 0203 	bic.w	r2, r2, #3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d8c:	f7fe fd64 	bl	8001858 <HAL_GetTick>
 8002d90:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2f      	ldr	r3, [pc, #188]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	6862      	ldr	r2, [r4, #4]
 8002d9c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da2:	f7fe fd59 	bl	8001858 <HAL_GetTick>
 8002da6:	1b80      	subs	r0, r0, r6
 8002da8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002dac:	4298      	cmp	r0, r3
 8002dae:	d9f0      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8002db0:	2003      	movs	r0, #3
 8002db2:	e042      	b.n	8002e3a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db4:	4a26      	ldr	r2, [pc, #152]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002dbc:	d1e0      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	e03b      	b.n	8002e3a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4a23      	ldr	r2, [pc, #140]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002dca:	d1d9      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002dcc:	2001      	movs	r0, #1
 8002dce:	e034      	b.n	8002e3a <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <HAL_RCC_ClockConfig+0x14c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	42ab      	cmp	r3, r5
 8002dda:	d907      	bls.n	8002dec <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ddc:	b2ea      	uxtb	r2, r5
 8002dde:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_RCC_ClockConfig+0x14c>)
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	42ab      	cmp	r3, r5
 8002dea:	d12d      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	f013 0f04 	tst.w	r3, #4
 8002df2:	d006      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df4:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002df6:	6893      	ldr	r3, [r2, #8]
 8002df8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002dfc:	68e1      	ldr	r1, [r4, #12]
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	f013 0f08 	tst.w	r3, #8
 8002e08:	d007      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0a:	4a11      	ldr	r2, [pc, #68]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002e0c:	6893      	ldr	r3, [r2, #8]
 8002e0e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002e12:	6921      	ldr	r1, [r4, #16]
 8002e14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e18:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e1a:	f000 f865 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <HAL_RCC_ClockConfig+0x150>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e26:	4a0b      	ldr	r2, [pc, #44]	@ (8002e54 <HAL_RCC_ClockConfig+0x154>)
 8002e28:	5cd3      	ldrb	r3, [r2, r3]
 8002e2a:	40d8      	lsrs	r0, r3
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <HAL_RCC_ClockConfig+0x158>)
 8002e2e:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e30:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <HAL_RCC_ClockConfig+0x15c>)
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	f001 fb4c 	bl	80044d0 <HAL_InitTick>

  return HAL_OK;
 8002e38:	2000      	movs	r0, #0
}
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e3c:	2001      	movs	r0, #1
}
 8002e3e:	4770      	bx	lr
      return HAL_ERROR;
 8002e40:	2001      	movs	r0, #1
 8002e42:	e7fa      	b.n	8002e3a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
 8002e46:	e7f8      	b.n	8002e3a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002e48:	2001      	movs	r0, #1
 8002e4a:	e7f6      	b.n	8002e3a <HAL_RCC_ClockConfig+0x13a>
 8002e4c:	40023c00 	.word	0x40023c00
 8002e50:	40023800 	.word	0x40023800
 8002e54:	08005fa8 	.word	0x08005fa8
 8002e58:	20000014 	.word	0x20000014
 8002e5c:	20000010 	.word	0x20000010

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e60:	4b01      	ldr	r3, [pc, #4]	@ (8002e68 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000014 	.word	0x20000014

08002e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e6c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e6e:	f7ff fff7 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e72:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e7a:	4a03      	ldr	r2, [pc, #12]	@ (8002e88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e7e:	40d8      	lsrs	r0, r3
 8002e80:	bd08      	pop	{r3, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08005fa0 	.word	0x08005fa0

08002e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e8c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e8e:	f7ff ffe7 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e9a:	4a03      	ldr	r2, [pc, #12]	@ (8002ea8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e9e:	40d8      	lsrs	r0, r3
 8002ea0:	bd08      	pop	{r3, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	08005fa0 	.word	0x08005fa0

08002eac <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eac:	230f      	movs	r3, #15
 8002eae:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_GetClockConfig+0x34>)
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	f002 0203 	and.w	r2, r2, #3
 8002eb8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002ec0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002ec8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002ed2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <HAL_RCC_GetClockConfig+0x38>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	600b      	str	r3, [r1, #0]
}
 8002ede:	4770      	bx	lr
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40023c00 	.word	0x40023c00

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eea:	4b5e      	ldr	r3, [pc, #376]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x16>
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d05b      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0xca>
 8002efa:	485b      	ldr	r0, [pc, #364]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efc:	e033      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x7e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002efe:	4b59      	ldr	r3, [pc, #356]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002f0c:	d02c      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0e:	4b55      	ldr	r3, [pc, #340]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002f10:	6858      	ldr	r0, [r3, #4]
 8002f12:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002f16:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002f1a:	ebbc 0c00 	subs.w	ip, ip, r0
 8002f1e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002f22:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002f26:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002f2a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002f2e:	ebb1 010c 	subs.w	r1, r1, ip
 8002f32:	eb63 030e 	sbc.w	r3, r3, lr
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3c:	00c9      	lsls	r1, r1, #3
 8002f3e:	eb11 0c00 	adds.w	ip, r1, r0
 8002f42:	f143 0300 	adc.w	r3, r3, #0
 8002f46:	0299      	lsls	r1, r3, #10
 8002f48:	2300      	movs	r3, #0
 8002f4a:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002f4e:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002f52:	f7fd f93d 	bl	80001d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f56:	4b43      	ldr	r3, [pc, #268]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f5e:	3301      	adds	r3, #1
 8002f60:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002f62:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f66:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f68:	4b3e      	ldr	r3, [pc, #248]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002f6a:	6858      	ldr	r0, [r3, #4]
 8002f6c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002f70:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002f74:	ebbc 0c00 	subs.w	ip, ip, r0
 8002f78:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002f7c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002f80:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002f84:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002f88:	ebb1 010c 	subs.w	r1, r1, ip
 8002f8c:	eb63 030e 	sbc.w	r3, r3, lr
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f96:	00c9      	lsls	r1, r1, #3
 8002f98:	eb11 0c00 	adds.w	ip, r1, r0
 8002f9c:	f143 0300 	adc.w	r3, r3, #0
 8002fa0:	0299      	lsls	r1, r3, #10
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002fa8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002fac:	f7fd f910 	bl	80001d0 <__aeabi_uldivmod>
 8002fb0:	e7d1      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x6e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002fc0:	d02a      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x130>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc2:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002fc4:	6858      	ldr	r0, [r3, #4]
 8002fc6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002fca:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002fce:	ebbc 0c00 	subs.w	ip, ip, r0
 8002fd2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002fd6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002fda:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002fde:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002fe2:	ebb1 010c 	subs.w	r1, r1, ip
 8002fe6:	eb63 030e 	sbc.w	r3, r3, lr
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff0:	00c9      	lsls	r1, r1, #3
 8002ff2:	eb11 0c00 	adds.w	ip, r1, r0
 8002ff6:	f143 0300 	adc.w	r3, r3, #0
 8002ffa:	0299      	lsls	r1, r3, #10
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003002:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003006:	f7fd f8e3 	bl	80001d0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800300a:	4b16      	ldr	r3, [pc, #88]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x17c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8003012:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003016:	e7a6      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x7e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003018:	4b12      	ldr	r3, [pc, #72]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x17c>)
 800301a:	6858      	ldr	r0, [r3, #4]
 800301c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003020:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003024:	ebbc 0c00 	subs.w	ip, ip, r0
 8003028:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800302c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003030:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003034:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003038:	ebb1 010c 	subs.w	r1, r1, ip
 800303c:	eb63 030e 	sbc.w	r3, r3, lr
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003046:	00c9      	lsls	r1, r1, #3
 8003048:	eb11 0c00 	adds.w	ip, r1, r0
 800304c:	f143 0300 	adc.w	r3, r3, #0
 8003050:	0299      	lsls	r1, r3, #10
 8003052:	2300      	movs	r3, #0
 8003054:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003058:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800305c:	f7fd f8b8 	bl	80001d0 <__aeabi_uldivmod>
 8003060:	e7d3      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x122>
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	00f42400 	.word	0x00f42400

0800306c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800306c:	2800      	cmp	r0, #0
 800306e:	f000 8201 	beq.w	8003474 <HAL_RCC_OscConfig+0x408>
{
 8003072:	b570      	push	{r4, r5, r6, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003078:	6803      	ldr	r3, [r0, #0]
 800307a:	f013 0f01 	tst.w	r3, #1
 800307e:	d041      	beq.n	8003104 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003080:	4b99      	ldr	r3, [pc, #612]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b04      	cmp	r3, #4
 800308a:	d032      	beq.n	80030f2 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800308c:	4b96      	ldr	r3, [pc, #600]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
        || \
 8003094:	2b08      	cmp	r3, #8
 8003096:	d027      	beq.n	80030e8 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003098:	4b93      	ldr	r3, [pc, #588]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d059      	beq.n	8003158 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a4:	6863      	ldr	r3, [r4, #4]
 80030a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030aa:	d05b      	beq.n	8003164 <HAL_RCC_OscConfig+0xf8>
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b0:	d05e      	beq.n	8003170 <HAL_RCC_OscConfig+0x104>
 80030b2:	4b8d      	ldr	r3, [pc, #564]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c4:	6863      	ldr	r3, [r4, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d05c      	beq.n	8003184 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe fbc5 	bl	8001858 <HAL_GetTick>
 80030ce:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d0:	4b85      	ldr	r3, [pc, #532]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030d8:	d114      	bne.n	8003104 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030da:	f7fe fbbd 	bl	8001858 <HAL_GetTick>
 80030de:	1b40      	subs	r0, r0, r5
 80030e0:	2864      	cmp	r0, #100	@ 0x64
 80030e2:	d9f5      	bls.n	80030d0 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 80030e4:	2003      	movs	r0, #3
 80030e6:	e1cc      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030e8:	4b7f      	ldr	r3, [pc, #508]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80030f0:	d0d2      	beq.n	8003098 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f2:	4b7d      	ldr	r3, [pc, #500]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030fa:	d003      	beq.n	8003104 <HAL_RCC_OscConfig+0x98>
 80030fc:	6863      	ldr	r3, [r4, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 81ba 	beq.w	8003478 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	f013 0f02 	tst.w	r3, #2
 800310a:	d060      	beq.n	80031ce <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800310c:	4b76      	ldr	r3, [pc, #472]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f013 0f0c 	tst.w	r3, #12
 8003114:	d04a      	beq.n	80031ac <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003116:	4b74      	ldr	r3, [pc, #464]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
        || \
 800311e:	2b08      	cmp	r3, #8
 8003120:	d03f      	beq.n	80031a2 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b71      	ldr	r3, [pc, #452]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d069      	beq.n	8003202 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800312e:	68e3      	ldr	r3, [r4, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d075      	beq.n	8003220 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003134:	4b6d      	ldr	r3, [pc, #436]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe fb8d 	bl	8001858 <HAL_GetTick>
 800313e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003140:	4b69      	ldr	r3, [pc, #420]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f013 0f02 	tst.w	r3, #2
 8003148:	d161      	bne.n	800320e <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe fb85 	bl	8001858 <HAL_GetTick>
 800314e:	1b40      	subs	r0, r0, r5
 8003150:	2802      	cmp	r0, #2
 8003152:	d9f5      	bls.n	8003140 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8003154:	2003      	movs	r0, #3
 8003156:	e194      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003158:	4b63      	ldr	r3, [pc, #396]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003160:	d0a0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x38>
 8003162:	e7c6      	b.n	80030f2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003164:	4a60      	ldr	r2, [pc, #384]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003166:	6813      	ldr	r3, [r2, #0]
 8003168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e7a9      	b.n	80030c4 <HAL_RCC_OscConfig+0x58>
 8003170:	4b5d      	ldr	r3, [pc, #372]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e79f      	b.n	80030c4 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8003184:	f7fe fb68 	bl	8001858 <HAL_GetTick>
 8003188:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	4b57      	ldr	r3, [pc, #348]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003192:	d0b7      	beq.n	8003104 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7fe fb60 	bl	8001858 <HAL_GetTick>
 8003198:	1b40      	subs	r0, r0, r5
 800319a:	2864      	cmp	r0, #100	@ 0x64
 800319c:	d9f5      	bls.n	800318a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800319e:	2003      	movs	r0, #3
 80031a0:	e16f      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031a2:	4b51      	ldr	r3, [pc, #324]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80031aa:	d1ba      	bne.n	8003122 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ac:	4b4e      	ldr	r3, [pc, #312]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f013 0f02 	tst.w	r3, #2
 80031b4:	d003      	beq.n	80031be <HAL_RCC_OscConfig+0x152>
 80031b6:	68e3      	ldr	r3, [r4, #12]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f040 815f 	bne.w	800347c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031be:	4a4a      	ldr	r2, [pc, #296]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80031c0:	6813      	ldr	r3, [r2, #0]
 80031c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031c6:	6921      	ldr	r1, [r4, #16]
 80031c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031cc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	f013 0f08 	tst.w	r3, #8
 80031d4:	d049      	beq.n	800326a <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031d6:	6963      	ldr	r3, [r4, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d033      	beq.n	8003244 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031dc:	4b43      	ldr	r3, [pc, #268]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 80031de:	2201      	movs	r2, #1
 80031e0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe fb38 	bl	8001858 <HAL_GetTick>
 80031e8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ea:	4b3f      	ldr	r3, [pc, #252]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80031ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ee:	f013 0f02 	tst.w	r3, #2
 80031f2:	d13a      	bne.n	800326a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fb30 	bl	8001858 <HAL_GetTick>
 80031f8:	1b40      	subs	r0, r0, r5
 80031fa:	2802      	cmp	r0, #2
 80031fc:	d9f5      	bls.n	80031ea <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 80031fe:	2003      	movs	r0, #3
 8003200:	e13f      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800320a:	d190      	bne.n	800312e <HAL_RCC_OscConfig+0xc2>
 800320c:	e7ce      	b.n	80031ac <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4a36      	ldr	r2, [pc, #216]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003216:	6921      	ldr	r1, [r4, #16]
 8003218:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e7d6      	b.n	80031ce <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003220:	4b32      	ldr	r3, [pc, #200]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003226:	f7fe fb17 	bl	8001858 <HAL_GetTick>
 800322a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322c:	4b2e      	ldr	r3, [pc, #184]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f013 0f02 	tst.w	r3, #2
 8003234:	d0cb      	beq.n	80031ce <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003236:	f7fe fb0f 	bl	8001858 <HAL_GetTick>
 800323a:	1b40      	subs	r0, r0, r5
 800323c:	2802      	cmp	r0, #2
 800323e:	d9f5      	bls.n	800322c <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8003240:	2003      	movs	r0, #3
 8003242:	e11e      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003244:	4b29      	ldr	r3, [pc, #164]	@ (80032ec <HAL_RCC_OscConfig+0x280>)
 8003246:	2200      	movs	r2, #0
 8003248:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324c:	f7fe fb04 	bl	8001858 <HAL_GetTick>
 8003250:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003252:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003256:	f013 0f02 	tst.w	r3, #2
 800325a:	d006      	beq.n	800326a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe fafc 	bl	8001858 <HAL_GetTick>
 8003260:	1b40      	subs	r0, r0, r5
 8003262:	2802      	cmp	r0, #2
 8003264:	d9f5      	bls.n	8003252 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8003266:	2003      	movs	r0, #3
 8003268:	e10b      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	f013 0f04 	tst.w	r3, #4
 8003270:	d076      	beq.n	8003360 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800327a:	d133      	bne.n	80032e4 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	2300      	movs	r3, #0
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 8003282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003284:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003294:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b16      	ldr	r3, [pc, #88]	@ (80032f0 <HAL_RCC_OscConfig+0x284>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800329e:	d029      	beq.n	80032f4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a0:	68a3      	ldr	r3, [r4, #8]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d03a      	beq.n	800331c <HAL_RCC_OscConfig+0x2b0>
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d03e      	beq.n	8003328 <HAL_RCC_OscConfig+0x2bc>
 80032aa:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80032ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	671a      	str	r2, [r3, #112]	@ 0x70
 80032b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032b6:	f022 0204 	bic.w	r2, r2, #4
 80032ba:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032bc:	68a3      	ldr	r3, [r4, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d03c      	beq.n	800333c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fe fac9 	bl	8001858 <HAL_GetTick>
 80032c6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032cc:	f013 0f02 	tst.w	r3, #2
 80032d0:	d145      	bne.n	800335e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe fac1 	bl	8001858 <HAL_GetTick>
 80032d6:	1b80      	subs	r0, r0, r6
 80032d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80032dc:	4298      	cmp	r0, r3
 80032de:	d9f3      	bls.n	80032c8 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 80032e0:	2003      	movs	r0, #3
 80032e2:	e0ce      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80032e4:	2500      	movs	r5, #0
 80032e6:	e7d6      	b.n	8003296 <HAL_RCC_OscConfig+0x22a>
 80032e8:	40023800 	.word	0x40023800
 80032ec:	42470000 	.word	0x42470000
 80032f0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f4:	4a6b      	ldr	r2, [pc, #428]	@ (80034a4 <HAL_RCC_OscConfig+0x438>)
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032fe:	f7fe faab 	bl	8001858 <HAL_GetTick>
 8003302:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b67      	ldr	r3, [pc, #412]	@ (80034a4 <HAL_RCC_OscConfig+0x438>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800330c:	d1c8      	bne.n	80032a0 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7fe faa3 	bl	8001858 <HAL_GetTick>
 8003312:	1b80      	subs	r0, r0, r6
 8003314:	2802      	cmp	r0, #2
 8003316:	d9f5      	bls.n	8003304 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8003318:	2003      	movs	r0, #3
 800331a:	e0b2      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331c:	4a62      	ldr	r2, [pc, #392]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 800331e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6713      	str	r3, [r2, #112]	@ 0x70
 8003326:	e7c9      	b.n	80032bc <HAL_RCC_OscConfig+0x250>
 8003328:	4b5f      	ldr	r3, [pc, #380]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 800332a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800332c:	f042 0204 	orr.w	r2, r2, #4
 8003330:	671a      	str	r2, [r3, #112]	@ 0x70
 8003332:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	671a      	str	r2, [r3, #112]	@ 0x70
 800333a:	e7bf      	b.n	80032bc <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe fa8c 	bl	8001858 <HAL_GetTick>
 8003340:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003342:	4b59      	ldr	r3, [pc, #356]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	f013 0f02 	tst.w	r3, #2
 800334a:	d008      	beq.n	800335e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe fa84 	bl	8001858 <HAL_GetTick>
 8003350:	1b80      	subs	r0, r0, r6
 8003352:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003356:	4298      	cmp	r0, r3
 8003358:	d9f3      	bls.n	8003342 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800335a:	2003      	movs	r0, #3
 800335c:	e091      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800335e:	b9ed      	cbnz	r5, 800339c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003360:	69a3      	ldr	r3, [r4, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 808c 	beq.w	8003480 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003368:	4a4f      	ldr	r2, [pc, #316]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 800336a:	6892      	ldr	r2, [r2, #8]
 800336c:	f002 020c 	and.w	r2, r2, #12
 8003370:	2a08      	cmp	r2, #8
 8003372:	d054      	beq.n	800341e <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003374:	2b02      	cmp	r3, #2
 8003376:	d017      	beq.n	80033a8 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003378:	4b4c      	ldr	r3, [pc, #304]	@ (80034ac <HAL_RCC_OscConfig+0x440>)
 800337a:	2200      	movs	r2, #0
 800337c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fe fa6b 	bl	8001858 <HAL_GetTick>
 8003382:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003384:	4b48      	ldr	r3, [pc, #288]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800338c:	d045      	beq.n	800341a <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe fa63 	bl	8001858 <HAL_GetTick>
 8003392:	1b00      	subs	r0, r0, r4
 8003394:	2802      	cmp	r0, #2
 8003396:	d9f5      	bls.n	8003384 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003398:	2003      	movs	r0, #3
 800339a:	e072      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800339c:	4a42      	ldr	r2, [pc, #264]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 800339e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a6:	e7db      	b.n	8003360 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80033a8:	4b40      	ldr	r3, [pc, #256]	@ (80034ac <HAL_RCC_OscConfig+0x440>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80033ae:	f7fe fa53 	bl	8001858 <HAL_GetTick>
 80033b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b4:	4b3c      	ldr	r3, [pc, #240]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80033bc:	d006      	beq.n	80033cc <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033be:	f7fe fa4b 	bl	8001858 <HAL_GetTick>
 80033c2:	1b40      	subs	r0, r0, r5
 80033c4:	2802      	cmp	r0, #2
 80033c6:	d9f5      	bls.n	80033b4 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 80033c8:	2003      	movs	r0, #3
 80033ca:	e05a      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033cc:	69e3      	ldr	r3, [r4, #28]
 80033ce:	6a22      	ldr	r2, [r4, #32]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80033d4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80033d8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	3a01      	subs	r2, #1
 80033de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80033e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80033e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80033ea:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80033ee:	4a2e      	ldr	r2, [pc, #184]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 80033f0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80033f2:	4b2e      	ldr	r3, [pc, #184]	@ (80034ac <HAL_RCC_OscConfig+0x440>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80033f8:	f7fe fa2e 	bl	8001858 <HAL_GetTick>
 80033fc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	4b2a      	ldr	r3, [pc, #168]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe fa26 	bl	8001858 <HAL_GetTick>
 800340c:	1b00      	subs	r0, r0, r4
 800340e:	2802      	cmp	r0, #2
 8003410:	d9f5      	bls.n	80033fe <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8003412:	2003      	movs	r0, #3
 8003414:	e035      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2000      	movs	r0, #0
 8003418:	e033      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
 800341a:	2000      	movs	r0, #0
 800341c:	e031      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800341e:	2b01      	cmp	r3, #1
 8003420:	d031      	beq.n	8003486 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8003422:	4b21      	ldr	r3, [pc, #132]	@ (80034a8 <HAL_RCC_OscConfig+0x43c>)
 8003424:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800342a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342c:	4291      	cmp	r1, r2
 800342e:	d12c      	bne.n	800348a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003430:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003434:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	428a      	cmp	r2, r1
 8003438:	d129      	bne.n	800348e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800343c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003440:	401a      	ands	r2, r3
 8003442:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003446:	d124      	bne.n	8003492 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003448:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800344c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800344e:	0852      	lsrs	r2, r2, #1
 8003450:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003452:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003456:	d11e      	bne.n	8003496 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003458:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800345c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003462:	d11a      	bne.n	800349a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003464:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8003468:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800346a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800346e:	d116      	bne.n	800349e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8003470:	2000      	movs	r0, #0
 8003472:	e006      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8003474:	2001      	movs	r0, #1
}
 8003476:	4770      	bx	lr
        return HAL_ERROR;
 8003478:	2001      	movs	r0, #1
 800347a:	e002      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003480:	2000      	movs	r0, #0
}
 8003482:	b002      	add	sp, #8
 8003484:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003486:	2001      	movs	r0, #1
 8003488:	e7fb      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
 800348c:	e7f9      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
 800348e:	2001      	movs	r0, #1
 8003490:	e7f7      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
 8003492:	2001      	movs	r0, #1
 8003494:	e7f5      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
 8003496:	2001      	movs	r0, #1
 8003498:	e7f3      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
 800349a:	2001      	movs	r0, #1
 800349c:	e7f1      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
 800349e:	2001      	movs	r0, #1
 80034a0:	e7ef      	b.n	8003482 <HAL_RCC_OscConfig+0x416>
 80034a2:	bf00      	nop
 80034a4:	40007000 	.word	0x40007000
 80034a8:	40023800 	.word	0x40023800
 80034ac:	42470000 	.word	0x42470000

080034b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	4605      	mov	r5, r0
 80034b8:	4688      	mov	r8, r1
 80034ba:	4617      	mov	r7, r2
 80034bc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034be:	f7fe f9cb 	bl	8001858 <HAL_GetTick>
 80034c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034c4:	1a1b      	subs	r3, r3, r0
 80034c6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80034ca:	f7fe f9c5 	bl	8001858 <HAL_GetTick>
 80034ce:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034d0:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80034d8:	fb09 f303 	mul.w	r3, r9, r3
 80034dc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	689c      	ldr	r4, [r3, #8]
 80034e2:	ea38 0404 	bics.w	r4, r8, r4
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	42bb      	cmp	r3, r7
 80034ee:	d03d      	beq.n	800356c <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80034f4:	d0f3      	beq.n	80034de <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034f6:	f7fe f9af 	bl	8001858 <HAL_GetTick>
 80034fa:	eba0 000a 	sub.w	r0, r0, sl
 80034fe:	4548      	cmp	r0, r9
 8003500:	d207      	bcs.n	8003512 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003502:	9a01      	ldr	r2, [sp, #4]
 8003504:	b102      	cbz	r2, 8003508 <SPI_WaitFlagStateUntilTimeout+0x58>
 8003506:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003508:	9b01      	ldr	r3, [sp, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	4691      	mov	r9, r2
 8003510:	e7e5      	b.n	80034de <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003512:	682a      	ldr	r2, [r5, #0]
 8003514:	6853      	ldr	r3, [r2, #4]
 8003516:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800351a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351c:	686b      	ldr	r3, [r5, #4]
 800351e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003522:	d00b      	beq.n	800353c <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003524:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800352a:	d014      	beq.n	8003556 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 800352c:	2301      	movs	r3, #1
 800352e:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003532:	2300      	movs	r3, #0
 8003534:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003538:	2003      	movs	r0, #3
 800353a:	e018      	b.n	800356e <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353c:	68ab      	ldr	r3, [r5, #8]
 800353e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003542:	d002      	beq.n	800354a <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003548:	d1ec      	bne.n	8003524 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 800354a:	682a      	ldr	r2, [r5, #0]
 800354c:	6813      	ldr	r3, [r2, #0]
 800354e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e7e6      	b.n	8003524 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8003556:	682a      	ldr	r2, [r5, #0]
 8003558:	6813      	ldr	r3, [r2, #0]
 800355a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	682a      	ldr	r2, [r5, #0]
 8003562:	6813      	ldr	r3, [r2, #0]
 8003564:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e7df      	b.n	800352c <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 800356c:	2000      	movs	r0, #0
}
 800356e:	b002      	add	sp, #8
 8003570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003574:	20000014 	.word	0x20000014

08003578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	4604      	mov	r4, r0
 800357e:	460d      	mov	r5, r1
 8003580:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003582:	9200      	str	r2, [sp, #0]
 8003584:	460b      	mov	r3, r1
 8003586:	2201      	movs	r2, #1
 8003588:	2102      	movs	r1, #2
 800358a:	f7ff ff91 	bl	80034b0 <SPI_WaitFlagStateUntilTimeout>
 800358e:	b9d0      	cbnz	r0, 80035c6 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003590:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <SPI_EndRxTxTransaction+0x78>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a17      	ldr	r2, [pc, #92]	@ (80035f4 <SPI_EndRxTxTransaction+0x7c>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0d5b      	lsrs	r3, r3, #21
 800359c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035a6:	6863      	ldr	r3, [r4, #4]
 80035a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ac:	d011      	beq.n	80035d2 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035ae:	9b03      	ldr	r3, [sp, #12]
 80035b0:	b13b      	cbz	r3, 80035c2 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 80035b2:	9b03      	ldr	r3, [sp, #12]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035c0:	d1f5      	bne.n	80035ae <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80035c2:	b004      	add	sp, #16
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035c8:	f043 0320 	orr.w	r3, r3, #32
 80035cc:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80035ce:	2003      	movs	r0, #3
 80035d0:	e7f7      	b.n	80035c2 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d2:	9600      	str	r6, [sp, #0]
 80035d4:	462b      	mov	r3, r5
 80035d6:	2200      	movs	r2, #0
 80035d8:	2180      	movs	r1, #128	@ 0x80
 80035da:	4620      	mov	r0, r4
 80035dc:	f7ff ff68 	bl	80034b0 <SPI_WaitFlagStateUntilTimeout>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d0ee      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035e6:	f043 0320 	orr.w	r3, r3, #32
 80035ea:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035ec:	2003      	movs	r0, #3
 80035ee:	e7e8      	b.n	80035c2 <SPI_EndRxTxTransaction+0x4a>
 80035f0:	20000014 	.word	0x20000014
 80035f4:	165e9f81 	.word	0x165e9f81

080035f8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d05a      	beq.n	80036b2 <HAL_SPI_Init+0xba>
{
 80035fc:	b510      	push	{r4, lr}
 80035fe:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003600:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003602:	b933      	cbnz	r3, 8003612 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003604:	6843      	ldr	r3, [r0, #4]
 8003606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800360a:	d005      	beq.n	8003618 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800360c:	2300      	movs	r3, #0
 800360e:	61c3      	str	r3, [r0, #28]
 8003610:	e002      	b.n	8003618 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003612:	2300      	movs	r3, #0
 8003614:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003616:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800361c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003620:	2b00      	cmp	r3, #0
 8003622:	d040      	beq.n	80036a6 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003624:	2302      	movs	r3, #2
 8003626:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	6813      	ldr	r3, [r2, #0]
 800362e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003632:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003634:	6863      	ldr	r3, [r4, #4]
 8003636:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 800363a:	68a2      	ldr	r2, [r4, #8]
 800363c:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8003640:	4313      	orrs	r3, r2
 8003642:	68e2      	ldr	r2, [r4, #12]
 8003644:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003648:	4313      	orrs	r3, r2
 800364a:	6922      	ldr	r2, [r4, #16]
 800364c:	f002 0202 	and.w	r2, r2, #2
 8003650:	4313      	orrs	r3, r2
 8003652:	6962      	ldr	r2, [r4, #20]
 8003654:	f002 0201 	and.w	r2, r2, #1
 8003658:	4313      	orrs	r3, r2
 800365a:	69a2      	ldr	r2, [r4, #24]
 800365c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003660:	4313      	orrs	r3, r2
 8003662:	69e2      	ldr	r2, [r4, #28]
 8003664:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003668:	4313      	orrs	r3, r2
 800366a:	6a22      	ldr	r2, [r4, #32]
 800366c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8003670:	4313      	orrs	r3, r2
 8003672:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003674:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003678:	6821      	ldr	r1, [r4, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800367e:	8b63      	ldrh	r3, [r4, #26]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003686:	f002 0210 	and.w	r2, r2, #16
 800368a:	6821      	ldr	r1, [r4, #0]
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	69d3      	ldr	r3, [r2, #28]
 8003694:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003698:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800369a:	2000      	movs	r0, #0
 800369c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800369e:	2301      	movs	r3, #1
 80036a0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80036a4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80036a6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80036aa:	4620      	mov	r0, r4
 80036ac:	f7fd fff2 	bl	8001694 <HAL_SPI_MspInit>
 80036b0:	e7b8      	b.n	8003624 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80036b2:	2001      	movs	r0, #1
}
 80036b4:	4770      	bx	lr

080036b6 <HAL_SPI_TransmitReceive>:
{
 80036b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036ba:	b083      	sub	sp, #12
 80036bc:	4604      	mov	r4, r0
 80036be:	4688      	mov	r8, r1
 80036c0:	4691      	mov	r9, r2
 80036c2:	461f      	mov	r7, r3
 80036c4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80036c6:	f7fe f8c7 	bl	8001858 <HAL_GetTick>
 80036ca:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80036cc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 80036d0:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d00b      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x38>
 80036d6:	b2d9      	uxtb	r1, r3
 80036d8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80036dc:	f040 8104 	bne.w	80038e8 <HAL_SPI_TransmitReceive+0x232>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036e0:	68a3      	ldr	r3, [r4, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 8104 	bne.w	80038f0 <HAL_SPI_TransmitReceive+0x23a>
 80036e8:	2904      	cmp	r1, #4
 80036ea:	f040 8103 	bne.w	80038f4 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036ee:	f1b8 0f00 	cmp.w	r8, #0
 80036f2:	f000 8101 	beq.w	80038f8 <HAL_SPI_TransmitReceive+0x242>
 80036f6:	f1b9 0f00 	cmp.w	r9, #0
 80036fa:	f000 80ff 	beq.w	80038fc <HAL_SPI_TransmitReceive+0x246>
 80036fe:	2f00      	cmp	r7, #0
 8003700:	f000 80fe 	beq.w	8003900 <HAL_SPI_TransmitReceive+0x24a>
  __HAL_LOCK(hspi);
 8003704:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003708:	2b01      	cmp	r3, #1
 800370a:	f000 80fb 	beq.w	8003904 <HAL_SPI_TransmitReceive+0x24e>
 800370e:	2301      	movs	r3, #1
 8003710:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003714:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003718:	2b04      	cmp	r3, #4
 800371a:	d002      	beq.n	8003722 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800371c:	2305      	movs	r3, #5
 800371e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003722:	2300      	movs	r3, #0
 8003724:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003726:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800372a:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800372c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800372e:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003732:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003734:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8003736:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003738:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003742:	d103      	bne.n	800374c <HAL_SPI_TransmitReceive+0x96>
    __HAL_SPI_ENABLE(hspi);
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800374a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800374c:	68e3      	ldr	r3, [r4, #12]
 800374e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003752:	d011      	beq.n	8003778 <HAL_SPI_TransmitReceive+0xc2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003754:	6863      	ldr	r3, [r4, #4]
 8003756:	b10b      	cbz	r3, 800375c <HAL_SPI_TransmitReceive+0xa6>
 8003758:	2f01      	cmp	r7, #1
 800375a:	d10b      	bne.n	8003774 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800375c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	7812      	ldrb	r2, [r2, #0]
 8003762:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003764:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003766:	3301      	adds	r3, #1
 8003768:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800376a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29b      	uxth	r3, r3
 8003772:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003774:	2701      	movs	r7, #1
 8003776:	e071      	b.n	800385c <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	b10b      	cbz	r3, 8003780 <HAL_SPI_TransmitReceive+0xca>
 800377c:	2f01      	cmp	r7, #1
 800377e:	d10b      	bne.n	8003798 <HAL_SPI_TransmitReceive+0xe2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003780:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	8812      	ldrh	r2, [r2, #0]
 8003786:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003788:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800378a:	3302      	adds	r3, #2
 800378c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800378e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29b      	uxth	r3, r3
 8003796:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003798:	2701      	movs	r7, #1
 800379a:	e01b      	b.n	80037d4 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	f012 0f01 	tst.w	r2, #1
 80037a4:	d00e      	beq.n	80037c4 <HAL_SPI_TransmitReceive+0x10e>
 80037a6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80037a8:	b292      	uxth	r2, r2
 80037aa:	b15a      	cbz	r2, 80037c4 <HAL_SPI_TransmitReceive+0x10e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80037b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80037b4:	3302      	adds	r3, #2
 80037b6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80037b8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29b      	uxth	r3, r3
 80037c0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80037c2:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037c4:	f7fe f848 	bl	8001858 <HAL_GetTick>
 80037c8:	1b80      	subs	r0, r0, r6
 80037ca:	42a8      	cmp	r0, r5
 80037cc:	d302      	bcc.n	80037d4 <HAL_SPI_TransmitReceive+0x11e>
 80037ce:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037d2:	d11e      	bne.n	8003812 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037d4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	b91b      	cbnz	r3, 80037e2 <HAL_SPI_TransmitReceive+0x12c>
 80037da:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d062      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	f012 0f02 	tst.w	r2, #2
 80037ea:	d0d7      	beq.n	800379c <HAL_SPI_TransmitReceive+0xe6>
 80037ec:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80037ee:	b292      	uxth	r2, r2
 80037f0:	2a00      	cmp	r2, #0
 80037f2:	d0d3      	beq.n	800379c <HAL_SPI_TransmitReceive+0xe6>
 80037f4:	2f00      	cmp	r7, #0
 80037f6:	d0d1      	beq.n	800379c <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037f8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80037fa:	8812      	ldrh	r2, [r2, #0]
 80037fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003800:	3302      	adds	r3, #2
 8003802:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003804:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29b      	uxth	r3, r3
 800380c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800380e:	2700      	movs	r7, #0
 8003810:	e7c4      	b.n	800379c <HAL_SPI_TransmitReceive+0xe6>
        hspi->State = HAL_SPI_STATE_READY;
 8003812:	2301      	movs	r3, #1
 8003814:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003818:	2300      	movs	r3, #0
 800381a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 800381e:	2003      	movs	r0, #3
 8003820:	e063      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	f012 0f01 	tst.w	r2, #1
 800382a:	d00e      	beq.n	800384a <HAL_SPI_TransmitReceive+0x194>
 800382c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800382e:	b292      	uxth	r2, r2
 8003830:	b15a      	cbz	r2, 800384a <HAL_SPI_TransmitReceive+0x194>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003838:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800383a:	3301      	adds	r3, #1
 800383c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800383e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29b      	uxth	r3, r3
 8003846:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003848:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800384a:	f7fe f805 	bl	8001858 <HAL_GetTick>
 800384e:	1b83      	subs	r3, r0, r6
 8003850:	42ab      	cmp	r3, r5
 8003852:	d302      	bcc.n	800385a <HAL_SPI_TransmitReceive+0x1a4>
 8003854:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003858:	d11e      	bne.n	8003898 <HAL_SPI_TransmitReceive+0x1e2>
 800385a:	b1ed      	cbz	r5, 8003898 <HAL_SPI_TransmitReceive+0x1e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800385c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800385e:	b29b      	uxth	r3, r3
 8003860:	b913      	cbnz	r3, 8003868 <HAL_SPI_TransmitReceive+0x1b2>
 8003862:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003864:	b29b      	uxth	r3, r3
 8003866:	b1fb      	cbz	r3, 80038a8 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	f012 0f02 	tst.w	r2, #2
 8003870:	d0d7      	beq.n	8003822 <HAL_SPI_TransmitReceive+0x16c>
 8003872:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003874:	b292      	uxth	r2, r2
 8003876:	2a00      	cmp	r2, #0
 8003878:	d0d3      	beq.n	8003822 <HAL_SPI_TransmitReceive+0x16c>
 800387a:	2f00      	cmp	r7, #0
 800387c:	d0d1      	beq.n	8003822 <HAL_SPI_TransmitReceive+0x16c>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800387e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003880:	7812      	ldrb	r2, [r2, #0]
 8003882:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003884:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003886:	3301      	adds	r3, #1
 8003888:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800388a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29b      	uxth	r3, r3
 8003892:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003894:	2700      	movs	r7, #0
 8003896:	e7c4      	b.n	8003822 <HAL_SPI_TransmitReceive+0x16c>
        hspi->State = HAL_SPI_STATE_READY;
 8003898:	2301      	movs	r3, #1
 800389a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800389e:	2300      	movs	r3, #0
 80038a0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80038a4:	2003      	movs	r0, #3
 80038a6:	e020      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038a8:	4632      	mov	r2, r6
 80038aa:	4629      	mov	r1, r5
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7ff fe63 	bl	8003578 <SPI_EndRxTxTransaction>
 80038b2:	b990      	cbnz	r0, 80038da <HAL_SPI_TransmitReceive+0x224>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038b4:	68a3      	ldr	r3, [r4, #8]
 80038b6:	b933      	cbnz	r3, 80038c6 <HAL_SPI_TransmitReceive+0x210>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	9201      	str	r2, [sp, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80038cc:	2300      	movs	r3, #0
 80038ce:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80038d4:	b14b      	cbz	r3, 80038ea <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 80038d6:	2001      	movs	r0, #1
 80038d8:	e007      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038da:	2320      	movs	r3, #32
 80038dc:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80038de:	2300      	movs	r3, #0
 80038e0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80038e4:	2001      	movs	r0, #1
 80038e6:	e000      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>
    return HAL_BUSY;
 80038e8:	2002      	movs	r0, #2
}
 80038ea:	b003      	add	sp, #12
 80038ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80038f0:	2002      	movs	r0, #2
 80038f2:	e7fa      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>
 80038f4:	2002      	movs	r0, #2
 80038f6:	e7f8      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 80038f8:	2001      	movs	r0, #1
 80038fa:	e7f6      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>
 80038fc:	2001      	movs	r0, #1
 80038fe:	e7f4      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>
 8003900:	2001      	movs	r0, #1
 8003902:	e7f2      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>
  __HAL_LOCK(hspi);
 8003904:	2002      	movs	r0, #2
 8003906:	e7f0      	b.n	80038ea <HAL_SPI_TransmitReceive+0x234>

08003908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390c:	6a02      	ldr	r2, [r0, #32]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003914:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003916:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003918:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800391c:	680c      	ldr	r4, [r1, #0]
 800391e:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003922:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003926:	688b      	ldr	r3, [r1, #8]
 8003928:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800392c:	4d11      	ldr	r5, [pc, #68]	@ (8003974 <TIM_OC1_SetConfig+0x6c>)
 800392e:	42a8      	cmp	r0, r5
 8003930:	d003      	beq.n	800393a <TIM_OC1_SetConfig+0x32>
 8003932:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003936:	42a8      	cmp	r0, r5
 8003938:	d105      	bne.n	8003946 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800393a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800393e:	68cd      	ldr	r5, [r1, #12]
 8003940:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003942:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003946:	4d0b      	ldr	r5, [pc, #44]	@ (8003974 <TIM_OC1_SetConfig+0x6c>)
 8003948:	42a8      	cmp	r0, r5
 800394a:	d003      	beq.n	8003954 <TIM_OC1_SetConfig+0x4c>
 800394c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003950:	42a8      	cmp	r0, r5
 8003952:	d107      	bne.n	8003964 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003954:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003958:	694d      	ldr	r5, [r1, #20]
 800395a:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800395e:	698a      	ldr	r2, [r1, #24]
 8003960:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003964:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003966:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003968:	684a      	ldr	r2, [r1, #4]
 800396a:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396c:	6203      	str	r3, [r0, #32]
}
 800396e:	bc30      	pop	{r4, r5}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000

08003978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800397c:	6a02      	ldr	r2, [r0, #32]
 800397e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003982:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003984:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003986:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003988:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800398c:	680c      	ldr	r4, [r1, #0]
 800398e:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003992:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003996:	688c      	ldr	r4, [r1, #8]
 8003998:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800399c:	4c11      	ldr	r4, [pc, #68]	@ (80039e4 <TIM_OC3_SetConfig+0x6c>)
 800399e:	42a0      	cmp	r0, r4
 80039a0:	d003      	beq.n	80039aa <TIM_OC3_SetConfig+0x32>
 80039a2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80039a6:	42a0      	cmp	r0, r4
 80039a8:	d106      	bne.n	80039b8 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ae:	68cc      	ldr	r4, [r1, #12]
 80039b0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b8:	4c0a      	ldr	r4, [pc, #40]	@ (80039e4 <TIM_OC3_SetConfig+0x6c>)
 80039ba:	42a0      	cmp	r0, r4
 80039bc:	d003      	beq.n	80039c6 <TIM_OC3_SetConfig+0x4e>
 80039be:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80039c2:	42a0      	cmp	r0, r4
 80039c4:	d107      	bne.n	80039d6 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039c6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ca:	694c      	ldr	r4, [r1, #20]
 80039cc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039d0:	698c      	ldr	r4, [r1, #24]
 80039d2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d8:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039da:	684a      	ldr	r2, [r1, #4]
 80039dc:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039de:	6203      	str	r3, [r0, #32]
}
 80039e0:	bc30      	pop	{r4, r5}
 80039e2:	4770      	bx	lr
 80039e4:	40010000 	.word	0x40010000

080039e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ec:	6a02      	ldr	r2, [r0, #32]
 80039ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039f2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039f8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	680d      	ldr	r5, [r1, #0]
 80039fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a06:	688d      	ldr	r5, [r1, #8]
 8003a08:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	4d09      	ldr	r5, [pc, #36]	@ (8003a34 <TIM_OC4_SetConfig+0x4c>)
 8003a0e:	42a8      	cmp	r0, r5
 8003a10:	d003      	beq.n	8003a1a <TIM_OC4_SetConfig+0x32>
 8003a12:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003a16:	42a8      	cmp	r0, r5
 8003a18:	d104      	bne.n	8003a24 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a1a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a1e:	694d      	ldr	r5, [r1, #20]
 8003a20:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a24:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a26:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a28:	684a      	ldr	r2, [r1, #4]
 8003a2a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2c:	6203      	str	r3, [r0, #32]
}
 8003a2e:	bc30      	pop	{r4, r5}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40010000 	.word	0x40010000

08003a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a38:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a3a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3c:	6a04      	ldr	r4, [r0, #32]
 8003a3e:	f024 0401 	bic.w	r4, r4, #1
 8003a42:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a44:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a46:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a4a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a4e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003a52:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a54:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a56:	6203      	str	r3, [r0, #32]
}
 8003a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a60:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a62:	6a04      	ldr	r4, [r0, #32]
 8003a64:	f024 0410 	bic.w	r4, r4, #16
 8003a68:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a6c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a70:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a78:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a7c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a7e:	6203      	str	r3, [r0, #32]
}
 8003a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a86:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a92:	6083      	str	r3, [r0, #8]
}
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003a98:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d137      	bne.n	8003b10 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa6:	6802      	ldr	r2, [r0, #0]
 8003aa8:	68d3      	ldr	r3, [r2, #12]
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab0:	6803      	ldr	r3, [r0, #0]
 8003ab2:	4a19      	ldr	r2, [pc, #100]	@ (8003b18 <HAL_TIM_Base_Start_IT+0x80>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d020      	beq.n	8003afa <HAL_TIM_Base_Start_IT+0x62>
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abc:	d01d      	beq.n	8003afa <HAL_TIM_Base_Start_IT+0x62>
 8003abe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d019      	beq.n	8003afa <HAL_TIM_Base_Start_IT+0x62>
 8003ac6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d015      	beq.n	8003afa <HAL_TIM_Base_Start_IT+0x62>
 8003ace:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d011      	beq.n	8003afa <HAL_TIM_Base_Start_IT+0x62>
 8003ad6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00d      	beq.n	8003afa <HAL_TIM_Base_Start_IT+0x62>
 8003ade:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_TIM_Base_Start_IT+0x62>
 8003ae6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d005      	beq.n	8003afa <HAL_TIM_Base_Start_IT+0x62>
    __HAL_TIM_ENABLE(htim);
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003af6:	2000      	movs	r0, #0
 8003af8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b00:	2a06      	cmp	r2, #6
 8003b02:	d007      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	4770      	bx	lr
    return HAL_ERROR;
 8003b10:	2001      	movs	r0, #1
 8003b12:	4770      	bx	lr
  return HAL_OK;
 8003b14:	2000      	movs	r0, #0
}
 8003b16:	4770      	bx	lr
 8003b18:	40010000 	.word	0x40010000

08003b1c <HAL_TIM_PWM_MspInit>:
}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_IC_CaptureCallback>:
}
 8003b20:	4770      	bx	lr

08003b22 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIM_TriggerCallback>:
}
 8003b24:	4770      	bx	lr

08003b26 <HAL_TIM_IRQHandler>:
{
 8003b26:	b570      	push	{r4, r5, r6, lr}
 8003b28:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8003b2a:	6803      	ldr	r3, [r0, #0]
 8003b2c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b2e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b30:	f015 0f02 	tst.w	r5, #2
 8003b34:	d010      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b36:	f016 0f02 	tst.w	r6, #2
 8003b3a:	d00d      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b3c:	f06f 0202 	mvn.w	r2, #2
 8003b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b46:	6803      	ldr	r3, [r0, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f013 0f03 	tst.w	r3, #3
 8003b4e:	d05e      	beq.n	8003c0e <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b50:	f7ff ffe6 	bl	8003b20 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b54:	2300      	movs	r3, #0
 8003b56:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b58:	f015 0f04 	tst.w	r5, #4
 8003b5c:	d012      	beq.n	8003b84 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b5e:	f016 0f04 	tst.w	r6, #4
 8003b62:	d00f      	beq.n	8003b84 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	f06f 0204 	mvn.w	r2, #4
 8003b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003b78:	d04f      	beq.n	8003c1a <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7ff ffd0 	bl	8003b20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b80:	2300      	movs	r3, #0
 8003b82:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b84:	f015 0f08 	tst.w	r5, #8
 8003b88:	d012      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b8a:	f016 0f08 	tst.w	r6, #8
 8003b8e:	d00f      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	f06f 0208 	mvn.w	r2, #8
 8003b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b98:	2304      	movs	r3, #4
 8003b9a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f013 0f03 	tst.w	r3, #3
 8003ba4:	d040      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f7ff ffba 	bl	8003b20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bac:	2300      	movs	r3, #0
 8003bae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb0:	f015 0f10 	tst.w	r5, #16
 8003bb4:	d012      	beq.n	8003bdc <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bb6:	f016 0f10 	tst.w	r6, #16
 8003bba:	d00f      	beq.n	8003bdc <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	f06f 0210 	mvn.w	r2, #16
 8003bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc4:	2308      	movs	r3, #8
 8003bc6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003bd0:	d031      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7ff ffa4 	bl	8003b20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bdc:	f015 0f01 	tst.w	r5, #1
 8003be0:	d002      	beq.n	8003be8 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003be2:	f016 0f01 	tst.w	r6, #1
 8003be6:	d12d      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003be8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003bec:	d002      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bee:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003bf2:	d12f      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bf4:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8003bf8:	d002      	beq.n	8003c00 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bfa:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003bfe:	d131      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c00:	f015 0f20 	tst.w	r5, #32
 8003c04:	d002      	beq.n	8003c0c <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c06:	f016 0f20 	tst.w	r6, #32
 8003c0a:	d133      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x14e>
}
 8003c0c:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	f7ff ff86 	bl	8003b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7ff ff85 	bl	8003b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c18:	e79c      	b.n	8003b54 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff ff7f 	bl	8003b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff ff7e 	bl	8003b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c26:	e7ab      	b.n	8003b80 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7ff ff78 	bl	8003b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff ff77 	bl	8003b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c34:	e7ba      	b.n	8003bac <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7ff ff71 	bl	8003b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7ff ff70 	bl	8003b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c42:	e7c9      	b.n	8003bd8 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	f06f 0201 	mvn.w	r2, #1
 8003c4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f7fd fabf 	bl	80011d0 <HAL_TIM_PeriodElapsedCallback>
 8003c52:	e7c9      	b.n	8003be8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f000 fc35 	bl	80044cc <HAL_TIMEx_BreakCallback>
 8003c62:	e7c7      	b.n	8003bf4 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c6a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff ff59 	bl	8003b24 <HAL_TIM_TriggerCallback>
 8003c72:	e7c5      	b.n	8003c00 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	f06f 0220 	mvn.w	r2, #32
 8003c7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f000 fc24 	bl	80044ca <HAL_TIMEx_CommutCallback>
}
 8003c82:	e7c3      	b.n	8003c0c <HAL_TIM_IRQHandler+0xe6>

08003c84 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003c84:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c86:	4a34      	ldr	r2, [pc, #208]	@ (8003d58 <TIM_Base_SetConfig+0xd4>)
 8003c88:	4290      	cmp	r0, r2
 8003c8a:	d012      	beq.n	8003cb2 <TIM_Base_SetConfig+0x2e>
 8003c8c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003c90:	d00f      	beq.n	8003cb2 <TIM_Base_SetConfig+0x2e>
 8003c92:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003c96:	4290      	cmp	r0, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x2e>
 8003c9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c9e:	4290      	cmp	r0, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_Base_SetConfig+0x2e>
 8003ca2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ca6:	4290      	cmp	r0, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_Base_SetConfig+0x2e>
 8003caa:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003cae:	4290      	cmp	r0, r2
 8003cb0:	d103      	bne.n	8003cba <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003cb6:	684a      	ldr	r2, [r1, #4]
 8003cb8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cba:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <TIM_Base_SetConfig+0xd4>)
 8003cbc:	4290      	cmp	r0, r2
 8003cbe:	d02a      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003cc0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003cc4:	d027      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003cc6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003cca:	4290      	cmp	r0, r2
 8003ccc:	d023      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003cce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cd2:	4290      	cmp	r0, r2
 8003cd4:	d01f      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003cd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cda:	4290      	cmp	r0, r2
 8003cdc:	d01b      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003cde:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003ce2:	4290      	cmp	r0, r2
 8003ce4:	d017      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003ce6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003cea:	4290      	cmp	r0, r2
 8003cec:	d013      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003cee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cf2:	4290      	cmp	r0, r2
 8003cf4:	d00f      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003cf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003cfa:	4290      	cmp	r0, r2
 8003cfc:	d00b      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003cfe:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8003d02:	4290      	cmp	r0, r2
 8003d04:	d007      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003d06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003d0a:	4290      	cmp	r0, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_Base_SetConfig+0x92>
 8003d0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003d12:	4290      	cmp	r0, r2
 8003d14:	d103      	bne.n	8003d1e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d1a:	68ca      	ldr	r2, [r1, #12]
 8003d1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d22:	694a      	ldr	r2, [r1, #20]
 8003d24:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d28:	688b      	ldr	r3, [r1, #8]
 8003d2a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d2c:	680b      	ldr	r3, [r1, #0]
 8003d2e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <TIM_Base_SetConfig+0xd4>)
 8003d32:	4298      	cmp	r0, r3
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0xba>
 8003d36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d3a:	4298      	cmp	r0, r3
 8003d3c:	d101      	bne.n	8003d42 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3e:	690b      	ldr	r3, [r1, #16]
 8003d40:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003d42:	2301      	movs	r3, #1
 8003d44:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d46:	6903      	ldr	r3, [r0, #16]
 8003d48:	f013 0f01 	tst.w	r3, #1
 8003d4c:	d003      	beq.n	8003d56 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d4e:	6903      	ldr	r3, [r0, #16]
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	6103      	str	r3, [r0, #16]
}
 8003d56:	4770      	bx	lr
 8003d58:	40010000 	.word	0x40010000

08003d5c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003d5c:	b340      	cbz	r0, 8003db0 <HAL_TIM_Base_Init+0x54>
{
 8003d5e:	b510      	push	{r4, lr}
 8003d60:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003d66:	b1f3      	cbz	r3, 8003da6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6e:	4621      	mov	r1, r4
 8003d70:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d74:	f7ff ff86 	bl	8003c84 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003d82:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003d86:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003d8a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d96:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003d9a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d9e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003da2:	2000      	movs	r0, #0
}
 8003da4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003da6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003daa:	f001 fc9d 	bl	80056e8 <HAL_TIM_Base_MspInit>
 8003dae:	e7db      	b.n	8003d68 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003db0:	2001      	movs	r0, #1
}
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003db4:	b340      	cbz	r0, 8003e08 <HAL_TIM_PWM_Init+0x54>
{
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003dbe:	b1f3      	cbz	r3, 8003dfe <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	f851 0b04 	ldr.w	r0, [r1], #4
 8003dcc:	f7ff ff5a 	bl	8003c84 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003dda:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003dde:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003de2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003df2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003df6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003dfa:	2000      	movs	r0, #0
}
 8003dfc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003dfe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003e02:	f7ff fe8b 	bl	8003b1c <HAL_TIM_PWM_MspInit>
 8003e06:	e7db      	b.n	8003dc0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003e08:	2001      	movs	r0, #1
}
 8003e0a:	4770      	bx	lr

08003e0c <TIM_OC2_SetConfig>:
{
 8003e0c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003e0e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e10:	6a02      	ldr	r2, [r0, #32]
 8003e12:	f022 0210 	bic.w	r2, r2, #16
 8003e16:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003e18:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e1a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e1c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e20:	680d      	ldr	r5, [r1, #0]
 8003e22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003e26:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e2a:	688d      	ldr	r5, [r1, #8]
 8003e2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e30:	4d11      	ldr	r5, [pc, #68]	@ (8003e78 <TIM_OC2_SetConfig+0x6c>)
 8003e32:	42a8      	cmp	r0, r5
 8003e34:	d003      	beq.n	8003e3e <TIM_OC2_SetConfig+0x32>
 8003e36:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e3a:	42a8      	cmp	r0, r5
 8003e3c:	d106      	bne.n	8003e4c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e42:	68cd      	ldr	r5, [r1, #12]
 8003e44:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4c:	4d0a      	ldr	r5, [pc, #40]	@ (8003e78 <TIM_OC2_SetConfig+0x6c>)
 8003e4e:	42a8      	cmp	r0, r5
 8003e50:	d003      	beq.n	8003e5a <TIM_OC2_SetConfig+0x4e>
 8003e52:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e56:	42a8      	cmp	r0, r5
 8003e58:	d107      	bne.n	8003e6a <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e5a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e5e:	694d      	ldr	r5, [r1, #20]
 8003e60:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e64:	698d      	ldr	r5, [r1, #24]
 8003e66:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003e6a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e6c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003e6e:	684a      	ldr	r2, [r1, #4]
 8003e70:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003e72:	6203      	str	r3, [r0, #32]
}
 8003e74:	bc30      	pop	{r4, r5}
 8003e76:	4770      	bx	lr
 8003e78:	40010000 	.word	0x40010000

08003e7c <HAL_TIM_PWM_ConfigChannel>:
{
 8003e7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003e7e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d066      	beq.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003e86:	4604      	mov	r4, r0
 8003e88:	460d      	mov	r5, r1
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003e90:	2a0c      	cmp	r2, #12
 8003e92:	d85a      	bhi.n	8003f4a <HAL_TIM_PWM_ConfigChannel+0xce>
 8003e94:	e8df f002 	tbb	[pc, r2]
 8003e98:	59595907 	.word	0x59595907
 8003e9c:	5959591b 	.word	0x5959591b
 8003ea0:	59595930 	.word	0x59595930
 8003ea4:	44          	.byte	0x44
 8003ea5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea6:	6800      	ldr	r0, [r0, #0]
 8003ea8:	f7ff fd2e 	bl	8003908 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eac:	6822      	ldr	r2, [r4, #0]
 8003eae:	6993      	ldr	r3, [r2, #24]
 8003eb0:	f043 0308 	orr.w	r3, r3, #8
 8003eb4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	6993      	ldr	r3, [r2, #24]
 8003eba:	f023 0304 	bic.w	r3, r3, #4
 8003ebe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	6993      	ldr	r3, [r2, #24]
 8003ec4:	6929      	ldr	r1, [r5, #16]
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2000      	movs	r0, #0
      break;
 8003ecc:	e03e      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ece:	6800      	ldr	r0, [r0, #0]
 8003ed0:	f7ff ff9c 	bl	8003e0c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	6993      	ldr	r3, [r2, #24]
 8003ed8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003edc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	6993      	ldr	r3, [r2, #24]
 8003ee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	6993      	ldr	r3, [r2, #24]
 8003eec:	6929      	ldr	r1, [r5, #16]
 8003eee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ef2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef4:	2000      	movs	r0, #0
      break;
 8003ef6:	e029      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ef8:	6800      	ldr	r0, [r0, #0]
 8003efa:	f7ff fd3d 	bl	8003978 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	69d3      	ldr	r3, [r2, #28]
 8003f02:	f043 0308 	orr.w	r3, r3, #8
 8003f06:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	69d3      	ldr	r3, [r2, #28]
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	69d3      	ldr	r3, [r2, #28]
 8003f16:	6929      	ldr	r1, [r5, #16]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2000      	movs	r0, #0
      break;
 8003f1e:	e015      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f20:	6800      	ldr	r0, [r0, #0]
 8003f22:	f7ff fd61 	bl	80039e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f26:	6822      	ldr	r2, [r4, #0]
 8003f28:	69d3      	ldr	r3, [r2, #28]
 8003f2a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f2e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f30:	6822      	ldr	r2, [r4, #0]
 8003f32:	69d3      	ldr	r3, [r2, #28]
 8003f34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f38:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	69d3      	ldr	r3, [r2, #28]
 8003f3e:	6929      	ldr	r1, [r5, #16]
 8003f40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f44:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2000      	movs	r0, #0
      break;
 8003f48:	e000      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003f4a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003f54:	2002      	movs	r0, #2
 8003f56:	e7fc      	b.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003f58 <TIM_TI1_SetConfig>:
{
 8003f58:	b470      	push	{r4, r5, r6}
 8003f5a:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 8003f5c:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5e:	6a04      	ldr	r4, [r0, #32]
 8003f60:	f024 0401 	bic.w	r4, r4, #1
 8003f64:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f66:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f68:	4d18      	ldr	r5, [pc, #96]	@ (8003fcc <TIM_TI1_SetConfig+0x74>)
 8003f6a:	42a8      	cmp	r0, r5
 8003f6c:	d01c      	beq.n	8003fa8 <TIM_TI1_SetConfig+0x50>
 8003f6e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003f72:	d019      	beq.n	8003fa8 <TIM_TI1_SetConfig+0x50>
 8003f74:	4a16      	ldr	r2, [pc, #88]	@ (8003fd0 <TIM_TI1_SetConfig+0x78>)
 8003f76:	4290      	cmp	r0, r2
 8003f78:	d016      	beq.n	8003fa8 <TIM_TI1_SetConfig+0x50>
 8003f7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f7e:	4290      	cmp	r0, r2
 8003f80:	d012      	beq.n	8003fa8 <TIM_TI1_SetConfig+0x50>
 8003f82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f86:	4290      	cmp	r0, r2
 8003f88:	d00e      	beq.n	8003fa8 <TIM_TI1_SetConfig+0x50>
 8003f8a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003f8e:	4290      	cmp	r0, r2
 8003f90:	d00a      	beq.n	8003fa8 <TIM_TI1_SetConfig+0x50>
 8003f92:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003f96:	4290      	cmp	r0, r2
 8003f98:	d006      	beq.n	8003fa8 <TIM_TI1_SetConfig+0x50>
 8003f9a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003f9e:	4290      	cmp	r0, r2
 8003fa0:	d002      	beq.n	8003fa8 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fa2:	f044 0201 	orr.w	r2, r4, #1
 8003fa6:	e003      	b.n	8003fb0 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fa8:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003fac:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fba:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fbe:	f001 010a 	and.w	r1, r1, #10
 8003fc2:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8003fc4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003fc6:	6201      	str	r1, [r0, #32]
}
 8003fc8:	bc70      	pop	{r4, r5, r6}
 8003fca:	4770      	bx	lr
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40000400 	.word	0x40000400

08003fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fd4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fd6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd8:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fdc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe6:	6082      	str	r2, [r0, #8]
}
 8003fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003fee:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d078      	beq.n	80040e8 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	2302      	movs	r3, #2
 8004002:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004006:	6802      	ldr	r2, [r0, #0]
 8004008:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800400e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004012:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004014:	680b      	ldr	r3, [r1, #0]
 8004016:	2b60      	cmp	r3, #96	@ 0x60
 8004018:	d04c      	beq.n	80040b4 <HAL_TIM_ConfigClockSource+0xc6>
 800401a:	d823      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x76>
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	d054      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0xdc>
 8004020:	d811      	bhi.n	8004046 <HAL_TIM_ConfigClockSource+0x58>
 8004022:	2b20      	cmp	r3, #32
 8004024:	d003      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x40>
 8004026:	d80a      	bhi.n	800403e <HAL_TIM_ConfigClockSource+0x50>
 8004028:	b10b      	cbz	r3, 800402e <HAL_TIM_ConfigClockSource+0x40>
 800402a:	2b10      	cmp	r3, #16
 800402c:	d105      	bne.n	800403a <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800402e:	4619      	mov	r1, r3
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	f7ff fd28 	bl	8003a86 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2000      	movs	r0, #0
      break;
 8004038:	e028      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800403a:	2001      	movs	r0, #1
 800403c:	e026      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800403e:	2b30      	cmp	r3, #48	@ 0x30
 8004040:	d0f5      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8004042:	2001      	movs	r0, #1
 8004044:	e022      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004046:	2b50      	cmp	r3, #80	@ 0x50
 8004048:	d10a      	bne.n	8004060 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	68ca      	ldr	r2, [r1, #12]
 800404c:	6849      	ldr	r1, [r1, #4]
 800404e:	6800      	ldr	r0, [r0, #0]
 8004050:	f7ff fcf2 	bl	8003a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004054:	2150      	movs	r1, #80	@ 0x50
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	f7ff fd15 	bl	8003a86 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2000      	movs	r0, #0
      break;
 800405e:	e015      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8004060:	2001      	movs	r0, #1
 8004062:	e013      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004068:	d03a      	beq.n	80040e0 <HAL_TIM_ConfigClockSource+0xf2>
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406e:	d014      	beq.n	800409a <HAL_TIM_ConfigClockSource+0xac>
 8004070:	2b70      	cmp	r3, #112	@ 0x70
 8004072:	d137      	bne.n	80040e4 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004074:	68cb      	ldr	r3, [r1, #12]
 8004076:	684a      	ldr	r2, [r1, #4]
 8004078:	6889      	ldr	r1, [r1, #8]
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	f7ff ffaa 	bl	8003fd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004080:	6822      	ldr	r2, [r4, #0]
 8004082:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004088:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800408a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800408c:	2301      	movs	r3, #1
 800408e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004092:	2300      	movs	r3, #0
 8004094:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004098:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800409a:	68cb      	ldr	r3, [r1, #12]
 800409c:	684a      	ldr	r2, [r1, #4]
 800409e:	6889      	ldr	r1, [r1, #8]
 80040a0:	6800      	ldr	r0, [r0, #0]
 80040a2:	f7ff ff97 	bl	8003fd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	6893      	ldr	r3, [r2, #8]
 80040aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040ae:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040b0:	2000      	movs	r0, #0
      break;
 80040b2:	e7eb      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040b4:	68ca      	ldr	r2, [r1, #12]
 80040b6:	6849      	ldr	r1, [r1, #4]
 80040b8:	6800      	ldr	r0, [r0, #0]
 80040ba:	f7ff fcd0 	bl	8003a5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040be:	2160      	movs	r1, #96	@ 0x60
 80040c0:	6820      	ldr	r0, [r4, #0]
 80040c2:	f7ff fce0 	bl	8003a86 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2000      	movs	r0, #0
      break;
 80040c8:	e7e0      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	68ca      	ldr	r2, [r1, #12]
 80040cc:	6849      	ldr	r1, [r1, #4]
 80040ce:	6800      	ldr	r0, [r0, #0]
 80040d0:	f7ff fcb2 	bl	8003a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040d4:	2140      	movs	r1, #64	@ 0x40
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	f7ff fcd5 	bl	8003a86 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80040dc:	2000      	movs	r0, #0
      break;
 80040de:	e7d5      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80040e0:	2000      	movs	r0, #0
 80040e2:	e7d3      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80040e4:	2001      	movs	r0, #1
 80040e6:	e7d1      	b.n	800408c <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 80040e8:	2002      	movs	r0, #2
}
 80040ea:	4770      	bx	lr

080040ec <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040ec:	f001 011f 	and.w	r1, r1, #31
 80040f0:	f04f 0c01 	mov.w	ip, #1
 80040f4:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040f8:	6a03      	ldr	r3, [r0, #32]
 80040fa:	ea23 030c 	bic.w	r3, r3, ip
 80040fe:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004100:	6a03      	ldr	r3, [r0, #32]
 8004102:	408a      	lsls	r2, r1
 8004104:	4313      	orrs	r3, r2
 8004106:	6203      	str	r3, [r0, #32]
}
 8004108:	4770      	bx	lr
	...

0800410c <HAL_TIM_PWM_Start>:
{
 800410c:	b510      	push	{r4, lr}
 800410e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004110:	4608      	mov	r0, r1
 8004112:	2900      	cmp	r1, #0
 8004114:	d141      	bne.n	800419a <HAL_TIM_PWM_Start+0x8e>
 8004116:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800411a:	3b01      	subs	r3, #1
 800411c:	bf18      	it	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d16b      	bne.n	80041fc <HAL_TIM_PWM_Start+0xf0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004124:	2800      	cmp	r0, #0
 8004126:	d14e      	bne.n	80041c6 <HAL_TIM_PWM_Start+0xba>
 8004128:	2302      	movs	r3, #2
 800412a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800412e:	2201      	movs	r2, #1
 8004130:	4601      	mov	r1, r0
 8004132:	6820      	ldr	r0, [r4, #0]
 8004134:	f7ff ffda 	bl	80040ec <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	4a32      	ldr	r2, [pc, #200]	@ (8004204 <HAL_TIM_PWM_Start+0xf8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <HAL_TIM_PWM_Start+0x3c>
 8004140:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004144:	4293      	cmp	r3, r2
 8004146:	d103      	bne.n	8004150 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8004148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800414a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800414e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	4a2c      	ldr	r2, [pc, #176]	@ (8004204 <HAL_TIM_PWM_Start+0xf8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d046      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xda>
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415c:	d043      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xda>
 800415e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004162:	4293      	cmp	r3, r2
 8004164:	d03f      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xda>
 8004166:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800416a:	4293      	cmp	r3, r2
 800416c:	d03b      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xda>
 800416e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004172:	4293      	cmp	r3, r2
 8004174:	d037      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xda>
 8004176:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800417a:	4293      	cmp	r3, r2
 800417c:	d033      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xda>
 800417e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004182:	4293      	cmp	r3, r2
 8004184:	d02f      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xda>
 8004186:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800418a:	4293      	cmp	r3, r2
 800418c:	d02b      	beq.n	80041e6 <HAL_TIM_PWM_Start+0xda>
    __HAL_TIM_ENABLE(htim);
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004196:	2000      	movs	r0, #0
 8004198:	e02f      	b.n	80041fa <HAL_TIM_PWM_Start+0xee>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800419a:	2904      	cmp	r1, #4
 800419c:	d007      	beq.n	80041ae <HAL_TIM_PWM_Start+0xa2>
 800419e:	2908      	cmp	r1, #8
 80041a0:	d00b      	beq.n	80041ba <HAL_TIM_PWM_Start+0xae>
 80041a2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80041a6:	3b01      	subs	r3, #1
 80041a8:	bf18      	it	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	e7b8      	b.n	8004120 <HAL_TIM_PWM_Start+0x14>
 80041ae:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80041b2:	3b01      	subs	r3, #1
 80041b4:	bf18      	it	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	e7b2      	b.n	8004120 <HAL_TIM_PWM_Start+0x14>
 80041ba:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80041be:	3b01      	subs	r3, #1
 80041c0:	bf18      	it	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	e7ac      	b.n	8004120 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c6:	2804      	cmp	r0, #4
 80041c8:	d005      	beq.n	80041d6 <HAL_TIM_PWM_Start+0xca>
 80041ca:	2808      	cmp	r0, #8
 80041cc:	d007      	beq.n	80041de <HAL_TIM_PWM_Start+0xd2>
 80041ce:	2302      	movs	r3, #2
 80041d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80041d4:	e7ab      	b.n	800412e <HAL_TIM_PWM_Start+0x22>
 80041d6:	2302      	movs	r3, #2
 80041d8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80041dc:	e7a7      	b.n	800412e <HAL_TIM_PWM_Start+0x22>
 80041de:	2302      	movs	r3, #2
 80041e0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80041e4:	e7a3      	b.n	800412e <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ec:	2a06      	cmp	r2, #6
 80041ee:	d007      	beq.n	8004200 <HAL_TIM_PWM_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80041f8:	2000      	movs	r0, #0
}
 80041fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80041fc:	2001      	movs	r0, #1
 80041fe:	e7fc      	b.n	80041fa <HAL_TIM_PWM_Start+0xee>
  return HAL_OK;
 8004200:	2000      	movs	r0, #0
 8004202:	e7fa      	b.n	80041fa <HAL_TIM_PWM_Start+0xee>
 8004204:	40010000 	.word	0x40010000

08004208 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004208:	f001 010f 	and.w	r1, r1, #15
 800420c:	f04f 0c04 	mov.w	ip, #4
 8004210:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004214:	6a03      	ldr	r3, [r0, #32]
 8004216:	ea23 030c 	bic.w	r3, r3, ip
 800421a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800421c:	6a03      	ldr	r3, [r0, #32]
 800421e:	408a      	lsls	r2, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	6203      	str	r3, [r0, #32]
}
 8004224:	4770      	bx	lr

08004226 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8004226:	2800      	cmp	r0, #0
 8004228:	d065      	beq.n	80042f6 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 800422a:	b570      	push	{r4, r5, r6, lr}
 800422c:	b088      	sub	sp, #32
 800422e:	460e      	mov	r6, r1
 8004230:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004236:	2b00      	cmp	r3, #0
 8004238:	d058      	beq.n	80042ec <HAL_TIMEx_HallSensor_Init+0xc6>
  htim->State = HAL_TIM_STATE_BUSY;
 800423a:	2302      	movs	r3, #2
 800423c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004240:	4621      	mov	r1, r4
 8004242:	f851 0b04 	ldr.w	r0, [r1], #4
 8004246:	f7ff fd1d 	bl	8003c84 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800424a:	68b3      	ldr	r3, [r6, #8]
 800424c:	2203      	movs	r2, #3
 800424e:	6831      	ldr	r1, [r6, #0]
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	f7ff fe81 	bl	8003f58 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004256:	6822      	ldr	r2, [r4, #0]
 8004258:	6993      	ldr	r3, [r2, #24]
 800425a:	f023 030c 	bic.w	r3, r3, #12
 800425e:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	6993      	ldr	r3, [r2, #24]
 8004264:	6871      	ldr	r1, [r6, #4]
 8004266:	430b      	orrs	r3, r1
 8004268:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	6853      	ldr	r3, [r2, #4]
 800426e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004272:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	6893      	ldr	r3, [r2, #8]
 8004278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427c:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	6893      	ldr	r3, [r2, #8]
 8004282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004286:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	6893      	ldr	r3, [r2, #8]
 800428c:	f023 0307 	bic.w	r3, r3, #7
 8004290:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	6893      	ldr	r3, [r2, #8]
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800429c:	2500      	movs	r5, #0
 800429e:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042a0:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80042a2:	2370      	movs	r3, #112	@ 0x70
 80042a4:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042a6:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042a8:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042aa:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80042ac:	68f3      	ldr	r3, [r6, #12]
 80042ae:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80042b0:	a901      	add	r1, sp, #4
 80042b2:	6820      	ldr	r0, [r4, #0]
 80042b4:	f7ff fdaa 	bl	8003e0c <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80042b8:	6822      	ldr	r2, [r4, #0]
 80042ba:	6853      	ldr	r3, [r2, #4]
 80042bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80042c2:	6822      	ldr	r2, [r4, #0]
 80042c4:	6853      	ldr	r3, [r2, #4]
 80042c6:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80042ca:	6053      	str	r3, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042d2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042da:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 80042e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80042e6:	4628      	mov	r0, r5
}
 80042e8:	b008      	add	sp, #32
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80042ec:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80042f0:	f001 fa48 	bl	8005784 <HAL_TIMEx_HallSensor_MspInit>
 80042f4:	e7a1      	b.n	800423a <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 80042f6:	2001      	movs	r0, #1
}
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_TIMEx_PWMN_Start>:
{
 80042fc:	b510      	push	{r4, lr}
 80042fe:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004300:	4608      	mov	r0, r1
 8004302:	2900      	cmp	r1, #0
 8004304:	d13a      	bne.n	800437c <HAL_TIMEx_PWMN_Start+0x80>
 8004306:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800430a:	3b01      	subs	r3, #1
 800430c:	bf18      	it	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d164      	bne.n	80043de <HAL_TIMEx_PWMN_Start+0xe2>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004314:	2800      	cmp	r0, #0
 8004316:	d147      	bne.n	80043a8 <HAL_TIMEx_PWMN_Start+0xac>
 8004318:	2302      	movs	r3, #2
 800431a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800431e:	2204      	movs	r2, #4
 8004320:	4601      	mov	r1, r0
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	f7ff ff70 	bl	8004208 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800432c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004330:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	4a2c      	ldr	r2, [pc, #176]	@ (80043e8 <HAL_TIMEx_PWMN_Start+0xec>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d046      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0xcc>
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433e:	d043      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0xcc>
 8004340:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004344:	4293      	cmp	r3, r2
 8004346:	d03f      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0xcc>
 8004348:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800434c:	4293      	cmp	r3, r2
 800434e:	d03b      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0xcc>
 8004350:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004354:	4293      	cmp	r3, r2
 8004356:	d037      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0xcc>
 8004358:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800435c:	4293      	cmp	r3, r2
 800435e:	d033      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0xcc>
 8004360:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004364:	4293      	cmp	r3, r2
 8004366:	d02f      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0xcc>
 8004368:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800436c:	4293      	cmp	r3, r2
 800436e:	d02b      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004378:	2000      	movs	r0, #0
 800437a:	e02f      	b.n	80043dc <HAL_TIMEx_PWMN_Start+0xe0>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800437c:	2904      	cmp	r1, #4
 800437e:	d007      	beq.n	8004390 <HAL_TIMEx_PWMN_Start+0x94>
 8004380:	2908      	cmp	r1, #8
 8004382:	d00b      	beq.n	800439c <HAL_TIMEx_PWMN_Start+0xa0>
 8004384:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004388:	3b01      	subs	r3, #1
 800438a:	bf18      	it	ne
 800438c:	2301      	movne	r3, #1
 800438e:	e7bf      	b.n	8004310 <HAL_TIMEx_PWMN_Start+0x14>
 8004390:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004394:	3b01      	subs	r3, #1
 8004396:	bf18      	it	ne
 8004398:	2301      	movne	r3, #1
 800439a:	e7b9      	b.n	8004310 <HAL_TIMEx_PWMN_Start+0x14>
 800439c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80043a0:	3b01      	subs	r3, #1
 80043a2:	bf18      	it	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	e7b3      	b.n	8004310 <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a8:	2804      	cmp	r0, #4
 80043aa:	d005      	beq.n	80043b8 <HAL_TIMEx_PWMN_Start+0xbc>
 80043ac:	2808      	cmp	r0, #8
 80043ae:	d007      	beq.n	80043c0 <HAL_TIMEx_PWMN_Start+0xc4>
 80043b0:	2302      	movs	r3, #2
 80043b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80043b6:	e7b2      	b.n	800431e <HAL_TIMEx_PWMN_Start+0x22>
 80043b8:	2302      	movs	r3, #2
 80043ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043be:	e7ae      	b.n	800431e <HAL_TIMEx_PWMN_Start+0x22>
 80043c0:	2302      	movs	r3, #2
 80043c2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80043c6:	e7aa      	b.n	800431e <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ce:	2a06      	cmp	r2, #6
 80043d0:	d007      	beq.n	80043e2 <HAL_TIMEx_PWMN_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80043da:	2000      	movs	r0, #0
}
 80043dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80043de:	2001      	movs	r0, #1
 80043e0:	e7fc      	b.n	80043dc <HAL_TIMEx_PWMN_Start+0xe0>
  return HAL_OK;
 80043e2:	2000      	movs	r0, #0
 80043e4:	e7fa      	b.n	80043dc <HAL_TIMEx_PWMN_Start+0xe0>
 80043e6:	bf00      	nop
 80043e8:	40010000 	.word	0x40010000

080043ec <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80043ec:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80043f0:	2a01      	cmp	r2, #1
 80043f2:	d03d      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 80043f4:	b410      	push	{r4}
 80043f6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80043f8:	2201      	movs	r2, #1
 80043fa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80043fe:	2202      	movs	r2, #2
 8004400:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004404:	6802      	ldr	r2, [r0, #0]
 8004406:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004408:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800440a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800440e:	6808      	ldr	r0, [r1, #0]
 8004410:	ea40 000c 	orr.w	r0, r0, ip
  htim->Instance->CR2 = tmpcr2;
 8004414:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4816      	ldr	r0, [pc, #88]	@ (8004474 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800441a:	4282      	cmp	r2, r0
 800441c:	d01a      	beq.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800441e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004422:	d017      	beq.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004424:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8004428:	4282      	cmp	r2, r0
 800442a:	d013      	beq.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800442c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004430:	4282      	cmp	r2, r0
 8004432:	d00f      	beq.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004434:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004438:	4282      	cmp	r2, r0
 800443a:	d00b      	beq.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800443c:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8004440:	4282      	cmp	r2, r0
 8004442:	d007      	beq.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004444:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8004448:	4282      	cmp	r2, r0
 800444a:	d003      	beq.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800444c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004450:	4282      	cmp	r2, r0
 8004452:	d104      	bne.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x72>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004454:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004458:	6849      	ldr	r1, [r1, #4]
 800445a:	4321      	orrs	r1, r4
    htim->Instance->SMCR = tmpsmcr;
 800445c:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004464:	2000      	movs	r0, #0
 8004466:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800446a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800446e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004470:	2002      	movs	r0, #2
}
 8004472:	4770      	bx	lr
 8004474:	40010000 	.word	0x40010000

08004478 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8004478:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800447a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d021      	beq.n	80044c6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004482:	2301      	movs	r3, #1
 8004484:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004488:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800448a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800448e:	6888      	ldr	r0, [r1, #8]
 8004490:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004496:	6848      	ldr	r0, [r1, #4]
 8004498:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800449a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800449e:	6808      	ldr	r0, [r1, #0]
 80044a0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044a6:	6908      	ldr	r0, [r1, #16]
 80044a8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044ae:	6948      	ldr	r0, [r1, #20]
 80044b0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044b6:	69c9      	ldr	r1, [r1, #28]
 80044b8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80044ba:	6811      	ldr	r1, [r2, #0]
 80044bc:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80044be:	2000      	movs	r0, #0
 80044c0:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  return HAL_OK;
 80044c4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80044c6:	2002      	movs	r0, #2
}
 80044c8:	4770      	bx	lr

080044ca <HAL_TIMEx_CommutCallback>:
}
 80044ca:	4770      	bx	lr

080044cc <HAL_TIMEx_BreakCallback>:
}
 80044cc:	4770      	bx	lr
	...

080044d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d0:	b530      	push	{r4, r5, lr}
 80044d2:	b089      	sub	sp, #36	@ 0x24
 80044d4:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	4b21      	ldr	r3, [pc, #132]	@ (8004560 <HAL_InitTick+0x90>)
 80044dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044de:	f042 0210 	orr.w	r2, r2, #16
 80044e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044ee:	a902      	add	r1, sp, #8
 80044f0:	a803      	add	r0, sp, #12
 80044f2:	f7fe fcdb 	bl	8002eac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80044f6:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80044f8:	b9cb      	cbnz	r3, 800452e <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80044fa:	f7fe fcb7 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 80044fe:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004500:	4a18      	ldr	r2, [pc, #96]	@ (8004564 <HAL_InitTick+0x94>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	0c9b      	lsrs	r3, r3, #18
 8004508:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800450a:	4817      	ldr	r0, [pc, #92]	@ (8004568 <HAL_InitTick+0x98>)
 800450c:	4a17      	ldr	r2, [pc, #92]	@ (800456c <HAL_InitTick+0x9c>)
 800450e:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004510:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004514:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004516:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800451c:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800451e:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004520:	f7ff fc1c 	bl	8003d5c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004524:	4605      	mov	r5, r0
 8004526:	b130      	cbz	r0, 8004536 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8004528:	4628      	mov	r0, r5
 800452a:	b009      	add	sp, #36	@ 0x24
 800452c:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800452e:	f7fe fc9d 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8004532:	0043      	lsls	r3, r0, #1
 8004534:	e7e4      	b.n	8004500 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004536:	480c      	ldr	r0, [pc, #48]	@ (8004568 <HAL_InitTick+0x98>)
 8004538:	f7ff faae 	bl	8003a98 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800453c:	4605      	mov	r5, r0
 800453e:	2800      	cmp	r0, #0
 8004540:	d1f2      	bne.n	8004528 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004542:	2036      	movs	r0, #54	@ 0x36
 8004544:	f7fd ff78 	bl	8002438 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004548:	2c0f      	cmp	r4, #15
 800454a:	d901      	bls.n	8004550 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 800454c:	2501      	movs	r5, #1
 800454e:	e7eb      	b.n	8004528 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004550:	2200      	movs	r2, #0
 8004552:	4621      	mov	r1, r4
 8004554:	2036      	movs	r0, #54	@ 0x36
 8004556:	f7fd ff5f 	bl	8002418 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800455a:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <HAL_InitTick+0xa0>)
 800455c:	601c      	str	r4, [r3, #0]
 800455e:	e7e3      	b.n	8004528 <HAL_InitTick+0x58>
 8004560:	40023800 	.word	0x40023800
 8004564:	431bde83 	.word	0x431bde83
 8004568:	200042a4 	.word	0x200042a4
 800456c:	40001000 	.word	0x40001000
 8004570:	20000010 	.word	0x20000010

08004574 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004574:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	f102 030c 	add.w	r3, r2, #12
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	320c      	adds	r2, #12
 8004584:	e842 3100 	strex	r1, r3, [r2]
 8004588:	2900      	cmp	r1, #0
 800458a:	d1f3      	bne.n	8004574 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800458c:	2320      	movs	r3, #32
 800458e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8004592:	4770      	bx	lr

08004594 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004594:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	f102 030c 	add.w	r3, r2, #12
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	320c      	adds	r2, #12
 80045a4:	e842 3100 	strex	r1, r3, [r2]
 80045a8:	2900      	cmp	r1, #0
 80045aa:	d1f3      	bne.n	8004594 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	f102 0314 	add.w	r3, r2, #20
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	3214      	adds	r2, #20
 80045bc:	e842 3100 	strex	r1, r3, [r2]
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d1f3      	bne.n	80045ac <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d005      	beq.n	80045d6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ca:	2320      	movs	r3, #32
 80045cc:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d0:	2300      	movs	r3, #0
 80045d2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80045d4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f102 030c 	add.w	r3, r2, #12
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	320c      	adds	r2, #12
 80045e6:	e842 3100 	strex	r1, r3, [r2]
 80045ea:	2900      	cmp	r1, #0
 80045ec:	d1f3      	bne.n	80045d6 <UART_EndRxTransfer+0x42>
 80045ee:	e7ec      	b.n	80045ca <UART_EndRxTransfer+0x36>

080045f0 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045f0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80045f4:	2b21      	cmp	r3, #33	@ 0x21
 80045f6:	d001      	beq.n	80045fc <UART_Transmit_IT+0xc>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2002      	movs	r0, #2
  }
}
 80045fa:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	6883      	ldr	r3, [r0, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004602:	d017      	beq.n	8004634 <UART_Transmit_IT+0x44>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004604:	6a03      	ldr	r3, [r0, #32]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	6202      	str	r2, [r0, #32]
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	6803      	ldr	r3, [r0, #0]
 800460e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004610:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29b      	uxth	r3, r3
 8004618:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800461a:	b94b      	cbnz	r3, 8004630 <UART_Transmit_IT+0x40>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800461c:	6802      	ldr	r2, [r0, #0]
 800461e:	68d3      	ldr	r3, [r2, #12]
 8004620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004624:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004626:	6802      	ldr	r2, [r0, #0]
 8004628:	68d3      	ldr	r3, [r2, #12]
 800462a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800462e:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8004630:	2000      	movs	r0, #0
 8004632:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004634:	6903      	ldr	r3, [r0, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e4      	bne.n	8004604 <UART_Transmit_IT+0x14>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800463a:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	6802      	ldr	r2, [r0, #0]
 8004640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004644:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004646:	6a03      	ldr	r3, [r0, #32]
 8004648:	3302      	adds	r3, #2
 800464a:	6203      	str	r3, [r0, #32]
 800464c:	e7e0      	b.n	8004610 <UART_Transmit_IT+0x20>
	...

08004650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	b510      	push	{r4, lr}
 8004652:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004654:	6802      	ldr	r2, [r0, #0]
 8004656:	6913      	ldr	r3, [r2, #16]
 8004658:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800465c:	68c1      	ldr	r1, [r0, #12]
 800465e:	430b      	orrs	r3, r1
 8004660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004662:	6883      	ldr	r3, [r0, #8]
 8004664:	6902      	ldr	r2, [r0, #16]
 8004666:	431a      	orrs	r2, r3
 8004668:	6943      	ldr	r3, [r0, #20]
 800466a:	431a      	orrs	r2, r3
 800466c:	69c3      	ldr	r3, [r0, #28]
 800466e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004670:	6801      	ldr	r1, [r0, #0]
 8004672:	68cb      	ldr	r3, [r1, #12]
 8004674:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004678:	f023 030c 	bic.w	r3, r3, #12
 800467c:	4313      	orrs	r3, r2
 800467e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004680:	6802      	ldr	r2, [r0, #0]
 8004682:	6953      	ldr	r3, [r2, #20]
 8004684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004688:	6981      	ldr	r1, [r0, #24]
 800468a:	430b      	orrs	r3, r1
 800468c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800468e:	6803      	ldr	r3, [r0, #0]
 8004690:	4a31      	ldr	r2, [pc, #196]	@ (8004758 <UART_SetConfig+0x108>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d006      	beq.n	80046a4 <UART_SetConfig+0x54>
 8004696:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800469a:	4293      	cmp	r3, r2
 800469c:	d002      	beq.n	80046a4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800469e:	f7fe fbe5 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 80046a2:	e001      	b.n	80046a8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80046a4:	f7fe fbf2 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a8:	69e3      	ldr	r3, [r4, #28]
 80046aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ae:	d029      	beq.n	8004704 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b0:	2100      	movs	r1, #0
 80046b2:	1803      	adds	r3, r0, r0
 80046b4:	4149      	adcs	r1, r1
 80046b6:	181b      	adds	r3, r3, r0
 80046b8:	f141 0100 	adc.w	r1, r1, #0
 80046bc:	00c9      	lsls	r1, r1, #3
 80046be:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	1818      	adds	r0, r3, r0
 80046c6:	6863      	ldr	r3, [r4, #4]
 80046c8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80046cc:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80046d0:	f141 0100 	adc.w	r1, r1, #0
 80046d4:	f7fb fd7c 	bl	80001d0 <__aeabi_uldivmod>
 80046d8:	4a20      	ldr	r2, [pc, #128]	@ (800475c <UART_SetConfig+0x10c>)
 80046da:	fba2 3100 	umull	r3, r1, r2, r0
 80046de:	0949      	lsrs	r1, r1, #5
 80046e0:	2364      	movs	r3, #100	@ 0x64
 80046e2:	fb03 0311 	mls	r3, r3, r1, r0
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	3332      	adds	r3, #50	@ 0x32
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046f4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	6821      	ldr	r1, [r4, #0]
 80046fe:	4413      	add	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }
}
 8004702:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004704:	2300      	movs	r3, #0
 8004706:	1802      	adds	r2, r0, r0
 8004708:	eb43 0103 	adc.w	r1, r3, r3
 800470c:	1812      	adds	r2, r2, r0
 800470e:	f141 0100 	adc.w	r1, r1, #0
 8004712:	00c9      	lsls	r1, r1, #3
 8004714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004718:	00d2      	lsls	r2, r2, #3
 800471a:	1810      	adds	r0, r2, r0
 800471c:	f141 0100 	adc.w	r1, r1, #0
 8004720:	6862      	ldr	r2, [r4, #4]
 8004722:	1892      	adds	r2, r2, r2
 8004724:	415b      	adcs	r3, r3
 8004726:	f7fb fd53 	bl	80001d0 <__aeabi_uldivmod>
 800472a:	4a0c      	ldr	r2, [pc, #48]	@ (800475c <UART_SetConfig+0x10c>)
 800472c:	fba2 3100 	umull	r3, r1, r2, r0
 8004730:	0949      	lsrs	r1, r1, #5
 8004732:	2364      	movs	r3, #100	@ 0x64
 8004734:	fb03 0311 	mls	r3, r3, r1, r0
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	3332      	adds	r3, #50	@ 0x32
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	005a      	lsls	r2, r3, #1
 8004744:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8004748:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	6821      	ldr	r1, [r4, #0]
 8004752:	4413      	add	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
 8004756:	e7d4      	b.n	8004702 <UART_SetConfig+0xb2>
 8004758:	40011000 	.word	0x40011000
 800475c:	51eb851f 	.word	0x51eb851f

08004760 <HAL_UART_Init>:
  if (huart == NULL)
 8004760:	b360      	cbz	r0, 80047bc <HAL_UART_Init+0x5c>
{
 8004762:	b510      	push	{r4, lr}
 8004764:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004766:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800476a:	b313      	cbz	r3, 80047b2 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800476c:	2324      	movs	r3, #36	@ 0x24
 800476e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	68d3      	ldr	r3, [r2, #12]
 8004776:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800477a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800477c:	4620      	mov	r0, r4
 800477e:	f7ff ff67 	bl	8004650 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	6913      	ldr	r3, [r2, #16]
 8004786:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800478a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	6953      	ldr	r3, [r2, #20]
 8004790:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004794:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004796:	6822      	ldr	r2, [r4, #0]
 8004798:	68d3      	ldr	r3, [r2, #12]
 800479a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800479e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	2000      	movs	r0, #0
 80047a2:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047a4:	2320      	movs	r3, #32
 80047a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047aa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ae:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80047b0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80047b2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80047b6:	f001 f913 	bl	80059e0 <HAL_UART_MspInit>
 80047ba:	e7d7      	b.n	800476c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80047bc:	2001      	movs	r0, #1
}
 80047be:	4770      	bx	lr

080047c0 <HAL_UART_Transmit_DMA>:
{
 80047c0:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80047c2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d130      	bne.n	800482c <HAL_UART_Transmit_DMA+0x6c>
 80047ca:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80047cc:	2900      	cmp	r1, #0
 80047ce:	d02f      	beq.n	8004830 <HAL_UART_Transmit_DMA+0x70>
 80047d0:	b90a      	cbnz	r2, 80047d6 <HAL_UART_Transmit_DMA+0x16>
      return HAL_ERROR;
 80047d2:	2001      	movs	r0, #1
}
 80047d4:	bd38      	pop	{r3, r4, r5, pc}
    huart->pTxBuffPtr = pData;
 80047d6:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80047d8:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047da:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047dc:	2300      	movs	r3, #0
 80047de:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047e0:	2021      	movs	r0, #33	@ 0x21
 80047e2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80047e8:	4d12      	ldr	r5, [pc, #72]	@ (8004834 <HAL_UART_Transmit_DMA+0x74>)
 80047ea:	63c5      	str	r5, [r0, #60]	@ 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047ec:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80047ee:	4d12      	ldr	r5, [pc, #72]	@ (8004838 <HAL_UART_Transmit_DMA+0x78>)
 80047f0:	6405      	str	r5, [r0, #64]	@ 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80047f4:	4d11      	ldr	r5, [pc, #68]	@ (800483c <HAL_UART_Transmit_DMA+0x7c>)
 80047f6:	64c5      	str	r5, [r0, #76]	@ 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80047f8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80047fa:	6503      	str	r3, [r0, #80]	@ 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	1d02      	adds	r2, r0, #4
 8004802:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004804:	f7fd fefe 	bl	8002604 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800480e:	601a      	str	r2, [r3, #0]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004810:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	f102 0314 	add.w	r3, r2, #20
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	3214      	adds	r2, #20
 8004820:	e842 3100 	strex	r1, r3, [r2]
 8004824:	2900      	cmp	r1, #0
 8004826:	d1f3      	bne.n	8004810 <HAL_UART_Transmit_DMA+0x50>
    return HAL_OK;
 8004828:	2000      	movs	r0, #0
 800482a:	e7d3      	b.n	80047d4 <HAL_UART_Transmit_DMA+0x14>
    return HAL_BUSY;
 800482c:	2002      	movs	r0, #2
 800482e:	e7d1      	b.n	80047d4 <HAL_UART_Transmit_DMA+0x14>
      return HAL_ERROR;
 8004830:	2001      	movs	r0, #1
 8004832:	e7cf      	b.n	80047d4 <HAL_UART_Transmit_DMA+0x14>
 8004834:	08004843 	.word	0x08004843
 8004838:	080048ab 	.word	0x080048ab
 800483c:	080048b9 	.word	0x080048b9

08004840 <HAL_UART_TxCpltCallback>:
}
 8004840:	4770      	bx	lr

08004842 <UART_DMATransmitCplt>:
{
 8004842:	b508      	push	{r3, lr}
 8004844:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004846:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004850:	d11a      	bne.n	8004888 <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 8004852:	2300      	movs	r3, #0
 8004854:	84c3      	strh	r3, [r0, #38]	@ 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004856:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	f102 0314 	add.w	r3, r2, #20
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	3214      	adds	r2, #20
 8004866:	e842 3100 	strex	r1, r3, [r2]
 800486a:	2900      	cmp	r1, #0
 800486c:	d1f3      	bne.n	8004856 <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800486e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	f102 030c 	add.w	r3, r2, #12
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	320c      	adds	r2, #12
 800487e:	e842 3100 	strex	r1, r3, [r2]
 8004882:	2900      	cmp	r1, #0
 8004884:	d1f3      	bne.n	800486e <UART_DMATransmitCplt+0x2c>
}
 8004886:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004888:	f7ff ffda 	bl	8004840 <HAL_UART_TxCpltCallback>
}
 800488c:	e7fb      	b.n	8004886 <UART_DMATransmitCplt+0x44>

0800488e <UART_EndTransmit_IT>:
{
 800488e:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004890:	6801      	ldr	r1, [r0, #0]
 8004892:	68ca      	ldr	r2, [r1, #12]
 8004894:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004898:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800489a:	2220      	movs	r2, #32
 800489c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80048a0:	f7ff ffce 	bl	8004840 <HAL_UART_TxCpltCallback>
}
 80048a4:	2000      	movs	r0, #0
 80048a6:	bd08      	pop	{r3, pc}

080048a8 <HAL_UART_TxHalfCpltCallback>:
}
 80048a8:	4770      	bx	lr

080048aa <UART_DMATxHalfCplt>:
{
 80048aa:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80048ac:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80048ae:	f7ff fffb 	bl	80048a8 <HAL_UART_TxHalfCpltCallback>
}
 80048b2:	bd08      	pop	{r3, pc}

080048b4 <HAL_UART_RxCpltCallback>:
}
 80048b4:	4770      	bx	lr

080048b6 <HAL_UART_RxHalfCpltCallback>:
}
 80048b6:	4770      	bx	lr

080048b8 <UART_DMAError>:
{
 80048b8:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ba:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80048c0:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80048c4:	2a21      	cmp	r2, #33	@ 0x21
 80048c6:	d00f      	beq.n	80048e8 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80048d0:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80048d4:	2a22      	cmp	r2, #34	@ 0x22
 80048d6:	d011      	beq.n	80048fc <UART_DMAError+0x44>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048d8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80048da:	f043 0310 	orr.w	r3, r3, #16
 80048de:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 80048e0:	4620      	mov	r0, r4
 80048e2:	f7fc f8a7 	bl	8000a34 <HAL_UART_ErrorCallback>
}
 80048e6:	bd10      	pop	{r4, pc}
 80048e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0eb      	beq.n	80048c8 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80048f4:	4620      	mov	r0, r4
 80048f6:	f7ff fe3d 	bl	8004574 <UART_EndTxTransfer>
 80048fa:	e7e5      	b.n	80048c8 <UART_DMAError+0x10>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0eb      	beq.n	80048d8 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8004900:	2300      	movs	r3, #0
 8004902:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004904:	4620      	mov	r0, r4
 8004906:	f7ff fe45 	bl	8004594 <UART_EndRxTransfer>
 800490a:	e7e5      	b.n	80048d8 <UART_DMAError+0x20>

0800490c <UART_DMAAbortOnError>:
{
 800490c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8004910:	2300      	movs	r3, #0
 8004912:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004914:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8004916:	f7fc f88d 	bl	8000a34 <HAL_UART_ErrorCallback>
}
 800491a:	bd08      	pop	{r3, pc}

0800491c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800491c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004920:	2b22      	cmp	r3, #34	@ 0x22
 8004922:	d169      	bne.n	80049f8 <UART_Receive_IT+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004924:	6883      	ldr	r3, [r0, #8]
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492a:	d04f      	beq.n	80049cc <UART_Receive_IT+0xb0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800492c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800492e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004932:	d004      	beq.n	800493e <UART_Receive_IT+0x22>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d156      	bne.n	80049e6 <UART_Receive_IT+0xca>
 8004938:	6903      	ldr	r3, [r0, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d153      	bne.n	80049e6 <UART_Receive_IT+0xca>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800493e:	6803      	ldr	r3, [r0, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004944:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004946:	3301      	adds	r3, #1
 8004948:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800494a:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29b      	uxth	r3, r3
 8004952:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8004954:	2b00      	cmp	r3, #0
 8004956:	d151      	bne.n	80049fc <UART_Receive_IT+0xe0>
{
 8004958:	b500      	push	{lr}
 800495a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800495c:	6802      	ldr	r2, [r0, #0]
 800495e:	68d3      	ldr	r3, [r2, #12]
 8004960:	f023 0320 	bic.w	r3, r3, #32
 8004964:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004966:	6802      	ldr	r2, [r0, #0]
 8004968:	68d3      	ldr	r3, [r2, #12]
 800496a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800496e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004970:	6802      	ldr	r2, [r0, #0]
 8004972:	6953      	ldr	r3, [r2, #20]
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800497a:	2320      	movs	r3, #32
 800497c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004980:	2300      	movs	r3, #0
 8004982:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004986:	2b01      	cmp	r3, #1
 8004988:	d133      	bne.n	80049f2 <UART_Receive_IT+0xd6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498a:	2300      	movs	r3, #0
 800498c:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	f102 030c 	add.w	r3, r2, #12
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	320c      	adds	r2, #12
 800499e:	e842 3100 	strex	r1, r3, [r2]
 80049a2:	2900      	cmp	r1, #0
 80049a4:	d1f3      	bne.n	800498e <UART_Receive_IT+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049a6:	6803      	ldr	r3, [r0, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	f012 0f10 	tst.w	r2, #16
 80049ae:	d006      	beq.n	80049be <UART_Receive_IT+0xa2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049b0:	2200      	movs	r2, #0
 80049b2:	9201      	str	r2, [sp, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	9201      	str	r2, [sp, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049be:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80049c0:	f7fc f836 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80049c4:	2000      	movs	r0, #0
}
 80049c6:	b003      	add	sp, #12
 80049c8:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049cc:	6902      	ldr	r2, [r0, #16]
 80049ce:	2a00      	cmp	r2, #0
 80049d0:	d1ac      	bne.n	800492c <UART_Receive_IT+0x10>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049d2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049d4:	6803      	ldr	r3, [r0, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049dc:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80049de:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80049e0:	3302      	adds	r3, #2
 80049e2:	6283      	str	r3, [r0, #40]	@ 0x28
 80049e4:	e7b1      	b.n	800494a <UART_Receive_IT+0x2e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049e6:	6803      	ldr	r3, [r0, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ee:	7013      	strb	r3, [r2, #0]
 80049f0:	e7a8      	b.n	8004944 <UART_Receive_IT+0x28>
        HAL_UART_RxCpltCallback(huart);
 80049f2:	f7ff ff5f 	bl	80048b4 <HAL_UART_RxCpltCallback>
 80049f6:	e7e5      	b.n	80049c4 <UART_Receive_IT+0xa8>
    return HAL_BUSY;
 80049f8:	2002      	movs	r0, #2
 80049fa:	4770      	bx	lr
    return HAL_OK;
 80049fc:	2000      	movs	r0, #0
}
 80049fe:	4770      	bx	lr

08004a00 <HAL_UART_IRQHandler>:
{
 8004a00:	b510      	push	{r4, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a06:	6802      	ldr	r2, [r0, #0]
 8004a08:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a0a:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a0c:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004a0e:	f013 0f0f 	tst.w	r3, #15
 8004a12:	d109      	bne.n	8004a28 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a14:	f013 0f20 	tst.w	r3, #32
 8004a18:	d00c      	beq.n	8004a34 <HAL_UART_IRQHandler+0x34>
 8004a1a:	f010 0f20 	tst.w	r0, #32
 8004a1e:	d009      	beq.n	8004a34 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8004a20:	4620      	mov	r0, r4
 8004a22:	f7ff ff7b 	bl	800491c <UART_Receive_IT>
      return;
 8004a26:	e016      	b.n	8004a56 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a28:	f011 0101 	ands.w	r1, r1, #1
 8004a2c:	d115      	bne.n	8004a5a <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a2e:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8004a32:	d112      	bne.n	8004a5a <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a36:	2901      	cmp	r1, #1
 8004a38:	d079      	beq.n	8004b2e <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a3e:	d003      	beq.n	8004a48 <HAL_UART_IRQHandler+0x48>
 8004a40:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004a44:	f040 8114 	bne.w	8004c70 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a48:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004a4c:	d003      	beq.n	8004a56 <HAL_UART_IRQHandler+0x56>
 8004a4e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8004a52:	f040 8111 	bne.w	8004c78 <HAL_UART_IRQHandler+0x278>
}
 8004a56:	b002      	add	sp, #8
 8004a58:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a5a:	f013 0f01 	tst.w	r3, #1
 8004a5e:	d006      	beq.n	8004a6e <HAL_UART_IRQHandler+0x6e>
 8004a60:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8004a64:	d003      	beq.n	8004a6e <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a66:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a6e:	f013 0f04 	tst.w	r3, #4
 8004a72:	d004      	beq.n	8004a7e <HAL_UART_IRQHandler+0x7e>
 8004a74:	b119      	cbz	r1, 8004a7e <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a76:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a78:	f042 0202 	orr.w	r2, r2, #2
 8004a7c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a7e:	f013 0f02 	tst.w	r3, #2
 8004a82:	d004      	beq.n	8004a8e <HAL_UART_IRQHandler+0x8e>
 8004a84:	b119      	cbz	r1, 8004a8e <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a86:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a88:	f042 0204 	orr.w	r2, r2, #4
 8004a8c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a8e:	f013 0f08 	tst.w	r3, #8
 8004a92:	d007      	beq.n	8004aa4 <HAL_UART_IRQHandler+0xa4>
 8004a94:	f010 0f20 	tst.w	r0, #32
 8004a98:	d100      	bne.n	8004a9c <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a9a:	b119      	cbz	r1, 8004aa4 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a9c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aa4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	d0d5      	beq.n	8004a56 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aaa:	f013 0f20 	tst.w	r3, #32
 8004aae:	d002      	beq.n	8004ab6 <HAL_UART_IRQHandler+0xb6>
 8004ab0:	f010 0f20 	tst.w	r0, #32
 8004ab4:	d129      	bne.n	8004b0a <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004abe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004ac0:	f012 0f08 	tst.w	r2, #8
 8004ac4:	d100      	bne.n	8004ac8 <HAL_UART_IRQHandler+0xc8>
 8004ac6:	b363      	cbz	r3, 8004b22 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff fd63 	bl	8004594 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004ad6:	d020      	beq.n	8004b1a <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	f102 0314 	add.w	r3, r2, #20
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	3214      	adds	r2, #20
 8004ae8:	e842 3100 	strex	r1, r3, [r2]
 8004aec:	2900      	cmp	r1, #0
 8004aee:	d1f3      	bne.n	8004ad8 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8004af0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004af2:	b173      	cbz	r3, 8004b12 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004af4:	4a62      	ldr	r2, [pc, #392]	@ (8004c80 <HAL_UART_IRQHandler+0x280>)
 8004af6:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004af8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004afa:	f7fd fe00 	bl	80026fe <HAL_DMA_Abort_IT>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d0a9      	beq.n	8004a56 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b02:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004b04:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004b06:	4798      	blx	r3
 8004b08:	e7a5      	b.n	8004a56 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7ff ff06 	bl	800491c <UART_Receive_IT>
 8004b10:	e7d1      	b.n	8004ab6 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8004b12:	4620      	mov	r0, r4
 8004b14:	f7fb ff8e 	bl	8000a34 <HAL_UART_ErrorCallback>
 8004b18:	e79d      	b.n	8004a56 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7fb ff8a 	bl	8000a34 <HAL_UART_ErrorCallback>
 8004b20:	e799      	b.n	8004a56 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8004b22:	4620      	mov	r0, r4
 8004b24:	f7fb ff86 	bl	8000a34 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8004b2c:	e793      	b.n	8004a56 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b2e:	f013 0f10 	tst.w	r3, #16
 8004b32:	d082      	beq.n	8004a3a <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b34:	f010 0f10 	tst.w	r0, #16
 8004b38:	f43f af7f 	beq.w	8004a3a <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	6853      	ldr	r3, [r2, #4]
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4a:	6953      	ldr	r3, [r2, #20]
 8004b4c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004b50:	d052      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b52:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004b54:	6813      	ldr	r3, [r2, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f43f af7b 	beq.w	8004a56 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b60:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004b62:	4299      	cmp	r1, r3
 8004b64:	f67f af77 	bls.w	8004a56 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8004b68:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b6a:	69d3      	ldr	r3, [r2, #28]
 8004b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b70:	d037      	beq.n	8004be2 <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	f102 030c 	add.w	r3, r2, #12
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	320c      	adds	r2, #12
 8004b82:	e842 3100 	strex	r1, r3, [r2]
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d1f3      	bne.n	8004b72 <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	f102 0314 	add.w	r3, r2, #20
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	3214      	adds	r2, #20
 8004b9a:	e842 3100 	strex	r1, r3, [r2]
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d1f3      	bne.n	8004b8a <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	f102 0314 	add.w	r3, r2, #20
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	3214      	adds	r2, #20
 8004bb2:	e842 3100 	strex	r1, r3, [r2]
 8004bb6:	2900      	cmp	r1, #0
 8004bb8:	d1f3      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8004bba:	2320      	movs	r3, #32
 8004bbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	f102 030c 	add.w	r3, r2, #12
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	320c      	adds	r2, #12
 8004bd4:	e842 3100 	strex	r1, r3, [r2]
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	d1f3      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bdc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004bde:	f7fd fd45 	bl	800266c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004be2:	2302      	movs	r3, #2
 8004be4:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004be6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004be8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	1ac9      	subs	r1, r1, r3
 8004bee:	b289      	uxth	r1, r1
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f7fb ff1d 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
      return;
 8004bf6:	e72e      	b.n	8004a56 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bf8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004bfa:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	1ac9      	subs	r1, r1, r3
 8004c00:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004c02:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f43f af25 	beq.w	8004a56 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	f43f af22 	beq.w	8004a56 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c12:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	f102 030c 	add.w	r3, r2, #12
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	320c      	adds	r2, #12
 8004c22:	e842 3000 	strex	r0, r3, [r2]
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d1f3      	bne.n	8004c12 <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	f102 0314 	add.w	r3, r2, #20
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	3214      	adds	r2, #20
 8004c3a:	e842 3000 	strex	r0, r3, [r2]
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d1f3      	bne.n	8004c2a <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8004c42:	2320      	movs	r3, #32
 8004c44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	f102 030c 	add.w	r3, r2, #12
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	320c      	adds	r2, #12
 8004c5c:	e842 3000 	strex	r0, r3, [r2]
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d1f3      	bne.n	8004c4c <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c64:	2302      	movs	r3, #2
 8004c66:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7fb fee1 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
      return;
 8004c6e:	e6f2      	b.n	8004a56 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7ff fcbd 	bl	80045f0 <UART_Transmit_IT>
    return;
 8004c76:	e6ee      	b.n	8004a56 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f7ff fe08 	bl	800488e <UART_EndTransmit_IT>
    return;
 8004c7e:	e6ea      	b.n	8004a56 <HAL_UART_IRQHandler+0x56>
 8004c80:	0800490d 	.word	0x0800490d

08004c84 <UART_DMARxHalfCplt>:
{
 8004c84:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c86:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d002      	beq.n	8004c98 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c92:	f7ff fe10 	bl	80048b6 <HAL_UART_RxHalfCpltCallback>
}
 8004c96:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c98:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004c9a:	0849      	lsrs	r1, r1, #1
 8004c9c:	f7fb fec8 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
 8004ca0:	e7f9      	b.n	8004c96 <UART_DMARxHalfCplt+0x12>

08004ca2 <UART_DMAReceiveCplt>:
{
 8004ca2:	b508      	push	{r3, lr}
 8004ca4:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004cb0:	d12b      	bne.n	8004d0a <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	f102 030c 	add.w	r3, r2, #12
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	320c      	adds	r2, #12
 8004cc6:	e842 3100 	strex	r1, r3, [r2]
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	d1f3      	bne.n	8004cb6 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	f102 0314 	add.w	r3, r2, #20
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	3214      	adds	r2, #20
 8004cde:	e842 3100 	strex	r1, r3, [r2]
 8004ce2:	2900      	cmp	r1, #0
 8004ce4:	d1f3      	bne.n	8004cce <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	f102 0314 	add.w	r3, r2, #20
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	3214      	adds	r2, #20
 8004cf6:	e842 3100 	strex	r1, r3, [r2]
 8004cfa:	2900      	cmp	r1, #0
 8004cfc:	d1f3      	bne.n	8004ce6 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	2320      	movs	r3, #32
 8004d00:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d04:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d007      	beq.n	8004d1a <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d00f      	beq.n	8004d34 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8004d14:	f7ff fdce 	bl	80048b4 <HAL_UART_RxCpltCallback>
}
 8004d18:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	f102 030c 	add.w	r3, r2, #12
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	320c      	adds	r2, #12
 8004d2a:	e842 3100 	strex	r1, r3, [r2]
 8004d2e:	2900      	cmp	r1, #0
 8004d30:	d1f3      	bne.n	8004d1a <UART_DMAReceiveCplt+0x78>
 8004d32:	e7ea      	b.n	8004d0a <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d34:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004d36:	f7fb fe7b 	bl	8000a30 <HAL_UARTEx_RxEventCallback>
 8004d3a:	e7ed      	b.n	8004d18 <UART_DMAReceiveCplt+0x76>

08004d3c <UART_Start_Receive_DMA>:
{
 8004d3c:	b530      	push	{r4, r5, lr}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	4604      	mov	r4, r0
 8004d42:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8004d44:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d46:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	2500      	movs	r5, #0
 8004d4a:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d4c:	2222      	movs	r2, #34	@ 0x22
 8004d4e:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004d54:	481f      	ldr	r0, [pc, #124]	@ (8004dd4 <UART_Start_Receive_DMA+0x98>)
 8004d56:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d58:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004d5a:	481f      	ldr	r0, [pc, #124]	@ (8004dd8 <UART_Start_Receive_DMA+0x9c>)
 8004d5c:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d5e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004d60:	481e      	ldr	r0, [pc, #120]	@ (8004ddc <UART_Start_Receive_DMA+0xa0>)
 8004d62:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8004d64:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004d66:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d68:	6820      	ldr	r0, [r4, #0]
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	1d01      	adds	r1, r0, #4
 8004d6e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d70:	f7fd fc48 	bl	8002604 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d74:	9501      	str	r5, [sp, #4]
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	9201      	str	r2, [sp, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d82:	6923      	ldr	r3, [r4, #16]
 8004d84:	b15b      	cbz	r3, 8004d9e <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	f102 030c 	add.w	r3, r2, #12
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	320c      	adds	r2, #12
 8004d96:	e842 3100 	strex	r1, r3, [r2]
 8004d9a:	2900      	cmp	r1, #0
 8004d9c:	d1f3      	bne.n	8004d86 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	f102 0314 	add.w	r3, r2, #20
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	3214      	adds	r2, #20
 8004dae:	e842 3100 	strex	r1, r3, [r2]
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d1f3      	bne.n	8004d9e <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	f102 0314 	add.w	r3, r2, #20
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	3214      	adds	r2, #20
 8004dc6:	e842 3100 	strex	r1, r3, [r2]
 8004dca:	2900      	cmp	r1, #0
 8004dcc:	d1f3      	bne.n	8004db6 <UART_Start_Receive_DMA+0x7a>
}
 8004dce:	2000      	movs	r0, #0
 8004dd0:	b003      	add	sp, #12
 8004dd2:	bd30      	pop	{r4, r5, pc}
 8004dd4:	08004ca3 	.word	0x08004ca3
 8004dd8:	08004c85 	.word	0x08004c85
 8004ddc:	080048b9 	.word	0x080048b9

08004de0 <HAL_UART_Receive_DMA>:
{
 8004de0:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004de2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d108      	bne.n	8004dfc <HAL_UART_Receive_DMA+0x1c>
    if ((pData == NULL) || (Size == 0U))
 8004dea:	b149      	cbz	r1, 8004e00 <HAL_UART_Receive_DMA+0x20>
 8004dec:	b90a      	cbnz	r2, 8004df2 <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 8004dee:	2001      	movs	r0, #1
}
 8004df0:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	2300      	movs	r3, #0
 8004df4:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004df6:	f7ff ffa1 	bl	8004d3c <UART_Start_Receive_DMA>
 8004dfa:	e7f9      	b.n	8004df0 <HAL_UART_Receive_DMA+0x10>
    return HAL_BUSY;
 8004dfc:	2002      	movs	r0, #2
 8004dfe:	e7f7      	b.n	8004df0 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 8004e00:	2001      	movs	r0, #1
 8004e02:	e7f5      	b.n	8004df0 <HAL_UART_Receive_DMA+0x10>

08004e04 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e04:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d129      	bne.n	8004e60 <HAL_UARTEx_ReceiveToIdle_DMA+0x5c>
{
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004e12:	b339      	cbz	r1, 8004e64 <HAL_UARTEx_ReceiveToIdle_DMA+0x60>
 8004e14:	b912      	cbnz	r2, 8004e1c <HAL_UARTEx_ReceiveToIdle_DMA+0x18>
      return HAL_ERROR;
 8004e16:	2001      	movs	r0, #1
}
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e20:	2300      	movs	r3, #0
 8004e22:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004e24:	f7ff ff8a 	bl	8004d3c <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d1f5      	bne.n	8004e18 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d001      	beq.n	8004e36 <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
        status = HAL_ERROR;
 8004e32:	2001      	movs	r0, #1
    return status;
 8004e34:	e7f0      	b.n	8004e18 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e36:	2300      	movs	r3, #0
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	9201      	str	r2, [sp, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e46:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	f102 030c 	add.w	r3, r2, #12
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	320c      	adds	r2, #12
 8004e56:	e842 3100 	strex	r1, r3, [r2]
 8004e5a:	2900      	cmp	r1, #0
 8004e5c:	d1f3      	bne.n	8004e46 <HAL_UARTEx_ReceiveToIdle_DMA+0x42>
 8004e5e:	e7db      	b.n	8004e18 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    return HAL_BUSY;
 8004e60:	2002      	movs	r0, #2
}
 8004e62:	4770      	bx	lr
      return HAL_ERROR;
 8004e64:	2001      	movs	r0, #1
 8004e66:	e7d7      	b.n	8004e18 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>

08004e68 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e68:	e7fe      	b.n	8004e68 <NMI_Handler>

08004e6a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e6a:	e7fe      	b.n	8004e6a <HardFault_Handler>

08004e6c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e6c:	e7fe      	b.n	8004e6c <MemManage_Handler>

08004e6e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e6e:	e7fe      	b.n	8004e6e <BusFault_Handler>

08004e70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e70:	e7fe      	b.n	8004e70 <UsageFault_Handler>

08004e72 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e72:	4770      	bx	lr

08004e74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004e76:	4802      	ldr	r0, [pc, #8]	@ (8004e80 <DMA1_Stream1_IRQHandler+0xc>)
 8004e78:	f7fd fc54 	bl	8002724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004e7c:	bd08      	pop	{r3, pc}
 8004e7e:	bf00      	nop
 8004e80:	200044a8 	.word	0x200044a8

08004e84 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004e86:	4802      	ldr	r0, [pc, #8]	@ (8004e90 <DMA1_Stream3_IRQHandler+0xc>)
 8004e88:	f7fd fc4c 	bl	8002724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004e8c:	bd08      	pop	{r3, pc}
 8004e8e:	bf00      	nop
 8004e90:	20004508 	.word	0x20004508

08004e94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8004e94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e96:	4805      	ldr	r0, [pc, #20]	@ (8004eac <ADC_IRQHandler+0x18>)
 8004e98:	f7fc fec2 	bl	8001c20 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004e9c:	4804      	ldr	r0, [pc, #16]	@ (8004eb0 <ADC_IRQHandler+0x1c>)
 8004e9e:	f7fc febf 	bl	8001c20 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8004ea2:	4804      	ldr	r0, [pc, #16]	@ (8004eb4 <ADC_IRQHandler+0x20>)
 8004ea4:	f7fc febc 	bl	8001c20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004ea8:	bd08      	pop	{r3, pc}
 8004eaa:	bf00      	nop
 8004eac:	200000c4 	.word	0x200000c4
 8004eb0:	2000007c 	.word	0x2000007c
 8004eb4:	20000034 	.word	0x20000034

08004eb8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004eb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eba:	4802      	ldr	r0, [pc, #8]	@ (8004ec4 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8004ebc:	f7fe fe33 	bl	8003b26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004ec0:	bd08      	pop	{r3, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20004460 	.word	0x20004460

08004ec8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004ec8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eca:	4802      	ldr	r0, [pc, #8]	@ (8004ed4 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8004ecc:	f7fe fe2b 	bl	8003b26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004ed0:	bd08      	pop	{r3, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20004460 	.word	0x20004460

08004ed8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eda:	4802      	ldr	r0, [pc, #8]	@ (8004ee4 <TIM1_CC_IRQHandler+0xc>)
 8004edc:	f7fe fe23 	bl	8003b26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004ee0:	bd08      	pop	{r3, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20004460 	.word	0x20004460

08004ee8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ee8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004eea:	4802      	ldr	r0, [pc, #8]	@ (8004ef4 <USART3_IRQHandler+0xc>)
 8004eec:	f7ff fd88 	bl	8004a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ef0:	bd08      	pop	{r3, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20004568 	.word	0x20004568

08004ef8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004efa:	4802      	ldr	r0, [pc, #8]	@ (8004f04 <TIM6_DAC_IRQHandler+0xc>)
 8004efc:	f7fe fe13 	bl	8003b26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004f00:	bd08      	pop	{r3, pc}
 8004f02:	bf00      	nop
 8004f04:	200042a4 	.word	0x200042a4

08004f08 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f08:	4a03      	ldr	r2, [pc, #12]	@ (8004f18 <SystemInit+0x10>)
 8004f0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004f0e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f16:	4770      	bx	lr
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f1c:	4b08      	ldr	r3, [pc, #32]	@ (8004f40 <prvResetNextTaskUnblockTime+0x24>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	b923      	cbnz	r3, 8004f2e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f24:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <prvResetNextTaskUnblockTime+0x28>)
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f2e:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <prvResetNextTaskUnblockTime+0x24>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	4b02      	ldr	r3, [pc, #8]	@ (8004f44 <prvResetNextTaskUnblockTime+0x28>)
 8004f3a:	601a      	str	r2, [r3, #0]
	}
}
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	2000435c 	.word	0x2000435c
 8004f44:	200042f4 	.word	0x200042f4

08004f48 <prvInitialiseNewTask>:
{
 8004f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	4698      	mov	r8, r3
 8004f50:	9d08      	ldr	r5, [sp, #32]
 8004f52:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8004f56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f58:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8004f5a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004f5e:	3a01      	subs	r2, #1
 8004f60:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f64:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8004f68:	b3c1      	cbz	r1, 8004fdc <prvInitialiseNewTask+0x94>
 8004f6a:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f6c:	f04f 0c00 	mov.w	ip, #0
 8004f70:	f1bc 0f0f 	cmp.w	ip, #15
 8004f74:	d809      	bhi.n	8004f8a <prvInitialiseNewTask+0x42>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f76:	f810 200c 	ldrb.w	r2, [r0, ip]
 8004f7a:	eb04 030c 	add.w	r3, r4, ip
 8004f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004f82:	b112      	cbz	r2, 8004f8a <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f84:	f10c 0c01 	add.w	ip, ip, #1
 8004f88:	e7f2      	b.n	8004f70 <prvInitialiseNewTask+0x28>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f90:	2d06      	cmp	r5, #6
 8004f92:	d900      	bls.n	8004f96 <prvInitialiseNewTask+0x4e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f94:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004f96:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004f98:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f9a:	f04f 0a00 	mov.w	sl, #0
 8004f9e:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fa2:	1d20      	adds	r0, r4, #4
 8004fa4:	f7fc f8d9 	bl	800115a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fa8:	f104 0018 	add.w	r0, r4, #24
 8004fac:	f7fc f8d5 	bl	800115a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fb0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb2:	f1c5 0507 	rsb	r5, r5, #7
 8004fb6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fb8:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004fba:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fbe:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fc2:	4642      	mov	r2, r8
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f7fc f9c8 	bl	800135c <pxPortInitialiseStack>
 8004fcc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004fce:	f1b9 0f00 	cmp.w	r9, #0
 8004fd2:	d001      	beq.n	8004fd8 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fd4:	f8c9 4000 	str.w	r4, [r9]
}
 8004fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8004fe2:	e7d5      	b.n	8004f90 <prvInitialiseNewTask+0x48>

08004fe4 <prvInitialiseTaskLists>:
{
 8004fe4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fe6:	2400      	movs	r4, #0
 8004fe8:	e007      	b.n	8004ffa <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004fee:	0093      	lsls	r3, r2, #2
 8004ff0:	480e      	ldr	r0, [pc, #56]	@ (800502c <prvInitialiseTaskLists+0x48>)
 8004ff2:	4418      	add	r0, r3
 8004ff4:	f7fc f8a6 	bl	8001144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ff8:	3401      	adds	r4, #1
 8004ffa:	2c06      	cmp	r4, #6
 8004ffc:	d9f5      	bls.n	8004fea <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8004ffe:	4d0c      	ldr	r5, [pc, #48]	@ (8005030 <prvInitialiseTaskLists+0x4c>)
 8005000:	4628      	mov	r0, r5
 8005002:	f7fc f89f 	bl	8001144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005006:	4c0b      	ldr	r4, [pc, #44]	@ (8005034 <prvInitialiseTaskLists+0x50>)
 8005008:	4620      	mov	r0, r4
 800500a:	f7fc f89b 	bl	8001144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800500e:	480a      	ldr	r0, [pc, #40]	@ (8005038 <prvInitialiseTaskLists+0x54>)
 8005010:	f7fc f898 	bl	8001144 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005014:	4809      	ldr	r0, [pc, #36]	@ (800503c <prvInitialiseTaskLists+0x58>)
 8005016:	f7fc f895 	bl	8001144 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800501a:	4809      	ldr	r0, [pc, #36]	@ (8005040 <prvInitialiseTaskLists+0x5c>)
 800501c:	f7fc f892 	bl	8001144 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005020:	4b08      	ldr	r3, [pc, #32]	@ (8005044 <prvInitialiseTaskLists+0x60>)
 8005022:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005024:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <prvInitialiseTaskLists+0x64>)
 8005026:	601c      	str	r4, [r3, #0]
}
 8005028:	bd38      	pop	{r3, r4, r5, pc}
 800502a:	bf00      	nop
 800502c:	20004388 	.word	0x20004388
 8005030:	20004374 	.word	0x20004374
 8005034:	20004360 	.word	0x20004360
 8005038:	20004344 	.word	0x20004344
 800503c:	20004330 	.word	0x20004330
 8005040:	20004318 	.word	0x20004318
 8005044:	2000435c 	.word	0x2000435c
 8005048:	20004358 	.word	0x20004358

0800504c <prvAddNewTaskToReadyList>:
{
 800504c:	b510      	push	{r4, lr}
 800504e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005050:	f7fc f9b0 	bl	80013b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005054:	4a21      	ldr	r2, [pc, #132]	@ (80050dc <prvAddNewTaskToReadyList+0x90>)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800505c:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <prvAddNewTaskToReadyList+0x94>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b15b      	cbz	r3, 800507a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005062:	4b20      	ldr	r3, [pc, #128]	@ (80050e4 <prvAddNewTaskToReadyList+0x98>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	b96b      	cbnz	r3, 8005084 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005068:	4b1d      	ldr	r3, [pc, #116]	@ (80050e0 <prvAddNewTaskToReadyList+0x94>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005070:	429a      	cmp	r2, r3
 8005072:	d807      	bhi.n	8005084 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005074:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <prvAddNewTaskToReadyList+0x94>)
 8005076:	601c      	str	r4, [r3, #0]
 8005078:	e004      	b.n	8005084 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800507a:	4b19      	ldr	r3, [pc, #100]	@ (80050e0 <prvAddNewTaskToReadyList+0x94>)
 800507c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800507e:	6813      	ldr	r3, [r2, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d028      	beq.n	80050d6 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8005084:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <prvAddNewTaskToReadyList+0x9c>)
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	3301      	adds	r3, #1
 800508a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800508c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800508e:	2301      	movs	r3, #1
 8005090:	4083      	lsls	r3, r0
 8005092:	4a16      	ldr	r2, [pc, #88]	@ (80050ec <prvAddNewTaskToReadyList+0xa0>)
 8005094:	6811      	ldr	r1, [r2, #0]
 8005096:	430b      	orrs	r3, r1
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800509e:	1d21      	adds	r1, r4, #4
 80050a0:	4b13      	ldr	r3, [pc, #76]	@ (80050f0 <prvAddNewTaskToReadyList+0xa4>)
 80050a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80050a6:	f7fc f85b 	bl	8001160 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80050aa:	f7fc f9a5 	bl	80013f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80050ae:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <prvAddNewTaskToReadyList+0x98>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b17b      	cbz	r3, 80050d4 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050b4:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <prvAddNewTaskToReadyList+0x94>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80050bc:	429a      	cmp	r2, r3
 80050be:	d209      	bcs.n	80050d4 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 80050c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80050c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
}
 80050d4:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80050d6:	f7ff ff85 	bl	8004fe4 <prvInitialiseTaskLists>
 80050da:	e7d3      	b.n	8005084 <prvAddNewTaskToReadyList+0x38>
 80050dc:	20004314 	.word	0x20004314
 80050e0:	20004414 	.word	0x20004414
 80050e4:	20004308 	.word	0x20004308
 80050e8:	200042f8 	.word	0x200042f8
 80050ec:	2000430c 	.word	0x2000430c
 80050f0:	20004388 	.word	0x20004388

080050f4 <prvDeleteTCB>:
	{
 80050f4:	b510      	push	{r4, lr}
 80050f6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050f8:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 80050fc:	b163      	cbz	r3, 8005118 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d011      	beq.n	8005126 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005102:	2b02      	cmp	r3, #2
 8005104:	d00e      	beq.n	8005124 <prvDeleteTCB+0x30>
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	e7fe      	b.n	8005116 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8005118:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800511a:	f7fb ff7f 	bl	800101c <vPortFree>
				vPortFree( pxTCB );
 800511e:	4620      	mov	r0, r4
 8005120:	f7fb ff7c 	bl	800101c <vPortFree>
	}
 8005124:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005126:	f7fb ff79 	bl	800101c <vPortFree>
 800512a:	e7fb      	b.n	8005124 <prvDeleteTCB+0x30>

0800512c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800512c:	4b0f      	ldr	r3, [pc, #60]	@ (800516c <prvCheckTasksWaitingTermination+0x40>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	b1d3      	cbz	r3, 8005168 <prvCheckTasksWaitingTermination+0x3c>
{
 8005132:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005134:	f7fc f93e 	bl	80013b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005138:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <prvCheckTasksWaitingTermination+0x44>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800513e:	1d20      	adds	r0, r4, #4
 8005140:	f7fc f832 	bl	80011a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005144:	4a0b      	ldr	r2, [pc, #44]	@ (8005174 <prvCheckTasksWaitingTermination+0x48>)
 8005146:	6813      	ldr	r3, [r2, #0]
 8005148:	3b01      	subs	r3, #1
 800514a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800514c:	4a07      	ldr	r2, [pc, #28]	@ (800516c <prvCheckTasksWaitingTermination+0x40>)
 800514e:	6813      	ldr	r3, [r2, #0]
 8005150:	3b01      	subs	r3, #1
 8005152:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005154:	f7fc f950 	bl	80013f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005158:	4620      	mov	r0, r4
 800515a:	f7ff ffcb 	bl	80050f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800515e:	4b03      	ldr	r3, [pc, #12]	@ (800516c <prvCheckTasksWaitingTermination+0x40>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e6      	bne.n	8005134 <prvCheckTasksWaitingTermination+0x8>
}
 8005166:	bd10      	pop	{r4, pc}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	2000432c 	.word	0x2000432c
 8005170:	20004330 	.word	0x20004330
 8005174:	20004314 	.word	0x20004314

08005178 <prvIdleTask>:
{
 8005178:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800517a:	f7ff ffd7 	bl	800512c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800517e:	4b07      	ldr	r3, [pc, #28]	@ (800519c <prvIdleTask+0x24>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d9f9      	bls.n	800517a <prvIdleTask+0x2>
				taskYIELD();
 8005186:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800518a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800518e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	e7ee      	b.n	800517a <prvIdleTask+0x2>
 800519c:	20004388 	.word	0x20004388

080051a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	4604      	mov	r4, r0
 80051a4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051a6:	4b1d      	ldr	r3, [pc, #116]	@ (800521c <prvAddCurrentTaskToDelayedList+0x7c>)
 80051a8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005220 <prvAddCurrentTaskToDelayedList+0x80>)
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	3004      	adds	r0, #4
 80051b0:	f7fb fffa 	bl	80011a8 <uxListRemove>
 80051b4:	b948      	cbnz	r0, 80051ca <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80051b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005220 <prvAddCurrentTaskToDelayedList+0x80>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	2201      	movs	r2, #1
 80051be:	409a      	lsls	r2, r3
 80051c0:	4918      	ldr	r1, [pc, #96]	@ (8005224 <prvAddCurrentTaskToDelayedList+0x84>)
 80051c2:	680b      	ldr	r3, [r1, #0]
 80051c4:	ea23 0302 	bic.w	r3, r3, r2
 80051c8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051ca:	f1b4 3fff 	cmp.w	r4, #4294967295
 80051ce:	d00d      	beq.n	80051ec <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051d0:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051d2:	4b13      	ldr	r3, [pc, #76]	@ (8005220 <prvAddCurrentTaskToDelayedList+0x80>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80051d8:	42a6      	cmp	r6, r4
 80051da:	d910      	bls.n	80051fe <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051dc:	4b12      	ldr	r3, [pc, #72]	@ (8005228 <prvAddCurrentTaskToDelayedList+0x88>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005220 <prvAddCurrentTaskToDelayedList+0x80>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	3104      	adds	r1, #4
 80051e6:	f7fb ffc6 	bl	8001176 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	d0ef      	beq.n	80051d0 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <prvAddCurrentTaskToDelayedList+0x80>)
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	3104      	adds	r1, #4
 80051f6:	480d      	ldr	r0, [pc, #52]	@ (800522c <prvAddCurrentTaskToDelayedList+0x8c>)
 80051f8:	f7fb ffb2 	bl	8001160 <vListInsertEnd>
 80051fc:	e7f5      	b.n	80051ea <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <prvAddCurrentTaskToDelayedList+0x90>)
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	4b07      	ldr	r3, [pc, #28]	@ (8005220 <prvAddCurrentTaskToDelayedList+0x80>)
 8005204:	6819      	ldr	r1, [r3, #0]
 8005206:	3104      	adds	r1, #4
 8005208:	f7fb ffb5 	bl	8001176 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800520c:	4b09      	ldr	r3, [pc, #36]	@ (8005234 <prvAddCurrentTaskToDelayedList+0x94>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	42a3      	cmp	r3, r4
 8005212:	d9ea      	bls.n	80051ea <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8005214:	4b07      	ldr	r3, [pc, #28]	@ (8005234 <prvAddCurrentTaskToDelayedList+0x94>)
 8005216:	601c      	str	r4, [r3, #0]
}
 8005218:	e7e7      	b.n	80051ea <prvAddCurrentTaskToDelayedList+0x4a>
 800521a:	bf00      	nop
 800521c:	20004310 	.word	0x20004310
 8005220:	20004414 	.word	0x20004414
 8005224:	2000430c 	.word	0x2000430c
 8005228:	20004358 	.word	0x20004358
 800522c:	20004318 	.word	0x20004318
 8005230:	2000435c 	.word	0x2000435c
 8005234:	200042f4 	.word	0x200042f4

08005238 <xTaskCreateStatic>:
	{
 8005238:	b530      	push	{r4, r5, lr}
 800523a:	b087      	sub	sp, #28
 800523c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800523e:	b17c      	cbz	r4, 8005260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005240:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005242:	b1b5      	cbz	r5, 8005272 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005244:	2554      	movs	r5, #84	@ 0x54
 8005246:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005248:	9d04      	ldr	r5, [sp, #16]
 800524a:	2d54      	cmp	r5, #84	@ 0x54
 800524c:	d01a      	beq.n	8005284 <xTaskCreateStatic+0x4c>
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	e7fe      	b.n	800525e <xTaskCreateStatic+0x26>
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005270:	e7fe      	b.n	8005270 <xTaskCreateStatic+0x38>
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005282:	e7fe      	b.n	8005282 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005284:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005286:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005288:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800528a:	2402      	movs	r4, #2
 800528c:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005290:	2400      	movs	r4, #0
 8005292:	9403      	str	r4, [sp, #12]
 8005294:	9502      	str	r5, [sp, #8]
 8005296:	ac05      	add	r4, sp, #20
 8005298:	9401      	str	r4, [sp, #4]
 800529a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800529c:	9400      	str	r4, [sp, #0]
 800529e:	f7ff fe53 	bl	8004f48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052a2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80052a4:	f7ff fed2 	bl	800504c <prvAddNewTaskToReadyList>
	}
 80052a8:	9805      	ldr	r0, [sp, #20]
 80052aa:	b007      	add	sp, #28
 80052ac:	bd30      	pop	{r4, r5, pc}

080052ae <xTaskCreate>:
	{
 80052ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052b2:	b085      	sub	sp, #20
 80052b4:	4607      	mov	r7, r0
 80052b6:	4688      	mov	r8, r1
 80052b8:	4614      	mov	r4, r2
 80052ba:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052bc:	0090      	lsls	r0, r2, #2
 80052be:	f7fb fe2b 	bl	8000f18 <pvPortMalloc>
			if( pxStack != NULL )
 80052c2:	b308      	cbz	r0, 8005308 <xTaskCreate+0x5a>
 80052c4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052c6:	2054      	movs	r0, #84	@ 0x54
 80052c8:	f7fb fe26 	bl	8000f18 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80052cc:	4605      	mov	r5, r0
 80052ce:	b1a8      	cbz	r0, 80052fc <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80052d0:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052da:	9303      	str	r3, [sp, #12]
 80052dc:	9002      	str	r0, [sp, #8]
 80052de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	4633      	mov	r3, r6
 80052e8:	4622      	mov	r2, r4
 80052ea:	4641      	mov	r1, r8
 80052ec:	4638      	mov	r0, r7
 80052ee:	f7ff fe2b 	bl	8004f48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052f2:	4628      	mov	r0, r5
 80052f4:	f7ff feaa 	bl	800504c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052f8:	2001      	movs	r0, #1
 80052fa:	e007      	b.n	800530c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80052fc:	4648      	mov	r0, r9
 80052fe:	f7fb fe8d 	bl	800101c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005302:	f04f 30ff 	mov.w	r0, #4294967295
 8005306:	e001      	b.n	800530c <xTaskCreate+0x5e>
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800530c:	b005      	add	sp, #20
 800530e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005314 <vTaskStartScheduler>:
{
 8005314:	b510      	push	{r4, lr}
 8005316:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005318:	2400      	movs	r4, #0
 800531a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800531c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800531e:	aa07      	add	r2, sp, #28
 8005320:	a906      	add	r1, sp, #24
 8005322:	a805      	add	r0, sp, #20
 8005324:	f7fb fcba 	bl	8000c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005328:	9b05      	ldr	r3, [sp, #20]
 800532a:	9302      	str	r3, [sp, #8]
 800532c:	9b06      	ldr	r3, [sp, #24]
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	9400      	str	r4, [sp, #0]
 8005332:	4623      	mov	r3, r4
 8005334:	9a07      	ldr	r2, [sp, #28]
 8005336:	490e      	ldr	r1, [pc, #56]	@ (8005370 <vTaskStartScheduler+0x5c>)
 8005338:	480e      	ldr	r0, [pc, #56]	@ (8005374 <vTaskStartScheduler+0x60>)
 800533a:	f7ff ff7d 	bl	8005238 <xTaskCreateStatic>
 800533e:	4b0e      	ldr	r3, [pc, #56]	@ (8005378 <vTaskStartScheduler+0x64>)
 8005340:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8005342:	b190      	cbz	r0, 800536a <vTaskStartScheduler+0x56>
 8005344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005354:	4b09      	ldr	r3, [pc, #36]	@ (800537c <vTaskStartScheduler+0x68>)
 8005356:	f04f 32ff 	mov.w	r2, #4294967295
 800535a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800535c:	4b08      	ldr	r3, [pc, #32]	@ (8005380 <vTaskStartScheduler+0x6c>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005362:	4b08      	ldr	r3, [pc, #32]	@ (8005384 <vTaskStartScheduler+0x70>)
 8005364:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005366:	f7fc f8bf 	bl	80014e8 <xPortStartScheduler>
}
 800536a:	b008      	add	sp, #32
 800536c:	bd10      	pop	{r4, pc}
 800536e:	bf00      	nop
 8005370:	08005f90 	.word	0x08005f90
 8005374:	08005179 	.word	0x08005179
 8005378:	200042f0 	.word	0x200042f0
 800537c:	200042f4 	.word	0x200042f4
 8005380:	20004308 	.word	0x20004308
 8005384:	20004310 	.word	0x20004310

08005388 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005388:	4a02      	ldr	r2, [pc, #8]	@ (8005394 <vTaskSuspendAll+0xc>)
 800538a:	6813      	ldr	r3, [r2, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	6013      	str	r3, [r2, #0]
}
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	200042ec 	.word	0x200042ec

08005398 <xTaskIncrementTick>:
{
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800539a:	4b3a      	ldr	r3, [pc, #232]	@ (8005484 <xTaskIncrementTick+0xec>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d169      	bne.n	8005476 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053a2:	4b39      	ldr	r3, [pc, #228]	@ (8005488 <xTaskIncrementTick+0xf0>)
 80053a4:	681d      	ldr	r5, [r3, #0]
 80053a6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80053a8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053aa:	b9c5      	cbnz	r5, 80053de <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80053ac:	4b37      	ldr	r3, [pc, #220]	@ (800548c <xTaskIncrementTick+0xf4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	b143      	cbz	r3, 80053c6 <xTaskIncrementTick+0x2e>
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	e7fe      	b.n	80053c4 <xTaskIncrementTick+0x2c>
 80053c6:	4a31      	ldr	r2, [pc, #196]	@ (800548c <xTaskIncrementTick+0xf4>)
 80053c8:	6811      	ldr	r1, [r2, #0]
 80053ca:	4b31      	ldr	r3, [pc, #196]	@ (8005490 <xTaskIncrementTick+0xf8>)
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	6010      	str	r0, [r2, #0]
 80053d0:	6019      	str	r1, [r3, #0]
 80053d2:	4a30      	ldr	r2, [pc, #192]	@ (8005494 <xTaskIncrementTick+0xfc>)
 80053d4:	6813      	ldr	r3, [r2, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	f7ff fd9f 	bl	8004f1c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053de:	4b2e      	ldr	r3, [pc, #184]	@ (8005498 <xTaskIncrementTick+0x100>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	42ab      	cmp	r3, r5
 80053e4:	d93d      	bls.n	8005462 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80053e6:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053e8:	4b2c      	ldr	r3, [pc, #176]	@ (800549c <xTaskIncrementTick+0x104>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80053f2:	009a      	lsls	r2, r3, #2
 80053f4:	4b2a      	ldr	r3, [pc, #168]	@ (80054a0 <xTaskIncrementTick+0x108>)
 80053f6:	589b      	ldr	r3, [r3, r2]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d900      	bls.n	80053fe <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80053fc:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80053fe:	4b29      	ldr	r3, [pc, #164]	@ (80054a4 <xTaskIncrementTick+0x10c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d03c      	beq.n	8005480 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8005406:	2701      	movs	r7, #1
	return xSwitchRequired;
 8005408:	e03a      	b.n	8005480 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800540a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800540c:	4b1f      	ldr	r3, [pc, #124]	@ (800548c <xTaskIncrementTick+0xf4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	b343      	cbz	r3, 8005466 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005414:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <xTaskIncrementTick+0xf4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800541c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800541e:	429d      	cmp	r5, r3
 8005420:	d326      	bcc.n	8005470 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005422:	1d26      	adds	r6, r4, #4
 8005424:	4630      	mov	r0, r6
 8005426:	f7fb febf 	bl	80011a8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800542a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800542c:	b11b      	cbz	r3, 8005436 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800542e:	f104 0018 	add.w	r0, r4, #24
 8005432:	f7fb feb9 	bl	80011a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005436:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005438:	2201      	movs	r2, #1
 800543a:	409a      	lsls	r2, r3
 800543c:	491a      	ldr	r1, [pc, #104]	@ (80054a8 <xTaskIncrementTick+0x110>)
 800543e:	6808      	ldr	r0, [r1, #0]
 8005440:	4302      	orrs	r2, r0
 8005442:	600a      	str	r2, [r1, #0]
 8005444:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005448:	009a      	lsls	r2, r3, #2
 800544a:	4631      	mov	r1, r6
 800544c:	4814      	ldr	r0, [pc, #80]	@ (80054a0 <xTaskIncrementTick+0x108>)
 800544e:	4410      	add	r0, r2
 8005450:	f7fb fe86 	bl	8001160 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005454:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005456:	4b11      	ldr	r3, [pc, #68]	@ (800549c <xTaskIncrementTick+0x104>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	429a      	cmp	r2, r3
 800545e:	d2d4      	bcs.n	800540a <xTaskIncrementTick+0x72>
 8005460:	e7d4      	b.n	800540c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8005462:	2700      	movs	r7, #0
 8005464:	e7d2      	b.n	800540c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005466:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <xTaskIncrementTick+0x100>)
 8005468:	f04f 32ff 	mov.w	r2, #4294967295
 800546c:	601a      	str	r2, [r3, #0]
					break;
 800546e:	e7bb      	b.n	80053e8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005470:	4a09      	ldr	r2, [pc, #36]	@ (8005498 <xTaskIncrementTick+0x100>)
 8005472:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005474:	e7b8      	b.n	80053e8 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8005476:	4a0d      	ldr	r2, [pc, #52]	@ (80054ac <xTaskIncrementTick+0x114>)
 8005478:	6813      	ldr	r3, [r2, #0]
 800547a:	3301      	adds	r3, #1
 800547c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800547e:	2700      	movs	r7, #0
}
 8005480:	4638      	mov	r0, r7
 8005482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005484:	200042ec 	.word	0x200042ec
 8005488:	20004310 	.word	0x20004310
 800548c:	2000435c 	.word	0x2000435c
 8005490:	20004358 	.word	0x20004358
 8005494:	200042fc 	.word	0x200042fc
 8005498:	200042f4 	.word	0x200042f4
 800549c:	20004414 	.word	0x20004414
 80054a0:	20004388 	.word	0x20004388
 80054a4:	20004300 	.word	0x20004300
 80054a8:	2000430c 	.word	0x2000430c
 80054ac:	20004304 	.word	0x20004304

080054b0 <xTaskResumeAll>:
{
 80054b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80054b2:	4b35      	ldr	r3, [pc, #212]	@ (8005588 <xTaskResumeAll+0xd8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	b943      	cbnz	r3, 80054ca <xTaskResumeAll+0x1a>
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	e7fe      	b.n	80054c8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80054ca:	f7fb ff73 	bl	80013b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80054ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005588 <xTaskResumeAll+0xd8>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	3a01      	subs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d14f      	bne.n	800557c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054dc:	4b2b      	ldr	r3, [pc, #172]	@ (800558c <xTaskResumeAll+0xdc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	b90b      	cbnz	r3, 80054e6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80054e2:	2400      	movs	r4, #0
 80054e4:	e04b      	b.n	800557e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80054e6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054e8:	4b29      	ldr	r3, [pc, #164]	@ (8005590 <xTaskResumeAll+0xe0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	b31b      	cbz	r3, 8005536 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ee:	4b28      	ldr	r3, [pc, #160]	@ (8005590 <xTaskResumeAll+0xe0>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054f4:	f104 0018 	add.w	r0, r4, #24
 80054f8:	f7fb fe56 	bl	80011a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054fc:	1d25      	adds	r5, r4, #4
 80054fe:	4628      	mov	r0, r5
 8005500:	f7fb fe52 	bl	80011a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005504:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005506:	2301      	movs	r3, #1
 8005508:	4083      	lsls	r3, r0
 800550a:	4a22      	ldr	r2, [pc, #136]	@ (8005594 <xTaskResumeAll+0xe4>)
 800550c:	6811      	ldr	r1, [r2, #0]
 800550e:	430b      	orrs	r3, r1
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005516:	4629      	mov	r1, r5
 8005518:	4b1f      	ldr	r3, [pc, #124]	@ (8005598 <xTaskResumeAll+0xe8>)
 800551a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800551e:	f7fb fe1f 	bl	8001160 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005522:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005524:	4b1d      	ldr	r3, [pc, #116]	@ (800559c <xTaskResumeAll+0xec>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	429a      	cmp	r2, r3
 800552c:	d3dc      	bcc.n	80054e8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800552e:	4b1c      	ldr	r3, [pc, #112]	@ (80055a0 <xTaskResumeAll+0xf0>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e7d8      	b.n	80054e8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8005536:	b10c      	cbz	r4, 800553c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005538:	f7ff fcf0 	bl	8004f1c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800553c:	4b19      	ldr	r3, [pc, #100]	@ (80055a4 <xTaskResumeAll+0xf4>)
 800553e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005540:	b984      	cbnz	r4, 8005564 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8005542:	4b17      	ldr	r3, [pc, #92]	@ (80055a0 <xTaskResumeAll+0xf0>)
 8005544:	681c      	ldr	r4, [r3, #0]
 8005546:	b1d4      	cbz	r4, 800557e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005548:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800554c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005550:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800555c:	2401      	movs	r4, #1
 800555e:	e00e      	b.n	800557e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005560:	3c01      	subs	r4, #1
 8005562:	d007      	beq.n	8005574 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8005564:	f7ff ff18 	bl	8005398 <xTaskIncrementTick>
 8005568:	2800      	cmp	r0, #0
 800556a:	d0f9      	beq.n	8005560 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800556c:	4b0c      	ldr	r3, [pc, #48]	@ (80055a0 <xTaskResumeAll+0xf0>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e7f5      	b.n	8005560 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8005574:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <xTaskResumeAll+0xf4>)
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e7e2      	b.n	8005542 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800557c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800557e:	f7fb ff3b 	bl	80013f8 <vPortExitCritical>
}
 8005582:	4620      	mov	r0, r4
 8005584:	bd38      	pop	{r3, r4, r5, pc}
 8005586:	bf00      	nop
 8005588:	200042ec 	.word	0x200042ec
 800558c:	20004314 	.word	0x20004314
 8005590:	20004344 	.word	0x20004344
 8005594:	2000430c 	.word	0x2000430c
 8005598:	20004388 	.word	0x20004388
 800559c:	20004414 	.word	0x20004414
 80055a0:	20004300 	.word	0x20004300
 80055a4:	20004304 	.word	0x20004304

080055a8 <vTaskDelay>:
	{
 80055a8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055aa:	b1a8      	cbz	r0, 80055d8 <vTaskDelay+0x30>
 80055ac:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80055ae:	4b10      	ldr	r3, [pc, #64]	@ (80055f0 <vTaskDelay+0x48>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	b143      	cbz	r3, 80055c6 <vTaskDelay+0x1e>
 80055b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	e7fe      	b.n	80055c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80055c6:	f7ff fedf 	bl	8005388 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055ca:	2100      	movs	r1, #0
 80055cc:	4620      	mov	r0, r4
 80055ce:	f7ff fde7 	bl	80051a0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80055d2:	f7ff ff6d 	bl	80054b0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80055d6:	b948      	cbnz	r0, 80055ec <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80055d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80055dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	f3bf 8f6f 	isb	sy
	}
 80055ec:	bd10      	pop	{r4, pc}
 80055ee:	bf00      	nop
 80055f0:	200042ec 	.word	0x200042ec

080055f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055f4:	4b20      	ldr	r3, [pc, #128]	@ (8005678 <vTaskSwitchContext+0x84>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	b11b      	cbz	r3, 8005602 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80055fa:	4b20      	ldr	r3, [pc, #128]	@ (800567c <vTaskSwitchContext+0x88>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005602:	4b1e      	ldr	r3, [pc, #120]	@ (800567c <vTaskSwitchContext+0x88>)
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005608:	4b1d      	ldr	r3, [pc, #116]	@ (8005680 <vTaskSwitchContext+0x8c>)
 800560a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800560c:	fab3 f383 	clz	r3, r3
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f1c3 031f 	rsb	r3, r3, #31
 8005616:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800561a:	008a      	lsls	r2, r1, #2
 800561c:	4919      	ldr	r1, [pc, #100]	@ (8005684 <vTaskSwitchContext+0x90>)
 800561e:	588a      	ldr	r2, [r1, r2]
 8005620:	b942      	cbnz	r2, 8005634 <vTaskSwitchContext+0x40>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	e7fe      	b.n	8005632 <vTaskSwitchContext+0x3e>
 8005634:	4813      	ldr	r0, [pc, #76]	@ (8005684 <vTaskSwitchContext+0x90>)
 8005636:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800563a:	008a      	lsls	r2, r1, #2
 800563c:	4402      	add	r2, r0
 800563e:	6851      	ldr	r1, [r2, #4]
 8005640:	6849      	ldr	r1, [r1, #4]
 8005642:	6051      	str	r1, [r2, #4]
 8005644:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8005648:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800564c:	3208      	adds	r2, #8
 800564e:	4402      	add	r2, r0
 8005650:	4291      	cmp	r1, r2
 8005652:	d009      	beq.n	8005668 <vTaskSwitchContext+0x74>
 8005654:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005658:	009a      	lsls	r2, r3, #2
 800565a:	4b0a      	ldr	r3, [pc, #40]	@ (8005684 <vTaskSwitchContext+0x90>)
 800565c:	4413      	add	r3, r2
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	4b09      	ldr	r3, [pc, #36]	@ (8005688 <vTaskSwitchContext+0x94>)
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005668:	6848      	ldr	r0, [r1, #4]
 800566a:	4662      	mov	r2, ip
 800566c:	0091      	lsls	r1, r2, #2
 800566e:	4a05      	ldr	r2, [pc, #20]	@ (8005684 <vTaskSwitchContext+0x90>)
 8005670:	440a      	add	r2, r1
 8005672:	6050      	str	r0, [r2, #4]
 8005674:	e7ee      	b.n	8005654 <vTaskSwitchContext+0x60>
 8005676:	bf00      	nop
 8005678:	200042ec 	.word	0x200042ec
 800567c:	20004300 	.word	0x20004300
 8005680:	2000430c 	.word	0x2000430c
 8005684:	20004388 	.word	0x20004388
 8005688:	20004414 	.word	0x20004414

0800568c <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800568c:	b500      	push	{lr}
 800568e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8005690:	a902      	add	r1, sp, #8
 8005692:	2300      	movs	r3, #0
 8005694:	9302      	str	r3, [sp, #8]
 8005696:	604b      	str	r3, [r1, #4]
 8005698:	608b      	str	r3, [r1, #8]
 800569a:	60cb      	str	r3, [r1, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80056a0:	480f      	ldr	r0, [pc, #60]	@ (80056e0 <MX_TIM3_Init+0x54>)
 80056a2:	4a10      	ldr	r2, [pc, #64]	@ (80056e4 <MX_TIM3_Init+0x58>)
 80056a4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 80056a6:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056a8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 80056aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056ae:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056b0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056b2:	6183      	str	r3, [r0, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.Commutation_Delay = 0;
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80056b4:	f7fe fdb7 	bl	8004226 <HAL_TIMEx_HallSensor_Init>
 80056b8:	b958      	cbnz	r0, 80056d2 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80056ba:	2350      	movs	r3, #80	@ 0x50
 80056bc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056be:	2300      	movs	r3, #0
 80056c0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056c2:	4669      	mov	r1, sp
 80056c4:	4806      	ldr	r0, [pc, #24]	@ (80056e0 <MX_TIM3_Init+0x54>)
 80056c6:	f7fe fe91 	bl	80043ec <HAL_TIMEx_MasterConfigSynchronization>
 80056ca:	b928      	cbnz	r0, 80056d8 <MX_TIM3_Init+0x4c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80056cc:	b007      	add	sp, #28
 80056ce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80056d2:	f7fb fd89 	bl	80011e8 <Error_Handler>
 80056d6:	e7f0      	b.n	80056ba <MX_TIM3_Init+0x2e>
    Error_Handler();
 80056d8:	f7fb fd86 	bl	80011e8 <Error_Handler>
}
 80056dc:	e7f6      	b.n	80056cc <MX_TIM3_Init+0x40>
 80056de:	bf00      	nop
 80056e0:	20004418 	.word	0x20004418
 80056e4:	40000400 	.word	0x40000400

080056e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056e8:	b510      	push	{r4, lr}
 80056ea:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ec:	2300      	movs	r3, #0
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	9304      	str	r3, [sp, #16]
 80056f2:	9305      	str	r3, [sp, #20]
 80056f4:	9306      	str	r3, [sp, #24]
 80056f6:	9307      	str	r3, [sp, #28]
  if(tim_baseHandle->Instance==TIM1)
 80056f8:	6802      	ldr	r2, [r0, #0]
 80056fa:	4b20      	ldr	r3, [pc, #128]	@ (800577c <HAL_TIM_Base_MspInit+0x94>)
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d001      	beq.n	8005704 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005700:	b008      	add	sp, #32
 8005702:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005704:	2400      	movs	r4, #0
 8005706:	9401      	str	r4, [sp, #4]
 8005708:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 800570c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	645a      	str	r2, [r3, #68]	@ 0x44
 8005714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005716:	f002 0201 	and.w	r2, r2, #1
 800571a:	9201      	str	r2, [sp, #4]
 800571c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800571e:	9402      	str	r4, [sp, #8]
 8005720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005722:	f042 0202 	orr.w	r2, r2, #2
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	9302      	str	r3, [sp, #8]
 8005730:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005736:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005738:	2302      	movs	r3, #2
 800573a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800573c:	2301      	movs	r3, #1
 800573e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005740:	a903      	add	r1, sp, #12
 8005742:	480f      	ldr	r0, [pc, #60]	@ (8005780 <HAL_TIM_Base_MspInit+0x98>)
 8005744:	f7fd f8dc 	bl	8002900 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8005748:	4622      	mov	r2, r4
 800574a:	2105      	movs	r1, #5
 800574c:	2018      	movs	r0, #24
 800574e:	f7fc fe63 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005752:	2018      	movs	r0, #24
 8005754:	f7fc fe70 	bl	8002438 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8005758:	4622      	mov	r2, r4
 800575a:	2105      	movs	r1, #5
 800575c:	2019      	movs	r0, #25
 800575e:	f7fc fe5b 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005762:	2019      	movs	r0, #25
 8005764:	f7fc fe68 	bl	8002438 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8005768:	4622      	mov	r2, r4
 800576a:	2105      	movs	r1, #5
 800576c:	201b      	movs	r0, #27
 800576e:	f7fc fe53 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005772:	201b      	movs	r0, #27
 8005774:	f7fc fe60 	bl	8002438 <HAL_NVIC_EnableIRQ>
}
 8005778:	e7c2      	b.n	8005700 <HAL_TIM_Base_MspInit+0x18>
 800577a:	bf00      	nop
 800577c:	40010000 	.word	0x40010000
 8005780:	40020400 	.word	0x40020400

08005784 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005788:	2300      	movs	r3, #0
 800578a:	9303      	str	r3, [sp, #12]
 800578c:	9304      	str	r3, [sp, #16]
 800578e:	9305      	str	r3, [sp, #20]
 8005790:	9306      	str	r3, [sp, #24]
 8005792:	9307      	str	r3, [sp, #28]
  if(timex_hallsensorHandle->Instance==TIM3)
 8005794:	6802      	ldr	r2, [r0, #0]
 8005796:	4b1d      	ldr	r3, [pc, #116]	@ (800580c <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_TIMEx_HallSensor_MspInit+0x1c>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800579c:	b008      	add	sp, #32
 800579e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057a0:	2400      	movs	r4, #0
 80057a2:	9400      	str	r4, [sp, #0]
 80057a4:	f503 330d 	add.w	r3, r3, #144384	@ 0x23400
 80057a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057aa:	f042 0202 	orr.w	r2, r2, #2
 80057ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80057b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057b2:	f002 0202 	and.w	r2, r2, #2
 80057b6:	9200      	str	r2, [sp, #0]
 80057b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ba:	9401      	str	r4, [sp, #4]
 80057bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80057c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057c6:	f002 0201 	and.w	r2, r2, #1
 80057ca:	9201      	str	r2, [sp, #4]
 80057cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ce:	9402      	str	r4, [sp, #8]
 80057d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d2:	f042 0202 	orr.w	r2, r2, #2
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	9302      	str	r3, [sp, #8]
 80057e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057e2:	23c0      	movs	r3, #192	@ 0xc0
 80057e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e6:	2502      	movs	r5, #2
 80057e8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80057ea:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ec:	ae03      	add	r6, sp, #12
 80057ee:	4631      	mov	r1, r6
 80057f0:	4807      	ldr	r0, [pc, #28]	@ (8005810 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 80057f2:	f7fd f885 	bl	8002900 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80057f6:	2301      	movs	r3, #1
 80057f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fa:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057fe:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005800:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005802:	4631      	mov	r1, r6
 8005804:	4803      	ldr	r0, [pc, #12]	@ (8005814 <HAL_TIMEx_HallSensor_MspInit+0x90>)
 8005806:	f7fd f87b 	bl	8002900 <HAL_GPIO_Init>
}
 800580a:	e7c7      	b.n	800579c <HAL_TIMEx_HallSensor_MspInit+0x18>
 800580c:	40000400 	.word	0x40000400
 8005810:	40020000 	.word	0x40020000
 8005814:	40020400 	.word	0x40020400

08005818 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005818:	b500      	push	{lr}
 800581a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800581c:	2300      	movs	r3, #0
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	9303      	str	r3, [sp, #12]
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8005828:	6802      	ldr	r2, [r0, #0]
 800582a:	4b0f      	ldr	r3, [pc, #60]	@ (8005868 <HAL_TIM_MspPostInit+0x50>)
 800582c:	429a      	cmp	r2, r3
 800582e:	d002      	beq.n	8005836 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005830:	b007      	add	sp, #28
 8005832:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005836:	2300      	movs	r3, #0
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <HAL_TIM_MspPostInit+0x54>)
 800583c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	631a      	str	r2, [r3, #48]	@ 0x30
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800584e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8005852:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005854:	2302      	movs	r3, #2
 8005856:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005858:	2301      	movs	r3, #1
 800585a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800585c:	a901      	add	r1, sp, #4
 800585e:	4804      	ldr	r0, [pc, #16]	@ (8005870 <HAL_TIM_MspPostInit+0x58>)
 8005860:	f7fd f84e 	bl	8002900 <HAL_GPIO_Init>
}
 8005864:	e7e4      	b.n	8005830 <HAL_TIM_MspPostInit+0x18>
 8005866:	bf00      	nop
 8005868:	40010000 	.word	0x40010000
 800586c:	40023800 	.word	0x40023800
 8005870:	40020000 	.word	0x40020000

08005874 <MX_TIM1_Init>:
{
 8005874:	b530      	push	{r4, r5, lr}
 8005876:	b097      	sub	sp, #92	@ 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005878:	2400      	movs	r4, #0
 800587a:	9412      	str	r4, [sp, #72]	@ 0x48
 800587c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800587e:	9414      	str	r4, [sp, #80]	@ 0x50
 8005880:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005882:	9410      	str	r4, [sp, #64]	@ 0x40
 8005884:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005886:	9409      	str	r4, [sp, #36]	@ 0x24
 8005888:	940a      	str	r4, [sp, #40]	@ 0x28
 800588a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800588c:	940c      	str	r4, [sp, #48]	@ 0x30
 800588e:	940d      	str	r4, [sp, #52]	@ 0x34
 8005890:	940e      	str	r4, [sp, #56]	@ 0x38
 8005892:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005894:	2520      	movs	r5, #32
 8005896:	462a      	mov	r2, r5
 8005898:	4621      	mov	r1, r4
 800589a:	a801      	add	r0, sp, #4
 800589c:	f000 f98d 	bl	8005bba <memset>
  htim1.Instance = TIM1;
 80058a0:	4840      	ldr	r0, [pc, #256]	@ (80059a4 <MX_TIM1_Init+0x130>)
 80058a2:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <MX_TIM1_Init+0x134>)
 80058a4:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 1-1;
 80058a6:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80058a8:	6085      	str	r5, [r0, #8]
  htim1.Init.Period = 8000-1;
 80058aa:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 80058ae:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80058b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058b4:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 1;
 80058b6:	2301      	movs	r3, #1
 80058b8:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058ba:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80058bc:	f7fe fa4e 	bl	8003d5c <HAL_TIM_Base_Init>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d154      	bne.n	800596e <MX_TIM1_Init+0xfa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058c8:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80058ca:	a912      	add	r1, sp, #72	@ 0x48
 80058cc:	4835      	ldr	r0, [pc, #212]	@ (80059a4 <MX_TIM1_Init+0x130>)
 80058ce:	f7fe fb8e 	bl	8003fee <HAL_TIM_ConfigClockSource>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d14e      	bne.n	8005974 <MX_TIM1_Init+0x100>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80058d6:	4833      	ldr	r0, [pc, #204]	@ (80059a4 <MX_TIM1_Init+0x130>)
 80058d8:	f7fe fa6c 	bl	8003db4 <HAL_TIM_PWM_Init>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d14c      	bne.n	800597a <MX_TIM1_Init+0x106>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058e0:	2300      	movs	r3, #0
 80058e2:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058e4:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058e6:	a910      	add	r1, sp, #64	@ 0x40
 80058e8:	482e      	ldr	r0, [pc, #184]	@ (80059a4 <MX_TIM1_Init+0x130>)
 80058ea:	f7fe fd7f 	bl	80043ec <HAL_TIMEx_MasterConfigSynchronization>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d146      	bne.n	8005980 <MX_TIM1_Init+0x10c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058f2:	2360      	movs	r3, #96	@ 0x60
 80058f4:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80058f6:	2200      	movs	r2, #0
 80058f8:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058fa:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058fc:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058fe:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005900:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005902:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005904:	a909      	add	r1, sp, #36	@ 0x24
 8005906:	4827      	ldr	r0, [pc, #156]	@ (80059a4 <MX_TIM1_Init+0x130>)
 8005908:	f7fe fab8 	bl	8003e7c <HAL_TIM_PWM_ConfigChannel>
 800590c:	2800      	cmp	r0, #0
 800590e:	d13a      	bne.n	8005986 <MX_TIM1_Init+0x112>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005910:	2204      	movs	r2, #4
 8005912:	a909      	add	r1, sp, #36	@ 0x24
 8005914:	4823      	ldr	r0, [pc, #140]	@ (80059a4 <MX_TIM1_Init+0x130>)
 8005916:	f7fe fab1 	bl	8003e7c <HAL_TIM_PWM_ConfigChannel>
 800591a:	2800      	cmp	r0, #0
 800591c:	d136      	bne.n	800598c <MX_TIM1_Init+0x118>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800591e:	2208      	movs	r2, #8
 8005920:	a909      	add	r1, sp, #36	@ 0x24
 8005922:	4820      	ldr	r0, [pc, #128]	@ (80059a4 <MX_TIM1_Init+0x130>)
 8005924:	f7fe faaa 	bl	8003e7c <HAL_TIM_PWM_ConfigChannel>
 8005928:	2800      	cmp	r0, #0
 800592a:	d132      	bne.n	8005992 <MX_TIM1_Init+0x11e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800592c:	2370      	movs	r3, #112	@ 0x70
 800592e:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 8000-2;
 8005930:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 8005934:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005936:	220c      	movs	r2, #12
 8005938:	a909      	add	r1, sp, #36	@ 0x24
 800593a:	481a      	ldr	r0, [pc, #104]	@ (80059a4 <MX_TIM1_Init+0x130>)
 800593c:	f7fe fa9e 	bl	8003e7c <HAL_TIM_PWM_ConfigChannel>
 8005940:	bb50      	cbnz	r0, 8005998 <MX_TIM1_Init+0x124>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005942:	2300      	movs	r3, #0
 8005944:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005946:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005948:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800594a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800594c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005950:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005952:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005956:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005958:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800595a:	a901      	add	r1, sp, #4
 800595c:	4811      	ldr	r0, [pc, #68]	@ (80059a4 <MX_TIM1_Init+0x130>)
 800595e:	f7fe fd8b 	bl	8004478 <HAL_TIMEx_ConfigBreakDeadTime>
 8005962:	b9e0      	cbnz	r0, 800599e <MX_TIM1_Init+0x12a>
  HAL_TIM_MspPostInit(&htim1);
 8005964:	480f      	ldr	r0, [pc, #60]	@ (80059a4 <MX_TIM1_Init+0x130>)
 8005966:	f7ff ff57 	bl	8005818 <HAL_TIM_MspPostInit>
}
 800596a:	b017      	add	sp, #92	@ 0x5c
 800596c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800596e:	f7fb fc3b 	bl	80011e8 <Error_Handler>
 8005972:	e7a7      	b.n	80058c4 <MX_TIM1_Init+0x50>
    Error_Handler();
 8005974:	f7fb fc38 	bl	80011e8 <Error_Handler>
 8005978:	e7ad      	b.n	80058d6 <MX_TIM1_Init+0x62>
    Error_Handler();
 800597a:	f7fb fc35 	bl	80011e8 <Error_Handler>
 800597e:	e7af      	b.n	80058e0 <MX_TIM1_Init+0x6c>
    Error_Handler();
 8005980:	f7fb fc32 	bl	80011e8 <Error_Handler>
 8005984:	e7b5      	b.n	80058f2 <MX_TIM1_Init+0x7e>
    Error_Handler();
 8005986:	f7fb fc2f 	bl	80011e8 <Error_Handler>
 800598a:	e7c1      	b.n	8005910 <MX_TIM1_Init+0x9c>
    Error_Handler();
 800598c:	f7fb fc2c 	bl	80011e8 <Error_Handler>
 8005990:	e7c5      	b.n	800591e <MX_TIM1_Init+0xaa>
    Error_Handler();
 8005992:	f7fb fc29 	bl	80011e8 <Error_Handler>
 8005996:	e7c9      	b.n	800592c <MX_TIM1_Init+0xb8>
    Error_Handler();
 8005998:	f7fb fc26 	bl	80011e8 <Error_Handler>
 800599c:	e7d1      	b.n	8005942 <MX_TIM1_Init+0xce>
    Error_Handler();
 800599e:	f7fb fc23 	bl	80011e8 <Error_Handler>
 80059a2:	e7df      	b.n	8005964 <MX_TIM1_Init+0xf0>
 80059a4:	20004460 	.word	0x20004460
 80059a8:	40010000 	.word	0x40010000

080059ac <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80059ac:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80059ae:	480a      	ldr	r0, [pc, #40]	@ (80059d8 <MX_USART3_UART_Init+0x2c>)
 80059b0:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <MX_USART3_UART_Init+0x30>)
 80059b2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 921600;
 80059b4:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 80059b8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80059ba:	2300      	movs	r3, #0
 80059bc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80059be:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80059c0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80059c2:	220c      	movs	r2, #12
 80059c4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059c6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80059c8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80059ca:	f7fe fec9 	bl	8004760 <HAL_UART_Init>
 80059ce:	b900      	cbnz	r0, 80059d2 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80059d0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80059d2:	f7fb fc09 	bl	80011e8 <Error_Handler>
}
 80059d6:	e7fb      	b.n	80059d0 <MX_USART3_UART_Init+0x24>
 80059d8:	20004568 	.word	0x20004568
 80059dc:	40004800 	.word	0x40004800

080059e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80059e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e6:	2300      	movs	r3, #0
 80059e8:	9303      	str	r3, [sp, #12]
 80059ea:	9304      	str	r3, [sp, #16]
 80059ec:	9305      	str	r3, [sp, #20]
 80059ee:	9306      	str	r3, [sp, #24]
 80059f0:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 80059f2:	6802      	ldr	r2, [r0, #0]
 80059f4:	4b41      	ldr	r3, [pc, #260]	@ (8005afc <HAL_UART_MspInit+0x11c>)
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d002      	beq.n	8005a00 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80059fa:	b008      	add	sp, #32
 80059fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a00:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a02:	2500      	movs	r5, #0
 8005a04:	9500      	str	r5, [sp, #0]
 8005a06:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 8005a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a0c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005a10:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a14:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8005a18:	9200      	str	r2, [sp, #0]
 8005a1a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a1c:	9501      	str	r5, [sp, #4]
 8005a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a20:	f042 0204 	orr.w	r2, r2, #4
 8005a24:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a28:	f002 0204 	and.w	r2, r2, #4
 8005a2c:	9201      	str	r2, [sp, #4]
 8005a2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a30:	9502      	str	r5, [sp, #8]
 8005a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a34:	f042 0202 	orr.w	r2, r2, #2
 8005a38:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	9302      	str	r3, [sp, #8]
 8005a42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005a44:	2320      	movs	r3, #32
 8005a46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a48:	f04f 0a02 	mov.w	sl, #2
 8005a4c:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a50:	f04f 0903 	mov.w	r9, #3
 8005a54:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a58:	f04f 0807 	mov.w	r8, #7
 8005a5c:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a60:	af03      	add	r7, sp, #12
 8005a62:	4639      	mov	r1, r7
 8005a64:	4826      	ldr	r0, [pc, #152]	@ (8005b00 <HAL_UART_MspInit+0x120>)
 8005a66:	f7fc ff4b 	bl	8002900 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a6a:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8005a6e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a70:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a74:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a76:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a7a:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a7e:	4639      	mov	r1, r7
 8005a80:	4820      	ldr	r0, [pc, #128]	@ (8005b04 <HAL_UART_MspInit+0x124>)
 8005a82:	f7fc ff3d 	bl	8002900 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8005a86:	4820      	ldr	r0, [pc, #128]	@ (8005b08 <HAL_UART_MspInit+0x128>)
 8005a88:	4b20      	ldr	r3, [pc, #128]	@ (8005b0c <HAL_UART_MspInit+0x12c>)
 8005a8a:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005a8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a90:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a92:	2340      	movs	r3, #64	@ 0x40
 8005a94:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a96:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a98:	6106      	str	r6, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a9a:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a9c:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005a9e:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005aa0:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005aa2:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005aa4:	f7fc fd48 	bl	8002538 <HAL_DMA_Init>
 8005aa8:	bb10      	cbnz	r0, 8005af0 <HAL_UART_MspInit+0x110>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005aaa:	4b17      	ldr	r3, [pc, #92]	@ (8005b08 <HAL_UART_MspInit+0x128>)
 8005aac:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005aae:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005ab0:	4817      	ldr	r0, [pc, #92]	@ (8005b10 <HAL_UART_MspInit+0x130>)
 8005ab2:	4b18      	ldr	r3, [pc, #96]	@ (8005b14 <HAL_UART_MspInit+0x134>)
 8005ab4:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005ab6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005aba:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005abc:	2300      	movs	r3, #0
 8005abe:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ac0:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ac6:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ac8:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aca:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005acc:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ace:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ad0:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005ad2:	f7fc fd31 	bl	8002538 <HAL_DMA_Init>
 8005ad6:	b970      	cbnz	r0, 8005af6 <HAL_UART_MspInit+0x116>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8005b10 <HAL_UART_MspInit+0x130>)
 8005ada:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005adc:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2105      	movs	r1, #5
 8005ae2:	2027      	movs	r0, #39	@ 0x27
 8005ae4:	f7fc fc98 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005ae8:	2027      	movs	r0, #39	@ 0x27
 8005aea:	f7fc fca5 	bl	8002438 <HAL_NVIC_EnableIRQ>
}
 8005aee:	e784      	b.n	80059fa <HAL_UART_MspInit+0x1a>
      Error_Handler();
 8005af0:	f7fb fb7a 	bl	80011e8 <Error_Handler>
 8005af4:	e7d9      	b.n	8005aaa <HAL_UART_MspInit+0xca>
      Error_Handler();
 8005af6:	f7fb fb77 	bl	80011e8 <Error_Handler>
 8005afa:	e7ed      	b.n	8005ad8 <HAL_UART_MspInit+0xf8>
 8005afc:	40004800 	.word	0x40004800
 8005b00:	40020800 	.word	0x40020800
 8005b04:	40020400 	.word	0x40020400
 8005b08:	20004508 	.word	0x20004508
 8005b0c:	40026058 	.word	0x40026058
 8005b10:	200044a8 	.word	0x200044a8
 8005b14:	40026028 	.word	0x40026028

08005b18 <vbus_init>:

static float g_vbus_gain = 0.0f;
static float g_vbus = 0.0f;

void vbus_init(void) {
  g_vbus_gain = ADC_VOLTAGE_REF / ADC_RESOLUTION * (R1 + R2) / R2;
 8005b18:	4b01      	ldr	r3, [pc, #4]	@ (8005b20 <vbus_init+0x8>)
 8005b1a:	4a02      	ldr	r2, [pc, #8]	@ (8005b24 <vbus_init+0xc>)
 8005b1c:	601a      	str	r2, [r3, #0]
}
 8005b1e:	4770      	bx	lr
 8005b20:	200045b4 	.word	0x200045b4
 8005b24:	3cab999a 	.word	0x3cab999a

08005b28 <vbus_get>:

float vbus_get(void) {
 8005b28:	b510      	push	{r4, lr}
  HAL_ADC_Start(&hadc1);
 8005b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b5c <vbus_get+0x34>)
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f7fb ff73 	bl	8001a18 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 8005b32:	210a      	movs	r1, #10
 8005b34:	4620      	mov	r0, r4
 8005b36:	f7fc f811 	bl	8001b5c <HAL_ADC_PollForConversion>
  g_vbus = HAL_ADC_GetValue(&hadc1) * g_vbus_gain;
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f7fc f86a 	bl	8001c14 <HAL_ADC_GetValue>
 8005b40:	ee00 0a10 	vmov	s0, r0
 8005b44:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005b48:	4b05      	ldr	r3, [pc, #20]	@ (8005b60 <vbus_get+0x38>)
 8005b4a:	edd3 7a00 	vldr	s15, [r3]
 8005b4e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005b52:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <vbus_get+0x3c>)
 8005b54:	ed83 0a00 	vstr	s0, [r3]
  return g_vbus;
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	bf00      	nop
 8005b5c:	200000c4 	.word	0x200000c4
 8005b60:	200045b4 	.word	0x200045b4
 8005b64:	200045b0 	.word	0x200045b0

08005b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005b6c:	f7ff f9cc 	bl	8004f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b70:	480c      	ldr	r0, [pc, #48]	@ (8005ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b72:	490d      	ldr	r1, [pc, #52]	@ (8005ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b74:	4a0d      	ldr	r2, [pc, #52]	@ (8005bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b78:	e002      	b.n	8005b80 <LoopCopyDataInit>

08005b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b7e:	3304      	adds	r3, #4

08005b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b84:	d3f9      	bcc.n	8005b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b86:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b88:	4c0a      	ldr	r4, [pc, #40]	@ (8005bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b8c:	e001      	b.n	8005b92 <LoopFillZerobss>

08005b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b90:	3204      	adds	r2, #4

08005b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b94:	d3fb      	bcc.n	8005b8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005b96:	f000 f819 	bl	8005bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b9a:	f7fb fb7b 	bl	8001294 <main>
  bx  lr    
 8005b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ba8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8005bac:	08005fc8 	.word	0x08005fc8
  ldr r2, =_sbss
 8005bb0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8005bb4:	200045b8 	.word	0x200045b8

08005bb8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bb8:	e7fe      	b.n	8005bb8 <CAN1_RX0_IRQHandler>

08005bba <memset>:
 8005bba:	4402      	add	r2, r0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d100      	bne.n	8005bc4 <memset+0xa>
 8005bc2:	4770      	bx	lr
 8005bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc8:	e7f9      	b.n	8005bbe <memset+0x4>
	...

08005bcc <__libc_init_array>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <__libc_init_array+0x38>)
 8005bd0:	4d0d      	ldr	r5, [pc, #52]	@ (8005c08 <__libc_init_array+0x3c>)
 8005bd2:	1b5b      	subs	r3, r3, r5
 8005bd4:	109c      	asrs	r4, r3, #2
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	d109      	bne.n	8005bf0 <__libc_init_array+0x24>
 8005bdc:	f000 f9a4 	bl	8005f28 <_init>
 8005be0:	4d0a      	ldr	r5, [pc, #40]	@ (8005c0c <__libc_init_array+0x40>)
 8005be2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <__libc_init_array+0x44>)
 8005be4:	1b5b      	subs	r3, r3, r5
 8005be6:	109c      	asrs	r4, r3, #2
 8005be8:	2600      	movs	r6, #0
 8005bea:	42a6      	cmp	r6, r4
 8005bec:	d105      	bne.n	8005bfa <__libc_init_array+0x2e>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf4:	4798      	blx	r3
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	e7ee      	b.n	8005bd8 <__libc_init_array+0xc>
 8005bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfe:	4798      	blx	r3
 8005c00:	3601      	adds	r6, #1
 8005c02:	e7f2      	b.n	8005bea <__libc_init_array+0x1e>
 8005c04:	08005fc0 	.word	0x08005fc0
 8005c08:	08005fc0 	.word	0x08005fc0
 8005c0c:	08005fc0 	.word	0x08005fc0
 8005c10:	08005fc4 	.word	0x08005fc4

08005c14 <memcpy>:
 8005c14:	440a      	add	r2, r1
 8005c16:	4291      	cmp	r1, r2
 8005c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c1c:	d100      	bne.n	8005c20 <memcpy+0xc>
 8005c1e:	4770      	bx	lr
 8005c20:	b510      	push	{r4, lr}
 8005c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c2a:	4291      	cmp	r1, r2
 8005c2c:	d1f9      	bne.n	8005c22 <memcpy+0xe>
 8005c2e:	bd10      	pop	{r4, pc}

08005c30 <__udivmoddi4>:
 8005c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	9d08      	ldr	r5, [sp, #32]
 8005c36:	460f      	mov	r7, r1
 8005c38:	4604      	mov	r4, r0
 8005c3a:	468c      	mov	ip, r1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d148      	bne.n	8005cd2 <__udivmoddi4+0xa2>
 8005c40:	428a      	cmp	r2, r1
 8005c42:	4616      	mov	r6, r2
 8005c44:	d961      	bls.n	8005d0a <__udivmoddi4+0xda>
 8005c46:	fab2 f382 	clz	r3, r2
 8005c4a:	b14b      	cbz	r3, 8005c60 <__udivmoddi4+0x30>
 8005c4c:	f1c3 0220 	rsb	r2, r3, #32
 8005c50:	fa01 fc03 	lsl.w	ip, r1, r3
 8005c54:	fa20 f202 	lsr.w	r2, r0, r2
 8005c58:	409e      	lsls	r6, r3
 8005c5a:	ea42 0c0c 	orr.w	ip, r2, ip
 8005c5e:	409c      	lsls	r4, r3
 8005c60:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005c64:	b2b7      	uxth	r7, r6
 8005c66:	fbbc f1fe 	udiv	r1, ip, lr
 8005c6a:	0c22      	lsrs	r2, r4, #16
 8005c6c:	fb0e cc11 	mls	ip, lr, r1, ip
 8005c70:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8005c74:	fb01 f007 	mul.w	r0, r1, r7
 8005c78:	4290      	cmp	r0, r2
 8005c7a:	d909      	bls.n	8005c90 <__udivmoddi4+0x60>
 8005c7c:	18b2      	adds	r2, r6, r2
 8005c7e:	f101 3cff 	add.w	ip, r1, #4294967295
 8005c82:	f080 80ee 	bcs.w	8005e62 <__udivmoddi4+0x232>
 8005c86:	4290      	cmp	r0, r2
 8005c88:	f240 80eb 	bls.w	8005e62 <__udivmoddi4+0x232>
 8005c8c:	3902      	subs	r1, #2
 8005c8e:	4432      	add	r2, r6
 8005c90:	1a12      	subs	r2, r2, r0
 8005c92:	b2a4      	uxth	r4, r4
 8005c94:	fbb2 f0fe 	udiv	r0, r2, lr
 8005c98:	fb0e 2210 	mls	r2, lr, r0, r2
 8005c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005ca0:	fb00 f707 	mul.w	r7, r0, r7
 8005ca4:	42a7      	cmp	r7, r4
 8005ca6:	d909      	bls.n	8005cbc <__udivmoddi4+0x8c>
 8005ca8:	1934      	adds	r4, r6, r4
 8005caa:	f100 32ff 	add.w	r2, r0, #4294967295
 8005cae:	f080 80da 	bcs.w	8005e66 <__udivmoddi4+0x236>
 8005cb2:	42a7      	cmp	r7, r4
 8005cb4:	f240 80d7 	bls.w	8005e66 <__udivmoddi4+0x236>
 8005cb8:	4434      	add	r4, r6
 8005cba:	3802      	subs	r0, #2
 8005cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005cc0:	1be4      	subs	r4, r4, r7
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	b11d      	cbz	r5, 8005cce <__udivmoddi4+0x9e>
 8005cc6:	40dc      	lsrs	r4, r3
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e9c5 4300 	strd	r4, r3, [r5]
 8005cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd2:	428b      	cmp	r3, r1
 8005cd4:	d906      	bls.n	8005ce4 <__udivmoddi4+0xb4>
 8005cd6:	b10d      	cbz	r5, 8005cdc <__udivmoddi4+0xac>
 8005cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4608      	mov	r0, r1
 8005ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce4:	fab3 f183 	clz	r1, r3
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	d148      	bne.n	8005d7e <__udivmoddi4+0x14e>
 8005cec:	42bb      	cmp	r3, r7
 8005cee:	d302      	bcc.n	8005cf6 <__udivmoddi4+0xc6>
 8005cf0:	4282      	cmp	r2, r0
 8005cf2:	f200 8107 	bhi.w	8005f04 <__udivmoddi4+0x2d4>
 8005cf6:	1a84      	subs	r4, r0, r2
 8005cf8:	eb67 0203 	sbc.w	r2, r7, r3
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	4694      	mov	ip, r2
 8005d00:	2d00      	cmp	r5, #0
 8005d02:	d0e4      	beq.n	8005cce <__udivmoddi4+0x9e>
 8005d04:	e9c5 4c00 	strd	r4, ip, [r5]
 8005d08:	e7e1      	b.n	8005cce <__udivmoddi4+0x9e>
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	f000 8092 	beq.w	8005e34 <__udivmoddi4+0x204>
 8005d10:	fab2 f382 	clz	r3, r2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f040 80a8 	bne.w	8005e6a <__udivmoddi4+0x23a>
 8005d1a:	1a8a      	subs	r2, r1, r2
 8005d1c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005d20:	fa1f fc86 	uxth.w	ip, r6
 8005d24:	2101      	movs	r1, #1
 8005d26:	0c20      	lsrs	r0, r4, #16
 8005d28:	fbb2 f7fe 	udiv	r7, r2, lr
 8005d2c:	fb0e 2217 	mls	r2, lr, r7, r2
 8005d30:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8005d34:	fb0c f007 	mul.w	r0, ip, r7
 8005d38:	4290      	cmp	r0, r2
 8005d3a:	d907      	bls.n	8005d4c <__udivmoddi4+0x11c>
 8005d3c:	18b2      	adds	r2, r6, r2
 8005d3e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005d42:	d202      	bcs.n	8005d4a <__udivmoddi4+0x11a>
 8005d44:	4290      	cmp	r0, r2
 8005d46:	f200 80e2 	bhi.w	8005f0e <__udivmoddi4+0x2de>
 8005d4a:	4647      	mov	r7, r8
 8005d4c:	1a12      	subs	r2, r2, r0
 8005d4e:	b2a4      	uxth	r4, r4
 8005d50:	fbb2 f0fe 	udiv	r0, r2, lr
 8005d54:	fb0e 2210 	mls	r2, lr, r0, r2
 8005d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005d5c:	fb0c fc00 	mul.w	ip, ip, r0
 8005d60:	45a4      	cmp	ip, r4
 8005d62:	d907      	bls.n	8005d74 <__udivmoddi4+0x144>
 8005d64:	1934      	adds	r4, r6, r4
 8005d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8005d6a:	d202      	bcs.n	8005d72 <__udivmoddi4+0x142>
 8005d6c:	45a4      	cmp	ip, r4
 8005d6e:	f200 80cb 	bhi.w	8005f08 <__udivmoddi4+0x2d8>
 8005d72:	4610      	mov	r0, r2
 8005d74:	eba4 040c 	sub.w	r4, r4, ip
 8005d78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005d7c:	e7a2      	b.n	8005cc4 <__udivmoddi4+0x94>
 8005d7e:	f1c1 0620 	rsb	r6, r1, #32
 8005d82:	408b      	lsls	r3, r1
 8005d84:	fa22 fc06 	lsr.w	ip, r2, r6
 8005d88:	ea4c 0c03 	orr.w	ip, ip, r3
 8005d8c:	fa07 f401 	lsl.w	r4, r7, r1
 8005d90:	fa20 f306 	lsr.w	r3, r0, r6
 8005d94:	40f7      	lsrs	r7, r6
 8005d96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8005d9a:	4323      	orrs	r3, r4
 8005d9c:	fa00 f801 	lsl.w	r8, r0, r1
 8005da0:	fa1f fe8c 	uxth.w	lr, ip
 8005da4:	fbb7 f0f9 	udiv	r0, r7, r9
 8005da8:	0c1c      	lsrs	r4, r3, #16
 8005daa:	fb09 7710 	mls	r7, r9, r0, r7
 8005dae:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8005db2:	fb00 f70e 	mul.w	r7, r0, lr
 8005db6:	42a7      	cmp	r7, r4
 8005db8:	fa02 f201 	lsl.w	r2, r2, r1
 8005dbc:	d90a      	bls.n	8005dd4 <__udivmoddi4+0x1a4>
 8005dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8005dc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8005dc6:	f080 809b 	bcs.w	8005f00 <__udivmoddi4+0x2d0>
 8005dca:	42a7      	cmp	r7, r4
 8005dcc:	f240 8098 	bls.w	8005f00 <__udivmoddi4+0x2d0>
 8005dd0:	3802      	subs	r0, #2
 8005dd2:	4464      	add	r4, ip
 8005dd4:	1be4      	subs	r4, r4, r7
 8005dd6:	b29f      	uxth	r7, r3
 8005dd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8005ddc:	fb09 4413 	mls	r4, r9, r3, r4
 8005de0:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8005de4:	fb03 fe0e 	mul.w	lr, r3, lr
 8005de8:	45a6      	cmp	lr, r4
 8005dea:	d909      	bls.n	8005e00 <__udivmoddi4+0x1d0>
 8005dec:	eb1c 0404 	adds.w	r4, ip, r4
 8005df0:	f103 37ff 	add.w	r7, r3, #4294967295
 8005df4:	f080 8082 	bcs.w	8005efc <__udivmoddi4+0x2cc>
 8005df8:	45a6      	cmp	lr, r4
 8005dfa:	d97f      	bls.n	8005efc <__udivmoddi4+0x2cc>
 8005dfc:	3b02      	subs	r3, #2
 8005dfe:	4464      	add	r4, ip
 8005e00:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005e04:	eba4 040e 	sub.w	r4, r4, lr
 8005e08:	fba0 e702 	umull	lr, r7, r0, r2
 8005e0c:	42bc      	cmp	r4, r7
 8005e0e:	4673      	mov	r3, lr
 8005e10:	46b9      	mov	r9, r7
 8005e12:	d363      	bcc.n	8005edc <__udivmoddi4+0x2ac>
 8005e14:	d060      	beq.n	8005ed8 <__udivmoddi4+0x2a8>
 8005e16:	b15d      	cbz	r5, 8005e30 <__udivmoddi4+0x200>
 8005e18:	ebb8 0203 	subs.w	r2, r8, r3
 8005e1c:	eb64 0409 	sbc.w	r4, r4, r9
 8005e20:	fa04 f606 	lsl.w	r6, r4, r6
 8005e24:	fa22 f301 	lsr.w	r3, r2, r1
 8005e28:	431e      	orrs	r6, r3
 8005e2a:	40cc      	lsrs	r4, r1
 8005e2c:	e9c5 6400 	strd	r6, r4, [r5]
 8005e30:	2100      	movs	r1, #0
 8005e32:	e74c      	b.n	8005cce <__udivmoddi4+0x9e>
 8005e34:	0862      	lsrs	r2, r4, #1
 8005e36:	0848      	lsrs	r0, r1, #1
 8005e38:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8005e3c:	0c0b      	lsrs	r3, r1, #16
 8005e3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e42:	b28a      	uxth	r2, r1
 8005e44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e48:	fbb3 f1f6 	udiv	r1, r3, r6
 8005e4c:	07e4      	lsls	r4, r4, #31
 8005e4e:	46b4      	mov	ip, r6
 8005e50:	4637      	mov	r7, r6
 8005e52:	46b6      	mov	lr, r6
 8005e54:	231f      	movs	r3, #31
 8005e56:	fbb0 f0f6 	udiv	r0, r0, r6
 8005e5a:	1bd2      	subs	r2, r2, r7
 8005e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e60:	e761      	b.n	8005d26 <__udivmoddi4+0xf6>
 8005e62:	4661      	mov	r1, ip
 8005e64:	e714      	b.n	8005c90 <__udivmoddi4+0x60>
 8005e66:	4610      	mov	r0, r2
 8005e68:	e728      	b.n	8005cbc <__udivmoddi4+0x8c>
 8005e6a:	f1c3 0120 	rsb	r1, r3, #32
 8005e6e:	fa20 f201 	lsr.w	r2, r0, r1
 8005e72:	409e      	lsls	r6, r3
 8005e74:	fa27 f101 	lsr.w	r1, r7, r1
 8005e78:	409f      	lsls	r7, r3
 8005e7a:	433a      	orrs	r2, r7
 8005e7c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8005e80:	fa1f fc86 	uxth.w	ip, r6
 8005e84:	fbb1 f7fe 	udiv	r7, r1, lr
 8005e88:	fb0e 1017 	mls	r0, lr, r7, r1
 8005e8c:	0c11      	lsrs	r1, r2, #16
 8005e8e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e92:	fb07 f80c 	mul.w	r8, r7, ip
 8005e96:	4588      	cmp	r8, r1
 8005e98:	fa04 f403 	lsl.w	r4, r4, r3
 8005e9c:	d93a      	bls.n	8005f14 <__udivmoddi4+0x2e4>
 8005e9e:	1871      	adds	r1, r6, r1
 8005ea0:	f107 30ff 	add.w	r0, r7, #4294967295
 8005ea4:	d201      	bcs.n	8005eaa <__udivmoddi4+0x27a>
 8005ea6:	4588      	cmp	r8, r1
 8005ea8:	d81f      	bhi.n	8005eea <__udivmoddi4+0x2ba>
 8005eaa:	eba1 0108 	sub.w	r1, r1, r8
 8005eae:	fbb1 f8fe 	udiv	r8, r1, lr
 8005eb2:	fb08 f70c 	mul.w	r7, r8, ip
 8005eb6:	fb0e 1118 	mls	r1, lr, r8, r1
 8005eba:	b292      	uxth	r2, r2
 8005ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005ec0:	42ba      	cmp	r2, r7
 8005ec2:	d22f      	bcs.n	8005f24 <__udivmoddi4+0x2f4>
 8005ec4:	18b2      	adds	r2, r6, r2
 8005ec6:	f108 31ff 	add.w	r1, r8, #4294967295
 8005eca:	d2c6      	bcs.n	8005e5a <__udivmoddi4+0x22a>
 8005ecc:	42ba      	cmp	r2, r7
 8005ece:	d2c4      	bcs.n	8005e5a <__udivmoddi4+0x22a>
 8005ed0:	f1a8 0102 	sub.w	r1, r8, #2
 8005ed4:	4432      	add	r2, r6
 8005ed6:	e7c0      	b.n	8005e5a <__udivmoddi4+0x22a>
 8005ed8:	45f0      	cmp	r8, lr
 8005eda:	d29c      	bcs.n	8005e16 <__udivmoddi4+0x1e6>
 8005edc:	ebbe 0302 	subs.w	r3, lr, r2
 8005ee0:	eb67 070c 	sbc.w	r7, r7, ip
 8005ee4:	3801      	subs	r0, #1
 8005ee6:	46b9      	mov	r9, r7
 8005ee8:	e795      	b.n	8005e16 <__udivmoddi4+0x1e6>
 8005eea:	eba6 0808 	sub.w	r8, r6, r8
 8005eee:	4441      	add	r1, r8
 8005ef0:	1eb8      	subs	r0, r7, #2
 8005ef2:	fbb1 f8fe 	udiv	r8, r1, lr
 8005ef6:	fb08 f70c 	mul.w	r7, r8, ip
 8005efa:	e7dc      	b.n	8005eb6 <__udivmoddi4+0x286>
 8005efc:	463b      	mov	r3, r7
 8005efe:	e77f      	b.n	8005e00 <__udivmoddi4+0x1d0>
 8005f00:	4650      	mov	r0, sl
 8005f02:	e767      	b.n	8005dd4 <__udivmoddi4+0x1a4>
 8005f04:	4608      	mov	r0, r1
 8005f06:	e6fb      	b.n	8005d00 <__udivmoddi4+0xd0>
 8005f08:	4434      	add	r4, r6
 8005f0a:	3802      	subs	r0, #2
 8005f0c:	e732      	b.n	8005d74 <__udivmoddi4+0x144>
 8005f0e:	3f02      	subs	r7, #2
 8005f10:	4432      	add	r2, r6
 8005f12:	e71b      	b.n	8005d4c <__udivmoddi4+0x11c>
 8005f14:	eba1 0108 	sub.w	r1, r1, r8
 8005f18:	4638      	mov	r0, r7
 8005f1a:	fbb1 f8fe 	udiv	r8, r1, lr
 8005f1e:	fb08 f70c 	mul.w	r7, r8, ip
 8005f22:	e7c8      	b.n	8005eb6 <__udivmoddi4+0x286>
 8005f24:	4641      	mov	r1, r8
 8005f26:	e798      	b.n	8005e5a <__udivmoddi4+0x22a>

08005f28 <_init>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr

08005f34 <_fini>:
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f36:	bf00      	nop
 8005f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3a:	bc08      	pop	{r3}
 8005f3c:	469e      	mov	lr, r3
 8005f3e:	4770      	bx	lr
