
build/debug/CawDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a0c  08005a0c  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a0c  08005a0c  00006a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a14  08005a14  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a14  08005a14  00006a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a18  08005a18  00006a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005a1c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004460  20000010  08005a2c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004470  08005a2c  00007470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028623  00000000  00000000  00007079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059e6  00000000  00000000  0002f69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001354c  00000000  00000000  00035082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bd0  00000000  00000000  000485d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001603  00000000  00000000  0004a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000222a1  00000000  00000000  0004b7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008a75  00000000  00000000  0006da44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b54  00000000  00000000  000764bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000017f  00000000  00000000  0007b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b80c 	b.w	8000200 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f005 fa5c 	bl	80056ac <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__aeabi_idiv0>:
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c05      	ldr	r4, [pc, #20]	@ (800021c <__do_global_dtors_aux+0x18>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b933      	cbnz	r3, 800021a <__do_global_dtors_aux+0x16>
 800020c:	4b04      	ldr	r3, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x1c>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x12>
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000010 	.word	0x20000010
 8000220:	00000000 	.word	0x00000000
 8000224:	080059a4 	.word	0x080059a4

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <frame_dummy+0x10>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4903      	ldr	r1, [pc, #12]	@ (800023c <frame_dummy+0x14>)
 8000230:	4803      	ldr	r0, [pc, #12]	@ (8000240 <frame_dummy+0x18>)
 8000232:	f3af 8000 	nop.w
 8000236:	bd08      	pop	{r3, pc}
 8000238:	00000000 	.word	0x00000000
 800023c:	20000014 	.word	0x20000014
 8000240:	080059a4 	.word	0x080059a4

08000244 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000248:	2400      	movs	r4, #0
 800024a:	9408      	str	r4, [sp, #32]
 800024c:	9409      	str	r4, [sp, #36]	@ 0x24
 800024e:	940a      	str	r4, [sp, #40]	@ 0x28
 8000250:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000252:	2220      	movs	r2, #32
 8000254:	4621      	mov	r1, r4
 8000256:	4668      	mov	r0, sp
 8000258:	f005 f9fb 	bl	8005652 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800025c:	481f      	ldr	r0, [pc, #124]	@ (80002dc <MX_ADC1_Init+0x98>)
 800025e:	4b20      	ldr	r3, [pc, #128]	@ (80002e0 <MX_ADC1_Init+0x9c>)
 8000260:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000266:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000268:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800026a:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026c:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800026e:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000272:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000274:	4b1b      	ldr	r3, [pc, #108]	@ (80002e4 <MX_ADC1_Init+0xa0>)
 8000276:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000278:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800027a:	2301      	movs	r3, #1
 800027c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800027e:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000282:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000284:	f001 fa7e 	bl	8001784 <HAL_ADC_Init>
 8000288:	b9f8      	cbnz	r0, 80002ca <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800028a:	2300      	movs	r3, #0
 800028c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 800028e:	2201      	movs	r2, #1
 8000290:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000292:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	a908      	add	r1, sp, #32
 8000296:	4811      	ldr	r0, [pc, #68]	@ (80002dc <MX_ADC1_Init+0x98>)
 8000298:	f001 fb44 	bl	8001924 <HAL_ADC_ConfigChannel>
 800029c:	b9c0      	cbnz	r0, 80002d0 <MX_ADC1_Init+0x8c>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800029e:	2300      	movs	r3, #0
 80002a0:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 80002a2:	2201      	movs	r2, #1
 80002a4:	9201      	str	r2, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80002a6:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80002a8:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80002aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80002ae:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80002b0:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80002b2:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80002b6:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 80002ba:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002bc:	4669      	mov	r1, sp
 80002be:	4807      	ldr	r0, [pc, #28]	@ (80002dc <MX_ADC1_Init+0x98>)
 80002c0:	f001 fc8c 	bl	8001bdc <HAL_ADCEx_InjectedConfigChannel>
 80002c4:	b938      	cbnz	r0, 80002d6 <MX_ADC1_Init+0x92>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c6:	b00c      	add	sp, #48	@ 0x30
 80002c8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80002ca:	f000 fe63 	bl	8000f94 <Error_Handler>
 80002ce:	e7dc      	b.n	800028a <MX_ADC1_Init+0x46>
    Error_Handler();
 80002d0:	f000 fe60 	bl	8000f94 <Error_Handler>
 80002d4:	e7e3      	b.n	800029e <MX_ADC1_Init+0x5a>
    Error_Handler();
 80002d6:	f000 fe5d 	bl	8000f94 <Error_Handler>
}
 80002da:	e7f4      	b.n	80002c6 <MX_ADC1_Init+0x82>
 80002dc:	200000bc 	.word	0x200000bc
 80002e0:	40012000 	.word	0x40012000
 80002e4:	0f000001 	.word	0x0f000001

080002e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002e8:	b510      	push	{r4, lr}
 80002ea:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ec:	2400      	movs	r4, #0
 80002ee:	9408      	str	r4, [sp, #32]
 80002f0:	9409      	str	r4, [sp, #36]	@ 0x24
 80002f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80002f4:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80002f6:	2220      	movs	r2, #32
 80002f8:	4621      	mov	r1, r4
 80002fa:	4668      	mov	r0, sp
 80002fc:	f005 f9a9 	bl	8005652 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000300:	481f      	ldr	r0, [pc, #124]	@ (8000380 <MX_ADC2_Init+0x98>)
 8000302:	4b20      	ldr	r3, [pc, #128]	@ (8000384 <MX_ADC2_Init+0x9c>)
 8000304:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030a:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800030c:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800030e:	6104      	str	r4, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000310:	7604      	strb	r4, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000312:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000316:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000318:	4b1b      	ldr	r3, [pc, #108]	@ (8000388 <MX_ADC2_Init+0xa0>)
 800031a:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031c:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 800031e:	2301      	movs	r3, #1
 8000320:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000322:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000326:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000328:	f001 fa2c 	bl	8001784 <HAL_ADC_Init>
 800032c:	b9f8      	cbnz	r0, 800036e <MX_ADC2_Init+0x86>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800032e:	2301      	movs	r3, #1
 8000330:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000332:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000334:	2300      	movs	r3, #0
 8000336:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000338:	a908      	add	r1, sp, #32
 800033a:	4811      	ldr	r0, [pc, #68]	@ (8000380 <MX_ADC2_Init+0x98>)
 800033c:	f001 faf2 	bl	8001924 <HAL_ADC_ConfigChannel>
 8000340:	b9c0      	cbnz	r0, 8000374 <MX_ADC2_Init+0x8c>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000342:	2301      	movs	r3, #1
 8000344:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 8000346:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000348:	9304      	str	r3, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800034a:	2300      	movs	r3, #0
 800034c:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800034e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000352:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000354:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000356:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800035a:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 800035e:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000360:	4669      	mov	r1, sp
 8000362:	4807      	ldr	r0, [pc, #28]	@ (8000380 <MX_ADC2_Init+0x98>)
 8000364:	f001 fc3a 	bl	8001bdc <HAL_ADCEx_InjectedConfigChannel>
 8000368:	b938      	cbnz	r0, 800037a <MX_ADC2_Init+0x92>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800036a:	b00c      	add	sp, #48	@ 0x30
 800036c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800036e:	f000 fe11 	bl	8000f94 <Error_Handler>
 8000372:	e7dc      	b.n	800032e <MX_ADC2_Init+0x46>
    Error_Handler();
 8000374:	f000 fe0e 	bl	8000f94 <Error_Handler>
 8000378:	e7e3      	b.n	8000342 <MX_ADC2_Init+0x5a>
    Error_Handler();
 800037a:	f000 fe0b 	bl	8000f94 <Error_Handler>
}
 800037e:	e7f4      	b.n	800036a <MX_ADC2_Init+0x82>
 8000380:	20000074 	.word	0x20000074
 8000384:	40012100 	.word	0x40012100
 8000388:	0f000001 	.word	0x0f000001

0800038c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800038c:	b510      	push	{r4, lr}
 800038e:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000390:	2400      	movs	r4, #0
 8000392:	9408      	str	r4, [sp, #32]
 8000394:	9409      	str	r4, [sp, #36]	@ 0x24
 8000396:	940a      	str	r4, [sp, #40]	@ 0x28
 8000398:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800039a:	2220      	movs	r2, #32
 800039c:	4621      	mov	r1, r4
 800039e:	4668      	mov	r0, sp
 80003a0:	f005 f957 	bl	8005652 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80003a4:	4820      	ldr	r0, [pc, #128]	@ (8000428 <MX_ADC3_Init+0x9c>)
 80003a6:	4b21      	ldr	r3, [pc, #132]	@ (800042c <MX_ADC3_Init+0xa0>)
 80003a8:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ae:	6043      	str	r3, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80003b0:	6084      	str	r4, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80003b2:	6104      	str	r4, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80003b4:	7604      	strb	r4, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80003b6:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ba:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000430 <MX_ADC3_Init+0xa4>)
 80003be:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c0:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61c3      	str	r3, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80003c6:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ca:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80003cc:	f001 f9da 	bl	8001784 <HAL_ADC_Init>
 80003d0:	bb08      	cbnz	r0, 8000416 <MX_ADC3_Init+0x8a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80003da:	2300      	movs	r3, #0
 80003dc:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80003de:	a908      	add	r1, sp, #32
 80003e0:	4811      	ldr	r0, [pc, #68]	@ (8000428 <MX_ADC3_Init+0x9c>)
 80003e2:	f001 fa9f 	bl	8001924 <HAL_ADC_ConfigChannel>
 80003e6:	b9c8      	cbnz	r0, 800041c <MX_ADC3_Init+0x90>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80003e8:	2302      	movs	r3, #2
 80003ea:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80003f0:	9304      	str	r3, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80003f2:	2300      	movs	r3, #0
 80003f4:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80003f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003fa:	9207      	str	r2, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80003fc:	9306      	str	r3, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80003fe:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000402:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000406:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000408:	4669      	mov	r1, sp
 800040a:	4807      	ldr	r0, [pc, #28]	@ (8000428 <MX_ADC3_Init+0x9c>)
 800040c:	f001 fbe6 	bl	8001bdc <HAL_ADCEx_InjectedConfigChannel>
 8000410:	b938      	cbnz	r0, 8000422 <MX_ADC3_Init+0x96>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000412:	b00c      	add	sp, #48	@ 0x30
 8000414:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000416:	f000 fdbd 	bl	8000f94 <Error_Handler>
 800041a:	e7da      	b.n	80003d2 <MX_ADC3_Init+0x46>
    Error_Handler();
 800041c:	f000 fdba 	bl	8000f94 <Error_Handler>
 8000420:	e7e2      	b.n	80003e8 <MX_ADC3_Init+0x5c>
    Error_Handler();
 8000422:	f000 fdb7 	bl	8000f94 <Error_Handler>
}
 8000426:	e7f4      	b.n	8000412 <MX_ADC3_Init+0x86>
 8000428:	2000002c 	.word	0x2000002c
 800042c:	40012200 	.word	0x40012200
 8000430:	0f000001 	.word	0x0f000001

08000434 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	2300      	movs	r3, #0
 800043a:	9309      	str	r3, [sp, #36]	@ 0x24
 800043c:	930a      	str	r3, [sp, #40]	@ 0x28
 800043e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000440:	930c      	str	r3, [sp, #48]	@ 0x30
 8000442:	930d      	str	r3, [sp, #52]	@ 0x34
  if(adcHandle->Instance==ADC1)
 8000444:	6803      	ldr	r3, [r0, #0]
 8000446:	4a52      	ldr	r2, [pc, #328]	@ (8000590 <HAL_ADC_MspInit+0x15c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d007      	beq.n	800045c <HAL_ADC_MspInit+0x28>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 800044c:	4a51      	ldr	r2, [pc, #324]	@ (8000594 <HAL_ADC_MspInit+0x160>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d03d      	beq.n	80004ce <HAL_ADC_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000452:	4a51      	ldr	r2, [pc, #324]	@ (8000598 <HAL_ADC_MspInit+0x164>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d073      	beq.n	8000540 <HAL_ADC_MspInit+0x10c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000458:	b00f      	add	sp, #60	@ 0x3c
 800045a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800045c:	2400      	movs	r4, #0
 800045e:	9401      	str	r4, [sp, #4]
 8000460:	4b4e      	ldr	r3, [pc, #312]	@ (800059c <HAL_ADC_MspInit+0x168>)
 8000462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000468:	645a      	str	r2, [r3, #68]	@ 0x44
 800046a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800046c:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000470:	9201      	str	r2, [sp, #4]
 8000472:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000474:	9402      	str	r4, [sp, #8]
 8000476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000478:	f042 0204 	orr.w	r2, r2, #4
 800047c:	631a      	str	r2, [r3, #48]	@ 0x30
 800047e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000480:	f002 0204 	and.w	r2, r2, #4
 8000484:	9202      	str	r2, [sp, #8]
 8000486:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000488:	9403      	str	r4, [sp, #12]
 800048a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800048c:	f042 0201 	orr.w	r2, r2, #1
 8000490:	631a      	str	r2, [r3, #48]	@ 0x30
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	9303      	str	r3, [sp, #12]
 800049a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800049c:	2701      	movs	r7, #1
 800049e:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a0:	2603      	movs	r6, #3
 80004a2:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a4:	ad09      	add	r5, sp, #36	@ 0x24
 80004a6:	4629      	mov	r1, r5
 80004a8:	483d      	ldr	r0, [pc, #244]	@ (80005a0 <HAL_ADC_MspInit+0x16c>)
 80004aa:	f002 f809 	bl	80024c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004ae:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b0:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	4629      	mov	r1, r5
 80004b6:	483b      	ldr	r0, [pc, #236]	@ (80005a4 <HAL_ADC_MspInit+0x170>)
 80004b8:	f002 f802 	bl	80024c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80004bc:	4622      	mov	r2, r4
 80004be:	2105      	movs	r1, #5
 80004c0:	2012      	movs	r0, #18
 80004c2:	f001 fd89 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80004c6:	2012      	movs	r0, #18
 80004c8:	f001 fd96 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
 80004cc:	e7c4      	b.n	8000458 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80004ce:	2400      	movs	r4, #0
 80004d0:	9404      	str	r4, [sp, #16]
 80004d2:	4b32      	ldr	r3, [pc, #200]	@ (800059c <HAL_ADC_MspInit+0x168>)
 80004d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80004da:	645a      	str	r2, [r3, #68]	@ 0x44
 80004dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004de:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80004e2:	9204      	str	r2, [sp, #16]
 80004e4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	9405      	str	r4, [sp, #20]
 80004e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ea:	f042 0201 	orr.w	r2, r2, #1
 80004ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80004f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004f2:	f002 0201 	and.w	r2, r2, #1
 80004f6:	9205      	str	r2, [sp, #20]
 80004f8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	9406      	str	r4, [sp, #24]
 80004fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004fe:	f042 0202 	orr.w	r2, r2, #2
 8000502:	631a      	str	r2, [r3, #48]	@ 0x30
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	9306      	str	r3, [sp, #24]
 800050c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800050e:	2702      	movs	r7, #2
 8000510:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000512:	2603      	movs	r6, #3
 8000514:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	ad09      	add	r5, sp, #36	@ 0x24
 8000518:	4629      	mov	r1, r5
 800051a:	4822      	ldr	r0, [pc, #136]	@ (80005a4 <HAL_ADC_MspInit+0x170>)
 800051c:	f001 ffd0 	bl	80024c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000520:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000522:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000526:	4629      	mov	r1, r5
 8000528:	481f      	ldr	r0, [pc, #124]	@ (80005a8 <HAL_ADC_MspInit+0x174>)
 800052a:	f001 ffc9 	bl	80024c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800052e:	4622      	mov	r2, r4
 8000530:	2105      	movs	r1, #5
 8000532:	2012      	movs	r0, #18
 8000534:	f001 fd50 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000538:	2012      	movs	r0, #18
 800053a:	f001 fd5d 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
 800053e:	e78b      	b.n	8000458 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000540:	2400      	movs	r4, #0
 8000542:	9407      	str	r4, [sp, #28]
 8000544:	4b15      	ldr	r3, [pc, #84]	@ (800059c <HAL_ADC_MspInit+0x168>)
 8000546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000548:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800054c:	645a      	str	r2, [r3, #68]	@ 0x44
 800054e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000550:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000554:	9207      	str	r2, [sp, #28]
 8000556:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	9408      	str	r4, [sp, #32]
 800055a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800055c:	f042 0201 	orr.w	r2, r2, #1
 8000560:	631a      	str	r2, [r3, #48]	@ 0x30
 8000562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	9308      	str	r3, [sp, #32]
 800056a:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800056c:	230c      	movs	r3, #12
 800056e:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000570:	2303      	movs	r3, #3
 8000572:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	a909      	add	r1, sp, #36	@ 0x24
 8000576:	480b      	ldr	r0, [pc, #44]	@ (80005a4 <HAL_ADC_MspInit+0x170>)
 8000578:	f001 ffa2 	bl	80024c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800057c:	4622      	mov	r2, r4
 800057e:	2105      	movs	r1, #5
 8000580:	2012      	movs	r0, #18
 8000582:	f001 fd29 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000586:	2012      	movs	r0, #18
 8000588:	f001 fd36 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
}
 800058c:	e764      	b.n	8000458 <HAL_ADC_MspInit+0x24>
 800058e:	bf00      	nop
 8000590:	40012000 	.word	0x40012000
 8000594:	40012100 	.word	0x40012100
 8000598:	40012200 	.word	0x40012200
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020800 	.word	0x40020800
 80005a4:	40020000 	.word	0x40020000
 80005a8:	40020400 	.word	0x40020400

080005ac <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005ac:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005ae:	480b      	ldr	r0, [pc, #44]	@ (80005dc <MX_CAN1_Init+0x30>)
 80005b0:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <MX_CAN1_Init+0x34>)
 80005b2:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 80005b4:	2310      	movs	r3, #16
 80005b6:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005bc:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005be:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005c0:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005c2:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005c4:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005c6:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005c8:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ca:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005cc:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ce:	f001 fc09 	bl	8001de4 <HAL_CAN_Init>
 80005d2:	b900      	cbnz	r0, 80005d6 <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005d4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005d6:	f000 fcdd 	bl	8000f94 <Error_Handler>
}
 80005da:	e7fb      	b.n	80005d4 <MX_CAN1_Init+0x28>
 80005dc:	20000104 	.word	0x20000104
 80005e0:	40006400 	.word	0x40006400

080005e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005e4:	b500      	push	{lr}
 80005e6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	2300      	movs	r3, #0
 80005ea:	9303      	str	r3, [sp, #12]
 80005ec:	9304      	str	r3, [sp, #16]
 80005ee:	9305      	str	r3, [sp, #20]
 80005f0:	9306      	str	r3, [sp, #24]
 80005f2:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 80005f4:	6802      	ldr	r2, [r0, #0]
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <HAL_CAN_MspInit+0x68>)
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d002      	beq.n	8000602 <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005fc:	b009      	add	sp, #36	@ 0x24
 80005fe:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000602:	2100      	movs	r1, #0
 8000604:	9101      	str	r1, [sp, #4]
 8000606:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 800060a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800060c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000610:	641a      	str	r2, [r3, #64]	@ 0x40
 8000612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000614:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000618:	9201      	str	r2, [sp, #4]
 800061a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	9102      	str	r1, [sp, #8]
 800061e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000620:	f042 0202 	orr.w	r2, r2, #2
 8000624:	631a      	str	r2, [r3, #48]	@ 0x30
 8000626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000628:	f003 0302 	and.w	r3, r3, #2
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000630:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000634:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800063e:	2309      	movs	r3, #9
 8000640:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	a903      	add	r1, sp, #12
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <HAL_CAN_MspInit+0x6c>)
 8000646:	f001 ff3b 	bl	80024c0 <HAL_GPIO_Init>
}
 800064a:	e7d7      	b.n	80005fc <HAL_CAN_MspInit+0x18>
 800064c:	40006400 	.word	0x40006400
 8000650:	40020400 	.word	0x40020400

08000654 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8000654:	2884      	cmp	r0, #132	@ 0x84
 8000656:	d001      	beq.n	800065c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8000658:	3003      	adds	r0, #3
 800065a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800065c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800065e:	4770      	bx	lr

08000660 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000660:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000662:	f004 fbcb 	bl	8004dfc <vTaskStartScheduler>
  
  return osOK;
}
 8000666:	2000      	movs	r0, #0
 8000668:	bd08      	pop	{r3, pc}

0800066a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800066a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8000672:	6944      	ldr	r4, [r0, #20]
 8000674:	b1c4      	cbz	r4, 80006a8 <osThreadCreate+0x3e>
 8000676:	6985      	ldr	r5, [r0, #24]
 8000678:	b1b5      	cbz	r5, 80006a8 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800067a:	6847      	ldr	r7, [r0, #4]
 800067c:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8000680:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000684:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8000688:	f7ff ffe4 	bl	8000654 <makeFreeRtosPriority>
 800068c:	9502      	str	r5, [sp, #8]
 800068e:	9401      	str	r4, [sp, #4]
 8000690:	9000      	str	r0, [sp, #0]
 8000692:	4633      	mov	r3, r6
 8000694:	464a      	mov	r2, r9
 8000696:	4641      	mov	r1, r8
 8000698:	4638      	mov	r0, r7
 800069a:	f004 fb41 	bl	8004d20 <xTaskCreateStatic>
 800069e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80006a0:	9805      	ldr	r0, [sp, #20]
}
 80006a2:	b007      	add	sp, #28
 80006a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80006a8:	6844      	ldr	r4, [r0, #4]
 80006aa:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80006ac:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80006ae:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80006b2:	f7ff ffcf 	bl	8000654 <makeFreeRtosPriority>
 80006b6:	ab05      	add	r3, sp, #20
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	9000      	str	r0, [sp, #0]
 80006bc:	4633      	mov	r3, r6
 80006be:	b2ba      	uxth	r2, r7
 80006c0:	4629      	mov	r1, r5
 80006c2:	4620      	mov	r0, r4
 80006c4:	f004 fb67 	bl	8004d96 <xTaskCreate>
 80006c8:	2801      	cmp	r0, #1
 80006ca:	d0e9      	beq.n	80006a0 <osThreadCreate+0x36>
      return NULL;
 80006cc:	2000      	movs	r0, #0
 80006ce:	e7e8      	b.n	80006a2 <osThreadCreate+0x38>

080006d0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80006d0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80006d2:	b900      	cbnz	r0, 80006d6 <osDelay+0x6>
 80006d4:	2001      	movs	r0, #1
 80006d6:	f004 fcdb 	bl	8005090 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80006da:	2000      	movs	r0, #0
 80006dc:	bd08      	pop	{r3, pc}
	...

080006e0 <controller_init>:
#include "./PWM/pwm.h"
#include "./State/state.h"

drv8323_t g_driver;

void controller_init(void) {
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	b087      	sub	sp, #28
  /// 初始化串口
  dev_usart_init();
 80006e4:	f000 f88c 	bl	8000800 <dev_usart_init>

  /// 配置DRV8323

  // 使用PWM_MODE_3X控制时将互补引脚拉低
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80006e8:	4c31      	ldr	r4, [pc, #196]	@ (80007b0 <controller_init+0xd0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f0:	4620      	mov	r0, r4
 80006f2:	f001 ffd5 	bl	80026a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006fc:	4620      	mov	r0, r4
 80006fe:	f001 ffcf 	bl	80026a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000708:	4620      	mov	r0, r4
 800070a:	f001 ffc9 	bl	80026a0 <HAL_GPIO_WritePin>

  drv8323_init(&g_driver, &hspi3);
 800070e:	4e29      	ldr	r6, [pc, #164]	@ (80007b4 <controller_init+0xd4>)
 8000710:	4929      	ldr	r1, [pc, #164]	@ (80007b8 <controller_init+0xd8>)
 8000712:	4630      	mov	r0, r6
 8000714:	f000 f8f4 	bl	8000900 <drv8323_init>
  drv8323_calibrate(&g_driver);
 8000718:	4630      	mov	r0, r6
 800071a:	f000 f99d 	bl	8000a58 <drv8323_calibrate>
  HAL_Delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f000 ff82 	bl	8001628 <HAL_Delay>
  drv8323_write_dcr(&g_driver, 0x0, DIS_GDF_DIS, 0x0, PWM_MODE_3X, 0x0, 0x0,
 8000724:	2501      	movs	r5, #1
 8000726:	9505      	str	r5, [sp, #20]
 8000728:	2400      	movs	r4, #0
 800072a:	9404      	str	r4, [sp, #16]
 800072c:	9403      	str	r4, [sp, #12]
 800072e:	9402      	str	r4, [sp, #8]
 8000730:	9401      	str	r4, [sp, #4]
 8000732:	9500      	str	r5, [sp, #0]
 8000734:	4623      	mov	r3, r4
 8000736:	462a      	mov	r2, r5
 8000738:	4621      	mov	r1, r4
 800073a:	4630      	mov	r0, r6
 800073c:	f000 f912 	bl	8000964 <drv8323_write_dcr>
                    0x0, 0x0, 0x1);
  HAL_Delay(10);
 8000740:	200a      	movs	r0, #10
 8000742:	f000 ff71 	bl	8001628 <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1,
 8000746:	2703      	movs	r7, #3
 8000748:	9705      	str	r7, [sp, #20]
 800074a:	9504      	str	r5, [sp, #16]
 800074c:	9503      	str	r5, [sp, #12]
 800074e:	9502      	str	r5, [sp, #8]
 8000750:	9401      	str	r4, [sp, #4]
 8000752:	9700      	str	r7, [sp, #0]
 8000754:	4623      	mov	r3, r4
 8000756:	462a      	mov	r2, r5
 8000758:	4621      	mov	r1, r4
 800075a:	4630      	mov	r0, r6
 800075c:	f000 f944 	bl	80009e8 <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 8000760:	200a      	movs	r0, #10
 8000762:	f000 ff61 	bl	8001628 <HAL_Delay>
  drv8323_write_csacr(&g_driver, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0,
 8000766:	9705      	str	r7, [sp, #20]
 8000768:	9404      	str	r4, [sp, #16]
 800076a:	9403      	str	r4, [sp, #12]
 800076c:	9402      	str	r4, [sp, #8]
 800076e:	9501      	str	r5, [sp, #4]
 8000770:	9700      	str	r7, [sp, #0]
 8000772:	4623      	mov	r3, r4
 8000774:	462a      	mov	r2, r5
 8000776:	4621      	mov	r1, r4
 8000778:	4630      	mov	r0, r6
 800077a:	f000 f935 	bl	80009e8 <drv8323_write_csacr>
                      SEN_LVL_1_0);
  HAL_Delay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f000 ff52 	bl	8001628 <HAL_Delay>
  drv8323_write_ocpcr(&g_driver, TRETRY_50US, DEADTIME_50NS, OCP_NONE,
 8000784:	230f      	movs	r3, #15
 8000786:	9301      	str	r3, [sp, #4]
 8000788:	9700      	str	r7, [sp, #0]
 800078a:	463b      	mov	r3, r7
 800078c:	4622      	mov	r2, r4
 800078e:	4629      	mov	r1, r5
 8000790:	4630      	mov	r0, r6
 8000792:	f000 f912 	bl	80009ba <drv8323_write_ocpcr>
                      OCP_DEG_8US, VDS_LVL_1_88);
  drv8323_enable_gd(&g_driver);
 8000796:	4630      	mov	r0, r6
 8000798:	f000 f951 	bl	8000a3e <drv8323_enable_gd>

  /// 电流采样初始化
  current_init();
 800079c:	f000 f81e 	bl	80007dc <current_init>
  /// 启动PWM
  pwm_start();
 80007a0:	f000 fe06 	bl	80013b0 <pwm_start>

  state_set(STATE_IDLE);
 80007a4:	4628      	mov	r0, r5
 80007a6:	f000 fe8f 	bl	80014c8 <state_set>
 80007aa:	b007      	add	sp, #28
 80007ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40020400 	.word	0x40020400
 80007b4:	2000012c 	.word	0x2000012c
 80007b8:	20004104 	.word	0x20004104

080007bc <HAL_ADCEx_InjectedConvCpltCallback>:

static float g_ia_offset = 0.0f;
static float g_ib_offset = 0.0f;
static float g_ic_offset = 0.0f;

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80007bc:	b508      	push	{r3, lr}
  if (ADC1 == hadc->Instance) {
 80007be:	6802      	ldr	r2, [r0, #0]
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <HAL_ADCEx_InjectedConvCpltCallback+0x18>)
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d000      	beq.n	80007c8 <HAL_ADCEx_InjectedConvCpltCallback+0xc>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  }
}
 80007c6:	bd08      	pop	{r3, pc}
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007cc:	4802      	ldr	r0, [pc, #8]	@ (80007d8 <HAL_ADCEx_InjectedConvCpltCallback+0x1c>)
 80007ce:	f001 ff6d 	bl	80026ac <HAL_GPIO_TogglePin>
}
 80007d2:	e7f8      	b.n	80007c6 <HAL_ADCEx_InjectedConvCpltCallback+0xa>
 80007d4:	40012000 	.word	0x40012000
 80007d8:	40020800 	.word	0x40020800

080007dc <current_init>:

void current_init(void) {
 80007dc:	b508      	push	{r3, lr}
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <current_init+0x18>)
 80007e0:	f001 f976 	bl	8001ad0 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc2);
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <current_init+0x1c>)
 80007e6:	f001 f973 	bl	8001ad0 <HAL_ADCEx_InjectedStart_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc3);
 80007ea:	4804      	ldr	r0, [pc, #16]	@ (80007fc <current_init+0x20>)
 80007ec:	f001 f970 	bl	8001ad0 <HAL_ADCEx_InjectedStart_IT>
 80007f0:	bd08      	pop	{r3, pc}
 80007f2:	bf00      	nop
 80007f4:	200000bc 	.word	0x200000bc
 80007f8:	20000074 	.word	0x20000074
 80007fc:	2000002c 	.word	0x2000002c

08000800 <dev_usart_init>:
extern DMA_HandleTypeDef hdma_usart3_rx;

uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t rx_buffer[RX_BUFFER_SIZE];

int dev_usart_init(void) {
 8000800:	b508      	push	{r3, lr}
  HAL_UART_Receive_DMA(&huart3, rx_buffer, RX_BUFFER_SIZE);
 8000802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000806:	4902      	ldr	r1, [pc, #8]	@ (8000810 <dev_usart_init+0x10>)
 8000808:	4802      	ldr	r0, [pc, #8]	@ (8000814 <dev_usart_init+0x14>)
 800080a:	f004 f85d 	bl	80048c8 <HAL_UART_Receive_DMA>
}
 800080e:	bd08      	pop	{r3, pc}
 8000810:	20000130 	.word	0x20000130
 8000814:	20004428 	.word	0x20004428

08000818 <HAL_UARTEx_RxEventCallback>:
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t size) {
  if (huart->Instance == USART3) {
  }
}
 8000818:	4770      	bx	lr
	...

0800081c <HAL_UART_ErrorCallback>:

/// 下面错误处理函数中把奇偶校验错误以及数据溢出错误标志清除
/// 可以直接在调试时打断点查看huart->ErrorCode的值
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
  if (huart->Instance == USART3) {
 800081c:	6803      	ldr	r3, [r0, #0]
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <HAL_UART_ErrorCallback+0x4c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d000      	beq.n	8000826 <HAL_UART_ErrorCallback+0xa>
 8000824:	4770      	bx	lr
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 8000826:	b500      	push	{lr}
 8000828:	b083      	sub	sp, #12
    __HAL_UART_CLEAR_OREFLAG(huart);
 800082a:	2200      	movs	r2, #0
 800082c:	9200      	str	r2, [sp, #0]
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	9100      	str	r1, [sp, #0]
 8000832:	6859      	ldr	r1, [r3, #4]
 8000834:	9100      	str	r1, [sp, #0]
 8000836:	9900      	ldr	r1, [sp, #0]
    __HAL_UART_CLEAR_PEFLAG(huart);
 8000838:	9201      	str	r2, [sp, #4]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	9201      	str	r2, [sp, #4]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	9b01      	ldr	r3, [sp, #4]
    huart->RxState = HAL_UART_STATE_READY;
 8000844:	2320      	movs	r3, #32
 8000846:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buffer, RX_BUFFER_SIZE);
 800084a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800084e:	4907      	ldr	r1, [pc, #28]	@ (800086c <HAL_UART_ErrorCallback+0x50>)
 8000850:	f004 f84c 	bl	80048ec <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_UART_ErrorCallback+0x54>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	6813      	ldr	r3, [r2, #0]
 800085a:	f023 0308 	bic.w	r3, r3, #8
 800085e:	6013      	str	r3, [r2, #0]
  }
 8000860:	b003      	add	sp, #12
 8000862:	f85d fb04 	ldr.w	pc, [sp], #4
 8000866:	bf00      	nop
 8000868:	40004800 	.word	0x40004800
 800086c:	20000130 	.word	0x20000130
 8000870:	20004368 	.word	0x20004368

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000874:	b510      	push	{r4, lr}
 8000876:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000878:	2400      	movs	r4, #0
 800087a:	9401      	str	r4, [sp, #4]
 800087c:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <MX_DMA_Init+0x40>)
 800087e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000880:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000884:	631a      	str	r2, [r3, #48]	@ 0x30
 8000886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000890:	4622      	mov	r2, r4
 8000892:	2105      	movs	r1, #5
 8000894:	200c      	movs	r0, #12
 8000896:	f001 fb9f 	bl	8001fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800089a:	200c      	movs	r0, #12
 800089c:	f001 fbac 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80008a0:	4622      	mov	r2, r4
 80008a2:	2105      	movs	r1, #5
 80008a4:	200e      	movs	r0, #14
 80008a6:	f001 fb97 	bl	8001fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008aa:	200e      	movs	r0, #14
 80008ac:	f001 fba4 	bl	8001ff8 <HAL_NVIC_EnableIRQ>

}
 80008b0:	b002      	add	sp, #8
 80008b2:	bd10      	pop	{r4, pc}
 80008b4:	40023800 	.word	0x40023800

080008b8 <_SPI_WRITE>:
#define _CAL(x) HAL_GPIO_WritePin(DRV_CAL_GPIO_Port, DRV_CAL_Pin, x)

// SPI通讯NSS
#define _NSS(x) HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, x)

uint16_t _SPI_WRITE(drv8323_t* self, uint16_t data) {
 80008b8:	b530      	push	{r4, r5, lr}
 80008ba:	b087      	sub	sp, #28
 80008bc:	4604      	mov	r4, r0
 80008be:	f8ad 100e 	strh.w	r1, [sp, #14]
  uint16_t ret;
  _NSS(0);
 80008c2:	4d0e      	ldr	r5, [pc, #56]	@ (80008fc <_SPI_WRITE+0x44>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	2104      	movs	r1, #4
 80008c8:	4628      	mov	r0, r5
 80008ca:	f001 fee9 	bl	80026a0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f000 feaa 	bl	8001628 <HAL_Delay>
  HAL_StatusTypeDef sta = HAL_SPI_TransmitReceive(
 80008d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2301      	movs	r3, #1
 80008dc:	f10d 0216 	add.w	r2, sp, #22
 80008e0:	f10d 010e 	add.w	r1, sp, #14
 80008e4:	6820      	ldr	r0, [r4, #0]
 80008e6:	f002 fcc6 	bl	8003276 <HAL_SPI_TransmitReceive>
      self->hspi, (uint8_t*)&data, (uint8_t*)&ret, 1, DRV8323_SPI_TIMEOUT);
  if (HAL_OK != sta) {
    // warn("_SPI_WRITE FAILED: %d", sta);
  }
  _NSS(1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2104      	movs	r1, #4
 80008ee:	4628      	mov	r0, r5
 80008f0:	f001 fed6 	bl	80026a0 <HAL_GPIO_WritePin>
  return ret;
}
 80008f4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80008f8:	b007      	add	sp, #28
 80008fa:	bd30      	pop	{r4, r5, pc}
 80008fc:	40020c00 	.word	0x40020c00

08000900 <drv8323_init>:

int drv8323_init(drv8323_t* self, SPI_HandleTypeDef* spi) {
 8000900:	b510      	push	{r4, lr}
  self->hspi = spi;
 8000902:	6001      	str	r1, [r0, #0]
  _ENABLE(0);
 8000904:	4c0e      	ldr	r4, [pc, #56]	@ (8000940 <drv8323_init+0x40>)
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800090c:	4620      	mov	r0, r4
 800090e:	f001 fec7 	bl	80026a0 <HAL_GPIO_WritePin>
  _CAL(1);
 8000912:	2201      	movs	r2, #1
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	4620      	mov	r0, r4
 8000918:	f001 fec2 	bl	80026a0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800091c:	200a      	movs	r0, #10
 800091e:	f000 fe83 	bl	8001628 <HAL_Delay>
  _ENABLE(1);
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000928:	4620      	mov	r0, r4
 800092a:	f001 feb9 	bl	80026a0 <HAL_GPIO_WritePin>
  _CAL(0);
 800092e:	2200      	movs	r2, #0
 8000930:	2180      	movs	r1, #128	@ 0x80
 8000932:	4620      	mov	r0, r4
 8000934:	f001 feb4 	bl	80026a0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000938:	200a      	movs	r0, #10
 800093a:	f000 fe75 	bl	8001628 <HAL_Delay>
}
 800093e:	bd10      	pop	{r4, pc}
 8000940:	40020800 	.word	0x40020800

08000944 <drv8323_read_register>:
uint16_t drv8323_read_fsr2(drv8323_t* self) {
  uint16_t val = (1 << 15) | (FSR2 << 11);
  return _SPI_WRITE(self, val);
}

uint16_t drv8323_read_register(drv8323_t* self, uint16_t reg) {
 8000944:	b508      	push	{r3, lr}
  uint16_t ret = _SPI_WRITE(self, (1 << 15) | (reg << 11));
 8000946:	ea6f 7101 	mvn.w	r1, r1, lsl #28
 800094a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800094e:	b289      	uxth	r1, r1
 8000950:	f7ff ffb2 	bl	80008b8 <_SPI_WRITE>
  return ret;
}
 8000954:	bd08      	pop	{r3, pc}

08000956 <drv8323_write_register>:

void drv8323_write_register(drv8323_t* self, uint16_t reg, uint16_t val) {
 8000956:	b508      	push	{r3, lr}
  _SPI_WRITE(self, (reg << 11) | val);
 8000958:	ea42 21c1 	orr.w	r1, r2, r1, lsl #11
 800095c:	b289      	uxth	r1, r1
 800095e:	f7ff ffab 	bl	80008b8 <_SPI_WRITE>
}
 8000962:	bd08      	pop	{r3, pc}

08000964 <drv8323_write_dcr>:

void drv8323_write_dcr(drv8323_t* self, uint16_t dis_cpuv, uint16_t dis_gdf,
                       uint16_t otw_rep, uint16_t pwm_mode, uint16_t pwm_com,
                       uint16_t pwm_dir, uint16_t coast, uint16_t brake,
                       uint16_t clr_flt) {
 8000964:	b508      	push	{r3, lr}
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 8000966:	0249      	lsls	r1, r1, #9
 8000968:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 800096c:	b209      	sxth	r1, r1
 800096e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000972:	b209      	sxth	r1, r1
 8000974:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 8000978:	b21b      	sxth	r3, r3
                 (otw_rep << 7) | (pwm_mode << 5) | (pwm_com << 4) |
 800097a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800097e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8000982:	b21b      	sxth	r3, r3
 8000984:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000988:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800098c:	b21b      	sxth	r3, r3
 800098e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8000992:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000996:	b21b      	sxth	r3, r3
                 (pwm_dir << 3) | (coast << 2) | (brake << 1) | clr_flt;
 8000998:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800099c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80009a6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80009aa:	b21b      	sxth	r3, r3
  uint16_t val = (DCR << 11) | (dis_cpuv << 9) | (dis_gdf << 8) |
 80009ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80009b0:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 80009b2:	b289      	uxth	r1, r1
 80009b4:	f7ff ff80 	bl	80008b8 <_SPI_WRITE>
}
 80009b8:	bd08      	pop	{r3, pc}

080009ba <drv8323_write_ocpcr>:
  _SPI_WRITE(self, val);
}

void drv8323_write_ocpcr(drv8323_t* self, uint16_t tretry, uint16_t dead_time,
                         uint16_t ocp_mode, uint16_t ocp_deg,
                         uint16_t vds_lvl) {
 80009ba:	b508      	push	{r3, lr}
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 80009bc:	0289      	lsls	r1, r1, #10
 80009be:	f441 5120 	orr.w	r1, r1, #10240	@ 0x2800
 80009c2:	b209      	sxth	r1, r1
 80009c4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80009c8:	b209      	sxth	r1, r1
 80009ca:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
 80009ce:	b21b      	sxth	r3, r3
                 (ocp_mode << 6) | (ocp_deg << 4) | vds_lvl;
 80009d0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80009d4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80009d8:	b21b      	sxth	r3, r3
  uint16_t val = (OCPCR << 11) | (tretry << 10) | (dead_time << 8) |
 80009da:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80009de:	4319      	orrs	r1, r3
  _SPI_WRITE(self, val);
 80009e0:	b289      	uxth	r1, r1
 80009e2:	f7ff ff69 	bl	80008b8 <_SPI_WRITE>
}
 80009e6:	bd08      	pop	{r3, pc}

080009e8 <drv8323_write_csacr>:

void drv8323_write_csacr(drv8323_t* self, uint16_t csa_fet, uint16_t vref_div,
                         uint16_t ls_ref, uint16_t csa_gain, uint16_t dis_sen,
                         uint16_t csa_cal_a, uint16_t csa_cal_b,
                         uint16_t csa_cal_c, uint16_t sen_lvl) {
 80009e8:	b508      	push	{r3, lr}
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 80009ea:	0289      	lsls	r1, r1, #10
 80009ec:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 80009f0:	b209      	sxth	r1, r1
 80009f2:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80009f6:	b209      	sxth	r1, r1
 80009f8:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80009fc:	b21b      	sxth	r3, r3
                 (ls_ref << 8) | (csa_gain << 6) | (dis_sen << 5) |
 80009fe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8000a02:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000a0c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8000a16:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000a1a:	b21b      	sxth	r3, r3
                 (csa_cal_a << 4) | (csa_cal_b << 3) | (csa_cal_c << 2) |
 8000a1c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8000a20:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8000a2a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8000a2e:	b21b      	sxth	r3, r3
  uint16_t val = (CSACR << 11) | (csa_fet << 10) | (vref_div << 9) |
 8000a30:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8000a34:	4319      	orrs	r1, r3
                 sen_lvl;
  _SPI_WRITE(self, val);
 8000a36:	b289      	uxth	r1, r1
 8000a38:	f7ff ff3e 	bl	80008b8 <_SPI_WRITE>
}
 8000a3c:	bd08      	pop	{r3, pc}

08000a3e <drv8323_enable_gd>:

void drv8323_enable_gd(drv8323_t* self) {
 8000a3e:	b510      	push	{r4, lr}
 8000a40:	4604      	mov	r4, r0
  uint16_t val = (drv8323_read_register(self, DCR)) & (~(0x1 << 2));
 8000a42:	2102      	movs	r1, #2
 8000a44:	f7ff ff7e 	bl	8000944 <drv8323_read_register>
 8000a48:	f020 0204 	bic.w	r2, r0, #4
 8000a4c:	b292      	uxth	r2, r2
  drv8323_write_register(self, DCR, val);
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4620      	mov	r0, r4
 8000a52:	f7ff ff80 	bl	8000956 <drv8323_write_register>
}
 8000a56:	bd10      	pop	{r4, pc}

08000a58 <drv8323_calibrate>:
void drv8323_disable_gd(drv8323_t* self) {
  uint16_t val = (drv8323_read_register(self, DCR)) | (0x1 << 2);
  drv8323_write_register(self, DCR, val);
}

void drv8323_calibrate(drv8323_t* self) {
 8000a58:	b508      	push	{r3, lr}
  uint16_t val = 0x1 << 4 + 0x1 << 3 + 0x1 << 2;
  drv8323_write_register(self, CSACR, val);
 8000a5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a5e:	2106      	movs	r1, #6
 8000a60:	f7ff ff79 	bl	8000956 <drv8323_write_register>
}
 8000a64:	bd08      	pop	{r3, pc}

08000a66 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a66:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;) {
    state_step();
 8000a68:	f000 fd64 	bl	8001534 <state_step>
    // dev_usart_write((uint8_t *)"Hello World!\r\n", 14);
    osDelay(50);
 8000a6c:	2032      	movs	r0, #50	@ 0x32
 8000a6e:	f7ff fe2f 	bl	80006d0 <osDelay>
  for (;;) {
 8000a72:	e7f9      	b.n	8000a68 <StartDefaultTask+0x2>

08000a74 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a74:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <vApplicationGetIdleTaskMemory+0x10>)
 8000a76:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <vApplicationGetIdleTaskMemory+0x14>)
 8000a7a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000430 	.word	0x20000430
 8000a88:	20000230 	.word	0x20000230

08000a8c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	b088      	sub	sp, #32
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a90:	f10d 0c04 	add.w	ip, sp, #4
 8000a94:	4c07      	ldr	r4, [pc, #28]	@ (8000ab4 <MX_FREERTOS_Init+0x28>)
 8000a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000a9c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000aa0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	a801      	add	r0, sp, #4
 8000aa8:	f7ff fddf 	bl	800066a <osThreadCreate>
 8000aac:	4b02      	ldr	r3, [pc, #8]	@ (8000ab8 <MX_FREERTOS_Init+0x2c>)
 8000aae:	6018      	str	r0, [r3, #0]
}
 8000ab0:	b008      	add	sp, #32
 8000ab2:	bd10      	pop	{r4, pc}
 8000ab4:	080059bc 	.word	0x080059bc
 8000ab8:	20000484 	.word	0x20000484

08000abc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	ad05      	add	r5, sp, #20
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	9405      	str	r4, [sp, #20]
 8000ac8:	9406      	str	r4, [sp, #24]
 8000aca:	9407      	str	r4, [sp, #28]
 8000acc:	9408      	str	r4, [sp, #32]
 8000ace:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	9400      	str	r4, [sp, #0]
 8000ad2:	4b45      	ldr	r3, [pc, #276]	@ (8000be8 <MX_GPIO_Init+0x12c>)
 8000ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ad6:	f042 0204 	orr.w	r2, r2, #4
 8000ada:	631a      	str	r2, [r3, #48]	@ 0x30
 8000adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ade:	f002 0204 	and.w	r2, r2, #4
 8000ae2:	9200      	str	r2, [sp, #0]
 8000ae4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	9401      	str	r4, [sp, #4]
 8000ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000aea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000aee:	631a      	str	r2, [r3, #48]	@ 0x30
 8000af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000af2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000af6:	9201      	str	r2, [sp, #4]
 8000af8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	9402      	str	r4, [sp, #8]
 8000afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000afe:	f042 0201 	orr.w	r2, r2, #1
 8000b02:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b06:	f002 0201 	and.w	r2, r2, #1
 8000b0a:	9202      	str	r2, [sp, #8]
 8000b0c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	9403      	str	r4, [sp, #12]
 8000b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b12:	f042 0202 	orr.w	r2, r2, #2
 8000b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b1a:	f002 0202 	and.w	r2, r2, #2
 8000b1e:	9203      	str	r2, [sp, #12]
 8000b20:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	9404      	str	r4, [sp, #16]
 8000b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b26:	f042 0208 	orr.w	r2, r2, #8
 8000b2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	9304      	str	r3, [sp, #16]
 8000b34:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 8000b36:	4f2d      	ldr	r7, [pc, #180]	@ (8000bec <MX_GPIO_Init+0x130>)
 8000b38:	4622      	mov	r2, r4
 8000b3a:	f242 11ce 	movw	r1, #8654	@ 0x21ce
 8000b3e:	4638      	mov	r0, r7
 8000b40:	f001 fdae 	bl	80026a0 <HAL_GPIO_WritePin>
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|ENCODER_CAL_Pin, GPIO_PIN_RESET);
 8000b44:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8000bf0 <MX_GPIO_Init+0x134>
 8000b48:	4622      	mov	r2, r4
 8000b4a:	f248 0120 	movw	r1, #32800	@ 0x8020
 8000b4e:	4650      	mov	r0, sl
 8000b50:	f001 fda6 	bl	80026a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|CAN_STB_Pin, GPIO_PIN_RESET);
 8000b54:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8000bf4 <MX_GPIO_Init+0x138>
 8000b58:	4622      	mov	r2, r4
 8000b5a:	f24e 0120 	movw	r1, #57376	@ 0xe020
 8000b5e:	4640      	mov	r0, r8
 8000b60:	f001 fd9e 	bl	80026a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_SET);
 8000b64:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000bf8 <MX_GPIO_Init+0x13c>
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4648      	mov	r0, r9
 8000b6e:	f001 fd97 	bl	80026a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_SPI_NSS_GPIO_Port, ENCODER_SPI_NSS_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2108      	movs	r1, #8
 8000b76:	4640      	mov	r0, r8
 8000b78:	f001 fd92 	bl	80026a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 LED_3_Pin LED_2_Pin LED_1_Pin
                           TIM1_BREAK_Pin DRV_CAL_Pin DRV_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 8000b7c:	f242 13ce 	movw	r3, #8654	@ 0x21ce
 8000b80:	9305      	str	r3, [sp, #20]
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2601      	movs	r6, #1
 8000b84:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	f001 fc97 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 ENCODER_CAL_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|ENCODER_CAL_Pin;
 8000b92:	f248 0320 	movw	r3, #32800	@ 0x8020
 8000b96:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	4629      	mov	r1, r5
 8000ba0:	4650      	mov	r0, sl
 8000ba2:	f001 fc8d 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 ENCODER_SPI_NSS_Pin
                           CAN_STB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|ENCODER_SPI_NSS_Pin
 8000ba6:	f24e 0328 	movw	r3, #57384	@ 0xe028
 8000baa:	9305      	str	r3, [sp, #20]
                          |CAN_STB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	f001 fc83 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 8000bba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bbe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bc4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	4629      	mov	r1, r5
 8000bca:	4638      	mov	r0, r7
 8000bcc:	f001 fc78 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = DRV_SPI_NSS_Pin;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DRV_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000bda:	4629      	mov	r1, r5
 8000bdc:	4648      	mov	r0, r9
 8000bde:	f001 fc6f 	bl	80024c0 <HAL_GPIO_Init>

}
 8000be2:	b00a      	add	sp, #40	@ 0x28
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020800 	.word	0x40020800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000bfc:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000bfe:	f012 0f07 	tst.w	r2, #7
 8000c02:	d01e      	beq.n	8000c42 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000c04:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c06:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000c0a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 8000c0e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c10:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000c12:	480e      	ldr	r0, [pc, #56]	@ (8000c4c <prvHeapInit+0x50>)
 8000c14:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000c16:	2100      	movs	r1, #0
 8000c18:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000c1a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000c1c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c1e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8000c22:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <prvHeapInit+0x54>)
 8000c24:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8000c26:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000c28:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000c2a:	1a99      	subs	r1, r3, r2
 8000c2c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000c2e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <prvHeapInit+0x58>)
 8000c32:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <prvHeapInit+0x5c>)
 8000c36:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <prvHeapInit+0x60>)
 8000c3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000c42:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000c46:	e7e4      	b.n	8000c12 <prvHeapInit+0x16>
 8000c48:	200004a8 	.word	0x200004a8
 8000c4c:	200004a0 	.word	0x200004a0
 8000c50:	2000049c 	.word	0x2000049c
 8000c54:	20000494 	.word	0x20000494
 8000c58:	20000498 	.word	0x20000498
 8000c5c:	20000488 	.word	0x20000488

08000c60 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <prvInsertBlockIntoFreeList+0x5c>)
 8000c62:	461a      	mov	r2, r3
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4283      	cmp	r3, r0
 8000c68:	d3fb      	bcc.n	8000c62 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000c6a:	6851      	ldr	r1, [r2, #4]
 8000c6c:	eb02 0c01 	add.w	ip, r2, r1
 8000c70:	4584      	cmp	ip, r0
 8000c72:	d009      	beq.n	8000c88 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000c74:	6841      	ldr	r1, [r0, #4]
 8000c76:	eb00 0c01 	add.w	ip, r0, r1
 8000c7a:	4563      	cmp	r3, ip
 8000c7c:	d009      	beq.n	8000c92 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000c7e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d019      	beq.n	8000cb8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000c84:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8000c86:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000c88:	6840      	ldr	r0, [r0, #4]
 8000c8a:	4401      	add	r1, r0
 8000c8c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8000c8e:	4610      	mov	r0, r2
 8000c90:	e7f0      	b.n	8000c74 <prvInsertBlockIntoFreeList+0x14>
{
 8000c92:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <prvInsertBlockIntoFreeList+0x60>)
 8000c96:	6824      	ldr	r4, [r4, #0]
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	d00b      	beq.n	8000cb4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4419      	add	r1, r3
 8000ca0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ca2:	6813      	ldr	r3, [r2, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	d000      	beq.n	8000cae <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000cac:	6010      	str	r0, [r2, #0]
	}
}
 8000cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000cb4:	6004      	str	r4, [r0, #0]
 8000cb6:	e7f7      	b.n	8000ca8 <prvInsertBlockIntoFreeList+0x48>
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	200004a0 	.word	0x200004a0
 8000cc0:	2000049c 	.word	0x2000049c

08000cc4 <pvPortMalloc>:
{
 8000cc4:	b538      	push	{r3, r4, r5, lr}
 8000cc6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8000cc8:	f004 f8d2 	bl	8004e70 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8000ccc:	4b38      	ldr	r3, [pc, #224]	@ (8000db0 <pvPortMalloc+0xec>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	b1b3      	cbz	r3, 8000d00 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000cd2:	4b38      	ldr	r3, [pc, #224]	@ (8000db4 <pvPortMalloc+0xf0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	421c      	tst	r4, r3
 8000cd8:	d150      	bne.n	8000d7c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d050      	beq.n	8000d80 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8000cde:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ce2:	f014 0f07 	tst.w	r4, #7
 8000ce6:	d002      	beq.n	8000cee <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000ce8:	f022 0207 	bic.w	r2, r2, #7
 8000cec:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d055      	beq.n	8000d9e <pvPortMalloc+0xda>
 8000cf2:	4b31      	ldr	r3, [pc, #196]	@ (8000db8 <pvPortMalloc+0xf4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d353      	bcc.n	8000da2 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8000cfa:	4930      	ldr	r1, [pc, #192]	@ (8000dbc <pvPortMalloc+0xf8>)
 8000cfc:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cfe:	e004      	b.n	8000d0a <pvPortMalloc+0x46>
			prvHeapInit();
 8000d00:	f7ff ff7c 	bl	8000bfc <prvHeapInit>
 8000d04:	e7e5      	b.n	8000cd2 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000d06:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d08:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d0a:	6863      	ldr	r3, [r4, #4]
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d202      	bcs.n	8000d16 <pvPortMalloc+0x52>
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f7      	bne.n	8000d06 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000d16:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <pvPortMalloc+0xec>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d043      	beq.n	8000da6 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d1e:	680d      	ldr	r5, [r1, #0]
 8000d20:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d26:	6863      	ldr	r3, [r4, #4]
 8000d28:	1a9b      	subs	r3, r3, r2
 8000d2a:	2b10      	cmp	r3, #16
 8000d2c:	d910      	bls.n	8000d50 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d2e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d30:	f010 0f07 	tst.w	r0, #7
 8000d34:	d008      	beq.n	8000d48 <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d3a:	f383 8811 	msr	BASEPRI, r3
 8000d3e:	f3bf 8f6f 	isb	sy
 8000d42:	f3bf 8f4f 	dsb	sy
 8000d46:	e7fe      	b.n	8000d46 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d48:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000d4a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000d4c:	f7ff ff88 	bl	8000c60 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000d50:	6862      	ldr	r2, [r4, #4]
 8000d52:	4919      	ldr	r1, [pc, #100]	@ (8000db8 <pvPortMalloc+0xf4>)
 8000d54:	680b      	ldr	r3, [r1, #0]
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000d5a:	4919      	ldr	r1, [pc, #100]	@ (8000dc0 <pvPortMalloc+0xfc>)
 8000d5c:	6809      	ldr	r1, [r1, #0]
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d201      	bcs.n	8000d66 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d62:	4917      	ldr	r1, [pc, #92]	@ (8000dc0 <pvPortMalloc+0xfc>)
 8000d64:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <pvPortMalloc+0xf0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <pvPortMalloc+0x100>)
 8000d74:	6813      	ldr	r3, [r2, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e002      	b.n	8000d82 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	e000      	b.n	8000d82 <pvPortMalloc+0xbe>
 8000d80:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8000d82:	f004 f909 	bl	8004f98 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d86:	f015 0f07 	tst.w	r5, #7
 8000d8a:	d00e      	beq.n	8000daa <pvPortMalloc+0xe6>
 8000d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d90:	f383 8811 	msr	BASEPRI, r3
 8000d94:	f3bf 8f6f 	isb	sy
 8000d98:	f3bf 8f4f 	dsb	sy
 8000d9c:	e7fe      	b.n	8000d9c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8000d9e:	2500      	movs	r5, #0
 8000da0:	e7ef      	b.n	8000d82 <pvPortMalloc+0xbe>
 8000da2:	2500      	movs	r5, #0
 8000da4:	e7ed      	b.n	8000d82 <pvPortMalloc+0xbe>
 8000da6:	2500      	movs	r5, #0
 8000da8:	e7eb      	b.n	8000d82 <pvPortMalloc+0xbe>
}
 8000daa:	4628      	mov	r0, r5
 8000dac:	bd38      	pop	{r3, r4, r5, pc}
 8000dae:	bf00      	nop
 8000db0:	2000049c 	.word	0x2000049c
 8000db4:	20000488 	.word	0x20000488
 8000db8:	20000498 	.word	0x20000498
 8000dbc:	200004a0 	.word	0x200004a0
 8000dc0:	20000494 	.word	0x20000494
 8000dc4:	20000490 	.word	0x20000490

08000dc8 <vPortFree>:
	if( pv != NULL )
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d034      	beq.n	8000e36 <vPortFree+0x6e>
{
 8000dcc:	b538      	push	{r3, r4, r5, lr}
 8000dce:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8000dd0:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000dd4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	@ (8000e38 <vPortFree+0x70>)
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	4213      	tst	r3, r2
 8000dde:	d108      	bne.n	8000df2 <vPortFree+0x2a>
 8000de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000de4:	f383 8811 	msr	BASEPRI, r3
 8000de8:	f3bf 8f6f 	isb	sy
 8000dec:	f3bf 8f4f 	dsb	sy
 8000df0:	e7fe      	b.n	8000df0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000df2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000df6:	b141      	cbz	r1, 8000e0a <vPortFree+0x42>
 8000df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dfc:	f383 8811 	msr	BASEPRI, r3
 8000e00:	f3bf 8f6f 	isb	sy
 8000e04:	f3bf 8f4f 	dsb	sy
 8000e08:	e7fe      	b.n	8000e08 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e0a:	ea23 0302 	bic.w	r3, r3, r2
 8000e0e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8000e12:	f004 f82d 	bl	8004e70 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000e16:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000e1a:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <vPortFree+0x74>)
 8000e1c:	6813      	ldr	r3, [r2, #0]
 8000e1e:	440b      	add	r3, r1
 8000e20:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e22:	4628      	mov	r0, r5
 8000e24:	f7ff ff1c 	bl	8000c60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000e28:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <vPortFree+0x78>)
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8000e30:	f004 f8b2 	bl	8004f98 <xTaskResumeAll>
}
 8000e34:	bd38      	pop	{r3, r4, r5, pc}
 8000e36:	4770      	bx	lr
 8000e38:	20000488 	.word	0x20000488
 8000e3c:	20000498 	.word	0x20000498
 8000e40:	2000048c 	.word	0x2000048c

08000e44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e44:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e46:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <MX_I2C1_Init+0x30>)
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <MX_I2C1_Init+0x34>)
 8000e4a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <MX_I2C1_Init+0x38>)
 8000e4e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e50:	2300      	movs	r3, #0
 8000e52:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e54:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e5a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e60:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e62:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e64:	f001 fc2c 	bl	80026c0 <HAL_I2C_Init>
 8000e68:	b900      	cbnz	r0, 8000e6c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e6c:	f000 f892 	bl	8000f94 <Error_Handler>
}
 8000e70:	e7fb      	b.n	8000e6a <MX_I2C1_Init+0x26>
 8000e72:	bf00      	nop
 8000e74:	200040a8 	.word	0x200040a8
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	000186a0 	.word	0x000186a0

08000e80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e80:	b530      	push	{r4, r5, lr}
 8000e82:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	2300      	movs	r3, #0
 8000e86:	9303      	str	r3, [sp, #12]
 8000e88:	9304      	str	r3, [sp, #16]
 8000e8a:	9305      	str	r3, [sp, #20]
 8000e8c:	9306      	str	r3, [sp, #24]
 8000e8e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000e90:	6802      	ldr	r2, [r0, #0]
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <HAL_I2C_MspInit+0x64>)
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d001      	beq.n	8000e9c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e98:	b009      	add	sp, #36	@ 0x24
 8000e9a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	2500      	movs	r5, #0
 8000e9e:	9501      	str	r5, [sp, #4]
 8000ea0:	4c11      	ldr	r4, [pc, #68]	@ (8000ee8 <HAL_I2C_MspInit+0x68>)
 8000ea2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6323      	str	r3, [r4, #48]	@ 0x30
 8000eaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb4:	23c0      	movs	r3, #192	@ 0xc0
 8000eb6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb8:	2312      	movs	r3, #18
 8000eba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	a903      	add	r1, sp, #12
 8000ec6:	4809      	ldr	r0, [pc, #36]	@ (8000eec <HAL_I2C_MspInit+0x6c>)
 8000ec8:	f001 fafa 	bl	80024c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ecc:	9502      	str	r5, [sp, #8]
 8000ece:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ed0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ed4:	6423      	str	r3, [r4, #64]	@ 0x40
 8000ed6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	9b02      	ldr	r3, [sp, #8]
}
 8000ee0:	e7da      	b.n	8000e98 <HAL_I2C_MspInit+0x18>
 8000ee2:	bf00      	nop
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400

08000ef0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ef0:	f100 0308 	add.w	r3, r0, #8
 8000ef4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8000efa:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000efc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000efe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000f04:	4770      	bx	lr

08000f06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000f0a:	4770      	bx	lr

08000f0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000f0c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000f0e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000f14:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000f16:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000f18:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000f1a:	6803      	ldr	r3, [r0, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	6003      	str	r3, [r0, #0]
}
 8000f20:	4770      	bx	lr

08000f22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000f22:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000f24:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000f26:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000f2a:	d011      	beq.n	8000f50 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000f2c:	f100 0308 	add.w	r3, r0, #8
 8000f30:	461c      	mov	r4, r3
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	42aa      	cmp	r2, r5
 8000f38:	d9fa      	bls.n	8000f30 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000f3a:	6863      	ldr	r3, [r4, #4]
 8000f3c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000f3e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000f40:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000f42:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000f44:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000f46:	6803      	ldr	r3, [r0, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	6003      	str	r3, [r0, #0]
}
 8000f4c:	bc30      	pop	{r4, r5}
 8000f4e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8000f50:	6904      	ldr	r4, [r0, #16]
 8000f52:	e7f2      	b.n	8000f3a <vListInsert+0x18>

08000f54 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000f54:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000f56:	6841      	ldr	r1, [r0, #4]
 8000f58:	6882      	ldr	r2, [r0, #8]
 8000f5a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000f5c:	6841      	ldr	r1, [r0, #4]
 8000f5e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	4282      	cmp	r2, r0
 8000f64:	d006      	beq.n	8000f74 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000f66:	2200      	movs	r2, #0
 8000f68:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	3a01      	subs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000f70:	6818      	ldr	r0, [r3, #0]
}
 8000f72:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000f74:	6882      	ldr	r2, [r0, #8]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	e7f5      	b.n	8000f66 <uxListRemove+0x12>
	...

08000f7c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f7e:	6802      	ldr	r2, [r0, #0]
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d000      	beq.n	8000f88 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f86:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000f88:	f000 fb3c 	bl	8001604 <HAL_IncTick>
}
 8000f8c:	e7fb      	b.n	8000f86 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000f8e:	bf00      	nop
 8000f90:	40001000 	.word	0x40001000

08000f94 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
 */
void Error_Handler(void) {
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000f96:	e7fe      	b.n	8000f96 <Error_Handler+0x2>

08000f98 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000f98:	b510      	push	{r4, lr}
 8000f9a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9c:	ac07      	add	r4, sp, #28
 8000f9e:	2234      	movs	r2, #52	@ 0x34
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f004 fb55 	bl	8005652 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	9303      	str	r3, [sp, #12]
 8000fae:	9304      	str	r3, [sp, #16]
 8000fb0:	9305      	str	r3, [sp, #20]
 8000fb2:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4a20      	ldr	r2, [pc, #128]	@ (8001038 <SystemClock_Config+0xa0>)
 8000fb8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000fba:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000fbe:	6411      	str	r1, [r2, #64]	@ 0x40
 8000fc0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000fc2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <SystemClock_Config+0xa4>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fee:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ff2:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ff8:	22a0      	movs	r2, #160	@ 0xa0
 8000ffa:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffc:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ffe:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001000:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001002:	4620      	mov	r0, r4
 8001004:	f001 fe12 	bl	8002c2c <HAL_RCC_OscConfig>
 8001008:	b990      	cbnz	r0, 8001030 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800100a:	230f      	movs	r3, #15
 800100c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2302      	movs	r3, #2
 8001010:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001016:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800101a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001020:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001022:	2105      	movs	r1, #5
 8001024:	a802      	add	r0, sp, #8
 8001026:	f001 fc4b 	bl	80028c0 <HAL_RCC_ClockConfig>
 800102a:	b918      	cbnz	r0, 8001034 <SystemClock_Config+0x9c>
}
 800102c:	b014      	add	sp, #80	@ 0x50
 800102e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001030:	f7ff ffb0 	bl	8000f94 <Error_Handler>
    Error_Handler();
 8001034:	f7ff ffae 	bl	8000f94 <Error_Handler>
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <main>:
int main(void) {
 8001040:	b508      	push	{r3, lr}
  HAL_Init();
 8001042:	f000 fac5 	bl	80015d0 <HAL_Init>
  SystemClock_Config();
 8001046:	f7ff ffa7 	bl	8000f98 <SystemClock_Config>
  MX_GPIO_Init();
 800104a:	f7ff fd37 	bl	8000abc <MX_GPIO_Init>
  MX_DMA_Init();
 800104e:	f7ff fc11 	bl	8000874 <MX_DMA_Init>
  MX_CAN1_Init();
 8001052:	f7ff faab 	bl	80005ac <MX_CAN1_Init>
  MX_TIM1_Init();
 8001056:	f004 f981 	bl	800535c <MX_TIM1_Init>
  MX_ADC1_Init();
 800105a:	f7ff f8f3 	bl	8000244 <MX_ADC1_Init>
  MX_ADC2_Init();
 800105e:	f7ff f943 	bl	80002e8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001062:	f7ff f993 	bl	800038c <MX_ADC3_Init>
  MX_I2C1_Init();
 8001066:	f7ff feed 	bl	8000e44 <MX_I2C1_Init>
  MX_SPI3_Init();
 800106a:	f000 f9d5 	bl	8001418 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800106e:	f004 fa11 	bl	8005494 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001072:	f004 f87f 	bl	8005174 <MX_TIM3_Init>
  HAL_Delay(100);
 8001076:	2064      	movs	r0, #100	@ 0x64
 8001078:	f000 fad6 	bl	8001628 <HAL_Delay>
  controller_init();
 800107c:	f7ff fb30 	bl	80006e0 <controller_init>
  MX_FREERTOS_Init();
 8001080:	f7ff fd04 	bl	8000a8c <MX_FREERTOS_Init>
  osKernelStart();
 8001084:	f7ff faec 	bl	8000660 <osKernelStart>
  while (1) {
 8001088:	e7fe      	b.n	8001088 <main+0x48>
	...

0800108c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800108c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001092:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <prvTaskExitError+0x3c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109a:	d008      	beq.n	80010ae <prvTaskExitError+0x22>
 800109c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a0:	f383 8811 	msr	BASEPRI, r3
 80010a4:	f3bf 8f6f 	isb	sy
 80010a8:	f3bf 8f4f 	dsb	sy
 80010ac:	e7fe      	b.n	80010ac <prvTaskExitError+0x20>
 80010ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b2:	f383 8811 	msr	BASEPRI, r3
 80010b6:	f3bf 8f6f 	isb	sy
 80010ba:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80010be:	9b01      	ldr	r3, [sp, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0fc      	beq.n	80010be <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80010c4:	b002      	add	sp, #8
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000

080010cc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80010cc:	4808      	ldr	r0, [pc, #32]	@ (80010f0 <prvPortStartFirstTask+0x24>)
 80010ce:	6800      	ldr	r0, [r0, #0]
 80010d0:	6800      	ldr	r0, [r0, #0]
 80010d2:	f380 8808 	msr	MSP, r0
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	f380 8814 	msr	CONTROL, r0
 80010de:	b662      	cpsie	i
 80010e0:	b661      	cpsie	f
 80010e2:	f3bf 8f4f 	dsb	sy
 80010e6:	f3bf 8f6f 	isb	sy
 80010ea:	df00      	svc	0
 80010ec:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80010ee:	0000      	.short	0x0000
 80010f0:	e000ed08 	.word	0xe000ed08

080010f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80010f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001104 <vPortEnableVFP+0x10>
 80010f8:	6801      	ldr	r1, [r0, #0]
 80010fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80010fe:	6001      	str	r1, [r0, #0]
 8001100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001102:	0000      	.short	0x0000
 8001104:	e000ed88 	.word	0xe000ed88

08001108 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001108:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800110c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001110:	f021 0101 	bic.w	r1, r1, #1
 8001114:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <pxPortInitialiseStack+0x28>)
 800111a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800111e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001122:	f06f 0302 	mvn.w	r3, #2
 8001126:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800112a:	3844      	subs	r0, #68	@ 0x44
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	0800108d 	.word	0x0800108d
	...

08001140 <SVC_Handler>:
	__asm volatile (
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <pxCurrentTCBConst2>)
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	6808      	ldr	r0, [r1, #0]
 8001146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114a:	f380 8809 	msr	PSP, r0
 800114e:	f3bf 8f6f 	isb	sy
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	f380 8811 	msr	BASEPRI, r0
 800115a:	4770      	bx	lr
 800115c:	f3af 8000 	nop.w

08001160 <pxCurrentTCBConst2>:
 8001160:	200042d4 	.word	0x200042d4

08001164 <vPortEnterCritical>:
 8001164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001168:	f383 8811 	msr	BASEPRI, r3
 800116c:	f3bf 8f6f 	isb	sy
 8001170:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001174:	4a0b      	ldr	r2, [pc, #44]	@ (80011a4 <vPortEnterCritical+0x40>)
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800117c:	2b01      	cmp	r3, #1
 800117e:	d000      	beq.n	8001182 <vPortEnterCritical+0x1e>
}
 8001180:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001182:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001186:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800118a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800118e:	d0f7      	beq.n	8001180 <vPortEnterCritical+0x1c>
 8001190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001194:	f383 8811 	msr	BASEPRI, r3
 8001198:	f3bf 8f6f 	isb	sy
 800119c:	f3bf 8f4f 	dsb	sy
 80011a0:	e7fe      	b.n	80011a0 <vPortEnterCritical+0x3c>
 80011a2:	bf00      	nop
 80011a4:	20000000 	.word	0x20000000

080011a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <vPortExitCritical+0x28>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	b943      	cbnz	r3, 80011c0 <vPortExitCritical+0x18>
 80011ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011b2:	f383 8811 	msr	BASEPRI, r3
 80011b6:	f3bf 8f6f 	isb	sy
 80011ba:	f3bf 8f4f 	dsb	sy
 80011be:	e7fe      	b.n	80011be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a03      	ldr	r2, [pc, #12]	@ (80011d0 <vPortExitCritical+0x28>)
 80011c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80011c6:	b90b      	cbnz	r3, 80011cc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80011c8:	f383 8811 	msr	BASEPRI, r3
}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000000 	.word	0x20000000
	...

080011e0 <PendSV_Handler>:
	__asm volatile
 80011e0:	f3ef 8009 	mrs	r0, PSP
 80011e4:	f3bf 8f6f 	isb	sy
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <pxCurrentTCBConst>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	f01e 0f10 	tst.w	lr, #16
 80011f0:	bf08      	it	eq
 80011f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80011f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011fa:	6010      	str	r0, [r2, #0]
 80011fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001204:	f380 8811 	msr	BASEPRI, r0
 8001208:	f3bf 8f4f 	dsb	sy
 800120c:	f3bf 8f6f 	isb	sy
 8001210:	f003 ff64 	bl	80050dc <vTaskSwitchContext>
 8001214:	f04f 0000 	mov.w	r0, #0
 8001218:	f380 8811 	msr	BASEPRI, r0
 800121c:	bc09      	pop	{r0, r3}
 800121e:	6819      	ldr	r1, [r3, #0]
 8001220:	6808      	ldr	r0, [r1, #0]
 8001222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001226:	f01e 0f10 	tst.w	lr, #16
 800122a:	bf08      	it	eq
 800122c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001230:	f380 8809 	msr	PSP, r0
 8001234:	f3bf 8f6f 	isb	sy
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	f3af 8000 	nop.w

08001240 <pxCurrentTCBConst>:
 8001240:	200042d4 	.word	0x200042d4

08001244 <SysTick_Handler>:
{
 8001244:	b508      	push	{r3, lr}
	__asm volatile
 8001246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800124a:	f383 8811 	msr	BASEPRI, r3
 800124e:	f3bf 8f6f 	isb	sy
 8001252:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001256:	f003 fe13 	bl	8004e80 <xTaskIncrementTick>
 800125a:	b128      	cbz	r0, 8001268 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800125c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001264:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8001268:	2300      	movs	r3, #0
 800126a:	f383 8811 	msr	BASEPRI, r3
}
 800126e:	bd08      	pop	{r3, pc}

08001270 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001270:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001274:	2300      	movs	r3, #0
 8001276:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001278:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800127a:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <vPortSetupTimerInterrupt+0x20>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4905      	ldr	r1, [pc, #20]	@ (8001294 <vPortSetupTimerInterrupt+0x24>)
 8001280:	fba1 1303 	umull	r1, r3, r1, r3
 8001284:	099b      	lsrs	r3, r3, #6
 8001286:	3b01      	subs	r3, #1
 8001288:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800128a:	2307      	movs	r3, #7
 800128c:	6113      	str	r3, [r2, #16]
}
 800128e:	4770      	bx	lr
 8001290:	2000000c 	.word	0x2000000c
 8001294:	10624dd3 	.word	0x10624dd3

08001298 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001298:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800129c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80012a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001398 <xPortStartScheduler+0x100>)
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d01c      	beq.n	80012e0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80012a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80012aa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80012ae:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <xPortStartScheduler+0x104>)
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d01e      	beq.n	80012f2 <xPortStartScheduler+0x5a>
{
 80012b4:	b530      	push	{r4, r5, lr}
 80012b6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80012b8:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <xPortStartScheduler+0x108>)
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80012c0:	22ff      	movs	r2, #255	@ 0xff
 80012c2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80012cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80012d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80012d4:	4a33      	ldr	r2, [pc, #204]	@ (80013a4 <xPortStartScheduler+0x10c>)
 80012d6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80012d8:	4b33      	ldr	r3, [pc, #204]	@ (80013a8 <xPortStartScheduler+0x110>)
 80012da:	2207      	movs	r2, #7
 80012dc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012de:	e01b      	b.n	8001318 <xPortStartScheduler+0x80>
	__asm volatile
 80012e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012e4:	f383 8811 	msr	BASEPRI, r3
 80012e8:	f3bf 8f6f 	isb	sy
 80012ec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012f0:	e7fe      	b.n	80012f0 <xPortStartScheduler+0x58>
 80012f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012f6:	f383 8811 	msr	BASEPRI, r3
 80012fa:	f3bf 8f6f 	isb	sy
 80012fe:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001302:	e7fe      	b.n	8001302 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8001304:	4a28      	ldr	r2, [pc, #160]	@ (80013a8 <xPortStartScheduler+0x110>)
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	3b01      	subs	r3, #1
 800130a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800130c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001318:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800131c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001320:	d1f0      	bne.n	8001304 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <xPortStartScheduler+0x110>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d008      	beq.n	800133c <xPortStartScheduler+0xa4>
 800132a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800132e:	f383 8811 	msr	BASEPRI, r3
 8001332:	f3bf 8f6f 	isb	sy
 8001336:	f3bf 8f4f 	dsb	sy
 800133a:	e7fe      	b.n	800133a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	4a1a      	ldr	r2, [pc, #104]	@ (80013a8 <xPortStartScheduler+0x110>)
 8001340:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001342:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001346:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001348:	9b01      	ldr	r3, [sp, #4]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <xPortStartScheduler+0x108>)
 800134e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001350:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8001354:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800135c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001360:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8001364:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001368:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800136c:	f7ff ff80 	bl	8001270 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001370:	2500      	movs	r5, #0
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <xPortStartScheduler+0x114>)
 8001374:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8001376:	f7ff febd 	bl	80010f4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800137a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800137e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001382:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8001386:	f7ff fea1 	bl	80010cc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800138a:	f003 fea7 	bl	80050dc <vTaskSwitchContext>
	prvTaskExitError();
 800138e:	f7ff fe7d 	bl	800108c <prvTaskExitError>
}
 8001392:	4628      	mov	r0, r5
 8001394:	b003      	add	sp, #12
 8001396:	bd30      	pop	{r4, r5, pc}
 8001398:	410fc271 	.word	0x410fc271
 800139c:	410fc270 	.word	0x410fc270
 80013a0:	e000e400 	.word	0xe000e400
 80013a4:	20004100 	.word	0x20004100
 80013a8:	200040fc 	.word	0x200040fc
 80013ac:	20000000 	.word	0x20000000

080013b0 <pwm_start>:
#include "./pwm.h"

void pwm_start(void) {
 80013b0:	b510      	push	{r4, lr}
  TIM1->ARR = 8000 - 1;
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <pwm_start+0x60>)
 80013b4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR4 = 8000 - 2;
 80013ba:	f641 723e 	movw	r2, #7998	@ 0x1f3e
 80013be:	641a      	str	r2, [r3, #64]	@ 0x40

  TIM1->CCR1 = 6000;
 80013c0:	f241 7270 	movw	r2, #6000	@ 0x1770
 80013c4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 4000;
 80013c6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80013ca:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 2000;
 80013cc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013d2:	4c10      	ldr	r4, [pc, #64]	@ (8001414 <pwm_start+0x64>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	4620      	mov	r0, r4
 80013d8:	f002 fc78 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013dc:	2104      	movs	r1, #4
 80013de:	4620      	mov	r0, r4
 80013e0:	f002 fc74 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013e4:	2108      	movs	r1, #8
 80013e6:	4620      	mov	r0, r4
 80013e8:	f002 fc70 	bl	8003ccc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80013ec:	2100      	movs	r1, #0
 80013ee:	4620      	mov	r0, r4
 80013f0:	f002 fd64 	bl	8003ebc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80013f4:	2104      	movs	r1, #4
 80013f6:	4620      	mov	r0, r4
 80013f8:	f002 fd60 	bl	8003ebc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80013fc:	2108      	movs	r1, #8
 80013fe:	4620      	mov	r0, r4
 8001400:	f002 fd5c 	bl	8003ebc <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001404:	210c      	movs	r1, #12
 8001406:	4620      	mov	r0, r4
 8001408:	f002 fc60 	bl	8003ccc <HAL_TIM_PWM_Start>
}
 800140c:	bd10      	pop	{r4, pc}
 800140e:	bf00      	nop
 8001410:	40010000 	.word	0x40010000
 8001414:	20004320 	.word	0x20004320

08001418 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001418:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800141a:	480d      	ldr	r0, [pc, #52]	@ (8001450 <MX_SPI3_Init+0x38>)
 800141c:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <MX_SPI3_Init+0x3c>)
 800141e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001420:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001424:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001426:	2300      	movs	r3, #0
 8001428:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800142a:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142c:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142e:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001434:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001436:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001438:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800143a:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800143e:	230a      	movs	r3, #10
 8001440:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001442:	f001 feb9 	bl	80031b8 <HAL_SPI_Init>
 8001446:	b900      	cbnz	r0, 800144a <MX_SPI3_Init+0x32>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001448:	bd08      	pop	{r3, pc}
    Error_Handler();
 800144a:	f7ff fda3 	bl	8000f94 <Error_Handler>
}
 800144e:	e7fb      	b.n	8001448 <MX_SPI3_Init+0x30>
 8001450:	20004104 	.word	0x20004104
 8001454:	40003c00 	.word	0x40003c00

08001458 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001458:	b500      	push	{lr}
 800145a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	2300      	movs	r3, #0
 800145e:	9303      	str	r3, [sp, #12]
 8001460:	9304      	str	r3, [sp, #16]
 8001462:	9305      	str	r3, [sp, #20]
 8001464:	9306      	str	r3, [sp, #24]
 8001466:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 8001468:	6802      	ldr	r2, [r0, #0]
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_SPI_MspInit+0x68>)
 800146c:	429a      	cmp	r2, r3
 800146e:	d002      	beq.n	8001476 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001470:	b009      	add	sp, #36	@ 0x24
 8001472:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001476:	2100      	movs	r1, #0
 8001478:	9101      	str	r1, [sp, #4]
 800147a:	f503 33fe 	add.w	r3, r3, #130048	@ 0x1fc00
 800147e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001480:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001484:	641a      	str	r2, [r3, #64]	@ 0x40
 8001486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001488:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800148c:	9201      	str	r2, [sp, #4]
 800148e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001490:	9102      	str	r1, [sp, #8]
 8001492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001494:	f042 0204 	orr.w	r2, r2, #4
 8001498:	631a      	str	r2, [r3, #48]	@ 0x30
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014a4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80014a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014b2:	2306      	movs	r3, #6
 80014b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	a903      	add	r1, sp, #12
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <HAL_SPI_MspInit+0x6c>)
 80014ba:	f001 f801 	bl	80024c0 <HAL_GPIO_Init>
}
 80014be:	e7d7      	b.n	8001470 <HAL_SPI_MspInit+0x18>
 80014c0:	40003c00 	.word	0x40003c00
 80014c4:	40020800 	.word	0x40020800

080014c8 <state_set>:
#include "gpio.h"

static state_e g_state = STATE_INIT;
static uint8_t g_led_state = 0x01;

void state_set(state_e state) { g_state = state; }
 80014c8:	4b01      	ldr	r3, [pc, #4]	@ (80014d0 <state_set+0x8>)
 80014ca:	7018      	strb	r0, [r3, #0]
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000415d 	.word	0x2000415d

080014d4 <led_ctl>:

void led_ctl(uint8_t led_state) {
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
  if (led_state & 0x01) {
 80014d8:	f010 0f01 	tst.w	r0, #1
 80014dc:	d015      	beq.n	800150a <led_ctl+0x36>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2108      	movs	r1, #8
 80014e2:	4813      	ldr	r0, [pc, #76]	@ (8001530 <led_ctl+0x5c>)
 80014e4:	f001 f8dc 	bl	80026a0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x02) {
 80014e8:	f014 0f02 	tst.w	r4, #2
 80014ec:	d013      	beq.n	8001516 <led_ctl+0x42>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2104      	movs	r1, #4
 80014f2:	480f      	ldr	r0, [pc, #60]	@ (8001530 <led_ctl+0x5c>)
 80014f4:	f001 f8d4 	bl	80026a0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x04) {
 80014f8:	f014 0f04 	tst.w	r4, #4
 80014fc:	d011      	beq.n	8001522 <led_ctl+0x4e>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2102      	movs	r1, #2
 8001502:	480b      	ldr	r0, [pc, #44]	@ (8001530 <led_ctl+0x5c>)
 8001504:	f001 f8cc 	bl	80026a0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
  }
}
 8001508:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2108      	movs	r1, #8
 800150e:	4808      	ldr	r0, [pc, #32]	@ (8001530 <led_ctl+0x5c>)
 8001510:	f001 f8c6 	bl	80026a0 <HAL_GPIO_WritePin>
 8001514:	e7e8      	b.n	80014e8 <led_ctl+0x14>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	2104      	movs	r1, #4
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <led_ctl+0x5c>)
 800151c:	f001 f8c0 	bl	80026a0 <HAL_GPIO_WritePin>
 8001520:	e7ea      	b.n	80014f8 <led_ctl+0x24>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	2102      	movs	r1, #2
 8001526:	4802      	ldr	r0, [pc, #8]	@ (8001530 <led_ctl+0x5c>)
 8001528:	f001 f8ba 	bl	80026a0 <HAL_GPIO_WritePin>
}
 800152c:	e7ec      	b.n	8001508 <led_ctl+0x34>
 800152e:	bf00      	nop
 8001530:	40020800 	.word	0x40020800

08001534 <state_step>:

void state_step(void) {
 8001534:	b508      	push	{r3, lr}
  if (STATE_INIT == g_state) {
 8001536:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <state_step+0x90>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b04      	cmp	r3, #4
 800153c:	d809      	bhi.n	8001552 <state_step+0x1e>
 800153e:	e8df f003 	tbb	[pc, r3]
 8001542:	2503      	.short	0x2503
 8001544:	092b      	.short	0x092b
 8001546:	3b          	.byte	0x3b
 8001547:	00          	.byte	0x00
    g_led_state = 0x07;
 8001548:	2007      	movs	r0, #7
 800154a:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <state_step+0x94>)
 800154c:	7018      	strb	r0, [r3, #0]
    led_ctl(g_led_state);
 800154e:	f7ff ffc1 	bl	80014d4 <led_ctl>

  else if (STATE_ERROR == g_state) {
    g_led_state = 0x02;
    led_ctl(g_led_state);
  }
 8001552:	bd08      	pop	{r3, pc}
    led_ctl(g_led_state);
 8001554:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <state_step+0x94>)
 8001556:	7818      	ldrb	r0, [r3, #0]
 8001558:	f7ff ffbc 	bl	80014d4 <led_ctl>
    if (0 == dir) {
 800155c:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <state_step+0x98>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b953      	cbnz	r3, 8001578 <state_step+0x44>
      g_led_state = g_led_state << 1;
 8001562:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <state_step+0x94>)
 8001564:	7813      	ldrb	r3, [r2, #0]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	7013      	strb	r3, [r2, #0]
      if (0x04 == g_led_state) {
 800156c:	2b04      	cmp	r3, #4
 800156e:	d1f0      	bne.n	8001552 <state_step+0x1e>
        dir = 1;
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <state_step+0x98>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e7ec      	b.n	8001552 <state_step+0x1e>
      g_led_state = g_led_state >> 1;
 8001578:	4a13      	ldr	r2, [pc, #76]	@ (80015c8 <state_step+0x94>)
 800157a:	7813      	ldrb	r3, [r2, #0]
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	7013      	strb	r3, [r2, #0]
      if (0x01 == g_led_state) {
 8001580:	2b01      	cmp	r3, #1
 8001582:	d1e6      	bne.n	8001552 <state_step+0x1e>
        dir = 0;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <state_step+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e7e2      	b.n	8001552 <state_step+0x1e>
    g_led_state = 0x04;
 800158c:	2004      	movs	r0, #4
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <state_step+0x94>)
 8001590:	7018      	strb	r0, [r3, #0]
    led_ctl(g_led_state);
 8001592:	f7ff ff9f 	bl	80014d4 <led_ctl>
 8001596:	e7dc      	b.n	8001552 <state_step+0x1e>
    if (0x01 != g_led_state) {
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <state_step+0x94>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d007      	beq.n	80015b0 <state_step+0x7c>
      g_led_state = 0x01;
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <state_step+0x94>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
    led_ctl(g_led_state);
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <state_step+0x94>)
 80015a8:	7818      	ldrb	r0, [r3, #0]
 80015aa:	f7ff ff93 	bl	80014d4 <led_ctl>
 80015ae:	e7d0      	b.n	8001552 <state_step+0x1e>
      g_led_state = 0x00;
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <state_step+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	e7f6      	b.n	80015a6 <state_step+0x72>
    g_led_state = 0x02;
 80015b8:	2002      	movs	r0, #2
 80015ba:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <state_step+0x94>)
 80015bc:	7018      	strb	r0, [r3, #0]
    led_ctl(g_led_state);
 80015be:	f7ff ff89 	bl	80014d4 <led_ctl>
 80015c2:	e7c6      	b.n	8001552 <state_step+0x1e>
 80015c4:	2000415d 	.word	0x2000415d
 80015c8:	20000004 	.word	0x20000004
 80015cc:	2000415c 	.word	0x2000415c

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <HAL_Init+0x30>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015da:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015e2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 fce1 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	200f      	movs	r0, #15
 80015f4:	f002 fd4c 	bl	8004090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f001 f940 	bl	800287c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80015fc:	2000      	movs	r0, #0
 80015fe:	bd08      	pop	{r3, pc}
 8001600:	40023c00 	.word	0x40023c00

08001604 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001604:	4a03      	ldr	r2, [pc, #12]	@ (8001614 <HAL_IncTick+0x10>)
 8001606:	6811      	ldr	r1, [r2, #0]
 8001608:	4b03      	ldr	r3, [pc, #12]	@ (8001618 <HAL_IncTick+0x14>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	440b      	add	r3, r1
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20004160 	.word	0x20004160
 8001618:	20000005 	.word	0x20000005

0800161c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800161c:	4b01      	ldr	r3, [pc, #4]	@ (8001624 <HAL_GetTick+0x8>)
 800161e:	6818      	ldr	r0, [r3, #0]
}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20004160 	.word	0x20004160

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b538      	push	{r3, r4, r5, lr}
 800162a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff fff6 	bl	800161c <HAL_GetTick>
 8001630:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001636:	d002      	beq.n	800163e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <HAL_Delay+0x24>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163e:	f7ff ffed 	bl	800161c <HAL_GetTick>
 8001642:	1b40      	subs	r0, r0, r5
 8001644:	42a0      	cmp	r0, r4
 8001646:	d3fa      	bcc.n	800163e <HAL_Delay+0x16>
  {
  }
}
 8001648:	bd38      	pop	{r3, r4, r5, pc}
 800164a:	bf00      	nop
 800164c:	20000005 	.word	0x20000005

08001650 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001650:	4b4a      	ldr	r3, [pc, #296]	@ (800177c <ADC_Init+0x12c>)
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001658:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	6841      	ldr	r1, [r0, #4]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001662:	6802      	ldr	r2, [r0, #0]
 8001664:	6853      	ldr	r3, [r2, #4]
 8001666:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800166a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800166c:	6802      	ldr	r2, [r0, #0]
 800166e:	6853      	ldr	r3, [r2, #4]
 8001670:	6901      	ldr	r1, [r0, #16]
 8001672:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001676:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001678:	6802      	ldr	r2, [r0, #0]
 800167a:	6853      	ldr	r3, [r2, #4]
 800167c:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001680:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001682:	6802      	ldr	r2, [r0, #0]
 8001684:	6853      	ldr	r3, [r2, #4]
 8001686:	6881      	ldr	r1, [r0, #8]
 8001688:	430b      	orrs	r3, r1
 800168a:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800168c:	6802      	ldr	r2, [r0, #0]
 800168e:	6893      	ldr	r3, [r2, #8]
 8001690:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001694:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001696:	6802      	ldr	r2, [r0, #0]
 8001698:	6893      	ldr	r3, [r2, #8]
 800169a:	68c1      	ldr	r1, [r0, #12]
 800169c:	430b      	orrs	r3, r1
 800169e:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80016a2:	4b37      	ldr	r3, [pc, #220]	@ (8001780 <ADC_Init+0x130>)
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d057      	beq.n	8001758 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a8:	6802      	ldr	r2, [r0, #0]
 80016aa:	6893      	ldr	r3, [r2, #8]
 80016ac:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80016b0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016b2:	6802      	ldr	r2, [r0, #0]
 80016b4:	6893      	ldr	r3, [r2, #8]
 80016b6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016bc:	6802      	ldr	r2, [r0, #0]
 80016be:	6893      	ldr	r3, [r2, #8]
 80016c0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80016c4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016c6:	6802      	ldr	r2, [r0, #0]
 80016c8:	6893      	ldr	r3, [r2, #8]
 80016ca:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016d0:	6802      	ldr	r2, [r0, #0]
 80016d2:	6893      	ldr	r3, [r2, #8]
 80016d4:	f023 0302 	bic.w	r3, r3, #2
 80016d8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016da:	6802      	ldr	r2, [r0, #0]
 80016dc:	6893      	ldr	r3, [r2, #8]
 80016de:	7e01      	ldrb	r1, [r0, #24]
 80016e0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80016e4:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016e6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d03f      	beq.n	800176e <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016ee:	6802      	ldr	r2, [r0, #0]
 80016f0:	6853      	ldr	r3, [r2, #4]
 80016f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016f6:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016f8:	6802      	ldr	r2, [r0, #0]
 80016fa:	6853      	ldr	r3, [r2, #4]
 80016fc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001700:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001702:	6801      	ldr	r1, [r0, #0]
 8001704:	684b      	ldr	r3, [r1, #4]
 8001706:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001708:	3a01      	subs	r2, #1
 800170a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800170e:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001710:	6802      	ldr	r2, [r0, #0]
 8001712:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001714:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001718:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800171a:	6801      	ldr	r1, [r0, #0]
 800171c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800171e:	69c2      	ldr	r2, [r0, #28]
 8001720:	3a01      	subs	r2, #1
 8001722:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001726:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001728:	6802      	ldr	r2, [r0, #0]
 800172a:	6893      	ldr	r3, [r2, #8]
 800172c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001730:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001732:	6802      	ldr	r2, [r0, #0]
 8001734:	6893      	ldr	r3, [r2, #8]
 8001736:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 800173a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800173e:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001740:	6802      	ldr	r2, [r0, #0]
 8001742:	6893      	ldr	r3, [r2, #8]
 8001744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001748:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800174a:	6802      	ldr	r2, [r0, #0]
 800174c:	6893      	ldr	r3, [r2, #8]
 800174e:	6941      	ldr	r1, [r0, #20]
 8001750:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001754:	6093      	str	r3, [r2, #8]
}
 8001756:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001758:	6802      	ldr	r2, [r0, #0]
 800175a:	6893      	ldr	r3, [r2, #8]
 800175c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001760:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001762:	6802      	ldr	r2, [r0, #0]
 8001764:	6893      	ldr	r3, [r2, #8]
 8001766:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800176a:	6093      	str	r3, [r2, #8]
 800176c:	e7b0      	b.n	80016d0 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800176e:	6802      	ldr	r2, [r0, #0]
 8001770:	6853      	ldr	r3, [r2, #4]
 8001772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001776:	6053      	str	r3, [r2, #4]
 8001778:	e7ca      	b.n	8001710 <ADC_Init+0xc0>
 800177a:	bf00      	nop
 800177c:	40012300 	.word	0x40012300
 8001780:	0f000001 	.word	0x0f000001

08001784 <HAL_ADC_Init>:
  if (hadc == NULL)
 8001784:	b338      	cbz	r0, 80017d6 <HAL_ADC_Init+0x52>
{
 8001786:	b510      	push	{r4, lr}
 8001788:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 800178a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800178c:	b143      	cbz	r3, 80017a0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001790:	f013 0f10 	tst.w	r3, #16
 8001794:	d00b      	beq.n	80017ae <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001796:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001798:	2300      	movs	r3, #0
 800179a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800179e:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80017a0:	f7fe fe48 	bl	8000434 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	2300      	movs	r3, #0
 80017a6:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 80017a8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 80017ac:	e7ef      	b.n	800178e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80017ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017b4:	f023 0302 	bic.w	r3, r3, #2
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff ff46 	bl	8001650 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	2000      	movs	r0, #0
 80017c6:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80017c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6423      	str	r3, [r4, #64]	@ 0x40
 80017d4:	e7e0      	b.n	8001798 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
}
 80017d8:	4770      	bx	lr

080017da <HAL_ADC_ConvCpltCallback>:
}
 80017da:	4770      	bx	lr

080017dc <HAL_ADC_LevelOutOfWindowCallback>:
}
 80017dc:	4770      	bx	lr

080017de <HAL_ADC_ErrorCallback>:
}
 80017de:	4770      	bx	lr

080017e0 <HAL_ADC_IRQHandler>:
{
 80017e0:	b570      	push	{r4, r5, r6, lr}
 80017e2:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 80017e4:	6803      	ldr	r3, [r0, #0]
 80017e6:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80017e8:	685d      	ldr	r5, [r3, #4]
  if (tmp1 && tmp2)
 80017ea:	f016 0f02 	tst.w	r6, #2
 80017ee:	d02f      	beq.n	8001850 <HAL_ADC_IRQHandler+0x70>
 80017f0:	f005 0220 	and.w	r2, r5, #32
 80017f4:	b362      	cbz	r2, 8001850 <HAL_ADC_IRQHandler+0x70>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017f6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80017f8:	f012 0f10 	tst.w	r2, #16
 80017fc:	d103      	bne.n	8001806 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017fe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001804:	6402      	str	r2, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800180c:	d119      	bne.n	8001842 <HAL_ADC_IRQHandler+0x62>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800180e:	7e22      	ldrb	r2, [r4, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001810:	b9ba      	cbnz	r2, 8001842 <HAL_ADC_IRQHandler+0x62>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001814:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001818:	d003      	beq.n	8001822 <HAL_ADC_IRQHandler+0x42>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800181a:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800181c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001820:	d10f      	bne.n	8001842 <HAL_ADC_IRQHandler+0x62>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	f022 0220 	bic.w	r2, r2, #32
 8001828:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800182a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800182c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001830:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001832:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001834:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001838:	d103      	bne.n	8001842 <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800183a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001842:	4620      	mov	r0, r4
 8001844:	f7ff ffc9 	bl	80017da <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	f06f 0212 	mvn.w	r2, #18
 800184e:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001850:	f005 0380 	and.w	r3, r5, #128	@ 0x80
  if (tmp1 && tmp2)
 8001854:	f016 0f04 	tst.w	r6, #4
 8001858:	d037      	beq.n	80018ca <HAL_ADC_IRQHandler+0xea>
 800185a:	2b00      	cmp	r3, #0
 800185c:	d035      	beq.n	80018ca <HAL_ADC_IRQHandler+0xea>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800185e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001860:	f013 0f10 	tst.w	r3, #16
 8001864:	d103      	bne.n	800186e <HAL_ADC_IRQHandler+0x8e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001866:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001868:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800186c:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 8001876:	d121      	bne.n	80018bc <HAL_ADC_IRQHandler+0xdc>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800187a:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 800187e:	d003      	beq.n	8001888 <HAL_ADC_IRQHandler+0xa8>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001880:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001882:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001886:	d119      	bne.n	80018bc <HAL_ADC_IRQHandler+0xdc>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001888:	685a      	ldr	r2, [r3, #4]
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800188a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800188e:	d115      	bne.n	80018bc <HAL_ADC_IRQHandler+0xdc>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001890:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001892:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001896:	d111      	bne.n	80018bc <HAL_ADC_IRQHandler+0xdc>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001898:	7e22      	ldrb	r2, [r4, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800189a:	b97a      	cbnz	r2, 80018bc <HAL_ADC_IRQHandler+0xdc>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018a2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80018a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018aa:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018ae:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80018b2:	d103      	bne.n	80018bc <HAL_ADC_IRQHandler+0xdc>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018bc:	4620      	mov	r0, r4
 80018be:	f7fe ff7d 	bl	80007bc <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	f06f 020c 	mvn.w	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80018ca:	f005 0340 	and.w	r3, r5, #64	@ 0x40
  if (tmp1 && tmp2)
 80018ce:	f016 0f01 	tst.w	r6, #1
 80018d2:	d005      	beq.n	80018e0 <HAL_ADC_IRQHandler+0x100>
 80018d4:	b123      	cbz	r3, 80018e0 <HAL_ADC_IRQHandler+0x100>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f013 0f01 	tst.w	r3, #1
 80018de:	d106      	bne.n	80018ee <HAL_ADC_IRQHandler+0x10e>
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80018e0:	f005 6580 	and.w	r5, r5, #67108864	@ 0x4000000
  if (tmp1 && tmp2)
 80018e4:	f016 0f20 	tst.w	r6, #32
 80018e8:	d000      	beq.n	80018ec <HAL_ADC_IRQHandler+0x10c>
 80018ea:	b965      	cbnz	r5, 8001906 <HAL_ADC_IRQHandler+0x126>
}
 80018ec:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f4:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff ff70 	bl	80017dc <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	f06f 0201 	mvn.w	r2, #1
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e7ec      	b.n	80018e0 <HAL_ADC_IRQHandler+0x100>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001906:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	f06f 0520 	mvn.w	r5, #32
 8001914:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8001916:	4620      	mov	r0, r4
 8001918:	f7ff ff61 	bl	80017de <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	601d      	str	r5, [r3, #0]
}
 8001920:	e7e4      	b.n	80018ec <HAL_ADC_IRQHandler+0x10c>
	...

08001924 <HAL_ADC_ConfigChannel>:
{
 8001924:	b430      	push	{r4, r5}
 8001926:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001928:	2200      	movs	r2, #0
 800192a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800192c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001930:	2a01      	cmp	r2, #1
 8001932:	f000 80c0 	beq.w	8001ab6 <HAL_ADC_ConfigChannel+0x192>
 8001936:	4603      	mov	r3, r0
 8001938:	2201      	movs	r2, #1
 800193a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800193e:	680a      	ldr	r2, [r1, #0]
 8001940:	2a09      	cmp	r2, #9
 8001942:	d940      	bls.n	80019c6 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001944:	6804      	ldr	r4, [r0, #0]
 8001946:	68e0      	ldr	r0, [r4, #12]
 8001948:	b292      	uxth	r2, r2
 800194a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800194e:	3a1e      	subs	r2, #30
 8001950:	f04f 0c07 	mov.w	ip, #7
 8001954:	fa0c f202 	lsl.w	r2, ip, r2
 8001958:	ea20 0202 	bic.w	r2, r0, r2
 800195c:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800195e:	681c      	ldr	r4, [r3, #0]
 8001960:	68e0      	ldr	r0, [r4, #12]
 8001962:	880a      	ldrh	r2, [r1, #0]
 8001964:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001968:	3a1e      	subs	r2, #30
 800196a:	688d      	ldr	r5, [r1, #8]
 800196c:	fa05 f202 	lsl.w	r2, r5, r2
 8001970:	4302      	orrs	r2, r0
 8001972:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001974:	684a      	ldr	r2, [r1, #4]
 8001976:	2a06      	cmp	r2, #6
 8001978:	d83c      	bhi.n	80019f4 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800197a:	681c      	ldr	r4, [r3, #0]
 800197c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800197e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001982:	3a05      	subs	r2, #5
 8001984:	f04f 0c1f 	mov.w	ip, #31
 8001988:	fa0c f202 	lsl.w	r2, ip, r2
 800198c:	ea20 0202 	bic.w	r2, r0, r2
 8001990:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001992:	681c      	ldr	r4, [r3, #0]
 8001994:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001996:	684a      	ldr	r2, [r1, #4]
 8001998:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800199c:	3a05      	subs	r2, #5
 800199e:	f8b1 c000 	ldrh.w	ip, [r1]
 80019a2:	fa0c f202 	lsl.w	r2, ip, r2
 80019a6:	4302      	orrs	r2, r0
 80019a8:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	4a43      	ldr	r2, [pc, #268]	@ (8001abc <HAL_ADC_ConfigChannel+0x198>)
 80019ae:	4290      	cmp	r0, r2
 80019b0:	d050      	beq.n	8001a54 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	4a41      	ldr	r2, [pc, #260]	@ (8001abc <HAL_ADC_ConfigChannel+0x198>)
 80019b6:	4290      	cmp	r0, r2
 80019b8:	d059      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 80019c0:	b002      	add	sp, #8
 80019c2:	bc30      	pop	{r4, r5}
 80019c4:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019c6:	6804      	ldr	r4, [r0, #0]
 80019c8:	6920      	ldr	r0, [r4, #16]
 80019ca:	b292      	uxth	r2, r2
 80019cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019d0:	f04f 0c07 	mov.w	ip, #7
 80019d4:	fa0c f202 	lsl.w	r2, ip, r2
 80019d8:	ea20 0202 	bic.w	r2, r0, r2
 80019dc:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019de:	681c      	ldr	r4, [r3, #0]
 80019e0:	6920      	ldr	r0, [r4, #16]
 80019e2:	880a      	ldrh	r2, [r1, #0]
 80019e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019e8:	688d      	ldr	r5, [r1, #8]
 80019ea:	fa05 f202 	lsl.w	r2, r5, r2
 80019ee:	4302      	orrs	r2, r0
 80019f0:	6122      	str	r2, [r4, #16]
 80019f2:	e7bf      	b.n	8001974 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80019f4:	2a0c      	cmp	r2, #12
 80019f6:	d816      	bhi.n	8001a26 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019f8:	681d      	ldr	r5, [r3, #0]
 80019fa:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80019fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a00:	3a23      	subs	r2, #35	@ 0x23
 8001a02:	241f      	movs	r4, #31
 8001a04:	fa04 f202 	lsl.w	r2, r4, r2
 8001a08:	ea20 0202 	bic.w	r2, r0, r2
 8001a0c:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a0e:	681d      	ldr	r5, [r3, #0]
 8001a10:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001a12:	684a      	ldr	r2, [r1, #4]
 8001a14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a18:	3a23      	subs	r2, #35	@ 0x23
 8001a1a:	880c      	ldrh	r4, [r1, #0]
 8001a1c:	fa04 f202 	lsl.w	r2, r4, r2
 8001a20:	4302      	orrs	r2, r0
 8001a22:	632a      	str	r2, [r5, #48]	@ 0x30
 8001a24:	e7c1      	b.n	80019aa <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a26:	681d      	ldr	r5, [r3, #0]
 8001a28:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001a2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a2e:	3a41      	subs	r2, #65	@ 0x41
 8001a30:	241f      	movs	r4, #31
 8001a32:	fa04 f202 	lsl.w	r2, r4, r2
 8001a36:	ea20 0202 	bic.w	r2, r0, r2
 8001a3a:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a3c:	681d      	ldr	r5, [r3, #0]
 8001a3e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001a40:	684a      	ldr	r2, [r1, #4]
 8001a42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a46:	3a41      	subs	r2, #65	@ 0x41
 8001a48:	880c      	ldrh	r4, [r1, #0]
 8001a4a:	fa04 f202 	lsl.w	r2, r4, r2
 8001a4e:	4302      	orrs	r2, r0
 8001a50:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001a52:	e7aa      	b.n	80019aa <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a54:	680a      	ldr	r2, [r1, #0]
 8001a56:	2a12      	cmp	r2, #18
 8001a58:	d1ab      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a5a:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x19c>)
 8001a5c:	6850      	ldr	r0, [r2, #4]
 8001a5e:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8001a62:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a64:	6850      	ldr	r0, [r2, #4]
 8001a66:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001a6a:	6050      	str	r0, [r2, #4]
 8001a6c:	e7a1      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a6e:	680a      	ldr	r2, [r1, #0]
 8001a70:	4814      	ldr	r0, [pc, #80]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x1a0>)
 8001a72:	4282      	cmp	r2, r0
 8001a74:	d001      	beq.n	8001a7a <HAL_ADC_ConfigChannel+0x156>
 8001a76:	2a11      	cmp	r2, #17
 8001a78:	d19f      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a7a:	4a11      	ldr	r2, [pc, #68]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x19c>)
 8001a7c:	6850      	ldr	r0, [r2, #4]
 8001a7e:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001a82:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a84:	6850      	ldr	r0, [r2, #4]
 8001a86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001a8a:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a8c:	6809      	ldr	r1, [r1, #0]
 8001a8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x1a0>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d192      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a94:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac8 <HAL_ADC_ConfigChannel+0x1a4>)
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	490c      	ldr	r1, [pc, #48]	@ (8001acc <HAL_ADC_ConfigChannel+0x1a8>)
 8001a9a:	fba1 1202 	umull	r1, r2, r1, r2
 8001a9e:	0c92      	lsrs	r2, r2, #18
 8001aa0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001aa4:	0052      	lsls	r2, r2, #1
 8001aa6:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001aa8:	9a01      	ldr	r2, [sp, #4]
 8001aaa:	2a00      	cmp	r2, #0
 8001aac:	d085      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8001aae:	9a01      	ldr	r2, [sp, #4]
 8001ab0:	3a01      	subs	r2, #1
 8001ab2:	9201      	str	r2, [sp, #4]
 8001ab4:	e7f8      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	e782      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x9c>
 8001aba:	bf00      	nop
 8001abc:	40012000 	.word	0x40012000
 8001ac0:	40012300 	.word	0x40012300
 8001ac4:	10000012 	.word	0x10000012
 8001ac8:	2000000c 	.word	0x2000000c
 8001acc:	431bde83 	.word	0x431bde83

08001ad0 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	9301      	str	r3, [sp, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d06c      	beq.n	8001bb8 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ae4:	6803      	ldr	r3, [r0, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	f012 0f01 	tst.w	r2, #1
 8001aec:	d113      	bne.n	8001b16 <HAL_ADCEx_InjectedStart_IT+0x46>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001af6:	4b35      	ldr	r3, [pc, #212]	@ (8001bcc <HAL_ADCEx_InjectedStart_IT+0xfc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a35      	ldr	r2, [pc, #212]	@ (8001bd0 <HAL_ADCEx_InjectedStart_IT+0x100>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b06:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001b08:	e002      	b.n	8001b10 <HAL_ADCEx_InjectedStart_IT+0x40>
    {
      counter--;
 8001b0a:	9b01      	ldr	r3, [sp, #4]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001b10:	9b01      	ldr	r3, [sp, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADCEx_InjectedStart_IT+0x3a>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b16:	6802      	ldr	r2, [r0, #0]
 8001b18:	6893      	ldr	r3, [r2, #8]
 8001b1a:	f013 0f01 	tst.w	r3, #1
 8001b1e:	d040      	beq.n	8001ba2 <HAL_ADCEx_InjectedStart_IT+0xd2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b20:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b2e:	6403      	str	r3, [r0, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b30:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b32:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b36:	d101      	bne.n	8001b3c <HAL_ADCEx_InjectedStart_IT+0x6c>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6443      	str	r3, [r0, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001b42:	f06f 0304 	mvn.w	r3, #4
 8001b46:	6013      	str	r3, [r2, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001b48:	6802      	ldr	r2, [r0, #0]
 8001b4a:	6853      	ldr	r3, [r2, #4]
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b50:	6053      	str	r3, [r2, #4]
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <HAL_ADCEx_InjectedStart_IT+0x104>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f013 0f1f 	tst.w	r3, #31
 8001b5a:	d10e      	bne.n	8001b7a <HAL_ADCEx_InjectedStart_IT+0xaa>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001b5c:	6802      	ldr	r2, [r0, #0]
 8001b5e:	6891      	ldr	r1, [r2, #8]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001b60:	6853      	ldr	r3, [r2, #4]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if (tmp1 && tmp2)
 8001b66:	f411 1f40 	tst.w	r1, #3145728	@ 0x300000
 8001b6a:	d127      	bne.n	8001bbc <HAL_ADCEx_InjectedStart_IT+0xec>
 8001b6c:	bb43      	cbnz	r3, 8001bc0 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001b6e:	6893      	ldr	r3, [r2, #8]
 8001b70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b74:	6093      	str	r3, [r2, #8]
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2000      	movs	r0, #0
 8001b78:	e01c      	b.n	8001bb4 <HAL_ADCEx_InjectedStart_IT+0xe4>
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001b7a:	6803      	ldr	r3, [r0, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8001b88:	4813      	ldr	r0, [pc, #76]	@ (8001bd8 <HAL_ADCEx_InjectedStart_IT+0x108>)
 8001b8a:	4283      	cmp	r3, r0
 8001b8c:	d001      	beq.n	8001b92 <HAL_ADCEx_InjectedStart_IT+0xc2>
  return HAL_OK;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e010      	b.n	8001bb4 <HAL_ADCEx_InjectedStart_IT+0xe4>
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8001b92:	b9ba      	cbnz	r2, 8001bc4 <HAL_ADCEx_InjectedStart_IT+0xf4>
 8001b94:	b9c1      	cbnz	r1, 8001bc8 <HAL_ADCEx_InjectedStart_IT+0xf8>
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001b9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	e008      	b.n	8001bb4 <HAL_ADCEx_InjectedStart_IT+0xe4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001ba4:	f043 0310 	orr.w	r3, r3, #16
 8001ba8:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001baa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 8001bb2:	2000      	movs	r0, #0
}
 8001bb4:	b002      	add	sp, #8
 8001bb6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001bb8:	2002      	movs	r0, #2
 8001bba:	e7fb      	b.n	8001bb4 <HAL_ADCEx_InjectedStart_IT+0xe4>
  return HAL_OK;
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	e7f9      	b.n	8001bb4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e7f7      	b.n	8001bb4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	e7f5      	b.n	8001bb4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8001bc8:	2000      	movs	r0, #0
 8001bca:	e7f3      	b.n	8001bb4 <HAL_ADCEx_InjectedStart_IT+0xe4>
 8001bcc:	2000000c 	.word	0x2000000c
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	40012300 	.word	0x40012300
 8001bd8:	40012000 	.word	0x40012000

08001bdc <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bdc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001be0:	2a01      	cmp	r2, #1
 8001be2:	f000 80f4 	beq.w	8001dce <HAL_ADCEx_InjectedConfigChannel+0x1f2>
{
 8001be6:	b430      	push	{r4, r5}
 8001be8:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001bea:	2201      	movs	r2, #1
 8001bec:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001bf0:	680a      	ldr	r2, [r1, #0]
 8001bf2:	2a09      	cmp	r2, #9
 8001bf4:	f240 8089 	bls.w	8001d0a <HAL_ADCEx_InjectedConfigChannel+0x12e>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001bf8:	6805      	ldr	r5, [r0, #0]
 8001bfa:	68e8      	ldr	r0, [r5, #12]
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c02:	3a1e      	subs	r2, #30
 8001c04:	2407      	movs	r4, #7
 8001c06:	fa04 f202 	lsl.w	r2, r4, r2
 8001c0a:	ea20 0202 	bic.w	r2, r0, r2
 8001c0e:	60ea      	str	r2, [r5, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001c10:	681d      	ldr	r5, [r3, #0]
 8001c12:	68e8      	ldr	r0, [r5, #12]
 8001c14:	688c      	ldr	r4, [r1, #8]
 8001c16:	880a      	ldrh	r2, [r1, #0]
 8001c18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c1c:	3a1e      	subs	r2, #30
 8001c1e:	4094      	lsls	r4, r2
 8001c20:	4320      	orrs	r0, r4
 8001c22:	60e8      	str	r0, [r5, #12]
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8001c28:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8001c2c:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001c2e:	681c      	ldr	r4, [r3, #0]
 8001c30:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001c32:	6908      	ldr	r0, [r1, #16]
 8001c34:	3801      	subs	r0, #1
 8001c36:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8001c3a:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8001c3c:	681c      	ldr	r4, [r3, #0]
 8001c3e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001c40:	684a      	ldr	r2, [r1, #4]
 8001c42:	690d      	ldr	r5, [r1, #16]
 8001c44:	1b52      	subs	r2, r2, r5
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	3203      	adds	r2, #3
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c50:	f04f 0c1f 	mov.w	ip, #31
 8001c54:	fa0c f202 	lsl.w	r2, ip, r2
 8001c58:	ea20 0202 	bic.w	r2, r0, r2
 8001c5c:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001c62:	684a      	ldr	r2, [r1, #4]
 8001c64:	690d      	ldr	r5, [r1, #16]
 8001c66:	1b52      	subs	r2, r2, r5
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	3203      	adds	r2, #3
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c72:	f8b1 c000 	ldrh.w	ip, [r1]
 8001c76:	fa0c f202 	lsl.w	r2, ip, r2
 8001c7a:	4302      	orrs	r2, r0
 8001c7c:	63a2      	str	r2, [r4, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001c7e:	6988      	ldr	r0, [r1, #24]
 8001c80:	4a54      	ldr	r2, [pc, #336]	@ (8001dd4 <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 8001c82:	4290      	cmp	r0, r2
 8001c84:	d056      	beq.n	8001d34 <HAL_ADCEx_InjectedConfigChannel+0x158>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	6882      	ldr	r2, [r0, #8]
 8001c8a:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8001c8e:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	6882      	ldr	r2, [r0, #8]
 8001c94:	698c      	ldr	r4, [r1, #24]
 8001c96:	4322      	orrs	r2, r4
 8001c98:	6082      	str	r2, [r0, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	6882      	ldr	r2, [r0, #8]
 8001c9e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8001ca2:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	6882      	ldr	r2, [r0, #8]
 8001ca8:	69cc      	ldr	r4, [r1, #28]
 8001caa:	4322      	orrs	r2, r4
 8001cac:	6082      	str	r2, [r0, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001cae:	7d4a      	ldrb	r2, [r1, #21]
 8001cb0:	2a00      	cmp	r2, #0
 8001cb2:	d04a      	beq.n	8001d4a <HAL_ADCEx_InjectedConfigChannel+0x16e>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	6842      	ldr	r2, [r0, #4]
 8001cb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cbc:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001cbe:	7d0a      	ldrb	r2, [r1, #20]
 8001cc0:	2a00      	cmp	r2, #0
 8001cc2:	d048      	beq.n	8001d56 <HAL_ADCEx_InjectedConfigChannel+0x17a>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	6842      	ldr	r2, [r0, #4]
 8001cc8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001ccc:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 8001cce:	684a      	ldr	r2, [r1, #4]
 8001cd0:	2a02      	cmp	r2, #2
 8001cd2:	d046      	beq.n	8001d62 <HAL_ADCEx_InjectedConfigChannel+0x186>
 8001cd4:	2a03      	cmp	r2, #3
 8001cd6:	d04f      	beq.n	8001d78 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 8001cd8:	2a01      	cmp	r2, #1
 8001cda:	d158      	bne.n	8001d8e <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	6942      	ldr	r2, [r0, #20]
 8001ce0:	f36f 020b 	bfc	r2, #0, #12
 8001ce4:	6142      	str	r2, [r0, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	6942      	ldr	r2, [r0, #20]
 8001cea:	68cc      	ldr	r4, [r1, #12]
 8001cec:	4322      	orrs	r2, r4
 8001cee:	6142      	str	r2, [r0, #20]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	4a39      	ldr	r2, [pc, #228]	@ (8001dd8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 8001cf4:	4290      	cmp	r0, r2
 8001cf6:	d055      	beq.n	8001da4 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	4a37      	ldr	r2, [pc, #220]	@ (8001dd8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 8001cfc:	4290      	cmp	r0, r2
 8001cfe:	d05a      	beq.n	8001db6 <HAL_ADCEx_InjectedConfigChannel+0x1da>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 8001d06:	bc30      	pop	{r4, r5}
 8001d08:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d0a:	6805      	ldr	r5, [r0, #0]
 8001d0c:	6928      	ldr	r0, [r5, #16]
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d14:	2407      	movs	r4, #7
 8001d16:	fa04 f202 	lsl.w	r2, r4, r2
 8001d1a:	ea20 0202 	bic.w	r2, r0, r2
 8001d1e:	612a      	str	r2, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d20:	681d      	ldr	r5, [r3, #0]
 8001d22:	6928      	ldr	r0, [r5, #16]
 8001d24:	688c      	ldr	r4, [r1, #8]
 8001d26:	880a      	ldrh	r2, [r1, #0]
 8001d28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d2c:	4094      	lsls	r4, r2
 8001d2e:	4320      	orrs	r0, r4
 8001d30:	6128      	str	r0, [r5, #16]
 8001d32:	e777      	b.n	8001c24 <HAL_ADCEx_InjectedConfigChannel+0x48>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	6882      	ldr	r2, [r0, #8]
 8001d38:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8001d3c:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	6882      	ldr	r2, [r0, #8]
 8001d42:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8001d46:	6082      	str	r2, [r0, #8]
 8001d48:	e7b1      	b.n	8001cae <HAL_ADCEx_InjectedConfigChannel+0xd2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	6842      	ldr	r2, [r0, #4]
 8001d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d52:	6042      	str	r2, [r0, #4]
 8001d54:	e7b3      	b.n	8001cbe <HAL_ADCEx_InjectedConfigChannel+0xe2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	6842      	ldr	r2, [r0, #4]
 8001d5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d5e:	6042      	str	r2, [r0, #4]
 8001d60:	e7b5      	b.n	8001cce <HAL_ADCEx_InjectedConfigChannel+0xf2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	6982      	ldr	r2, [r0, #24]
 8001d66:	f36f 020b 	bfc	r2, #0, #12
 8001d6a:	6182      	str	r2, [r0, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	6982      	ldr	r2, [r0, #24]
 8001d70:	68cc      	ldr	r4, [r1, #12]
 8001d72:	4322      	orrs	r2, r4
 8001d74:	6182      	str	r2, [r0, #24]
      break;
 8001d76:	e7bb      	b.n	8001cf0 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	69c2      	ldr	r2, [r0, #28]
 8001d7c:	f36f 020b 	bfc	r2, #0, #12
 8001d80:	61c2      	str	r2, [r0, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	69c2      	ldr	r2, [r0, #28]
 8001d86:	68cc      	ldr	r4, [r1, #12]
 8001d88:	4322      	orrs	r2, r4
 8001d8a:	61c2      	str	r2, [r0, #28]
      break;
 8001d8c:	e7b0      	b.n	8001cf0 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	6a02      	ldr	r2, [r0, #32]
 8001d92:	f36f 020b 	bfc	r2, #0, #12
 8001d96:	6202      	str	r2, [r0, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	6a02      	ldr	r2, [r0, #32]
 8001d9c:	68cc      	ldr	r4, [r1, #12]
 8001d9e:	4322      	orrs	r2, r4
 8001da0:	6202      	str	r2, [r0, #32]
      break;
 8001da2:	e7a5      	b.n	8001cf0 <HAL_ADCEx_InjectedConfigChannel+0x114>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001da4:	680a      	ldr	r2, [r1, #0]
 8001da6:	2a12      	cmp	r2, #18
 8001da8:	d1a6      	bne.n	8001cf8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001daa:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <HAL_ADCEx_InjectedConfigChannel+0x200>)
 8001dac:	6842      	ldr	r2, [r0, #4]
 8001dae:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001db2:	6042      	str	r2, [r0, #4]
 8001db4:	e7a0      	b.n	8001cf8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001db6:	680a      	ldr	r2, [r1, #0]
 8001db8:	4909      	ldr	r1, [pc, #36]	@ (8001de0 <HAL_ADCEx_InjectedConfigChannel+0x204>)
 8001dba:	428a      	cmp	r2, r1
 8001dbc:	d001      	beq.n	8001dc2 <HAL_ADCEx_InjectedConfigChannel+0x1e6>
 8001dbe:	2a11      	cmp	r2, #17
 8001dc0:	d19e      	bne.n	8001d00 <HAL_ADCEx_InjectedConfigChannel+0x124>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dc2:	4906      	ldr	r1, [pc, #24]	@ (8001ddc <HAL_ADCEx_InjectedConfigChannel+0x200>)
 8001dc4:	684a      	ldr	r2, [r1, #4]
 8001dc6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001dca:	604a      	str	r2, [r1, #4]
 8001dcc:	e798      	b.n	8001d00 <HAL_ADCEx_InjectedConfigChannel+0x124>
  __HAL_LOCK(hadc);
 8001dce:	2002      	movs	r0, #2
}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	000f0001 	.word	0x000f0001
 8001dd8:	40012000 	.word	0x40012000
 8001ddc:	40012300 	.word	0x40012300
 8001de0:	10000012 	.word	0x10000012

08001de4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001de4:	2800      	cmp	r0, #0
 8001de6:	f000 80a1 	beq.w	8001f2c <HAL_CAN_Init+0x148>
{
 8001dea:	b538      	push	{r3, r4, r5, lr}
 8001dec:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dee:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001df2:	b1d3      	cbz	r3, 8001e2a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dfe:	f7ff fc0d 	bl	800161c <HAL_GetTick>
 8001e02:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	f012 0f01 	tst.w	r2, #1
 8001e0c:	d110      	bne.n	8001e30 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e0e:	f7ff fc05 	bl	800161c <HAL_GetTick>
 8001e12:	1b40      	subs	r0, r0, r5
 8001e14:	280a      	cmp	r0, #10
 8001e16:	d9f5      	bls.n	8001e04 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1e:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e20:	2305      	movs	r3, #5
 8001e22:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001e28:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001e2a:	f7fe fbdb 	bl	80005e4 <HAL_CAN_MspInit>
 8001e2e:	e7e1      	b.n	8001df4 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f022 0202 	bic.w	r2, r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001e38:	f7ff fbf0 	bl	800161c <HAL_GetTick>
 8001e3c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	f012 0f02 	tst.w	r2, #2
 8001e46:	d00d      	beq.n	8001e64 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e48:	f7ff fbe8 	bl	800161c <HAL_GetTick>
 8001e4c:	1b40      	subs	r0, r0, r5
 8001e4e:	280a      	cmp	r0, #10
 8001e50:	d9f5      	bls.n	8001e3e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001e60:	2001      	movs	r0, #1
 8001e62:	e7e1      	b.n	8001e28 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e64:	7e22      	ldrb	r2, [r4, #24]
 8001e66:	2a01      	cmp	r2, #1
 8001e68:	d03d      	beq.n	8001ee6 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e70:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e72:	7e63      	ldrb	r3, [r4, #25]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d03b      	beq.n	8001ef0 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e78:	6822      	ldr	r2, [r4, #0]
 8001e7a:	6813      	ldr	r3, [r2, #0]
 8001e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e80:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e82:	7ea3      	ldrb	r3, [r4, #26]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d039      	beq.n	8001efc <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	f023 0320 	bic.w	r3, r3, #32
 8001e90:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e92:	7ee3      	ldrb	r3, [r4, #27]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d037      	beq.n	8001f08 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e98:	6822      	ldr	r2, [r4, #0]
 8001e9a:	6813      	ldr	r3, [r2, #0]
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ea2:	7f23      	ldrb	r3, [r4, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d035      	beq.n	8001f14 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ea8:	6822      	ldr	r2, [r4, #0]
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	f023 0308 	bic.w	r3, r3, #8
 8001eb0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eb2:	7f63      	ldrb	r3, [r4, #29]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d033      	beq.n	8001f20 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eb8:	6822      	ldr	r2, [r4, #0]
 8001eba:	6813      	ldr	r3, [r2, #0]
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ec2:	68a3      	ldr	r3, [r4, #8]
 8001ec4:	68e2      	ldr	r2, [r4, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	6922      	ldr	r2, [r4, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	6962      	ldr	r2, [r4, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	6862      	ldr	r2, [r4, #4]
 8001ed2:	3a01      	subs	r2, #1
 8001ed4:	6821      	ldr	r1, [r4, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eda:	2000      	movs	r0, #0
 8001edc:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001ee4:	e7a0      	b.n	8001e28 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e7c0      	b.n	8001e72 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ef0:	6822      	ldr	r2, [r4, #0]
 8001ef2:	6813      	ldr	r3, [r2, #0]
 8001ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e7c2      	b.n	8001e82 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001efc:	6822      	ldr	r2, [r4, #0]
 8001efe:	6813      	ldr	r3, [r2, #0]
 8001f00:	f043 0320 	orr.w	r3, r3, #32
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e7c4      	b.n	8001e92 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f08:	6822      	ldr	r2, [r4, #0]
 8001f0a:	6813      	ldr	r3, [r2, #0]
 8001f0c:	f023 0310 	bic.w	r3, r3, #16
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e7c6      	b.n	8001ea2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f14:	6822      	ldr	r2, [r4, #0]
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	f043 0308 	orr.w	r3, r3, #8
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e7c8      	b.n	8001eb2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f20:	6822      	ldr	r2, [r4, #0]
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e7ca      	b.n	8001ec2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8001f2c:	2001      	movs	r0, #1
}
 8001f2e:	4770      	bx	lr

08001f30 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001f30:	2800      	cmp	r0, #0
 8001f32:	db07      	blt.n	8001f44 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f34:	f000 021f 	and.w	r2, r0, #31
 8001f38:	0940      	lsrs	r0, r0, #5
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	4a02      	ldr	r2, [pc, #8]	@ (8001f48 <__NVIC_EnableIRQ+0x18>)
 8001f40:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	db08      	blt.n	8001f62 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	0109      	lsls	r1, r1, #4
 8001f52:	b2c9      	uxtb	r1, r1
 8001f54:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001f58:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001f5c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001f60:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	f000 000f 	and.w	r0, r0, #15
 8001f66:	0109      	lsls	r1, r1, #4
 8001f68:	b2c9      	uxtb	r1, r1
 8001f6a:	4b01      	ldr	r3, [pc, #4]	@ (8001f70 <__NVIC_SetPriority+0x24>)
 8001f6c:	5419      	strb	r1, [r3, r0]
  }
}
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed14 	.word	0xe000ed14

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f76:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7a:	f1c0 0c07 	rsb	ip, r0, #7
 8001f7e:	f1bc 0f04 	cmp.w	ip, #4
 8001f82:	bf28      	it	cs
 8001f84:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f88:	1d03      	adds	r3, r0, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d90f      	bls.n	8001fae <NVIC_EncodePriority+0x3a>
 8001f8e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	f04f 3eff 	mov.w	lr, #4294967295
 8001f94:	fa0e f00c 	lsl.w	r0, lr, ip
 8001f98:	ea21 0100 	bic.w	r1, r1, r0
 8001f9c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001fa2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001fa6:	ea41 0002 	orr.w	r0, r1, r2
 8001faa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e7ee      	b.n	8001f90 <NVIC_EncodePriority+0x1c>
	...

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001fb6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	0200      	lsls	r0, r0, #8
 8001fc2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001fd0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_NVIC_SetPriority+0x1c>)
 8001fde:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001fe4:	f7ff ffc6 	bl	8001f74 <NVIC_EncodePriority>
 8001fe8:	4601      	mov	r1, r0
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff ffae 	bl	8001f4c <__NVIC_SetPriority>
}
 8001ff0:	bd10      	pop	{r4, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffa:	f7ff ff99 	bl	8001f30 <__NVIC_EnableIRQ>
}
 8001ffe:	bd08      	pop	{r3, pc}

08002000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002000:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002002:	6805      	ldr	r5, [r0, #0]
 8002004:	682c      	ldr	r4, [r5, #0]
 8002006:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 800200a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800200c:	6804      	ldr	r4, [r0, #0]
 800200e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002010:	6883      	ldr	r3, [r0, #8]
 8002012:	2b40      	cmp	r3, #64	@ 0x40
 8002014:	d005      	beq.n	8002022 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002016:	6803      	ldr	r3, [r0, #0]
 8002018:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800201a:	6803      	ldr	r3, [r0, #0]
 800201c:	60da      	str	r2, [r3, #12]
  }
}
 800201e:	bc30      	pop	{r4, r5}
 8002020:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002022:	6803      	ldr	r3, [r0, #0]
 8002024:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002026:	6803      	ldr	r3, [r0, #0]
 8002028:	60d9      	str	r1, [r3, #12]
 800202a:	e7f8      	b.n	800201e <DMA_SetConfig+0x1e>

0800202c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800202c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800202e:	6803      	ldr	r3, [r0, #0]
 8002030:	b2d9      	uxtb	r1, r3
 8002032:	3910      	subs	r1, #16
 8002034:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <DMA_CalcBaseAndBitshift+0x34>)
 8002036:	fba2 4201 	umull	r4, r2, r2, r1
 800203a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800203c:	4c09      	ldr	r4, [pc, #36]	@ (8002064 <DMA_CalcBaseAndBitshift+0x38>)
 800203e:	5ca2      	ldrb	r2, [r4, r2]
 8002040:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002042:	295f      	cmp	r1, #95	@ 0x5f
 8002044:	d907      	bls.n	8002056 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002046:	f36f 0309 	bfc	r3, #0, #10
 800204a:	3304      	adds	r3, #4
 800204c:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800204e:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8002050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002054:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002056:	f36f 0309 	bfc	r3, #0, #10
 800205a:	6583      	str	r3, [r0, #88]	@ 0x58
 800205c:	e7f7      	b.n	800204e <DMA_CalcBaseAndBitshift+0x22>
 800205e:	bf00      	nop
 8002060:	aaaaaaab 	.word	0xaaaaaaab
 8002064:	080059ec 	.word	0x080059ec

08002068 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002068:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800206a:	6982      	ldr	r2, [r0, #24]
 800206c:	b992      	cbnz	r2, 8002094 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800206e:	2b01      	cmp	r3, #1
 8002070:	d00a      	beq.n	8002088 <DMA_CheckFifoParam+0x20>
 8002072:	2b02      	cmp	r3, #2
 8002074:	d002      	beq.n	800207c <DMA_CheckFifoParam+0x14>
 8002076:	b10b      	cbz	r3, 800207c <DMA_CheckFifoParam+0x14>
 8002078:	2000      	movs	r0, #0
 800207a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800207e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002082:	d128      	bne.n	80020d6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002084:	2000      	movs	r0, #0
 8002086:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002088:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800208a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800208e:	d024      	beq.n	80020da <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8002090:	2000      	movs	r0, #0
 8002092:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002094:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002098:	d009      	beq.n	80020ae <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800209a:	2b02      	cmp	r3, #2
 800209c:	d925      	bls.n	80020ea <DMA_CheckFifoParam+0x82>
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d125      	bne.n	80020ee <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80020a4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80020a8:	d123      	bne.n	80020f2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	2000      	movs	r0, #0
 80020ac:	4770      	bx	lr
    switch (tmp)
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d803      	bhi.n	80020ba <DMA_CheckFifoParam+0x52>
 80020b2:	e8df f003 	tbb	[pc, r3]
 80020b6:	0414      	.short	0x0414
 80020b8:	0a14      	.short	0x0a14
 80020ba:	2000      	movs	r0, #0
 80020bc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020be:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80020c0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80020c4:	d10d      	bne.n	80020e2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80020c6:	2000      	movs	r0, #0
 80020c8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ca:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80020cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020d0:	d009      	beq.n	80020e6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2000      	movs	r0, #0
 80020d4:	4770      	bx	lr
        status = HAL_ERROR;
 80020d6:	2001      	movs	r0, #1
 80020d8:	4770      	bx	lr
        status = HAL_ERROR;
 80020da:	2001      	movs	r0, #1
 80020dc:	4770      	bx	lr
      status = HAL_ERROR;
 80020de:	2001      	movs	r0, #1
 80020e0:	4770      	bx	lr
        status = HAL_ERROR;
 80020e2:	2001      	movs	r0, #1
 80020e4:	4770      	bx	lr
        status = HAL_ERROR;
 80020e6:	2001      	movs	r0, #1
 80020e8:	4770      	bx	lr
      status = HAL_ERROR;
 80020ea:	2001      	movs	r0, #1
 80020ec:	4770      	bx	lr
    switch (tmp)
 80020ee:	2000      	movs	r0, #0
 80020f0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80020f2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_DMA_Init>:
{
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fa8e 	bl	800161c <HAL_GetTick>
  if(hdma == NULL)
 8002100:	2c00      	cmp	r4, #0
 8002102:	d05b      	beq.n	80021bc <HAL_DMA_Init+0xc4>
 8002104:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800210c:	2300      	movs	r3, #0
 800210e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002112:	6822      	ldr	r2, [r4, #0]
 8002114:	6813      	ldr	r3, [r2, #0]
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f012 0f01 	tst.w	r2, #1
 8002124:	d00a      	beq.n	800213c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002126:	f7ff fa79 	bl	800161c <HAL_GetTick>
 800212a:	1b43      	subs	r3, r0, r5
 800212c:	2b05      	cmp	r3, #5
 800212e:	d9f5      	bls.n	800211c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002130:	2320      	movs	r3, #32
 8002132:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002134:	2003      	movs	r0, #3
 8002136:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800213a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800213c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800213e:	4920      	ldr	r1, [pc, #128]	@ (80021c0 <HAL_DMA_Init+0xc8>)
 8002140:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002142:	6862      	ldr	r2, [r4, #4]
 8002144:	68a0      	ldr	r0, [r4, #8]
 8002146:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002148:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800214a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214c:	6920      	ldr	r0, [r4, #16]
 800214e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002150:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002152:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002154:	69a0      	ldr	r0, [r4, #24]
 8002156:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002158:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800215c:	6a20      	ldr	r0, [r4, #32]
 800215e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002160:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002162:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002164:	2904      	cmp	r1, #4
 8002166:	d01e      	beq.n	80021a6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002168:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800216a:	6826      	ldr	r6, [r4, #0]
 800216c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800216e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002172:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002174:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002176:	2b04      	cmp	r3, #4
 8002178:	d107      	bne.n	800218a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800217a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800217c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800217e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002180:	b11b      	cbz	r3, 800218a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002182:	4620      	mov	r0, r4
 8002184:	f7ff ff70 	bl	8002068 <DMA_CheckFifoParam>
 8002188:	b990      	cbnz	r0, 80021b0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800218a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ff4d 	bl	800202c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002192:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002194:	233f      	movs	r3, #63	@ 0x3f
 8002196:	4093      	lsls	r3, r2
 8002198:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219a:	2000      	movs	r0, #0
 800219c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800219e:	2301      	movs	r3, #1
 80021a0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80021a4:	e7c9      	b.n	800213a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80021a8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80021aa:	4301      	orrs	r1, r0
 80021ac:	430a      	orrs	r2, r1
 80021ae:	e7db      	b.n	8002168 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b0:	2340      	movs	r3, #64	@ 0x40
 80021b2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80021b4:	2001      	movs	r0, #1
 80021b6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80021ba:	e7be      	b.n	800213a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80021bc:	2001      	movs	r0, #1
 80021be:	e7bc      	b.n	800213a <HAL_DMA_Init+0x42>
 80021c0:	f010803f 	.word	0xf010803f

080021c4 <HAL_DMA_Start_IT>:
{
 80021c4:	b538      	push	{r3, r4, r5, lr}
 80021c6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80021ca:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80021ce:	2801      	cmp	r0, #1
 80021d0:	d02a      	beq.n	8002228 <HAL_DMA_Start_IT+0x64>
 80021d2:	2001      	movs	r0, #1
 80021d4:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80021d8:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80021dc:	2801      	cmp	r0, #1
 80021de:	d004      	beq.n	80021ea <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80021e0:	2300      	movs	r3, #0
 80021e2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 80021e6:	2002      	movs	r0, #2
}
 80021e8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ea:	2002      	movs	r0, #2
 80021ec:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f0:	2000      	movs	r0, #0
 80021f2:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff ff03 	bl	8002000 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80021fc:	233f      	movs	r3, #63	@ 0x3f
 80021fe:	4093      	lsls	r3, r2
 8002200:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002202:	6822      	ldr	r2, [r4, #0]
 8002204:	6813      	ldr	r3, [r2, #0]
 8002206:	f043 0316 	orr.w	r3, r3, #22
 800220a:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800220c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800220e:	b123      	cbz	r3, 800221a <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002210:	6822      	ldr	r2, [r4, #0]
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002224:	2000      	movs	r0, #0
 8002226:	e7df      	b.n	80021e8 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002228:	2002      	movs	r0, #2
 800222a:	e7dd      	b.n	80021e8 <HAL_DMA_Start_IT+0x24>

0800222c <HAL_DMA_Abort>:
{
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002230:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8002232:	f7ff f9f3 	bl	800161c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800223a:	2b02      	cmp	r3, #2
 800223c:	d006      	beq.n	800224c <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002242:	2300      	movs	r3, #0
 8002244:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002248:	2001      	movs	r0, #1
}
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	f023 0316 	bic.w	r3, r3, #22
 8002256:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002258:	6822      	ldr	r2, [r4, #0]
 800225a:	6953      	ldr	r3, [r2, #20]
 800225c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002260:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002262:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002264:	b1e3      	cbz	r3, 80022a0 <HAL_DMA_Abort+0x74>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002266:	6822      	ldr	r2, [r4, #0]
 8002268:	6813      	ldr	r3, [r2, #0]
 800226a:	f023 0308 	bic.w	r3, r3, #8
 800226e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002270:	6822      	ldr	r2, [r4, #0]
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f013 0f01 	tst.w	r3, #1
 8002282:	d011      	beq.n	80022a8 <HAL_DMA_Abort+0x7c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002284:	f7ff f9ca 	bl	800161c <HAL_GetTick>
 8002288:	1b43      	subs	r3, r0, r5
 800228a:	2b05      	cmp	r3, #5
 800228c:	d9f5      	bls.n	800227a <HAL_DMA_Abort+0x4e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800228e:	2320      	movs	r3, #32
 8002290:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002292:	2003      	movs	r0, #3
 8002294:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002298:	2300      	movs	r3, #0
 800229a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800229e:	e7d4      	b.n	800224a <HAL_DMA_Abort+0x1e>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1df      	bne.n	8002266 <HAL_DMA_Abort+0x3a>
 80022a6:	e7e3      	b.n	8002270 <HAL_DMA_Abort+0x44>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80022aa:	233f      	movs	r3, #63	@ 0x3f
 80022ac:	4093      	lsls	r3, r2
 80022ae:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80022bc:	e7c5      	b.n	800224a <HAL_DMA_Abort+0x1e>

080022be <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022be:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80022ca:	2001      	movs	r0, #1
 80022cc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ce:	2305      	movs	r3, #5
 80022d0:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80022d4:	6802      	ldr	r2, [r0, #0]
 80022d6:	6813      	ldr	r3, [r2, #0]
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80022de:	2000      	movs	r0, #0
}
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_DMA_IRQHandler>:
{
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	b083      	sub	sp, #12
 80022e8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022ee:	4b72      	ldr	r3, [pc, #456]	@ (80024b8 <HAL_DMA_IRQHandler+0x1d4>)
 80022f0:	681d      	ldr	r5, [r3, #0]
 80022f2:	4b72      	ldr	r3, [pc, #456]	@ (80024bc <HAL_DMA_IRQHandler+0x1d8>)
 80022f4:	fba3 3505 	umull	r3, r5, r3, r5
 80022f8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80022fc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fe:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002300:	2308      	movs	r3, #8
 8002302:	4093      	lsls	r3, r2
 8002304:	4233      	tst	r3, r6
 8002306:	d010      	beq.n	800232a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002308:	6803      	ldr	r3, [r0, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	f012 0f04 	tst.w	r2, #4
 8002310:	d00b      	beq.n	800232a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	f022 0204 	bic.w	r2, r2, #4
 8002318:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800231a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800231c:	2308      	movs	r3, #8
 800231e:	4093      	lsls	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002322:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800232a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800232c:	2301      	movs	r3, #1
 800232e:	4093      	lsls	r3, r2
 8002330:	4233      	tst	r3, r6
 8002332:	d009      	beq.n	8002348 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	6952      	ldr	r2, [r2, #20]
 8002338:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800233c:	d004      	beq.n	8002348 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800233e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002340:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002348:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800234a:	2304      	movs	r3, #4
 800234c:	4093      	lsls	r3, r2
 800234e:	4233      	tst	r3, r6
 8002350:	d009      	beq.n	8002366 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002352:	6822      	ldr	r2, [r4, #0]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	f012 0f02 	tst.w	r2, #2
 800235a:	d004      	beq.n	8002366 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800235c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800235e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002366:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002368:	2310      	movs	r3, #16
 800236a:	4093      	lsls	r3, r2
 800236c:	4233      	tst	r3, r6
 800236e:	d024      	beq.n	80023ba <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002370:	6822      	ldr	r2, [r4, #0]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f012 0f08 	tst.w	r2, #8
 8002378:	d01f      	beq.n	80023ba <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800237a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002384:	d00d      	beq.n	80023a2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800238c:	d104      	bne.n	8002398 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800238e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002390:	b19b      	cbz	r3, 80023ba <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002392:	4620      	mov	r0, r4
 8002394:	4798      	blx	r3
 8002396:	e010      	b.n	80023ba <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002398:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800239a:	b173      	cbz	r3, 80023ba <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800239c:	4620      	mov	r0, r4
 800239e:	4798      	blx	r3
 80023a0:	e00b      	b.n	80023ba <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80023a8:	d103      	bne.n	80023b2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	f022 0208 	bic.w	r2, r2, #8
 80023b0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80023b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023b4:	b10b      	cbz	r3, 80023ba <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80023b6:	4620      	mov	r0, r4
 80023b8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023ba:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80023bc:	2320      	movs	r3, #32
 80023be:	4093      	lsls	r3, r2
 80023c0:	4233      	tst	r3, r6
 80023c2:	d054      	beq.n	800246e <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023c4:	6822      	ldr	r2, [r4, #0]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	f012 0f10 	tst.w	r2, #16
 80023cc:	d04f      	beq.n	800246e <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ce:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023d0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d00e      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80023e0:	d033      	beq.n	800244a <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80023e8:	d12a      	bne.n	8002440 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 80023ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03e      	beq.n	800246e <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 80023f0:	4620      	mov	r0, r4
 80023f2:	4798      	blx	r3
 80023f4:	e03b      	b.n	800246e <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	6813      	ldr	r3, [r2, #0]
 80023fa:	f023 0316 	bic.w	r3, r3, #22
 80023fe:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002400:	6822      	ldr	r2, [r4, #0]
 8002402:	6953      	ldr	r3, [r2, #20]
 8002404:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002408:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800240a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800240c:	b1a3      	cbz	r3, 8002438 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800240e:	6822      	ldr	r2, [r4, #0]
 8002410:	6813      	ldr	r3, [r2, #0]
 8002412:	f023 0308 	bic.w	r3, r3, #8
 8002416:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002418:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800241a:	233f      	movs	r3, #63	@ 0x3f
 800241c:	4093      	lsls	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002420:	2301      	movs	r3, #1
 8002422:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002426:	2300      	movs	r3, #0
 8002428:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800242c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800242e:	2b00      	cmp	r3, #0
 8002430:	d03f      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8002432:	4620      	mov	r0, r4
 8002434:	4798      	blx	r3
        return;
 8002436:	e03c      	b.n	80024b2 <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002438:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1e7      	bne.n	800240e <HAL_DMA_IRQHandler+0x12a>
 800243e:	e7eb      	b.n	8002418 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8002440:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002442:	b1a3      	cbz	r3, 800246e <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8002444:	4620      	mov	r0, r4
 8002446:	4798      	blx	r3
 8002448:	e011      	b.n	800246e <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8002450:	d109      	bne.n	8002466 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f022 0210 	bic.w	r2, r2, #16
 8002458:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800245a:	2301      	movs	r3, #1
 800245c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8002460:	2300      	movs	r3, #0
 8002462:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8002466:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002468:	b10b      	cbz	r3, 800246e <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 800246a:	4620      	mov	r0, r4
 800246c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800246e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002470:	b1fb      	cbz	r3, 80024b2 <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002472:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002474:	f013 0f01 	tst.w	r3, #1
 8002478:	d017      	beq.n	80024aa <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800247a:	2305      	movs	r3, #5
 800247c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8002480:	6822      	ldr	r2, [r4, #0]
 8002482:	6813      	ldr	r3, [r2, #0]
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	3301      	adds	r3, #1
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	42ab      	cmp	r3, r5
 8002492:	d804      	bhi.n	800249e <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f013 0f01 	tst.w	r3, #1
 800249c:	d1f5      	bne.n	800248a <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 800249e:	2301      	movs	r3, #1
 80024a0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80024a4:	2300      	movs	r3, #0
 80024a6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80024aa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80024ac:	b10b      	cbz	r3, 80024b2 <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 80024ae:	4620      	mov	r0, r4
 80024b0:	4798      	blx	r3
}
 80024b2:	b003      	add	sp, #12
 80024b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000000c 	.word	0x2000000c
 80024bc:	1b4e81b5 	.word	0x1b4e81b5

080024c0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	f200 80e3 	bhi.w	800268e <HAL_GPIO_Init+0x1ce>
{
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	e065      	b.n	800259a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80024d4:	2403      	movs	r4, #3
 80024d6:	fa04 f40e 	lsl.w	r4, r4, lr
 80024da:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024de:	68cc      	ldr	r4, [r1, #12]
 80024e0:	fa04 f40e 	lsl.w	r4, r4, lr
 80024e4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80024e6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ea:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ee:	684a      	ldr	r2, [r1, #4]
 80024f0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80024f4:	409a      	lsls	r2, r3
 80024f6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80024f8:	6042      	str	r2, [r0, #4]
 80024fa:	e05c      	b.n	80025b6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024fc:	08dc      	lsrs	r4, r3, #3
 80024fe:	3408      	adds	r4, #8
 8002500:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002504:	f003 0507 	and.w	r5, r3, #7
 8002508:	00ad      	lsls	r5, r5, #2
 800250a:	f04f 0e0f 	mov.w	lr, #15
 800250e:	fa0e fe05 	lsl.w	lr, lr, r5
 8002512:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002516:	690a      	ldr	r2, [r1, #16]
 8002518:	40aa      	lsls	r2, r5
 800251a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800251e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002522:	e05c      	b.n	80025de <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002524:	2206      	movs	r2, #6
 8002526:	e000      	b.n	800252a <HAL_GPIO_Init+0x6a>
 8002528:	2200      	movs	r2, #0
 800252a:	fa02 f20e 	lsl.w	r2, r2, lr
 800252e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002530:	3402      	adds	r4, #2
 8002532:	4d57      	ldr	r5, [pc, #348]	@ (8002690 <HAL_GPIO_Init+0x1d0>)
 8002534:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002538:	4a56      	ldr	r2, [pc, #344]	@ (8002694 <HAL_GPIO_Init+0x1d4>)
 800253a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800253c:	ea6f 020c 	mvn.w	r2, ip
 8002540:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002544:	684e      	ldr	r6, [r1, #4]
 8002546:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800254a:	d001      	beq.n	8002550 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800254c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002550:	4c50      	ldr	r4, [pc, #320]	@ (8002694 <HAL_GPIO_Init+0x1d4>)
 8002552:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002554:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002556:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255a:	684e      	ldr	r6, [r1, #4]
 800255c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8002560:	d001      	beq.n	8002566 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8002562:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8002566:	4c4b      	ldr	r4, [pc, #300]	@ (8002694 <HAL_GPIO_Init+0x1d4>)
 8002568:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800256a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800256c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002570:	684e      	ldr	r6, [r1, #4]
 8002572:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8002576:	d001      	beq.n	800257c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8002578:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800257c:	4c45      	ldr	r4, [pc, #276]	@ (8002694 <HAL_GPIO_Init+0x1d4>)
 800257e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002580:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002582:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002584:	684d      	ldr	r5, [r1, #4]
 8002586:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800258a:	d001      	beq.n	8002590 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800258c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8002590:	4c40      	ldr	r4, [pc, #256]	@ (8002694 <HAL_GPIO_Init+0x1d4>)
 8002592:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002594:	3301      	adds	r3, #1
 8002596:	2b0f      	cmp	r3, #15
 8002598:	d877      	bhi.n	800268a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 800259a:	2201      	movs	r2, #1
 800259c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259e:	680c      	ldr	r4, [r1, #0]
 80025a0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80025a4:	ea32 0404 	bics.w	r4, r2, r4
 80025a8:	d1f4      	bne.n	8002594 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	684c      	ldr	r4, [r1, #4]
 80025ac:	f004 0403 	and.w	r4, r4, #3
 80025b0:	3c01      	subs	r4, #1
 80025b2:	2c01      	cmp	r4, #1
 80025b4:	d98b      	bls.n	80024ce <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b6:	684a      	ldr	r2, [r1, #4]
 80025b8:	f002 0203 	and.w	r2, r2, #3
 80025bc:	2a03      	cmp	r2, #3
 80025be:	d009      	beq.n	80025d4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80025c0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c2:	005d      	lsls	r5, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	40aa      	lsls	r2, r5
 80025c8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025cc:	688a      	ldr	r2, [r1, #8]
 80025ce:	40aa      	lsls	r2, r5
 80025d0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80025d2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d4:	684a      	ldr	r2, [r1, #4]
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	2a02      	cmp	r2, #2
 80025dc:	d08e      	beq.n	80024fc <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80025de:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f20e 	lsl.w	r2, r2, lr
 80025ea:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ee:	684a      	ldr	r2, [r1, #4]
 80025f0:	f002 0203 	and.w	r2, r2, #3
 80025f4:	fa02 f20e 	lsl.w	r2, r2, lr
 80025f8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80025fa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025fc:	684a      	ldr	r2, [r1, #4]
 80025fe:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8002602:	d0c7      	beq.n	8002594 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002604:	2200      	movs	r2, #0
 8002606:	9201      	str	r2, [sp, #4]
 8002608:	4a23      	ldr	r2, [pc, #140]	@ (8002698 <HAL_GPIO_Init+0x1d8>)
 800260a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800260c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002610:	6454      	str	r4, [r2, #68]	@ 0x44
 8002612:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002614:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002618:	9201      	str	r2, [sp, #4]
 800261a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800261c:	089c      	lsrs	r4, r3, #2
 800261e:	1ca5      	adds	r5, r4, #2
 8002620:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <HAL_GPIO_Init+0x1d0>)
 8002622:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002626:	f003 0e03 	and.w	lr, r3, #3
 800262a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f20e 	lsl.w	r2, r2, lr
 8002634:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002638:	4a18      	ldr	r2, [pc, #96]	@ (800269c <HAL_GPIO_Init+0x1dc>)
 800263a:	4290      	cmp	r0, r2
 800263c:	f43f af74 	beq.w	8002528 <HAL_GPIO_Init+0x68>
 8002640:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002644:	4290      	cmp	r0, r2
 8002646:	d016      	beq.n	8002676 <HAL_GPIO_Init+0x1b6>
 8002648:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800264c:	4290      	cmp	r0, r2
 800264e:	d014      	beq.n	800267a <HAL_GPIO_Init+0x1ba>
 8002650:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002654:	4290      	cmp	r0, r2
 8002656:	d012      	beq.n	800267e <HAL_GPIO_Init+0x1be>
 8002658:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800265c:	4290      	cmp	r0, r2
 800265e:	d010      	beq.n	8002682 <HAL_GPIO_Init+0x1c2>
 8002660:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002664:	4290      	cmp	r0, r2
 8002666:	d00e      	beq.n	8002686 <HAL_GPIO_Init+0x1c6>
 8002668:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800266c:	4290      	cmp	r0, r2
 800266e:	f43f af59 	beq.w	8002524 <HAL_GPIO_Init+0x64>
 8002672:	2207      	movs	r2, #7
 8002674:	e759      	b.n	800252a <HAL_GPIO_Init+0x6a>
 8002676:	2201      	movs	r2, #1
 8002678:	e757      	b.n	800252a <HAL_GPIO_Init+0x6a>
 800267a:	2202      	movs	r2, #2
 800267c:	e755      	b.n	800252a <HAL_GPIO_Init+0x6a>
 800267e:	2203      	movs	r2, #3
 8002680:	e753      	b.n	800252a <HAL_GPIO_Init+0x6a>
 8002682:	2204      	movs	r2, #4
 8002684:	e751      	b.n	800252a <HAL_GPIO_Init+0x6a>
 8002686:	2205      	movs	r2, #5
 8002688:	e74f      	b.n	800252a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800268a:	b002      	add	sp, #8
 800268c:	bd70      	pop	{r4, r5, r6, pc}
 800268e:	4770      	bx	lr
 8002690:	40013800 	.word	0x40013800
 8002694:	40013c00 	.word	0x40013c00
 8002698:	40023800 	.word	0x40023800
 800269c:	40020000 	.word	0x40020000

080026a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a0:	b10a      	cbz	r2, 80026a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a2:	6181      	str	r1, [r0, #24]
 80026a4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a6:	0409      	lsls	r1, r1, #16
 80026a8:	6181      	str	r1, [r0, #24]
  }
}
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ac:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026ae:	ea01 0203 	and.w	r2, r1, r3
 80026b2:	ea21 0103 	bic.w	r1, r1, r3
 80026b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80026ba:	6181      	str	r1, [r0, #24]
}
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c0:	2800      	cmp	r0, #0
 80026c2:	f000 80cc 	beq.w	800285e <HAL_I2C_Init+0x19e>
{
 80026c6:	b570      	push	{r4, r5, r6, lr}
 80026c8:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d077      	beq.n	80027c2 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d2:	2324      	movs	r3, #36	@ 0x24
 80026d4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d8:	6822      	ldr	r2, [r4, #0]
 80026da:	6813      	ldr	r3, [r2, #0]
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026e2:	6822      	ldr	r2, [r4, #0]
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026ea:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026ec:	6822      	ldr	r2, [r4, #0]
 80026ee:	6813      	ldr	r3, [r2, #0]
 80026f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80026f4:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f6:	f000 f999 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026fa:	6862      	ldr	r2, [r4, #4]
 80026fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002868 <HAL_I2C_Init+0x1a8>)
 80026fe:	429a      	cmp	r2, r3
 8002700:	d864      	bhi.n	80027cc <HAL_I2C_Init+0x10c>
 8002702:	4b5a      	ldr	r3, [pc, #360]	@ (800286c <HAL_I2C_Init+0x1ac>)
 8002704:	4298      	cmp	r0, r3
 8002706:	bf8c      	ite	hi
 8002708:	2300      	movhi	r3, #0
 800270a:	2301      	movls	r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	f040 80a8 	bne.w	8002862 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002712:	4957      	ldr	r1, [pc, #348]	@ (8002870 <HAL_I2C_Init+0x1b0>)
 8002714:	fba1 3100 	umull	r3, r1, r1, r0
 8002718:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800271a:	6825      	ldr	r5, [r4, #0]
 800271c:	686a      	ldr	r2, [r5, #4]
 800271e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002722:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002726:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002728:	6821      	ldr	r1, [r4, #0]
 800272a:	6a0a      	ldr	r2, [r1, #32]
 800272c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002730:	6866      	ldr	r6, [r4, #4]
 8002732:	4d4d      	ldr	r5, [pc, #308]	@ (8002868 <HAL_I2C_Init+0x1a8>)
 8002734:	42ae      	cmp	r6, r5
 8002736:	d84f      	bhi.n	80027d8 <HAL_I2C_Init+0x118>
 8002738:	3301      	adds	r3, #1
 800273a:	4313      	orrs	r3, r2
 800273c:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800273e:	6821      	ldr	r1, [r4, #0]
 8002740:	69ca      	ldr	r2, [r1, #28]
 8002742:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002746:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800274a:	6865      	ldr	r5, [r4, #4]
 800274c:	4b46      	ldr	r3, [pc, #280]	@ (8002868 <HAL_I2C_Init+0x1a8>)
 800274e:	429d      	cmp	r5, r3
 8002750:	d84c      	bhi.n	80027ec <HAL_I2C_Init+0x12c>
 8002752:	1e43      	subs	r3, r0, #1
 8002754:	006d      	lsls	r5, r5, #1
 8002756:	fbb3 f3f5 	udiv	r3, r3, r5
 800275a:	3301      	adds	r3, #1
 800275c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002760:	4203      	tst	r3, r0
 8002762:	d078      	beq.n	8002856 <HAL_I2C_Init+0x196>
 8002764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002768:	431a      	orrs	r2, r3
 800276a:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800276c:	6821      	ldr	r1, [r4, #0]
 800276e:	680b      	ldr	r3, [r1, #0]
 8002770:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002774:	69e2      	ldr	r2, [r4, #28]
 8002776:	6a20      	ldr	r0, [r4, #32]
 8002778:	4302      	orrs	r2, r0
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800277e:	6821      	ldr	r1, [r4, #0]
 8002780:	688b      	ldr	r3, [r1, #8]
 8002782:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002786:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800278a:	6922      	ldr	r2, [r4, #16]
 800278c:	68e0      	ldr	r0, [r4, #12]
 800278e:	4302      	orrs	r2, r0
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002794:	6821      	ldr	r1, [r4, #0]
 8002796:	68cb      	ldr	r3, [r1, #12]
 8002798:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800279c:	6962      	ldr	r2, [r4, #20]
 800279e:	69a0      	ldr	r0, [r4, #24]
 80027a0:	4302      	orrs	r2, r0
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	6813      	ldr	r3, [r2, #0]
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	2000      	movs	r0, #0
 80027b2:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	2320      	movs	r3, #32
 80027b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ba:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027bc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 80027c0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80027c2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80027c6:	f7fe fb5b 	bl	8000e80 <HAL_I2C_MspInit>
 80027ca:	e782      	b.n	80026d2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027cc:	4b29      	ldr	r3, [pc, #164]	@ (8002874 <HAL_I2C_Init+0x1b4>)
 80027ce:	4298      	cmp	r0, r3
 80027d0:	bf8c      	ite	hi
 80027d2:	2300      	movhi	r3, #0
 80027d4:	2301      	movls	r3, #1
 80027d6:	e799      	b.n	800270c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80027dc:	fb05 f303 	mul.w	r3, r5, r3
 80027e0:	4d25      	ldr	r5, [pc, #148]	@ (8002878 <HAL_I2C_Init+0x1b8>)
 80027e2:	fba5 5303 	umull	r5, r3, r5, r3
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	3301      	adds	r3, #1
 80027ea:	e7a6      	b.n	800273a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027ec:	68a6      	ldr	r6, [r4, #8]
 80027ee:	b9be      	cbnz	r6, 8002820 <HAL_I2C_Init+0x160>
 80027f0:	1e43      	subs	r3, r0, #1
 80027f2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80027f6:	fbb3 f3fc 	udiv	r3, r3, ip
 80027fa:	3301      	adds	r3, #1
 80027fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	bb43      	cbnz	r3, 800285a <HAL_I2C_Init+0x19a>
 8002808:	b9c6      	cbnz	r6, 800283c <HAL_I2C_Init+0x17c>
 800280a:	1e43      	subs	r3, r0, #1
 800280c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002810:	fbb3 f3f5 	udiv	r3, r3, r5
 8002814:	3301      	adds	r3, #1
 8002816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800281e:	e7a3      	b.n	8002768 <HAL_I2C_Init+0xa8>
 8002820:	1e43      	subs	r3, r0, #1
 8002822:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002826:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800282a:	fbb3 f3fc 	udiv	r3, r3, ip
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	e7e4      	b.n	8002806 <HAL_I2C_Init+0x146>
 800283c:	1e43      	subs	r3, r0, #1
 800283e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002842:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002846:	fbb3 f3f5 	udiv	r3, r3, r5
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002854:	e788      	b.n	8002768 <HAL_I2C_Init+0xa8>
 8002856:	2304      	movs	r3, #4
 8002858:	e786      	b.n	8002768 <HAL_I2C_Init+0xa8>
 800285a:	2301      	movs	r3, #1
 800285c:	e784      	b.n	8002768 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800285e:	2001      	movs	r0, #1
}
 8002860:	4770      	bx	lr
    return HAL_ERROR;
 8002862:	2001      	movs	r0, #1
 8002864:	e7ac      	b.n	80027c0 <HAL_I2C_Init+0x100>
 8002866:	bf00      	nop
 8002868:	000186a0 	.word	0x000186a0
 800286c:	001e847f 	.word	0x001e847f
 8002870:	431bde83 	.word	0x431bde83
 8002874:	003d08ff 	.word	0x003d08ff
 8002878:	10624dd3 	.word	0x10624dd3

0800287c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b500      	push	{lr}
 800287e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002880:	2200      	movs	r2, #0
 8002882:	9200      	str	r2, [sp, #0]
 8002884:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_MspInit+0x40>)
 8002886:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002888:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800288c:	6459      	str	r1, [r3, #68]	@ 0x44
 800288e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002890:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8002894:	9100      	str	r1, [sp, #0]
 8002896:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	9201      	str	r2, [sp, #4]
 800289a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800289c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80028a0:	6419      	str	r1, [r3, #64]	@ 0x40
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028ac:	210f      	movs	r1, #15
 80028ae:	f06f 0001 	mvn.w	r0, #1
 80028b2:	f7ff fb91 	bl	8001fd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b6:	b003      	add	sp, #12
 80028b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c0:	2800      	cmp	r0, #0
 80028c2:	f000 809b 	beq.w	80029fc <HAL_RCC_ClockConfig+0x13c>
{
 80028c6:	b570      	push	{r4, r5, r6, lr}
 80028c8:	460d      	mov	r5, r1
 80028ca:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b4f      	ldr	r3, [pc, #316]	@ (8002a0c <HAL_RCC_ClockConfig+0x14c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	428b      	cmp	r3, r1
 80028d6:	d208      	bcs.n	80028ea <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d8:	b2cb      	uxtb	r3, r1
 80028da:	4a4c      	ldr	r2, [pc, #304]	@ (8002a0c <HAL_RCC_ClockConfig+0x14c>)
 80028dc:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	428b      	cmp	r3, r1
 80028e6:	f040 808b 	bne.w	8002a00 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	f013 0f02 	tst.w	r3, #2
 80028f0:	d017      	beq.n	8002922 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f2:	f013 0f04 	tst.w	r3, #4
 80028f6:	d004      	beq.n	8002902 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f8:	4a45      	ldr	r2, [pc, #276]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 80028fa:	6893      	ldr	r3, [r2, #8]
 80028fc:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002900:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	f013 0f08 	tst.w	r3, #8
 8002908:	d004      	beq.n	8002914 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800290a:	4a41      	ldr	r2, [pc, #260]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 800290c:	6893      	ldr	r3, [r2, #8]
 800290e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4a3e      	ldr	r2, [pc, #248]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 8002916:	6893      	ldr	r3, [r2, #8]
 8002918:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800291c:	68a1      	ldr	r1, [r4, #8]
 800291e:	430b      	orrs	r3, r1
 8002920:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	f013 0f01 	tst.w	r3, #1
 8002928:	d032      	beq.n	8002990 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292a:	6863      	ldr	r3, [r4, #4]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d021      	beq.n	8002974 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002930:	1e9a      	subs	r2, r3, #2
 8002932:	2a01      	cmp	r2, #1
 8002934:	d925      	bls.n	8002982 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4a36      	ldr	r2, [pc, #216]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	f012 0f02 	tst.w	r2, #2
 800293e:	d061      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002940:	4933      	ldr	r1, [pc, #204]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 8002942:	688a      	ldr	r2, [r1, #8]
 8002944:	f022 0203 	bic.w	r2, r2, #3
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294c:	f7fe fe66 	bl	800161c <HAL_GetTick>
 8002950:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2f      	ldr	r3, [pc, #188]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	6862      	ldr	r2, [r4, #4]
 800295c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002960:	d016      	beq.n	8002990 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002962:	f7fe fe5b 	bl	800161c <HAL_GetTick>
 8002966:	1b80      	subs	r0, r0, r6
 8002968:	f241 3388 	movw	r3, #5000	@ 0x1388
 800296c:	4298      	cmp	r0, r3
 800296e:	d9f0      	bls.n	8002952 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8002970:	2003      	movs	r0, #3
 8002972:	e042      	b.n	80029fa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002974:	4a26      	ldr	r2, [pc, #152]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800297c:	d1e0      	bne.n	8002940 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800297e:	2001      	movs	r0, #1
 8002980:	e03b      	b.n	80029fa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4a23      	ldr	r2, [pc, #140]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800298a:	d1d9      	bne.n	8002940 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800298c:	2001      	movs	r0, #1
 800298e:	e034      	b.n	80029fa <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_RCC_ClockConfig+0x14c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	42ab      	cmp	r3, r5
 800299a:	d907      	bls.n	80029ac <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299c:	b2ea      	uxtb	r2, r5
 800299e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <HAL_RCC_ClockConfig+0x14c>)
 80029a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	42ab      	cmp	r3, r5
 80029aa:	d12d      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	f013 0f04 	tst.w	r3, #4
 80029b2:	d006      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4a16      	ldr	r2, [pc, #88]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 80029b6:	6893      	ldr	r3, [r2, #8]
 80029b8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80029bc:	68e1      	ldr	r1, [r4, #12]
 80029be:	430b      	orrs	r3, r1
 80029c0:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	f013 0f08 	tst.w	r3, #8
 80029c8:	d007      	beq.n	80029da <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ca:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 80029cc:	6893      	ldr	r3, [r2, #8]
 80029ce:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80029d2:	6921      	ldr	r1, [r4, #16]
 80029d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029d8:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f865 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 80029de:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <HAL_RCC_ClockConfig+0x150>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002a14 <HAL_RCC_ClockConfig+0x154>)
 80029e8:	5cd3      	ldrb	r3, [r2, r3]
 80029ea:	40d8      	lsrs	r0, r3
 80029ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_RCC_ClockConfig+0x158>)
 80029ee:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029f0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <HAL_RCC_ClockConfig+0x15c>)
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	f001 fb4c 	bl	8004090 <HAL_InitTick>

  return HAL_OK;
 80029f8:	2000      	movs	r0, #0
}
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80029fc:	2001      	movs	r0, #1
}
 80029fe:	4770      	bx	lr
      return HAL_ERROR;
 8002a00:	2001      	movs	r0, #1
 8002a02:	e7fa      	b.n	80029fa <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002a04:	2001      	movs	r0, #1
 8002a06:	e7f8      	b.n	80029fa <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002a08:	2001      	movs	r0, #1
 8002a0a:	e7f6      	b.n	80029fa <HAL_RCC_ClockConfig+0x13a>
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	080059fc 	.word	0x080059fc
 8002a18:	2000000c 	.word	0x2000000c
 8002a1c:	20000008 	.word	0x20000008

08002a20 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002a20:	4b01      	ldr	r3, [pc, #4]	@ (8002a28 <HAL_RCC_GetHCLKFreq+0x8>)
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	2000000c 	.word	0x2000000c

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a2e:	f7ff fff7 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a32:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002a3a:	4a03      	ldr	r2, [pc, #12]	@ (8002a48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a3c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a3e:	40d8      	lsrs	r0, r3
 8002a40:	bd08      	pop	{r3, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	080059f4 	.word	0x080059f4

08002a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a4c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a4e:	f7ff ffe7 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a52:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002a5a:	4a03      	ldr	r2, [pc, #12]	@ (8002a68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a5e:	40d8      	lsrs	r0, r3
 8002a60:	bd08      	pop	{r3, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	080059f4 	.word	0x080059f4

08002a6c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a6c:	230f      	movs	r3, #15
 8002a6e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_GetClockConfig+0x34>)
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002a80:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002a88:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002a92:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_RCC_GetClockConfig+0x38>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	600b      	str	r3, [r1, #0]
}
 8002a9e:	4770      	bx	lr
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aaa:	4b5e      	ldr	r3, [pc, #376]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d003      	beq.n	8002abe <HAL_RCC_GetSysClockFreq+0x16>
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d05b      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0xca>
 8002aba:	485b      	ldr	r0, [pc, #364]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002abc:	e033      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x7e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002abe:	4b59      	ldr	r3, [pc, #356]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002acc:	d02c      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b55      	ldr	r3, [pc, #340]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002ad0:	6858      	ldr	r0, [r3, #4]
 8002ad2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002ad6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002ada:	ebbc 0c00 	subs.w	ip, ip, r0
 8002ade:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002ae2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002ae6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002aea:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002aee:	ebb1 010c 	subs.w	r1, r1, ip
 8002af2:	eb63 030e 	sbc.w	r3, r3, lr
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002afc:	00c9      	lsls	r1, r1, #3
 8002afe:	eb11 0c00 	adds.w	ip, r1, r0
 8002b02:	f143 0300 	adc.w	r3, r3, #0
 8002b06:	0299      	lsls	r1, r3, #10
 8002b08:	2300      	movs	r3, #0
 8002b0a:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002b0e:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002b12:	f7fd fb5d 	bl	80001d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b16:	4b43      	ldr	r3, [pc, #268]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002b1e:	3301      	adds	r3, #1
 8002b20:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002b22:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002b26:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b28:	4b3e      	ldr	r3, [pc, #248]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002b2a:	6858      	ldr	r0, [r3, #4]
 8002b2c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002b30:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002b34:	ebbc 0c00 	subs.w	ip, ip, r0
 8002b38:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002b3c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002b40:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002b44:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002b48:	ebb1 010c 	subs.w	r1, r1, ip
 8002b4c:	eb63 030e 	sbc.w	r3, r3, lr
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b56:	00c9      	lsls	r1, r1, #3
 8002b58:	eb11 0c00 	adds.w	ip, r1, r0
 8002b5c:	f143 0300 	adc.w	r3, r3, #0
 8002b60:	0299      	lsls	r1, r3, #10
 8002b62:	2300      	movs	r3, #0
 8002b64:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002b68:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002b6c:	f7fd fb30 	bl	80001d0 <__aeabi_uldivmod>
 8002b70:	e7d1      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x6e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b72:	4b2c      	ldr	r3, [pc, #176]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002b80:	d02a      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x130>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b82:	4b28      	ldr	r3, [pc, #160]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002b84:	6858      	ldr	r0, [r3, #4]
 8002b86:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002b8a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002b8e:	ebbc 0c00 	subs.w	ip, ip, r0
 8002b92:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002b96:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002b9a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002b9e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002ba2:	ebb1 010c 	subs.w	r1, r1, ip
 8002ba6:	eb63 030e 	sbc.w	r3, r3, lr
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb0:	00c9      	lsls	r1, r1, #3
 8002bb2:	eb11 0c00 	adds.w	ip, r1, r0
 8002bb6:	f143 0300 	adc.w	r3, r3, #0
 8002bba:	0299      	lsls	r1, r3, #10
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002bc2:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002bc6:	f7fd fb03 	bl	80001d0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bca:	4b16      	ldr	r3, [pc, #88]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8002bd2:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002bd6:	e7a6      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x7e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd8:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002bda:	6858      	ldr	r0, [r3, #4]
 8002bdc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002be0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002be4:	ebbc 0c00 	subs.w	ip, ip, r0
 8002be8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002bec:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002bf0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002bf4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002bf8:	ebb1 010c 	subs.w	r1, r1, ip
 8002bfc:	eb63 030e 	sbc.w	r3, r3, lr
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c06:	00c9      	lsls	r1, r1, #3
 8002c08:	eb11 0c00 	adds.w	ip, r1, r0
 8002c0c:	f143 0300 	adc.w	r3, r3, #0
 8002c10:	0299      	lsls	r1, r3, #10
 8002c12:	2300      	movs	r3, #0
 8002c14:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002c18:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002c1c:	f7fd fad8 	bl	80001d0 <__aeabi_uldivmod>
 8002c20:	e7d3      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x122>
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400

08002c2c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	f000 8201 	beq.w	8003034 <HAL_RCC_OscConfig+0x408>
{
 8002c32:	b570      	push	{r4, r5, r6, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c38:	6803      	ldr	r3, [r0, #0]
 8002c3a:	f013 0f01 	tst.w	r3, #1
 8002c3e:	d041      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c40:	4b99      	ldr	r3, [pc, #612]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d032      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c4c:	4b96      	ldr	r3, [pc, #600]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d027      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c58:	4b93      	ldr	r3, [pc, #588]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d059      	beq.n	8002d18 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c64:	6863      	ldr	r3, [r4, #4]
 8002c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c6a:	d05b      	beq.n	8002d24 <HAL_RCC_OscConfig+0xf8>
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c70:	d05e      	beq.n	8002d30 <HAL_RCC_OscConfig+0x104>
 8002c72:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c84:	6863      	ldr	r3, [r4, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d05c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fcc7 	bl	800161c <HAL_GetTick>
 8002c8e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c90:	4b85      	ldr	r3, [pc, #532]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002c98:	d114      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fcbf 	bl	800161c <HAL_GetTick>
 8002c9e:	1b40      	subs	r0, r0, r5
 8002ca0:	2864      	cmp	r0, #100	@ 0x64
 8002ca2:	d9f5      	bls.n	8002c90 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	e1cc      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ca8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002cb0:	d0d2      	beq.n	8002c58 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002cba:	d003      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x98>
 8002cbc:	6863      	ldr	r3, [r4, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 81ba 	beq.w	8003038 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	f013 0f02 	tst.w	r3, #2
 8002cca:	d060      	beq.n	8002d8e <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ccc:	4b76      	ldr	r3, [pc, #472]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f013 0f0c 	tst.w	r3, #12
 8002cd4:	d04a      	beq.n	8002d6c <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cd6:	4b74      	ldr	r3, [pc, #464]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d03f      	beq.n	8002d62 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce2:	4b71      	ldr	r3, [pc, #452]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d069      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cee:	68e3      	ldr	r3, [r4, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d075      	beq.n	8002de0 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf4:	4b6d      	ldr	r3, [pc, #436]	@ (8002eac <HAL_RCC_OscConfig+0x280>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fc8f 	bl	800161c <HAL_GetTick>
 8002cfe:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	4b69      	ldr	r3, [pc, #420]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f013 0f02 	tst.w	r3, #2
 8002d08:	d161      	bne.n	8002dce <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fc87 	bl	800161c <HAL_GetTick>
 8002d0e:	1b40      	subs	r0, r0, r5
 8002d10:	2802      	cmp	r0, #2
 8002d12:	d9f5      	bls.n	8002d00 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002d14:	2003      	movs	r0, #3
 8002d16:	e194      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d18:	4b63      	ldr	r3, [pc, #396]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002d20:	d0a0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x38>
 8002d22:	e7c6      	b.n	8002cb2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d24:	4a60      	ldr	r2, [pc, #384]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e7a9      	b.n	8002c84 <HAL_RCC_OscConfig+0x58>
 8002d30:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e79f      	b.n	8002c84 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8002d44:	f7fe fc6a 	bl	800161c <HAL_GetTick>
 8002d48:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	4b57      	ldr	r3, [pc, #348]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002d52:	d0b7      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fc62 	bl	800161c <HAL_GetTick>
 8002d58:	1b40      	subs	r0, r0, r5
 8002d5a:	2864      	cmp	r0, #100	@ 0x64
 8002d5c:	d9f5      	bls.n	8002d4a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002d5e:	2003      	movs	r0, #3
 8002d60:	e16f      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d62:	4b51      	ldr	r3, [pc, #324]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002d6a:	d1ba      	bne.n	8002ce2 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f013 0f02 	tst.w	r3, #2
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_OscConfig+0x152>
 8002d76:	68e3      	ldr	r3, [r4, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f040 815f 	bne.w	800303c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002d80:	6813      	ldr	r3, [r2, #0]
 8002d82:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002d86:	6921      	ldr	r1, [r4, #16]
 8002d88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d8c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	f013 0f08 	tst.w	r3, #8
 8002d94:	d049      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d96:	6963      	ldr	r3, [r4, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d033      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9c:	4b43      	ldr	r3, [pc, #268]	@ (8002eac <HAL_RCC_OscConfig+0x280>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe fc3a 	bl	800161c <HAL_GetTick>
 8002da8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dae:	f013 0f02 	tst.w	r3, #2
 8002db2:	d13a      	bne.n	8002e2a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe fc32 	bl	800161c <HAL_GetTick>
 8002db8:	1b40      	subs	r0, r0, r5
 8002dba:	2802      	cmp	r0, #2
 8002dbc:	d9f5      	bls.n	8002daa <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8002dbe:	2003      	movs	r0, #3
 8002dc0:	e13f      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b39      	ldr	r3, [pc, #228]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002dca:	d190      	bne.n	8002cee <HAL_RCC_OscConfig+0xc2>
 8002dcc:	e7ce      	b.n	8002d6c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	4a36      	ldr	r2, [pc, #216]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002dd6:	6921      	ldr	r1, [r4, #16]
 8002dd8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e7d6      	b.n	8002d8e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002de0:	4b32      	ldr	r3, [pc, #200]	@ (8002eac <HAL_RCC_OscConfig+0x280>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002de6:	f7fe fc19 	bl	800161c <HAL_GetTick>
 8002dea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f013 0f02 	tst.w	r3, #2
 8002df4:	d0cb      	beq.n	8002d8e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fe fc11 	bl	800161c <HAL_GetTick>
 8002dfa:	1b40      	subs	r0, r0, r5
 8002dfc:	2802      	cmp	r0, #2
 8002dfe:	d9f5      	bls.n	8002dec <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8002e00:	2003      	movs	r0, #3
 8002e02:	e11e      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e04:	4b29      	ldr	r3, [pc, #164]	@ (8002eac <HAL_RCC_OscConfig+0x280>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fc06 	bl	800161c <HAL_GetTick>
 8002e10:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e12:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e16:	f013 0f02 	tst.w	r3, #2
 8002e1a:	d006      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1c:	f7fe fbfe 	bl	800161c <HAL_GetTick>
 8002e20:	1b40      	subs	r0, r0, r5
 8002e22:	2802      	cmp	r0, #2
 8002e24:	d9f5      	bls.n	8002e12 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8002e26:	2003      	movs	r0, #3
 8002e28:	e10b      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	f013 0f04 	tst.w	r3, #4
 8002e30:	d076      	beq.n	8002f20 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002e3a:	d133      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e44:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e54:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b16      	ldr	r3, [pc, #88]	@ (8002eb0 <HAL_RCC_OscConfig+0x284>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002e5e:	d029      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d03a      	beq.n	8002edc <HAL_RCC_OscConfig+0x2b0>
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d03e      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x2bc>
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	671a      	str	r2, [r3, #112]	@ 0x70
 8002e74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e76:	f022 0204 	bic.w	r2, r2, #4
 8002e7a:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7c:	68a3      	ldr	r3, [r4, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d03c      	beq.n	8002efc <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe fbcb 	bl	800161c <HAL_GetTick>
 8002e86:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8c:	f013 0f02 	tst.w	r3, #2
 8002e90:	d145      	bne.n	8002f1e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fe fbc3 	bl	800161c <HAL_GetTick>
 8002e96:	1b80      	subs	r0, r0, r6
 8002e98:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e9c:	4298      	cmp	r0, r3
 8002e9e:	d9f3      	bls.n	8002e88 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8002ea0:	2003      	movs	r0, #3
 8002ea2:	e0ce      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8002ea4:	2500      	movs	r5, #0
 8002ea6:	e7d6      	b.n	8002e56 <HAL_RCC_OscConfig+0x22a>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470000 	.word	0x42470000
 8002eb0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb4:	4a6b      	ldr	r2, [pc, #428]	@ (8003064 <HAL_RCC_OscConfig+0x438>)
 8002eb6:	6813      	ldr	r3, [r2, #0]
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ebc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fbad 	bl	800161c <HAL_GetTick>
 8002ec2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b67      	ldr	r3, [pc, #412]	@ (8003064 <HAL_RCC_OscConfig+0x438>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002ecc:	d1c8      	bne.n	8002e60 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ece:	f7fe fba5 	bl	800161c <HAL_GetTick>
 8002ed2:	1b80      	subs	r0, r0, r6
 8002ed4:	2802      	cmp	r0, #2
 8002ed6:	d9f5      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8002ed8:	2003      	movs	r0, #3
 8002eda:	e0b2      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002edc:	4a62      	ldr	r2, [pc, #392]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002ede:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee6:	e7c9      	b.n	8002e7c <HAL_RCC_OscConfig+0x250>
 8002ee8:	4b5f      	ldr	r3, [pc, #380]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002eea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002eec:	f042 0204 	orr.w	r2, r2, #4
 8002ef0:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ef2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	671a      	str	r2, [r3, #112]	@ 0x70
 8002efa:	e7bf      	b.n	8002e7c <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe fb8e 	bl	800161c <HAL_GetTick>
 8002f00:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f02:	4b59      	ldr	r3, [pc, #356]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f06:	f013 0f02 	tst.w	r3, #2
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fb86 	bl	800161c <HAL_GetTick>
 8002f10:	1b80      	subs	r0, r0, r6
 8002f12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f16:	4298      	cmp	r0, r3
 8002f18:	d9f3      	bls.n	8002f02 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	e091      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f1e:	b9ed      	cbnz	r5, 8002f5c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f20:	69a3      	ldr	r3, [r4, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 808c 	beq.w	8003040 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f28:	4a4f      	ldr	r2, [pc, #316]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002f2a:	6892      	ldr	r2, [r2, #8]
 8002f2c:	f002 020c 	and.w	r2, r2, #12
 8002f30:	2a08      	cmp	r2, #8
 8002f32:	d054      	beq.n	8002fde <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d017      	beq.n	8002f68 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b4c      	ldr	r3, [pc, #304]	@ (800306c <HAL_RCC_OscConfig+0x440>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fb6d 	bl	800161c <HAL_GetTick>
 8002f42:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f44:	4b48      	ldr	r3, [pc, #288]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002f4c:	d045      	beq.n	8002fda <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7fe fb65 	bl	800161c <HAL_GetTick>
 8002f52:	1b00      	subs	r0, r0, r4
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d9f5      	bls.n	8002f44 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8002f58:	2003      	movs	r0, #3
 8002f5a:	e072      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4a42      	ldr	r2, [pc, #264]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002f5e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f66:	e7db      	b.n	8002f20 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b40      	ldr	r3, [pc, #256]	@ (800306c <HAL_RCC_OscConfig+0x440>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fb55 	bl	800161c <HAL_GetTick>
 8002f72:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f74:	4b3c      	ldr	r3, [pc, #240]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002f7c:	d006      	beq.n	8002f8c <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe fb4d 	bl	800161c <HAL_GetTick>
 8002f82:	1b40      	subs	r0, r0, r5
 8002f84:	2802      	cmp	r0, #2
 8002f86:	d9f5      	bls.n	8002f74 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8002f88:	2003      	movs	r0, #3
 8002f8a:	e05a      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8c:	69e3      	ldr	r3, [r4, #28]
 8002f8e:	6a22      	ldr	r2, [r4, #32]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002f94:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f98:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002f9a:	0852      	lsrs	r2, r2, #1
 8002f9c:	3a01      	subs	r2, #1
 8002f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fa2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002fa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002fa8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002faa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002fae:	4a2e      	ldr	r2, [pc, #184]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002fb0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800306c <HAL_RCC_OscConfig+0x440>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fb30 	bl	800161c <HAL_GetTick>
 8002fbc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fb28 	bl	800161c <HAL_GetTick>
 8002fcc:	1b00      	subs	r0, r0, r4
 8002fce:	2802      	cmp	r0, #2
 8002fd0:	d9f5      	bls.n	8002fbe <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8002fd2:	2003      	movs	r0, #3
 8002fd4:	e035      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e033      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e031      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d031      	beq.n	8003046 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8002fe2:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <HAL_RCC_OscConfig+0x43c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002fea:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fec:	4291      	cmp	r1, r2
 8002fee:	d12c      	bne.n	800304a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ff4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	428a      	cmp	r2, r1
 8002ff8:	d129      	bne.n	800304e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003000:	401a      	ands	r2, r3
 8003002:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003006:	d124      	bne.n	8003052 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003008:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800300c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800300e:	0852      	lsrs	r2, r2, #1
 8003010:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003012:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003016:	d11e      	bne.n	8003056 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003018:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800301c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003022:	d11a      	bne.n	800305a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003024:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8003028:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800302a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800302e:	d116      	bne.n	800305e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8003030:	2000      	movs	r0, #0
 8003032:	e006      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8003034:	2001      	movs	r0, #1
}
 8003036:	4770      	bx	lr
        return HAL_ERROR;
 8003038:	2001      	movs	r0, #1
 800303a:	e002      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800303c:	2001      	movs	r0, #1
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003040:	2000      	movs	r0, #0
}
 8003042:	b002      	add	sp, #8
 8003044:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003046:	2001      	movs	r0, #1
 8003048:	e7fb      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800304a:	2001      	movs	r0, #1
 800304c:	e7f9      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
 800304e:	2001      	movs	r0, #1
 8003050:	e7f7      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
 8003052:	2001      	movs	r0, #1
 8003054:	e7f5      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
 8003056:	2001      	movs	r0, #1
 8003058:	e7f3      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
 800305a:	2001      	movs	r0, #1
 800305c:	e7f1      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
 800305e:	2001      	movs	r0, #1
 8003060:	e7ef      	b.n	8003042 <HAL_RCC_OscConfig+0x416>
 8003062:	bf00      	nop
 8003064:	40007000 	.word	0x40007000
 8003068:	40023800 	.word	0x40023800
 800306c:	42470000 	.word	0x42470000

08003070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	4605      	mov	r5, r0
 8003078:	4688      	mov	r8, r1
 800307a:	4617      	mov	r7, r2
 800307c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800307e:	f7fe facd 	bl	800161c <HAL_GetTick>
 8003082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003084:	1a1b      	subs	r3, r3, r0
 8003086:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800308a:	f7fe fac7 	bl	800161c <HAL_GetTick>
 800308e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003090:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003098:	fb09 f303 	mul.w	r3, r9, r3
 800309c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800309e:	682b      	ldr	r3, [r5, #0]
 80030a0:	689c      	ldr	r4, [r3, #8]
 80030a2:	ea38 0404 	bics.w	r4, r8, r4
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	42bb      	cmp	r3, r7
 80030ae:	d03d      	beq.n	800312c <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030b0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80030b4:	d0f3      	beq.n	800309e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030b6:	f7fe fab1 	bl	800161c <HAL_GetTick>
 80030ba:	eba0 000a 	sub.w	r0, r0, sl
 80030be:	4548      	cmp	r0, r9
 80030c0:	d207      	bcs.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030c2:	9a01      	ldr	r2, [sp, #4]
 80030c4:	b102      	cbz	r2, 80030c8 <SPI_WaitFlagStateUntilTimeout+0x58>
 80030c6:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80030c8:	9b01      	ldr	r3, [sp, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	4691      	mov	r9, r2
 80030d0:	e7e5      	b.n	800309e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030d2:	682a      	ldr	r2, [r5, #0]
 80030d4:	6853      	ldr	r3, [r2, #4]
 80030d6:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80030da:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030dc:	686b      	ldr	r3, [r5, #4]
 80030de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030e2:	d00b      	beq.n	80030fc <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030e4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ea:	d014      	beq.n	8003116 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030f2:	2300      	movs	r3, #0
 80030f4:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 80030f8:	2003      	movs	r0, #3
 80030fa:	e018      	b.n	800312e <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fc:	68ab      	ldr	r3, [r5, #8]
 80030fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003102:	d002      	beq.n	800310a <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003108:	d1ec      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 800310a:	682a      	ldr	r2, [r5, #0]
 800310c:	6813      	ldr	r3, [r2, #0]
 800310e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e7e6      	b.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8003116:	682a      	ldr	r2, [r5, #0]
 8003118:	6813      	ldr	r3, [r2, #0]
 800311a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	682a      	ldr	r2, [r5, #0]
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e7df      	b.n	80030ec <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 800312c:	2000      	movs	r0, #0
}
 800312e:	b002      	add	sp, #8
 8003130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003134:	2000000c 	.word	0x2000000c

08003138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	4604      	mov	r4, r0
 800313e:	460d      	mov	r5, r1
 8003140:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003142:	9200      	str	r2, [sp, #0]
 8003144:	460b      	mov	r3, r1
 8003146:	2201      	movs	r2, #1
 8003148:	2102      	movs	r1, #2
 800314a:	f7ff ff91 	bl	8003070 <SPI_WaitFlagStateUntilTimeout>
 800314e:	b9d0      	cbnz	r0, 8003186 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003150:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <SPI_EndRxTxTransaction+0x78>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <SPI_EndRxTxTransaction+0x7c>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0d5b      	lsrs	r3, r3, #21
 800315c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003166:	6863      	ldr	r3, [r4, #4]
 8003168:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800316c:	d011      	beq.n	8003192 <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800316e:	9b03      	ldr	r3, [sp, #12]
 8003170:	b13b      	cbz	r3, 8003182 <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8003172:	9b03      	ldr	r3, [sp, #12]
 8003174:	3b01      	subs	r3, #1
 8003176:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003180:	d1f5      	bne.n	800316e <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8003182:	b004      	add	sp, #16
 8003184:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003186:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003188:	f043 0320 	orr.w	r3, r3, #32
 800318c:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 800318e:	2003      	movs	r0, #3
 8003190:	e7f7      	b.n	8003182 <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003192:	9600      	str	r6, [sp, #0]
 8003194:	462b      	mov	r3, r5
 8003196:	2200      	movs	r2, #0
 8003198:	2180      	movs	r1, #128	@ 0x80
 800319a:	4620      	mov	r0, r4
 800319c:	f7ff ff68 	bl	8003070 <SPI_WaitFlagStateUntilTimeout>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d0ee      	beq.n	8003182 <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031a6:	f043 0320 	orr.w	r3, r3, #32
 80031aa:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80031ac:	2003      	movs	r0, #3
 80031ae:	e7e8      	b.n	8003182 <SPI_EndRxTxTransaction+0x4a>
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	165e9f81 	.word	0x165e9f81

080031b8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d05a      	beq.n	8003272 <HAL_SPI_Init+0xba>
{
 80031bc:	b510      	push	{r4, lr}
 80031be:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031c2:	b933      	cbnz	r3, 80031d2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031c4:	6843      	ldr	r3, [r0, #4]
 80031c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ca:	d005      	beq.n	80031d8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61c3      	str	r3, [r0, #28]
 80031d0:	e002      	b.n	80031d8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031d6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80031dc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d040      	beq.n	8003266 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80031e4:	2302      	movs	r3, #2
 80031e6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	6813      	ldr	r3, [r2, #0]
 80031ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031f2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031f4:	6863      	ldr	r3, [r4, #4]
 80031f6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80031fa:	68a2      	ldr	r2, [r4, #8]
 80031fc:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8003200:	4313      	orrs	r3, r2
 8003202:	68e2      	ldr	r2, [r4, #12]
 8003204:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003208:	4313      	orrs	r3, r2
 800320a:	6922      	ldr	r2, [r4, #16]
 800320c:	f002 0202 	and.w	r2, r2, #2
 8003210:	4313      	orrs	r3, r2
 8003212:	6962      	ldr	r2, [r4, #20]
 8003214:	f002 0201 	and.w	r2, r2, #1
 8003218:	4313      	orrs	r3, r2
 800321a:	69a2      	ldr	r2, [r4, #24]
 800321c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003220:	4313      	orrs	r3, r2
 8003222:	69e2      	ldr	r2, [r4, #28]
 8003224:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003228:	4313      	orrs	r3, r2
 800322a:	6a22      	ldr	r2, [r4, #32]
 800322c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8003230:	4313      	orrs	r3, r2
 8003232:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003234:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003238:	6821      	ldr	r1, [r4, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800323e:	8b63      	ldrh	r3, [r4, #26]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003246:	f002 0210 	and.w	r2, r2, #16
 800324a:	6821      	ldr	r1, [r4, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003250:	6822      	ldr	r2, [r4, #0]
 8003252:	69d3      	ldr	r3, [r2, #28]
 8003254:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003258:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800325a:	2000      	movs	r0, #0
 800325c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800325e:	2301      	movs	r3, #1
 8003260:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8003264:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003266:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 800326a:	4620      	mov	r0, r4
 800326c:	f7fe f8f4 	bl	8001458 <HAL_SPI_MspInit>
 8003270:	e7b8      	b.n	80031e4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003272:	2001      	movs	r0, #1
}
 8003274:	4770      	bx	lr

08003276 <HAL_SPI_TransmitReceive>:
{
 8003276:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800327a:	b083      	sub	sp, #12
 800327c:	4604      	mov	r4, r0
 800327e:	4688      	mov	r8, r1
 8003280:	4691      	mov	r9, r2
 8003282:	461f      	mov	r7, r3
 8003284:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8003286:	f7fe f9c9 	bl	800161c <HAL_GetTick>
 800328a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800328c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8003290:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003292:	2b01      	cmp	r3, #1
 8003294:	d00b      	beq.n	80032ae <HAL_SPI_TransmitReceive+0x38>
 8003296:	b2d9      	uxtb	r1, r3
 8003298:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800329c:	f040 8104 	bne.w	80034a8 <HAL_SPI_TransmitReceive+0x232>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032a0:	68a3      	ldr	r3, [r4, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 8104 	bne.w	80034b0 <HAL_SPI_TransmitReceive+0x23a>
 80032a8:	2904      	cmp	r1, #4
 80032aa:	f040 8103 	bne.w	80034b4 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032ae:	f1b8 0f00 	cmp.w	r8, #0
 80032b2:	f000 8101 	beq.w	80034b8 <HAL_SPI_TransmitReceive+0x242>
 80032b6:	f1b9 0f00 	cmp.w	r9, #0
 80032ba:	f000 80ff 	beq.w	80034bc <HAL_SPI_TransmitReceive+0x246>
 80032be:	2f00      	cmp	r7, #0
 80032c0:	f000 80fe 	beq.w	80034c0 <HAL_SPI_TransmitReceive+0x24a>
  __HAL_LOCK(hspi);
 80032c4:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f000 80fb 	beq.w	80034c4 <HAL_SPI_TransmitReceive+0x24e>
 80032ce:	2301      	movs	r3, #1
 80032d0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032d4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d002      	beq.n	80032e2 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032dc:	2305      	movs	r3, #5
 80032de:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032e6:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80032ea:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80032ec:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80032ee:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80032f2:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80032f4:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 80032f6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80032f8:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003302:	d103      	bne.n	800330c <HAL_SPI_TransmitReceive+0x96>
    __HAL_SPI_ENABLE(hspi);
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800330a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800330c:	68e3      	ldr	r3, [r4, #12]
 800330e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003312:	d011      	beq.n	8003338 <HAL_SPI_TransmitReceive+0xc2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003314:	6863      	ldr	r3, [r4, #4]
 8003316:	b10b      	cbz	r3, 800331c <HAL_SPI_TransmitReceive+0xa6>
 8003318:	2f01      	cmp	r7, #1
 800331a:	d10b      	bne.n	8003334 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800331c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003324:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003326:	3301      	adds	r3, #1
 8003328:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800332a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29b      	uxth	r3, r3
 8003332:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003334:	2701      	movs	r7, #1
 8003336:	e071      	b.n	800341c <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	b10b      	cbz	r3, 8003340 <HAL_SPI_TransmitReceive+0xca>
 800333c:	2f01      	cmp	r7, #1
 800333e:	d10b      	bne.n	8003358 <HAL_SPI_TransmitReceive+0xe2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003340:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	8812      	ldrh	r2, [r2, #0]
 8003346:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003348:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800334a:	3302      	adds	r3, #2
 800334c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800334e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29b      	uxth	r3, r3
 8003356:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003358:	2701      	movs	r7, #1
 800335a:	e01b      	b.n	8003394 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	f012 0f01 	tst.w	r2, #1
 8003364:	d00e      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x10e>
 8003366:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003368:	b292      	uxth	r2, r2
 800336a:	b15a      	cbz	r2, 8003384 <HAL_SPI_TransmitReceive+0x10e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003370:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003372:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003374:	3302      	adds	r3, #2
 8003376:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003378:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003382:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003384:	f7fe f94a 	bl	800161c <HAL_GetTick>
 8003388:	1b80      	subs	r0, r0, r6
 800338a:	42a8      	cmp	r0, r5
 800338c:	d302      	bcc.n	8003394 <HAL_SPI_TransmitReceive+0x11e>
 800338e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003392:	d11e      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003394:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003396:	b29b      	uxth	r3, r3
 8003398:	b91b      	cbnz	r3, 80033a2 <HAL_SPI_TransmitReceive+0x12c>
 800339a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d062      	beq.n	8003468 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	f012 0f02 	tst.w	r2, #2
 80033aa:	d0d7      	beq.n	800335c <HAL_SPI_TransmitReceive+0xe6>
 80033ac:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80033ae:	b292      	uxth	r2, r2
 80033b0:	2a00      	cmp	r2, #0
 80033b2:	d0d3      	beq.n	800335c <HAL_SPI_TransmitReceive+0xe6>
 80033b4:	2f00      	cmp	r7, #0
 80033b6:	d0d1      	beq.n	800335c <HAL_SPI_TransmitReceive+0xe6>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033b8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80033ba:	8812      	ldrh	r2, [r2, #0]
 80033bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80033c0:	3302      	adds	r3, #2
 80033c2:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80033c4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80033ce:	2700      	movs	r7, #0
 80033d0:	e7c4      	b.n	800335c <HAL_SPI_TransmitReceive+0xe6>
        hspi->State = HAL_SPI_STATE_READY;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80033d8:	2300      	movs	r3, #0
 80033da:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80033de:	2003      	movs	r0, #3
 80033e0:	e063      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	f012 0f01 	tst.w	r2, #1
 80033ea:	d00e      	beq.n	800340a <HAL_SPI_TransmitReceive+0x194>
 80033ec:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80033ee:	b292      	uxth	r2, r2
 80033f0:	b15a      	cbz	r2, 800340a <HAL_SPI_TransmitReceive+0x194>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033fa:	3301      	adds	r3, #1
 80033fc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80033fe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003408:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800340a:	f7fe f907 	bl	800161c <HAL_GetTick>
 800340e:	1b83      	subs	r3, r0, r6
 8003410:	42ab      	cmp	r3, r5
 8003412:	d302      	bcc.n	800341a <HAL_SPI_TransmitReceive+0x1a4>
 8003414:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003418:	d11e      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x1e2>
 800341a:	b1ed      	cbz	r5, 8003458 <HAL_SPI_TransmitReceive+0x1e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800341c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800341e:	b29b      	uxth	r3, r3
 8003420:	b913      	cbnz	r3, 8003428 <HAL_SPI_TransmitReceive+0x1b2>
 8003422:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003424:	b29b      	uxth	r3, r3
 8003426:	b1fb      	cbz	r3, 8003468 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	f012 0f02 	tst.w	r2, #2
 8003430:	d0d7      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x16c>
 8003432:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003434:	b292      	uxth	r2, r2
 8003436:	2a00      	cmp	r2, #0
 8003438:	d0d3      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x16c>
 800343a:	2f00      	cmp	r7, #0
 800343c:	d0d1      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x16c>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800343e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003440:	7812      	ldrb	r2, [r2, #0]
 8003442:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003444:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003446:	3301      	adds	r3, #1
 8003448:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800344a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29b      	uxth	r3, r3
 8003452:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003454:	2700      	movs	r7, #0
 8003456:	e7c4      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x16c>
        hspi->State = HAL_SPI_STATE_READY;
 8003458:	2301      	movs	r3, #1
 800345a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800345e:	2300      	movs	r3, #0
 8003460:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003464:	2003      	movs	r0, #3
 8003466:	e020      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003468:	4632      	mov	r2, r6
 800346a:	4629      	mov	r1, r5
 800346c:	4620      	mov	r0, r4
 800346e:	f7ff fe63 	bl	8003138 <SPI_EndRxTxTransaction>
 8003472:	b990      	cbnz	r0, 800349a <HAL_SPI_TransmitReceive+0x224>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003474:	68a3      	ldr	r3, [r4, #8]
 8003476:	b933      	cbnz	r3, 8003486 <HAL_SPI_TransmitReceive+0x210>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	9201      	str	r2, [sp, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003486:	2301      	movs	r3, #1
 8003488:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800348c:	2300      	movs	r3, #0
 800348e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003492:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003494:	b14b      	cbz	r3, 80034aa <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 8003496:	2001      	movs	r0, #1
 8003498:	e007      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800349a:	2320      	movs	r3, #32
 800349c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800349e:	2300      	movs	r3, #0
 80034a0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80034a4:	2001      	movs	r0, #1
 80034a6:	e000      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>
    return HAL_BUSY;
 80034a8:	2002      	movs	r0, #2
}
 80034aa:	b003      	add	sp, #12
 80034ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80034b0:	2002      	movs	r0, #2
 80034b2:	e7fa      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>
 80034b4:	2002      	movs	r0, #2
 80034b6:	e7f8      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>
    return HAL_ERROR;
 80034b8:	2001      	movs	r0, #1
 80034ba:	e7f6      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>
 80034bc:	2001      	movs	r0, #1
 80034be:	e7f4      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>
 80034c0:	2001      	movs	r0, #1
 80034c2:	e7f2      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>
  __HAL_LOCK(hspi);
 80034c4:	2002      	movs	r0, #2
 80034c6:	e7f0      	b.n	80034aa <HAL_SPI_TransmitReceive+0x234>

080034c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034cc:	6a02      	ldr	r2, [r0, #32]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d6:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034d8:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	680c      	ldr	r4, [r1, #0]
 80034de:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034e2:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034e6:	688b      	ldr	r3, [r1, #8]
 80034e8:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034ec:	4d11      	ldr	r5, [pc, #68]	@ (8003534 <TIM_OC1_SetConfig+0x6c>)
 80034ee:	42a8      	cmp	r0, r5
 80034f0:	d003      	beq.n	80034fa <TIM_OC1_SetConfig+0x32>
 80034f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80034f6:	42a8      	cmp	r0, r5
 80034f8:	d105      	bne.n	8003506 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034fa:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034fe:	68cd      	ldr	r5, [r1, #12]
 8003500:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003502:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	4d0b      	ldr	r5, [pc, #44]	@ (8003534 <TIM_OC1_SetConfig+0x6c>)
 8003508:	42a8      	cmp	r0, r5
 800350a:	d003      	beq.n	8003514 <TIM_OC1_SetConfig+0x4c>
 800350c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003510:	42a8      	cmp	r0, r5
 8003512:	d107      	bne.n	8003524 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003514:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003518:	694d      	ldr	r5, [r1, #20]
 800351a:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800351e:	698a      	ldr	r2, [r1, #24]
 8003520:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003524:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003526:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003528:	684a      	ldr	r2, [r1, #4]
 800352a:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352c:	6203      	str	r3, [r0, #32]
}
 800352e:	bc30      	pop	{r4, r5}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000

08003538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800353c:	6a02      	ldr	r2, [r0, #32]
 800353e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003542:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003546:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003548:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800354c:	680c      	ldr	r4, [r1, #0]
 800354e:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003552:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003556:	688c      	ldr	r4, [r1, #8]
 8003558:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800355c:	4c11      	ldr	r4, [pc, #68]	@ (80035a4 <TIM_OC3_SetConfig+0x6c>)
 800355e:	42a0      	cmp	r0, r4
 8003560:	d003      	beq.n	800356a <TIM_OC3_SetConfig+0x32>
 8003562:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003566:	42a0      	cmp	r0, r4
 8003568:	d106      	bne.n	8003578 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800356a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800356e:	68cc      	ldr	r4, [r1, #12]
 8003570:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003574:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003578:	4c0a      	ldr	r4, [pc, #40]	@ (80035a4 <TIM_OC3_SetConfig+0x6c>)
 800357a:	42a0      	cmp	r0, r4
 800357c:	d003      	beq.n	8003586 <TIM_OC3_SetConfig+0x4e>
 800357e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003582:	42a0      	cmp	r0, r4
 8003584:	d107      	bne.n	8003596 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003586:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800358a:	694c      	ldr	r4, [r1, #20]
 800358c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003590:	698c      	ldr	r4, [r1, #24]
 8003592:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003598:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800359a:	684a      	ldr	r2, [r1, #4]
 800359c:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359e:	6203      	str	r3, [r0, #32]
}
 80035a0:	bc30      	pop	{r4, r5}
 80035a2:	4770      	bx	lr
 80035a4:	40010000 	.word	0x40010000

080035a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ac:	6a02      	ldr	r2, [r0, #32]
 80035ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035b2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035bc:	680d      	ldr	r5, [r1, #0]
 80035be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035c6:	688d      	ldr	r5, [r1, #8]
 80035c8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035cc:	4d09      	ldr	r5, [pc, #36]	@ (80035f4 <TIM_OC4_SetConfig+0x4c>)
 80035ce:	42a8      	cmp	r0, r5
 80035d0:	d003      	beq.n	80035da <TIM_OC4_SetConfig+0x32>
 80035d2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80035d6:	42a8      	cmp	r0, r5
 80035d8:	d104      	bne.n	80035e4 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035da:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035de:	694d      	ldr	r5, [r1, #20]
 80035e0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035e8:	684a      	ldr	r2, [r1, #4]
 80035ea:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ec:	6203      	str	r3, [r0, #32]
}
 80035ee:	bc30      	pop	{r4, r5}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000

080035f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035fa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fc:	6a04      	ldr	r4, [r0, #32]
 80035fe:	f024 0401 	bic.w	r4, r4, #1
 8003602:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003604:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003606:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800360a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003612:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003614:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003616:	6203      	str	r3, [r0, #32]
}
 8003618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800361c:	4770      	bx	lr

0800361e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003620:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003622:	6a04      	ldr	r4, [r0, #32]
 8003624:	f024 0410 	bic.w	r4, r4, #16
 8003628:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800362c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003630:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003634:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003638:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800363c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800363e:	6203      	str	r3, [r0, #32]
}
 8003640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003644:	4770      	bx	lr

08003646 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003646:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800364c:	430b      	orrs	r3, r1
 800364e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003652:	6083      	str	r3, [r0, #8]
}
 8003654:	4770      	bx	lr
	...

08003658 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003658:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800365c:	2b01      	cmp	r3, #1
 800365e:	d137      	bne.n	80036d0 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	2302      	movs	r3, #2
 8003662:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003666:	6802      	ldr	r2, [r0, #0]
 8003668:	68d3      	ldr	r3, [r2, #12]
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	6803      	ldr	r3, [r0, #0]
 8003672:	4a19      	ldr	r2, [pc, #100]	@ (80036d8 <HAL_TIM_Base_Start_IT+0x80>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d020      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x62>
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367c:	d01d      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x62>
 800367e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003682:	4293      	cmp	r3, r2
 8003684:	d019      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x62>
 8003686:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800368a:	4293      	cmp	r3, r2
 800368c:	d015      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x62>
 800368e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003692:	4293      	cmp	r3, r2
 8003694:	d011      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x62>
 8003696:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800369a:	4293      	cmp	r3, r2
 800369c:	d00d      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x62>
 800369e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d009      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x62>
 80036a6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d005      	beq.n	80036ba <HAL_TIM_Base_Start_IT+0x62>
    __HAL_TIM_ENABLE(htim);
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80036b6:	2000      	movs	r0, #0
 80036b8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c0:	2a06      	cmp	r2, #6
 80036c2:	d007      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80036cc:	2000      	movs	r0, #0
 80036ce:	4770      	bx	lr
    return HAL_ERROR;
 80036d0:	2001      	movs	r0, #1
 80036d2:	4770      	bx	lr
  return HAL_OK;
 80036d4:	2000      	movs	r0, #0
}
 80036d6:	4770      	bx	lr
 80036d8:	40010000 	.word	0x40010000

080036dc <HAL_TIM_PWM_MspInit>:
}
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_OC_DelayElapsedCallback>:
}
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_IC_CaptureCallback>:
}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80036e2:	4770      	bx	lr

080036e4 <HAL_TIM_TriggerCallback>:
}
 80036e4:	4770      	bx	lr

080036e6 <HAL_TIM_IRQHandler>:
{
 80036e6:	b570      	push	{r4, r5, r6, lr}
 80036e8:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80036ea:	6803      	ldr	r3, [r0, #0]
 80036ec:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036ee:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036f0:	f015 0f02 	tst.w	r5, #2
 80036f4:	d010      	beq.n	8003718 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036f6:	f016 0f02 	tst.w	r6, #2
 80036fa:	d00d      	beq.n	8003718 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036fc:	f06f 0202 	mvn.w	r2, #2
 8003700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003702:	2301      	movs	r3, #1
 8003704:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003706:	6803      	ldr	r3, [r0, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f013 0f03 	tst.w	r3, #3
 800370e:	d05e      	beq.n	80037ce <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8003710:	f7ff ffe6 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003714:	2300      	movs	r3, #0
 8003716:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003718:	f015 0f04 	tst.w	r5, #4
 800371c:	d012      	beq.n	8003744 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800371e:	f016 0f04 	tst.w	r6, #4
 8003722:	d00f      	beq.n	8003744 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	f06f 0204 	mvn.w	r2, #4
 800372a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372c:	2302      	movs	r3, #2
 800372e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003738:	d04f      	beq.n	80037da <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff ffd0 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003740:	2300      	movs	r3, #0
 8003742:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003744:	f015 0f08 	tst.w	r5, #8
 8003748:	d012      	beq.n	8003770 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800374a:	f016 0f08 	tst.w	r6, #8
 800374e:	d00f      	beq.n	8003770 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	f06f 0208 	mvn.w	r2, #8
 8003756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003758:	2304      	movs	r3, #4
 800375a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f013 0f03 	tst.w	r3, #3
 8003764:	d040      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	4620      	mov	r0, r4
 8003768:	f7ff ffba 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376c:	2300      	movs	r3, #0
 800376e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003770:	f015 0f10 	tst.w	r5, #16
 8003774:	d012      	beq.n	800379c <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003776:	f016 0f10 	tst.w	r6, #16
 800377a:	d00f      	beq.n	800379c <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	f06f 0210 	mvn.w	r2, #16
 8003782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003784:	2308      	movs	r3, #8
 8003786:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003790:	d031      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff ffa4 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003798:	2300      	movs	r3, #0
 800379a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800379c:	f015 0f01 	tst.w	r5, #1
 80037a0:	d002      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037a2:	f016 0f01 	tst.w	r6, #1
 80037a6:	d12d      	bne.n	8003804 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037a8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80037ac:	d002      	beq.n	80037b4 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037ae:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80037b2:	d12f      	bne.n	8003814 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037b4:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80037b8:	d002      	beq.n	80037c0 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037ba:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80037be:	d131      	bne.n	8003824 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037c0:	f015 0f20 	tst.w	r5, #32
 80037c4:	d002      	beq.n	80037cc <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037c6:	f016 0f20 	tst.w	r6, #32
 80037ca:	d133      	bne.n	8003834 <HAL_TIM_IRQHandler+0x14e>
}
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	f7ff ff86 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff ff85 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
 80037d8:	e79c      	b.n	8003714 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff ff7f 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff ff7e 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
 80037e6:	e7ab      	b.n	8003740 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7ff ff78 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7ff ff77 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
 80037f4:	e7ba      	b.n	800376c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7ff ff71 	bl	80036de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	4620      	mov	r0, r4
 80037fe:	f7ff ff70 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003802:	e7c9      	b.n	8003798 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	f06f 0201 	mvn.w	r2, #1
 800380a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800380c:	4620      	mov	r0, r4
 800380e:	f7fd fbb5 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
 8003812:	e7c9      	b.n	80037a8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800381a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800381c:	4620      	mov	r0, r4
 800381e:	f000 fc35 	bl	800408c <HAL_TIMEx_BreakCallback>
 8003822:	e7c7      	b.n	80037b4 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800382a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800382c:	4620      	mov	r0, r4
 800382e:	f7ff ff59 	bl	80036e4 <HAL_TIM_TriggerCallback>
 8003832:	e7c5      	b.n	80037c0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	f06f 0220 	mvn.w	r2, #32
 800383a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800383c:	4620      	mov	r0, r4
 800383e:	f000 fc24 	bl	800408a <HAL_TIMEx_CommutCallback>
}
 8003842:	e7c3      	b.n	80037cc <HAL_TIM_IRQHandler+0xe6>

08003844 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003844:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003846:	4a34      	ldr	r2, [pc, #208]	@ (8003918 <TIM_Base_SetConfig+0xd4>)
 8003848:	4290      	cmp	r0, r2
 800384a:	d012      	beq.n	8003872 <TIM_Base_SetConfig+0x2e>
 800384c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003850:	d00f      	beq.n	8003872 <TIM_Base_SetConfig+0x2e>
 8003852:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003856:	4290      	cmp	r0, r2
 8003858:	d00b      	beq.n	8003872 <TIM_Base_SetConfig+0x2e>
 800385a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800385e:	4290      	cmp	r0, r2
 8003860:	d007      	beq.n	8003872 <TIM_Base_SetConfig+0x2e>
 8003862:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003866:	4290      	cmp	r0, r2
 8003868:	d003      	beq.n	8003872 <TIM_Base_SetConfig+0x2e>
 800386a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800386e:	4290      	cmp	r0, r2
 8003870:	d103      	bne.n	800387a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003876:	684a      	ldr	r2, [r1, #4]
 8003878:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387a:	4a27      	ldr	r2, [pc, #156]	@ (8003918 <TIM_Base_SetConfig+0xd4>)
 800387c:	4290      	cmp	r0, r2
 800387e:	d02a      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 8003880:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003884:	d027      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 8003886:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800388a:	4290      	cmp	r0, r2
 800388c:	d023      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 800388e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003892:	4290      	cmp	r0, r2
 8003894:	d01f      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 8003896:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800389a:	4290      	cmp	r0, r2
 800389c:	d01b      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 800389e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80038a2:	4290      	cmp	r0, r2
 80038a4:	d017      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 80038a6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80038aa:	4290      	cmp	r0, r2
 80038ac:	d013      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 80038ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038b2:	4290      	cmp	r0, r2
 80038b4:	d00f      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 80038b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038ba:	4290      	cmp	r0, r2
 80038bc:	d00b      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 80038be:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80038c2:	4290      	cmp	r0, r2
 80038c4:	d007      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 80038c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038ca:	4290      	cmp	r0, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_Base_SetConfig+0x92>
 80038ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038d2:	4290      	cmp	r0, r2
 80038d4:	d103      	bne.n	80038de <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038da:	68ca      	ldr	r2, [r1, #12]
 80038dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e2:	694a      	ldr	r2, [r1, #20]
 80038e4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80038e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e8:	688b      	ldr	r3, [r1, #8]
 80038ea:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038ec:	680b      	ldr	r3, [r1, #0]
 80038ee:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f0:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <TIM_Base_SetConfig+0xd4>)
 80038f2:	4298      	cmp	r0, r3
 80038f4:	d003      	beq.n	80038fe <TIM_Base_SetConfig+0xba>
 80038f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038fa:	4298      	cmp	r0, r3
 80038fc:	d101      	bne.n	8003902 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80038fe:	690b      	ldr	r3, [r1, #16]
 8003900:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003902:	2301      	movs	r3, #1
 8003904:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003906:	6903      	ldr	r3, [r0, #16]
 8003908:	f013 0f01 	tst.w	r3, #1
 800390c:	d003      	beq.n	8003916 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800390e:	6903      	ldr	r3, [r0, #16]
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6103      	str	r3, [r0, #16]
}
 8003916:	4770      	bx	lr
 8003918:	40010000 	.word	0x40010000

0800391c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800391c:	b340      	cbz	r0, 8003970 <HAL_TIM_Base_Init+0x54>
{
 800391e:	b510      	push	{r4, lr}
 8003920:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003922:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003926:	b1f3      	cbz	r3, 8003966 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	2302      	movs	r3, #2
 800392a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392e:	4621      	mov	r1, r4
 8003930:	f851 0b04 	ldr.w	r0, [r1], #4
 8003934:	f7ff ff86 	bl	8003844 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003938:	2301      	movs	r3, #1
 800393a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003942:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003946:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800394a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003956:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800395a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800395e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003962:	2000      	movs	r0, #0
}
 8003964:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003966:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800396a:	f001 fc31 	bl	80051d0 <HAL_TIM_Base_MspInit>
 800396e:	e7db      	b.n	8003928 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003970:	2001      	movs	r0, #1
}
 8003972:	4770      	bx	lr

08003974 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003974:	b340      	cbz	r0, 80039c8 <HAL_TIM_PWM_Init+0x54>
{
 8003976:	b510      	push	{r4, lr}
 8003978:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800397a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800397e:	b1f3      	cbz	r3, 80039be <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	2302      	movs	r3, #2
 8003982:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003986:	4621      	mov	r1, r4
 8003988:	f851 0b04 	ldr.w	r0, [r1], #4
 800398c:	f7ff ff5a 	bl	8003844 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003990:	2301      	movs	r3, #1
 8003992:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003996:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800399a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800399e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80039a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80039b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80039b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80039ba:	2000      	movs	r0, #0
}
 80039bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80039be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80039c2:	f7ff fe8b 	bl	80036dc <HAL_TIM_PWM_MspInit>
 80039c6:	e7db      	b.n	8003980 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80039c8:	2001      	movs	r0, #1
}
 80039ca:	4770      	bx	lr

080039cc <TIM_OC2_SetConfig>:
{
 80039cc:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80039ce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d0:	6a02      	ldr	r2, [r0, #32]
 80039d2:	f022 0210 	bic.w	r2, r2, #16
 80039d6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80039d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80039da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039dc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e0:	680d      	ldr	r5, [r1, #0]
 80039e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80039e6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039ea:	688d      	ldr	r5, [r1, #8]
 80039ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f0:	4d11      	ldr	r5, [pc, #68]	@ (8003a38 <TIM_OC2_SetConfig+0x6c>)
 80039f2:	42a8      	cmp	r0, r5
 80039f4:	d003      	beq.n	80039fe <TIM_OC2_SetConfig+0x32>
 80039f6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80039fa:	42a8      	cmp	r0, r5
 80039fc:	d106      	bne.n	8003a0c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 80039fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a02:	68cd      	ldr	r5, [r1, #12]
 8003a04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	4d0a      	ldr	r5, [pc, #40]	@ (8003a38 <TIM_OC2_SetConfig+0x6c>)
 8003a0e:	42a8      	cmp	r0, r5
 8003a10:	d003      	beq.n	8003a1a <TIM_OC2_SetConfig+0x4e>
 8003a12:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003a16:	42a8      	cmp	r0, r5
 8003a18:	d107      	bne.n	8003a2a <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a1a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a1e:	694d      	ldr	r5, [r1, #20]
 8003a20:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a24:	698d      	ldr	r5, [r1, #24]
 8003a26:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003a2a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a2c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a2e:	684a      	ldr	r2, [r1, #4]
 8003a30:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003a32:	6203      	str	r3, [r0, #32]
}
 8003a34:	bc30      	pop	{r4, r5}
 8003a36:	4770      	bx	lr
 8003a38:	40010000 	.word	0x40010000

08003a3c <HAL_TIM_PWM_ConfigChannel>:
{
 8003a3c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003a3e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d066      	beq.n	8003b14 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003a46:	4604      	mov	r4, r0
 8003a48:	460d      	mov	r5, r1
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003a50:	2a0c      	cmp	r2, #12
 8003a52:	d85a      	bhi.n	8003b0a <HAL_TIM_PWM_ConfigChannel+0xce>
 8003a54:	e8df f002 	tbb	[pc, r2]
 8003a58:	59595907 	.word	0x59595907
 8003a5c:	5959591b 	.word	0x5959591b
 8003a60:	59595930 	.word	0x59595930
 8003a64:	44          	.byte	0x44
 8003a65:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a66:	6800      	ldr	r0, [r0, #0]
 8003a68:	f7ff fd2e 	bl	80034c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	6993      	ldr	r3, [r2, #24]
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a76:	6822      	ldr	r2, [r4, #0]
 8003a78:	6993      	ldr	r3, [r2, #24]
 8003a7a:	f023 0304 	bic.w	r3, r3, #4
 8003a7e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a80:	6822      	ldr	r2, [r4, #0]
 8003a82:	6993      	ldr	r3, [r2, #24]
 8003a84:	6929      	ldr	r1, [r5, #16]
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2000      	movs	r0, #0
      break;
 8003a8c:	e03e      	b.n	8003b0c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a8e:	6800      	ldr	r0, [r0, #0]
 8003a90:	f7ff ff9c 	bl	80039cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	6993      	ldr	r3, [r2, #24]
 8003a98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a9c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	6993      	ldr	r3, [r2, #24]
 8003aa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aa6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aa8:	6822      	ldr	r2, [r4, #0]
 8003aaa:	6993      	ldr	r3, [r2, #24]
 8003aac:	6929      	ldr	r1, [r5, #16]
 8003aae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ab2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab4:	2000      	movs	r0, #0
      break;
 8003ab6:	e029      	b.n	8003b0c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab8:	6800      	ldr	r0, [r0, #0]
 8003aba:	f7ff fd3d 	bl	8003538 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003abe:	6822      	ldr	r2, [r4, #0]
 8003ac0:	69d3      	ldr	r3, [r2, #28]
 8003ac2:	f043 0308 	orr.w	r3, r3, #8
 8003ac6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac8:	6822      	ldr	r2, [r4, #0]
 8003aca:	69d3      	ldr	r3, [r2, #28]
 8003acc:	f023 0304 	bic.w	r3, r3, #4
 8003ad0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	69d3      	ldr	r3, [r2, #28]
 8003ad6:	6929      	ldr	r1, [r5, #16]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2000      	movs	r0, #0
      break;
 8003ade:	e015      	b.n	8003b0c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ae0:	6800      	ldr	r0, [r0, #0]
 8003ae2:	f7ff fd61 	bl	80035a8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae6:	6822      	ldr	r2, [r4, #0]
 8003ae8:	69d3      	ldr	r3, [r2, #28]
 8003aea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003aee:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	69d3      	ldr	r3, [r2, #28]
 8003af4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003af8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003afa:	6822      	ldr	r2, [r4, #0]
 8003afc:	69d3      	ldr	r3, [r2, #28]
 8003afe:	6929      	ldr	r1, [r5, #16]
 8003b00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b04:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2000      	movs	r0, #0
      break;
 8003b08:	e000      	b.n	8003b0c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003b0a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003b14:	2002      	movs	r0, #2
 8003b16:	e7fc      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0xd6>

08003b18 <TIM_TI1_SetConfig>:
{
 8003b18:	b470      	push	{r4, r5, r6}
 8003b1a:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 8003b1c:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1e:	6a04      	ldr	r4, [r0, #32]
 8003b20:	f024 0401 	bic.w	r4, r4, #1
 8003b24:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b26:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b28:	4d18      	ldr	r5, [pc, #96]	@ (8003b8c <TIM_TI1_SetConfig+0x74>)
 8003b2a:	42a8      	cmp	r0, r5
 8003b2c:	d01c      	beq.n	8003b68 <TIM_TI1_SetConfig+0x50>
 8003b2e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003b32:	d019      	beq.n	8003b68 <TIM_TI1_SetConfig+0x50>
 8003b34:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <TIM_TI1_SetConfig+0x78>)
 8003b36:	4290      	cmp	r0, r2
 8003b38:	d016      	beq.n	8003b68 <TIM_TI1_SetConfig+0x50>
 8003b3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b3e:	4290      	cmp	r0, r2
 8003b40:	d012      	beq.n	8003b68 <TIM_TI1_SetConfig+0x50>
 8003b42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b46:	4290      	cmp	r0, r2
 8003b48:	d00e      	beq.n	8003b68 <TIM_TI1_SetConfig+0x50>
 8003b4a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003b4e:	4290      	cmp	r0, r2
 8003b50:	d00a      	beq.n	8003b68 <TIM_TI1_SetConfig+0x50>
 8003b52:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003b56:	4290      	cmp	r0, r2
 8003b58:	d006      	beq.n	8003b68 <TIM_TI1_SetConfig+0x50>
 8003b5a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003b5e:	4290      	cmp	r0, r2
 8003b60:	d002      	beq.n	8003b68 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b62:	f044 0201 	orr.w	r2, r4, #1
 8003b66:	e003      	b.n	8003b70 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b68:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003b6c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b70:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b7a:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b7e:	f001 010a 	and.w	r1, r1, #10
 8003b82:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8003b84:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b86:	6201      	str	r1, [r0, #32]
}
 8003b88:	bc70      	pop	{r4, r5, r6}
 8003b8a:	4770      	bx	lr
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40000400 	.word	0x40000400

08003b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b94:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b96:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b9c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	6082      	str	r2, [r0, #8]
}
 8003ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003bae:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d078      	beq.n	8003ca8 <HAL_TIM_ConfigClockSource+0xfa>
{
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003bc6:	6802      	ldr	r2, [r0, #0]
 8003bc8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003bd2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003bd4:	680b      	ldr	r3, [r1, #0]
 8003bd6:	2b60      	cmp	r3, #96	@ 0x60
 8003bd8:	d04c      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0xc6>
 8003bda:	d823      	bhi.n	8003c24 <HAL_TIM_ConfigClockSource+0x76>
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	d054      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xdc>
 8003be0:	d811      	bhi.n	8003c06 <HAL_TIM_ConfigClockSource+0x58>
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x40>
 8003be6:	d80a      	bhi.n	8003bfe <HAL_TIM_ConfigClockSource+0x50>
 8003be8:	b10b      	cbz	r3, 8003bee <HAL_TIM_ConfigClockSource+0x40>
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d105      	bne.n	8003bfa <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6820      	ldr	r0, [r4, #0]
 8003bf2:	f7ff fd28 	bl	8003646 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2000      	movs	r0, #0
      break;
 8003bf8:	e028      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	e026      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003bfe:	2b30      	cmp	r3, #48	@ 0x30
 8003c00:	d0f5      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8003c02:	2001      	movs	r0, #1
 8003c04:	e022      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003c06:	2b50      	cmp	r3, #80	@ 0x50
 8003c08:	d10a      	bne.n	8003c20 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0a:	68ca      	ldr	r2, [r1, #12]
 8003c0c:	6849      	ldr	r1, [r1, #4]
 8003c0e:	6800      	ldr	r0, [r0, #0]
 8003c10:	f7ff fcf2 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c14:	2150      	movs	r1, #80	@ 0x50
 8003c16:	6820      	ldr	r0, [r4, #0]
 8003c18:	f7ff fd15 	bl	8003646 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c1c:	2000      	movs	r0, #0
      break;
 8003c1e:	e015      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003c20:	2001      	movs	r0, #1
 8003c22:	e013      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c28:	d03a      	beq.n	8003ca0 <HAL_TIM_ConfigClockSource+0xf2>
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2e:	d014      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0xac>
 8003c30:	2b70      	cmp	r3, #112	@ 0x70
 8003c32:	d137      	bne.n	8003ca4 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003c34:	68cb      	ldr	r3, [r1, #12]
 8003c36:	684a      	ldr	r2, [r1, #4]
 8003c38:	6889      	ldr	r1, [r1, #8]
 8003c3a:	6800      	ldr	r0, [r0, #0]
 8003c3c:	f7ff ffaa 	bl	8003b94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c40:	6822      	ldr	r2, [r4, #0]
 8003c42:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003c48:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003c52:	2300      	movs	r3, #0
 8003c54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003c58:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8003c5a:	68cb      	ldr	r3, [r1, #12]
 8003c5c:	684a      	ldr	r2, [r1, #4]
 8003c5e:	6889      	ldr	r1, [r1, #8]
 8003c60:	6800      	ldr	r0, [r0, #0]
 8003c62:	f7ff ff97 	bl	8003b94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	6893      	ldr	r3, [r2, #8]
 8003c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c6e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c70:	2000      	movs	r0, #0
      break;
 8003c72:	e7eb      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c74:	68ca      	ldr	r2, [r1, #12]
 8003c76:	6849      	ldr	r1, [r1, #4]
 8003c78:	6800      	ldr	r0, [r0, #0]
 8003c7a:	f7ff fcd0 	bl	800361e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c7e:	2160      	movs	r1, #96	@ 0x60
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	f7ff fce0 	bl	8003646 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2000      	movs	r0, #0
      break;
 8003c88:	e7e0      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	68ca      	ldr	r2, [r1, #12]
 8003c8c:	6849      	ldr	r1, [r1, #4]
 8003c8e:	6800      	ldr	r0, [r0, #0]
 8003c90:	f7ff fcb2 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c94:	2140      	movs	r1, #64	@ 0x40
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	f7ff fcd5 	bl	8003646 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003c9c:	2000      	movs	r0, #0
      break;
 8003c9e:	e7d5      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	e7d3      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	e7d1      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8003ca8:	2002      	movs	r0, #2
}
 8003caa:	4770      	bx	lr

08003cac <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cac:	f001 011f 	and.w	r1, r1, #31
 8003cb0:	f04f 0c01 	mov.w	ip, #1
 8003cb4:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cb8:	6a03      	ldr	r3, [r0, #32]
 8003cba:	ea23 030c 	bic.w	r3, r3, ip
 8003cbe:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cc0:	6a03      	ldr	r3, [r0, #32]
 8003cc2:	408a      	lsls	r2, r1
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	6203      	str	r3, [r0, #32]
}
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_TIM_PWM_Start>:
{
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	2900      	cmp	r1, #0
 8003cd4:	d141      	bne.n	8003d5a <HAL_TIM_PWM_Start+0x8e>
 8003cd6:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	bf18      	it	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d16b      	bne.n	8003dbc <HAL_TIM_PWM_Start+0xf0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d14e      	bne.n	8003d86 <HAL_TIM_PWM_Start+0xba>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cee:	2201      	movs	r2, #1
 8003cf0:	4601      	mov	r1, r0
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	f7ff ffda 	bl	8003cac <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	4a32      	ldr	r2, [pc, #200]	@ (8003dc4 <HAL_TIM_PWM_Start+0xf8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <HAL_TIM_PWM_Start+0x3c>
 8003d00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d103      	bne.n	8003d10 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8003d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d0e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc4 <HAL_TIM_PWM_Start+0xf8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d046      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xda>
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1c:	d043      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xda>
 8003d1e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d03f      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xda>
 8003d26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d03b      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xda>
 8003d2e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d037      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xda>
 8003d36:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d033      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xda>
 8003d3e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02f      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xda>
 8003d46:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02b      	beq.n	8003da6 <HAL_TIM_PWM_Start+0xda>
    __HAL_TIM_ENABLE(htim);
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d56:	2000      	movs	r0, #0
 8003d58:	e02f      	b.n	8003dba <HAL_TIM_PWM_Start+0xee>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d5a:	2904      	cmp	r1, #4
 8003d5c:	d007      	beq.n	8003d6e <HAL_TIM_PWM_Start+0xa2>
 8003d5e:	2908      	cmp	r1, #8
 8003d60:	d00b      	beq.n	8003d7a <HAL_TIM_PWM_Start+0xae>
 8003d62:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003d66:	3b01      	subs	r3, #1
 8003d68:	bf18      	it	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	e7b8      	b.n	8003ce0 <HAL_TIM_PWM_Start+0x14>
 8003d6e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003d72:	3b01      	subs	r3, #1
 8003d74:	bf18      	it	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	e7b2      	b.n	8003ce0 <HAL_TIM_PWM_Start+0x14>
 8003d7a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	bf18      	it	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	e7ac      	b.n	8003ce0 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d86:	2804      	cmp	r0, #4
 8003d88:	d005      	beq.n	8003d96 <HAL_TIM_PWM_Start+0xca>
 8003d8a:	2808      	cmp	r0, #8
 8003d8c:	d007      	beq.n	8003d9e <HAL_TIM_PWM_Start+0xd2>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003d94:	e7ab      	b.n	8003cee <HAL_TIM_PWM_Start+0x22>
 8003d96:	2302      	movs	r3, #2
 8003d98:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003d9c:	e7a7      	b.n	8003cee <HAL_TIM_PWM_Start+0x22>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003da4:	e7a3      	b.n	8003cee <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dac:	2a06      	cmp	r2, #6
 8003dae:	d007      	beq.n	8003dc0 <HAL_TIM_PWM_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003db8:	2000      	movs	r0, #0
}
 8003dba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	e7fc      	b.n	8003dba <HAL_TIM_PWM_Start+0xee>
  return HAL_OK;
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	e7fa      	b.n	8003dba <HAL_TIM_PWM_Start+0xee>
 8003dc4:	40010000 	.word	0x40010000

08003dc8 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003dc8:	f001 010f 	and.w	r1, r1, #15
 8003dcc:	f04f 0c04 	mov.w	ip, #4
 8003dd0:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003dd4:	6a03      	ldr	r3, [r0, #32]
 8003dd6:	ea23 030c 	bic.w	r3, r3, ip
 8003dda:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003ddc:	6a03      	ldr	r3, [r0, #32]
 8003dde:	408a      	lsls	r2, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	6203      	str	r3, [r0, #32]
}
 8003de4:	4770      	bx	lr

08003de6 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d065      	beq.n	8003eb6 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 8003dea:	b570      	push	{r4, r5, r6, lr}
 8003dec:	b088      	sub	sp, #32
 8003dee:	460e      	mov	r6, r1
 8003df0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003df2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d058      	beq.n	8003eac <HAL_TIMEx_HallSensor_Init+0xc6>
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	4621      	mov	r1, r4
 8003e02:	f851 0b04 	ldr.w	r0, [r1], #4
 8003e06:	f7ff fd1d 	bl	8003844 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8003e0a:	68b3      	ldr	r3, [r6, #8]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	6831      	ldr	r1, [r6, #0]
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	f7ff fe81 	bl	8003b18 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	6993      	ldr	r3, [r2, #24]
 8003e1a:	f023 030c 	bic.w	r3, r3, #12
 8003e1e:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003e20:	6822      	ldr	r2, [r4, #0]
 8003e22:	6993      	ldr	r3, [r2, #24]
 8003e24:	6871      	ldr	r1, [r6, #4]
 8003e26:	430b      	orrs	r3, r1
 8003e28:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	6853      	ldr	r3, [r2, #4]
 8003e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e32:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	6893      	ldr	r3, [r2, #8]
 8003e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3c:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	6893      	ldr	r3, [r2, #8]
 8003e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e46:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	6893      	ldr	r3, [r2, #8]
 8003e4c:	f023 0307 	bic.w	r3, r3, #7
 8003e50:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	6893      	ldr	r3, [r2, #8]
 8003e56:	f043 0304 	orr.w	r3, r3, #4
 8003e5a:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003e5c:	2500      	movs	r5, #0
 8003e5e:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e60:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003e62:	2370      	movs	r3, #112	@ 0x70
 8003e64:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e66:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e68:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e6a:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003e6c:	68f3      	ldr	r3, [r6, #12]
 8003e6e:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003e70:	a901      	add	r1, sp, #4
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	f7ff fdaa 	bl	80039cc <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003e78:	6822      	ldr	r2, [r4, #0]
 8003e7a:	6853      	ldr	r3, [r2, #4]
 8003e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e80:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	6853      	ldr	r3, [r2, #4]
 8003e86:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003e8a:	6053      	str	r3, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e92:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e96:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8003ea2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003ea6:	4628      	mov	r0, r5
}
 8003ea8:	b008      	add	sp, #32
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003eac:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8003eb0:	f001 f9dc 	bl	800526c <HAL_TIMEx_HallSensor_MspInit>
 8003eb4:	e7a1      	b.n	8003dfa <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 8003eb6:	2001      	movs	r0, #1
}
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_TIMEx_PWMN_Start>:
{
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	2900      	cmp	r1, #0
 8003ec4:	d13a      	bne.n	8003f3c <HAL_TIMEx_PWMN_Start+0x80>
 8003ec6:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	bf18      	it	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d164      	bne.n	8003f9e <HAL_TIMEx_PWMN_Start+0xe2>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d147      	bne.n	8003f68 <HAL_TIMEx_PWMN_Start+0xac>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003ede:	2204      	movs	r2, #4
 8003ee0:	4601      	mov	r1, r0
 8003ee2:	6820      	ldr	r0, [r4, #0]
 8003ee4:	f7ff ff70 	bl	8003dc8 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8003eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef0:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <HAL_TIMEx_PWMN_Start+0xec>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d046      	beq.n	8003f88 <HAL_TIMEx_PWMN_Start+0xcc>
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efe:	d043      	beq.n	8003f88 <HAL_TIMEx_PWMN_Start+0xcc>
 8003f00:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d03f      	beq.n	8003f88 <HAL_TIMEx_PWMN_Start+0xcc>
 8003f08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d03b      	beq.n	8003f88 <HAL_TIMEx_PWMN_Start+0xcc>
 8003f10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d037      	beq.n	8003f88 <HAL_TIMEx_PWMN_Start+0xcc>
 8003f18:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d033      	beq.n	8003f88 <HAL_TIMEx_PWMN_Start+0xcc>
 8003f20:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d02f      	beq.n	8003f88 <HAL_TIMEx_PWMN_Start+0xcc>
 8003f28:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d02b      	beq.n	8003f88 <HAL_TIMEx_PWMN_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f38:	2000      	movs	r0, #0
 8003f3a:	e02f      	b.n	8003f9c <HAL_TIMEx_PWMN_Start+0xe0>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f3c:	2904      	cmp	r1, #4
 8003f3e:	d007      	beq.n	8003f50 <HAL_TIMEx_PWMN_Start+0x94>
 8003f40:	2908      	cmp	r1, #8
 8003f42:	d00b      	beq.n	8003f5c <HAL_TIMEx_PWMN_Start+0xa0>
 8003f44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	bf18      	it	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	e7bf      	b.n	8003ed0 <HAL_TIMEx_PWMN_Start+0x14>
 8003f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f54:	3b01      	subs	r3, #1
 8003f56:	bf18      	it	ne
 8003f58:	2301      	movne	r3, #1
 8003f5a:	e7b9      	b.n	8003ed0 <HAL_TIMEx_PWMN_Start+0x14>
 8003f5c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003f60:	3b01      	subs	r3, #1
 8003f62:	bf18      	it	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	e7b3      	b.n	8003ed0 <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f68:	2804      	cmp	r0, #4
 8003f6a:	d005      	beq.n	8003f78 <HAL_TIMEx_PWMN_Start+0xbc>
 8003f6c:	2808      	cmp	r0, #8
 8003f6e:	d007      	beq.n	8003f80 <HAL_TIMEx_PWMN_Start+0xc4>
 8003f70:	2302      	movs	r3, #2
 8003f72:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003f76:	e7b2      	b.n	8003ede <HAL_TIMEx_PWMN_Start+0x22>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f7e:	e7ae      	b.n	8003ede <HAL_TIMEx_PWMN_Start+0x22>
 8003f80:	2302      	movs	r3, #2
 8003f82:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003f86:	e7aa      	b.n	8003ede <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	2a06      	cmp	r2, #6
 8003f90:	d007      	beq.n	8003fa2 <HAL_TIMEx_PWMN_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f9a:	2000      	movs	r0, #0
}
 8003f9c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	e7fc      	b.n	8003f9c <HAL_TIMEx_PWMN_Start+0xe0>
  return HAL_OK;
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e7fa      	b.n	8003f9c <HAL_TIMEx_PWMN_Start+0xe0>
 8003fa6:	bf00      	nop
 8003fa8:	40010000 	.word	0x40010000

08003fac <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003fac:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003fb0:	2a01      	cmp	r2, #1
 8003fb2:	d03d      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8003fb4:	b410      	push	{r4}
 8003fb6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003fc4:	6802      	ldr	r2, [r0, #0]
 8003fc6:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003fc8:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fca:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fce:	6808      	ldr	r0, [r1, #0]
 8003fd0:	ea40 000c 	orr.w	r0, r0, ip
  htim->Instance->CR2 = tmpcr2;
 8003fd4:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4816      	ldr	r0, [pc, #88]	@ (8004034 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8003fda:	4282      	cmp	r2, r0
 8003fdc:	d01a      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003fde:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003fe2:	d017      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003fe4:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003fe8:	4282      	cmp	r2, r0
 8003fea:	d013      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003fec:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003ff0:	4282      	cmp	r2, r0
 8003ff2:	d00f      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003ff4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003ff8:	4282      	cmp	r2, r0
 8003ffa:	d00b      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003ffc:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8004000:	4282      	cmp	r2, r0
 8004002:	d007      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004004:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8004008:	4282      	cmp	r2, r0
 800400a:	d003      	beq.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800400c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004010:	4282      	cmp	r2, r0
 8004012:	d104      	bne.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0x72>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004014:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004018:	6849      	ldr	r1, [r1, #4]
 800401a:	4321      	orrs	r1, r4
    htim->Instance->SMCR = tmpsmcr;
 800401c:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004024:	2000      	movs	r0, #0
 8004026:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800402a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800402e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004030:	2002      	movs	r0, #2
}
 8004032:	4770      	bx	lr
 8004034:	40010000 	.word	0x40010000

08004038 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8004038:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800403a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d021      	beq.n	8004086 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004042:	2301      	movs	r3, #1
 8004044:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004048:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800404a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404e:	6888      	ldr	r0, [r1, #8]
 8004050:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004052:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004056:	6848      	ldr	r0, [r1, #4]
 8004058:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800405a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800405e:	6808      	ldr	r0, [r1, #0]
 8004060:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004066:	6908      	ldr	r0, [r1, #16]
 8004068:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800406a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800406e:	6948      	ldr	r0, [r1, #20]
 8004070:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004076:	69c9      	ldr	r1, [r1, #28]
 8004078:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800407a:	6811      	ldr	r1, [r2, #0]
 800407c:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800407e:	2000      	movs	r0, #0
 8004080:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  return HAL_OK;
 8004084:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004086:	2002      	movs	r0, #2
}
 8004088:	4770      	bx	lr

0800408a <HAL_TIMEx_CommutCallback>:
}
 800408a:	4770      	bx	lr

0800408c <HAL_TIMEx_BreakCallback>:
}
 800408c:	4770      	bx	lr
	...

08004090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004090:	b530      	push	{r4, r5, lr}
 8004092:	b089      	sub	sp, #36	@ 0x24
 8004094:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	4b21      	ldr	r3, [pc, #132]	@ (8004120 <HAL_InitTick+0x90>)
 800409c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800409e:	f042 0210 	orr.w	r2, r2, #16
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040ae:	a902      	add	r1, sp, #8
 80040b0:	a803      	add	r0, sp, #12
 80040b2:	f7fe fcdb 	bl	8002a6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80040b6:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80040b8:	b9cb      	cbnz	r3, 80040ee <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80040ba:	f7fe fcb7 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 80040be:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040c0:	4a18      	ldr	r2, [pc, #96]	@ (8004124 <HAL_InitTick+0x94>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0c9b      	lsrs	r3, r3, #18
 80040c8:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80040ca:	4817      	ldr	r0, [pc, #92]	@ (8004128 <HAL_InitTick+0x98>)
 80040cc:	4a17      	ldr	r2, [pc, #92]	@ (800412c <HAL_InitTick+0x9c>)
 80040ce:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80040d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80040d4:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80040d6:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040dc:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040de:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80040e0:	f7ff fc1c 	bl	800391c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80040e4:	4605      	mov	r5, r0
 80040e6:	b130      	cbz	r0, 80040f6 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 80040e8:	4628      	mov	r0, r5
 80040ea:	b009      	add	sp, #36	@ 0x24
 80040ec:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80040ee:	f7fe fc9d 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 80040f2:	0043      	lsls	r3, r0, #1
 80040f4:	e7e4      	b.n	80040c0 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 80040f6:	480c      	ldr	r0, [pc, #48]	@ (8004128 <HAL_InitTick+0x98>)
 80040f8:	f7ff faae 	bl	8003658 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80040fc:	4605      	mov	r5, r0
 80040fe:	2800      	cmp	r0, #0
 8004100:	d1f2      	bne.n	80040e8 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004102:	2036      	movs	r0, #54	@ 0x36
 8004104:	f7fd ff78 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004108:	2c0f      	cmp	r4, #15
 800410a:	d901      	bls.n	8004110 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 800410c:	2501      	movs	r5, #1
 800410e:	e7eb      	b.n	80040e8 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004110:	2200      	movs	r2, #0
 8004112:	4621      	mov	r1, r4
 8004114:	2036      	movs	r0, #54	@ 0x36
 8004116:	f7fd ff5f 	bl	8001fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800411a:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <HAL_InitTick+0xa0>)
 800411c:	601c      	str	r4, [r3, #0]
 800411e:	e7e3      	b.n	80040e8 <HAL_InitTick+0x58>
 8004120:	40023800 	.word	0x40023800
 8004124:	431bde83 	.word	0x431bde83
 8004128:	20004164 	.word	0x20004164
 800412c:	40001000 	.word	0x40001000
 8004130:	20000008 	.word	0x20000008

08004134 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004134:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	f102 030c 	add.w	r3, r2, #12
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	320c      	adds	r2, #12
 8004144:	e842 3100 	strex	r1, r3, [r2]
 8004148:	2900      	cmp	r1, #0
 800414a:	d1f3      	bne.n	8004134 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800414c:	2320      	movs	r3, #32
 800414e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8004152:	4770      	bx	lr

08004154 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004154:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	f102 030c 	add.w	r3, r2, #12
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	320c      	adds	r2, #12
 8004164:	e842 3100 	strex	r1, r3, [r2]
 8004168:	2900      	cmp	r1, #0
 800416a:	d1f3      	bne.n	8004154 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	f102 0314 	add.w	r3, r2, #20
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	3214      	adds	r2, #20
 800417c:	e842 3100 	strex	r1, r3, [r2]
 8004180:	2900      	cmp	r1, #0
 8004182:	d1f3      	bne.n	800416c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004186:	2b01      	cmp	r3, #1
 8004188:	d005      	beq.n	8004196 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800418a:	2320      	movs	r3, #32
 800418c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004190:	2300      	movs	r3, #0
 8004192:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004194:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004196:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	f102 030c 	add.w	r3, r2, #12
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	320c      	adds	r2, #12
 80041a6:	e842 3100 	strex	r1, r3, [r2]
 80041aa:	2900      	cmp	r1, #0
 80041ac:	d1f3      	bne.n	8004196 <UART_EndRxTransfer+0x42>
 80041ae:	e7ec      	b.n	800418a <UART_EndRxTransfer+0x36>

080041b0 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80041b4:	2b21      	cmp	r3, #33	@ 0x21
 80041b6:	d001      	beq.n	80041bc <UART_Transmit_IT+0xc>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2002      	movs	r0, #2
  }
}
 80041ba:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041bc:	6883      	ldr	r3, [r0, #8]
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c2:	d017      	beq.n	80041f4 <UART_Transmit_IT+0x44>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041c4:	6a03      	ldr	r3, [r0, #32]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	6202      	str	r2, [r0, #32]
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	6803      	ldr	r3, [r0, #0]
 80041ce:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80041d0:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80041da:	b94b      	cbnz	r3, 80041f0 <UART_Transmit_IT+0x40>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041dc:	6802      	ldr	r2, [r0, #0]
 80041de:	68d3      	ldr	r3, [r2, #12]
 80041e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041e4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041e6:	6802      	ldr	r2, [r0, #0]
 80041e8:	68d3      	ldr	r3, [r2, #12]
 80041ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ee:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80041f0:	2000      	movs	r0, #0
 80041f2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f4:	6903      	ldr	r3, [r0, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e4      	bne.n	80041c4 <UART_Transmit_IT+0x14>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041fa:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	6802      	ldr	r2, [r0, #0]
 8004200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004204:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004206:	6a03      	ldr	r3, [r0, #32]
 8004208:	3302      	adds	r3, #2
 800420a:	6203      	str	r3, [r0, #32]
 800420c:	e7e0      	b.n	80041d0 <UART_Transmit_IT+0x20>
	...

08004210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004210:	b510      	push	{r4, lr}
 8004212:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004214:	6802      	ldr	r2, [r0, #0]
 8004216:	6913      	ldr	r3, [r2, #16]
 8004218:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800421c:	68c1      	ldr	r1, [r0, #12]
 800421e:	430b      	orrs	r3, r1
 8004220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004222:	6883      	ldr	r3, [r0, #8]
 8004224:	6902      	ldr	r2, [r0, #16]
 8004226:	431a      	orrs	r2, r3
 8004228:	6943      	ldr	r3, [r0, #20]
 800422a:	431a      	orrs	r2, r3
 800422c:	69c3      	ldr	r3, [r0, #28]
 800422e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004230:	6801      	ldr	r1, [r0, #0]
 8004232:	68cb      	ldr	r3, [r1, #12]
 8004234:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004238:	f023 030c 	bic.w	r3, r3, #12
 800423c:	4313      	orrs	r3, r2
 800423e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004240:	6802      	ldr	r2, [r0, #0]
 8004242:	6953      	ldr	r3, [r2, #20]
 8004244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004248:	6981      	ldr	r1, [r0, #24]
 800424a:	430b      	orrs	r3, r1
 800424c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800424e:	6803      	ldr	r3, [r0, #0]
 8004250:	4a31      	ldr	r2, [pc, #196]	@ (8004318 <UART_SetConfig+0x108>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d006      	beq.n	8004264 <UART_SetConfig+0x54>
 8004256:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800425a:	4293      	cmp	r3, r2
 800425c:	d002      	beq.n	8004264 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800425e:	f7fe fbe5 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8004262:	e001      	b.n	8004268 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004264:	f7fe fbf2 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004268:	69e3      	ldr	r3, [r4, #28]
 800426a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800426e:	d029      	beq.n	80042c4 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004270:	2100      	movs	r1, #0
 8004272:	1803      	adds	r3, r0, r0
 8004274:	4149      	adcs	r1, r1
 8004276:	181b      	adds	r3, r3, r0
 8004278:	f141 0100 	adc.w	r1, r1, #0
 800427c:	00c9      	lsls	r1, r1, #3
 800427e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	1818      	adds	r0, r3, r0
 8004286:	6863      	ldr	r3, [r4, #4]
 8004288:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800428c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8004290:	f141 0100 	adc.w	r1, r1, #0
 8004294:	f7fb ff9c 	bl	80001d0 <__aeabi_uldivmod>
 8004298:	4a20      	ldr	r2, [pc, #128]	@ (800431c <UART_SetConfig+0x10c>)
 800429a:	fba2 3100 	umull	r3, r1, r2, r0
 800429e:	0949      	lsrs	r1, r1, #5
 80042a0:	2364      	movs	r3, #100	@ 0x64
 80042a2:	fb03 0311 	mls	r3, r3, r1, r0
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	3332      	adds	r3, #50	@ 0x32
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042b4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	6821      	ldr	r1, [r4, #0]
 80042be:	4413      	add	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }
}
 80042c2:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042c4:	2300      	movs	r3, #0
 80042c6:	1802      	adds	r2, r0, r0
 80042c8:	eb43 0103 	adc.w	r1, r3, r3
 80042cc:	1812      	adds	r2, r2, r0
 80042ce:	f141 0100 	adc.w	r1, r1, #0
 80042d2:	00c9      	lsls	r1, r1, #3
 80042d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d8:	00d2      	lsls	r2, r2, #3
 80042da:	1810      	adds	r0, r2, r0
 80042dc:	f141 0100 	adc.w	r1, r1, #0
 80042e0:	6862      	ldr	r2, [r4, #4]
 80042e2:	1892      	adds	r2, r2, r2
 80042e4:	415b      	adcs	r3, r3
 80042e6:	f7fb ff73 	bl	80001d0 <__aeabi_uldivmod>
 80042ea:	4a0c      	ldr	r2, [pc, #48]	@ (800431c <UART_SetConfig+0x10c>)
 80042ec:	fba2 3100 	umull	r3, r1, r2, r0
 80042f0:	0949      	lsrs	r1, r1, #5
 80042f2:	2364      	movs	r3, #100	@ 0x64
 80042f4:	fb03 0311 	mls	r3, r3, r1, r0
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	3332      	adds	r3, #50	@ 0x32
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	005a      	lsls	r2, r3, #1
 8004304:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8004308:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	6821      	ldr	r1, [r4, #0]
 8004312:	4413      	add	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
 8004316:	e7d4      	b.n	80042c2 <UART_SetConfig+0xb2>
 8004318:	40011000 	.word	0x40011000
 800431c:	51eb851f 	.word	0x51eb851f

08004320 <HAL_UART_Init>:
  if (huart == NULL)
 8004320:	b360      	cbz	r0, 800437c <HAL_UART_Init+0x5c>
{
 8004322:	b510      	push	{r4, lr}
 8004324:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004326:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800432a:	b313      	cbz	r3, 8004372 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800432c:	2324      	movs	r3, #36	@ 0x24
 800432e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004332:	6822      	ldr	r2, [r4, #0]
 8004334:	68d3      	ldr	r3, [r2, #12]
 8004336:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800433a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800433c:	4620      	mov	r0, r4
 800433e:	f7ff ff67 	bl	8004210 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	6913      	ldr	r3, [r2, #16]
 8004346:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800434a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800434c:	6822      	ldr	r2, [r4, #0]
 800434e:	6953      	ldr	r3, [r2, #20]
 8004350:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004354:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	68d3      	ldr	r3, [r2, #12]
 800435a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800435e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004360:	2000      	movs	r0, #0
 8004362:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004364:	2320      	movs	r3, #32
 8004366:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800436a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800436e:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004370:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004372:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004376:	f001 f8a7 	bl	80054c8 <HAL_UART_MspInit>
 800437a:	e7d7      	b.n	800432c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800437c:	2001      	movs	r0, #1
}
 800437e:	4770      	bx	lr

08004380 <HAL_UART_TxCpltCallback>:
}
 8004380:	4770      	bx	lr

08004382 <UART_EndTransmit_IT>:
{
 8004382:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004384:	6801      	ldr	r1, [r0, #0]
 8004386:	68ca      	ldr	r2, [r1, #12]
 8004388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800438c:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800438e:	2220      	movs	r2, #32
 8004390:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004394:	f7ff fff4 	bl	8004380 <HAL_UART_TxCpltCallback>
}
 8004398:	2000      	movs	r0, #0
 800439a:	bd08      	pop	{r3, pc}

0800439c <HAL_UART_RxCpltCallback>:
}
 800439c:	4770      	bx	lr

0800439e <HAL_UART_RxHalfCpltCallback>:
}
 800439e:	4770      	bx	lr

080043a0 <UART_DMAError>:
{
 80043a0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043a2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043a8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80043ac:	2a21      	cmp	r2, #33	@ 0x21
 80043ae:	d00f      	beq.n	80043d0 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043b8:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80043bc:	2a22      	cmp	r2, #34	@ 0x22
 80043be:	d011      	beq.n	80043e4 <UART_DMAError+0x44>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043c0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80043c2:	f043 0310 	orr.w	r3, r3, #16
 80043c6:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 80043c8:	4620      	mov	r0, r4
 80043ca:	f7fc fa27 	bl	800081c <HAL_UART_ErrorCallback>
}
 80043ce:	bd10      	pop	{r4, pc}
 80043d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0eb      	beq.n	80043b0 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80043d8:	2300      	movs	r3, #0
 80043da:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80043dc:	4620      	mov	r0, r4
 80043de:	f7ff fea9 	bl	8004134 <UART_EndTxTransfer>
 80043e2:	e7e5      	b.n	80043b0 <UART_DMAError+0x10>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0eb      	beq.n	80043c0 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80043ec:	4620      	mov	r0, r4
 80043ee:	f7ff feb1 	bl	8004154 <UART_EndRxTransfer>
 80043f2:	e7e5      	b.n	80043c0 <UART_DMAError+0x20>

080043f4 <UART_DMAAbortOnError>:
{
 80043f4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80043fc:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80043fe:	f7fc fa0d 	bl	800081c <HAL_UART_ErrorCallback>
}
 8004402:	bd08      	pop	{r3, pc}

08004404 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004404:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004408:	2b22      	cmp	r3, #34	@ 0x22
 800440a:	d169      	bne.n	80044e0 <UART_Receive_IT+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440c:	6883      	ldr	r3, [r0, #8]
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004412:	d04f      	beq.n	80044b4 <UART_Receive_IT+0xb0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004414:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441a:	d004      	beq.n	8004426 <UART_Receive_IT+0x22>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d156      	bne.n	80044ce <UART_Receive_IT+0xca>
 8004420:	6903      	ldr	r3, [r0, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d153      	bne.n	80044ce <UART_Receive_IT+0xca>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004426:	6803      	ldr	r3, [r0, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800442c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800442e:	3301      	adds	r3, #1
 8004430:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8004432:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29b      	uxth	r3, r3
 800443a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800443c:	2b00      	cmp	r3, #0
 800443e:	d151      	bne.n	80044e4 <UART_Receive_IT+0xe0>
{
 8004440:	b500      	push	{lr}
 8004442:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004444:	6802      	ldr	r2, [r0, #0]
 8004446:	68d3      	ldr	r3, [r2, #12]
 8004448:	f023 0320 	bic.w	r3, r3, #32
 800444c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800444e:	6802      	ldr	r2, [r0, #0]
 8004450:	68d3      	ldr	r3, [r2, #12]
 8004452:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004456:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004458:	6802      	ldr	r2, [r0, #0]
 800445a:	6953      	ldr	r3, [r2, #20]
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004462:	2320      	movs	r3, #32
 8004464:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004468:	2300      	movs	r3, #0
 800446a:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800446e:	2b01      	cmp	r3, #1
 8004470:	d133      	bne.n	80044da <UART_Receive_IT+0xd6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	2300      	movs	r3, #0
 8004474:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004476:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	f102 030c 	add.w	r3, r2, #12
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	320c      	adds	r2, #12
 8004486:	e842 3100 	strex	r1, r3, [r2]
 800448a:	2900      	cmp	r1, #0
 800448c:	d1f3      	bne.n	8004476 <UART_Receive_IT+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800448e:	6803      	ldr	r3, [r0, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	f012 0f10 	tst.w	r2, #16
 8004496:	d006      	beq.n	80044a6 <UART_Receive_IT+0xa2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004498:	2200      	movs	r2, #0
 800449a:	9201      	str	r2, [sp, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	9201      	str	r2, [sp, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80044a8:	f7fc f9b6 	bl	8000818 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80044ac:	2000      	movs	r0, #0
}
 80044ae:	b003      	add	sp, #12
 80044b0:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b4:	6902      	ldr	r2, [r0, #16]
 80044b6:	2a00      	cmp	r2, #0
 80044b8:	d1ac      	bne.n	8004414 <UART_Receive_IT+0x10>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ba:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044bc:	6803      	ldr	r3, [r0, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80044c6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80044c8:	3302      	adds	r3, #2
 80044ca:	6283      	str	r3, [r0, #40]	@ 0x28
 80044cc:	e7b1      	b.n	8004432 <UART_Receive_IT+0x2e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044ce:	6803      	ldr	r3, [r0, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d6:	7013      	strb	r3, [r2, #0]
 80044d8:	e7a8      	b.n	800442c <UART_Receive_IT+0x28>
        HAL_UART_RxCpltCallback(huart);
 80044da:	f7ff ff5f 	bl	800439c <HAL_UART_RxCpltCallback>
 80044de:	e7e5      	b.n	80044ac <UART_Receive_IT+0xa8>
    return HAL_BUSY;
 80044e0:	2002      	movs	r0, #2
 80044e2:	4770      	bx	lr
    return HAL_OK;
 80044e4:	2000      	movs	r0, #0
}
 80044e6:	4770      	bx	lr

080044e8 <HAL_UART_IRQHandler>:
{
 80044e8:	b510      	push	{r4, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044ee:	6802      	ldr	r2, [r0, #0]
 80044f0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044f4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80044f6:	f013 0f0f 	tst.w	r3, #15
 80044fa:	d109      	bne.n	8004510 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fc:	f013 0f20 	tst.w	r3, #32
 8004500:	d00c      	beq.n	800451c <HAL_UART_IRQHandler+0x34>
 8004502:	f010 0f20 	tst.w	r0, #32
 8004506:	d009      	beq.n	800451c <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8004508:	4620      	mov	r0, r4
 800450a:	f7ff ff7b 	bl	8004404 <UART_Receive_IT>
      return;
 800450e:	e016      	b.n	800453e <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004510:	f011 0101 	ands.w	r1, r1, #1
 8004514:	d115      	bne.n	8004542 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004516:	f410 7f90 	tst.w	r0, #288	@ 0x120
 800451a:	d112      	bne.n	8004542 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800451e:	2901      	cmp	r1, #1
 8004520:	d079      	beq.n	8004616 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004522:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004526:	d003      	beq.n	8004530 <HAL_UART_IRQHandler+0x48>
 8004528:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800452c:	f040 8114 	bne.w	8004758 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004530:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004534:	d003      	beq.n	800453e <HAL_UART_IRQHandler+0x56>
 8004536:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800453a:	f040 8111 	bne.w	8004760 <HAL_UART_IRQHandler+0x278>
}
 800453e:	b002      	add	sp, #8
 8004540:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004542:	f013 0f01 	tst.w	r3, #1
 8004546:	d006      	beq.n	8004556 <HAL_UART_IRQHandler+0x6e>
 8004548:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800454c:	d003      	beq.n	8004556 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800454e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004556:	f013 0f04 	tst.w	r3, #4
 800455a:	d004      	beq.n	8004566 <HAL_UART_IRQHandler+0x7e>
 800455c:	b119      	cbz	r1, 8004566 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800455e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004560:	f042 0202 	orr.w	r2, r2, #2
 8004564:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004566:	f013 0f02 	tst.w	r3, #2
 800456a:	d004      	beq.n	8004576 <HAL_UART_IRQHandler+0x8e>
 800456c:	b119      	cbz	r1, 8004576 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800456e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004570:	f042 0204 	orr.w	r2, r2, #4
 8004574:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004576:	f013 0f08 	tst.w	r3, #8
 800457a:	d007      	beq.n	800458c <HAL_UART_IRQHandler+0xa4>
 800457c:	f010 0f20 	tst.w	r0, #32
 8004580:	d100      	bne.n	8004584 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004582:	b119      	cbz	r1, 800458c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004584:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004586:	f042 0208 	orr.w	r2, r2, #8
 800458a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800458c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800458e:	2a00      	cmp	r2, #0
 8004590:	d0d5      	beq.n	800453e <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004592:	f013 0f20 	tst.w	r3, #32
 8004596:	d002      	beq.n	800459e <HAL_UART_IRQHandler+0xb6>
 8004598:	f010 0f20 	tst.w	r0, #32
 800459c:	d129      	bne.n	80045f2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045a6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80045a8:	f012 0f08 	tst.w	r2, #8
 80045ac:	d100      	bne.n	80045b0 <HAL_UART_IRQHandler+0xc8>
 80045ae:	b363      	cbz	r3, 800460a <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7ff fdcf 	bl	8004154 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80045be:	d020      	beq.n	8004602 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	f102 0314 	add.w	r3, r2, #20
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	3214      	adds	r2, #20
 80045d0:	e842 3100 	strex	r1, r3, [r2]
 80045d4:	2900      	cmp	r1, #0
 80045d6:	d1f3      	bne.n	80045c0 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80045d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80045da:	b173      	cbz	r3, 80045fa <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045dc:	4a62      	ldr	r2, [pc, #392]	@ (8004768 <HAL_UART_IRQHandler+0x280>)
 80045de:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045e0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80045e2:	f7fd fe6c 	bl	80022be <HAL_DMA_Abort_IT>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d0a9      	beq.n	800453e <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80045ec:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80045ee:	4798      	blx	r3
 80045f0:	e7a5      	b.n	800453e <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7ff ff06 	bl	8004404 <UART_Receive_IT>
 80045f8:	e7d1      	b.n	800459e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80045fa:	4620      	mov	r0, r4
 80045fc:	f7fc f90e 	bl	800081c <HAL_UART_ErrorCallback>
 8004600:	e79d      	b.n	800453e <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8004602:	4620      	mov	r0, r4
 8004604:	f7fc f90a 	bl	800081c <HAL_UART_ErrorCallback>
 8004608:	e799      	b.n	800453e <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 800460a:	4620      	mov	r0, r4
 800460c:	f7fc f906 	bl	800081c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	2300      	movs	r3, #0
 8004612:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8004614:	e793      	b.n	800453e <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004616:	f013 0f10 	tst.w	r3, #16
 800461a:	d082      	beq.n	8004522 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800461c:	f010 0f10 	tst.w	r0, #16
 8004620:	f43f af7f 	beq.w	8004522 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004624:	2300      	movs	r3, #0
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	6813      	ldr	r3, [r2, #0]
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	6853      	ldr	r3, [r2, #4]
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004632:	6953      	ldr	r3, [r2, #20]
 8004634:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004638:	d052      	beq.n	80046e0 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800463a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800463c:	6813      	ldr	r3, [r2, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004642:	2b00      	cmp	r3, #0
 8004644:	f43f af7b 	beq.w	800453e <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004648:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800464a:	4299      	cmp	r1, r3
 800464c:	f67f af77 	bls.w	800453e <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8004650:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004652:	69d3      	ldr	r3, [r2, #28]
 8004654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004658:	d037      	beq.n	80046ca <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800465a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	f102 030c 	add.w	r3, r2, #12
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	320c      	adds	r2, #12
 800466a:	e842 3100 	strex	r1, r3, [r2]
 800466e:	2900      	cmp	r1, #0
 8004670:	d1f3      	bne.n	800465a <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	f102 0314 	add.w	r3, r2, #20
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	3214      	adds	r2, #20
 8004682:	e842 3100 	strex	r1, r3, [r2]
 8004686:	2900      	cmp	r1, #0
 8004688:	d1f3      	bne.n	8004672 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	f102 0314 	add.w	r3, r2, #20
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	3214      	adds	r2, #20
 800469a:	e842 3100 	strex	r1, r3, [r2]
 800469e:	2900      	cmp	r1, #0
 80046a0:	d1f3      	bne.n	800468a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 80046a2:	2320      	movs	r3, #32
 80046a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a8:	2300      	movs	r3, #0
 80046aa:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	f102 030c 	add.w	r3, r2, #12
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	320c      	adds	r2, #12
 80046bc:	e842 3100 	strex	r1, r3, [r2]
 80046c0:	2900      	cmp	r1, #0
 80046c2:	d1f3      	bne.n	80046ac <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046c4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80046c6:	f7fd fdb1 	bl	800222c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ca:	2302      	movs	r3, #2
 80046cc:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ce:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80046d0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	1ac9      	subs	r1, r1, r3
 80046d6:	b289      	uxth	r1, r1
 80046d8:	4620      	mov	r0, r4
 80046da:	f7fc f89d 	bl	8000818 <HAL_UARTEx_RxEventCallback>
      return;
 80046de:	e72e      	b.n	800453e <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046e0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80046e2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	1ac9      	subs	r1, r1, r3
 80046e8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80046ea:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f43f af25 	beq.w	800453e <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80046f4:	2900      	cmp	r1, #0
 80046f6:	f43f af22 	beq.w	800453e <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	f102 030c 	add.w	r3, r2, #12
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	320c      	adds	r2, #12
 800470a:	e842 3000 	strex	r0, r3, [r2]
 800470e:	2800      	cmp	r0, #0
 8004710:	d1f3      	bne.n	80046fa <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004712:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	f102 0314 	add.w	r3, r2, #20
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	3214      	adds	r2, #20
 8004722:	e842 3000 	strex	r0, r3, [r2]
 8004726:	2800      	cmp	r0, #0
 8004728:	d1f3      	bne.n	8004712 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 800472a:	2320      	movs	r3, #32
 800472c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004730:	2300      	movs	r3, #0
 8004732:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004734:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	f102 030c 	add.w	r3, r2, #12
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	320c      	adds	r2, #12
 8004744:	e842 3000 	strex	r0, r3, [r2]
 8004748:	2800      	cmp	r0, #0
 800474a:	d1f3      	bne.n	8004734 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800474c:	2302      	movs	r3, #2
 800474e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004750:	4620      	mov	r0, r4
 8004752:	f7fc f861 	bl	8000818 <HAL_UARTEx_RxEventCallback>
      return;
 8004756:	e6f2      	b.n	800453e <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8004758:	4620      	mov	r0, r4
 800475a:	f7ff fd29 	bl	80041b0 <UART_Transmit_IT>
    return;
 800475e:	e6ee      	b.n	800453e <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8004760:	4620      	mov	r0, r4
 8004762:	f7ff fe0e 	bl	8004382 <UART_EndTransmit_IT>
    return;
 8004766:	e6ea      	b.n	800453e <HAL_UART_IRQHandler+0x56>
 8004768:	080043f5 	.word	0x080043f5

0800476c <UART_DMARxHalfCplt>:
{
 800476c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004770:	2301      	movs	r3, #1
 8004772:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004776:	2b01      	cmp	r3, #1
 8004778:	d002      	beq.n	8004780 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800477a:	f7ff fe10 	bl	800439e <HAL_UART_RxHalfCpltCallback>
}
 800477e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004780:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004782:	0849      	lsrs	r1, r1, #1
 8004784:	f7fc f848 	bl	8000818 <HAL_UARTEx_RxEventCallback>
 8004788:	e7f9      	b.n	800477e <UART_DMARxHalfCplt+0x12>

0800478a <UART_DMAReceiveCplt>:
{
 800478a:	b508      	push	{r3, lr}
 800478c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004798:	d12b      	bne.n	80047f2 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800479e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	f102 030c 	add.w	r3, r2, #12
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	320c      	adds	r2, #12
 80047ae:	e842 3100 	strex	r1, r3, [r2]
 80047b2:	2900      	cmp	r1, #0
 80047b4:	d1f3      	bne.n	800479e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	f102 0314 	add.w	r3, r2, #20
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	3214      	adds	r2, #20
 80047c6:	e842 3100 	strex	r1, r3, [r2]
 80047ca:	2900      	cmp	r1, #0
 80047cc:	d1f3      	bne.n	80047b6 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	f102 0314 	add.w	r3, r2, #20
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	3214      	adds	r2, #20
 80047de:	e842 3100 	strex	r1, r3, [r2]
 80047e2:	2900      	cmp	r1, #0
 80047e4:	d1f3      	bne.n	80047ce <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80047e6:	2320      	movs	r3, #32
 80047e8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d007      	beq.n	8004802 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f2:	2300      	movs	r3, #0
 80047f4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d00f      	beq.n	800481c <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80047fc:	f7ff fdce 	bl	800439c <HAL_UART_RxCpltCallback>
}
 8004800:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004802:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	f102 030c 	add.w	r3, r2, #12
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	320c      	adds	r2, #12
 8004812:	e842 3100 	strex	r1, r3, [r2]
 8004816:	2900      	cmp	r1, #0
 8004818:	d1f3      	bne.n	8004802 <UART_DMAReceiveCplt+0x78>
 800481a:	e7ea      	b.n	80047f2 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800481e:	f7fb fffb 	bl	8000818 <HAL_UARTEx_RxEventCallback>
 8004822:	e7ed      	b.n	8004800 <UART_DMAReceiveCplt+0x76>

08004824 <UART_Start_Receive_DMA>:
{
 8004824:	b530      	push	{r4, r5, lr}
 8004826:	b083      	sub	sp, #12
 8004828:	4604      	mov	r4, r0
 800482a:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800482c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800482e:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004830:	2500      	movs	r5, #0
 8004832:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004834:	2222      	movs	r2, #34	@ 0x22
 8004836:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800483a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800483c:	481f      	ldr	r0, [pc, #124]	@ (80048bc <UART_Start_Receive_DMA+0x98>)
 800483e:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004840:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004842:	481f      	ldr	r0, [pc, #124]	@ (80048c0 <UART_Start_Receive_DMA+0x9c>)
 8004844:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004846:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004848:	481e      	ldr	r0, [pc, #120]	@ (80048c4 <UART_Start_Receive_DMA+0xa0>)
 800484a:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 800484c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800484e:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	460a      	mov	r2, r1
 8004854:	1d01      	adds	r1, r0, #4
 8004856:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004858:	f7fd fcb4 	bl	80021c4 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800485c:	9501      	str	r5, [sp, #4]
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	9201      	str	r2, [sp, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	b15b      	cbz	r3, 8004886 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800486e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	f102 030c 	add.w	r3, r2, #12
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	320c      	adds	r2, #12
 800487e:	e842 3100 	strex	r1, r3, [r2]
 8004882:	2900      	cmp	r1, #0
 8004884:	d1f3      	bne.n	800486e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004886:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	f102 0314 	add.w	r3, r2, #20
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	3214      	adds	r2, #20
 8004896:	e842 3100 	strex	r1, r3, [r2]
 800489a:	2900      	cmp	r1, #0
 800489c:	d1f3      	bne.n	8004886 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	f102 0314 	add.w	r3, r2, #20
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	3214      	adds	r2, #20
 80048ae:	e842 3100 	strex	r1, r3, [r2]
 80048b2:	2900      	cmp	r1, #0
 80048b4:	d1f3      	bne.n	800489e <UART_Start_Receive_DMA+0x7a>
}
 80048b6:	2000      	movs	r0, #0
 80048b8:	b003      	add	sp, #12
 80048ba:	bd30      	pop	{r4, r5, pc}
 80048bc:	0800478b 	.word	0x0800478b
 80048c0:	0800476d 	.word	0x0800476d
 80048c4:	080043a1 	.word	0x080043a1

080048c8 <HAL_UART_Receive_DMA>:
{
 80048c8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ca:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d108      	bne.n	80048e4 <HAL_UART_Receive_DMA+0x1c>
    if ((pData == NULL) || (Size == 0U))
 80048d2:	b149      	cbz	r1, 80048e8 <HAL_UART_Receive_DMA+0x20>
 80048d4:	b90a      	cbnz	r2, 80048da <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 80048d6:	2001      	movs	r0, #1
}
 80048d8:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	2300      	movs	r3, #0
 80048dc:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80048de:	f7ff ffa1 	bl	8004824 <UART_Start_Receive_DMA>
 80048e2:	e7f9      	b.n	80048d8 <HAL_UART_Receive_DMA+0x10>
    return HAL_BUSY;
 80048e4:	2002      	movs	r0, #2
 80048e6:	e7f7      	b.n	80048d8 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 80048e8:	2001      	movs	r0, #1
 80048ea:	e7f5      	b.n	80048d8 <HAL_UART_Receive_DMA+0x10>

080048ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ec:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d129      	bne.n	8004948 <HAL_UARTEx_ReceiveToIdle_DMA+0x5c>
{
 80048f4:	b510      	push	{r4, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80048fa:	b339      	cbz	r1, 800494c <HAL_UARTEx_ReceiveToIdle_DMA+0x60>
 80048fc:	b912      	cbnz	r2, 8004904 <HAL_UARTEx_ReceiveToIdle_DMA+0x18>
      return HAL_ERROR;
 80048fe:	2001      	movs	r0, #1
}
 8004900:	b002      	add	sp, #8
 8004902:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004904:	2301      	movs	r3, #1
 8004906:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004908:	2300      	movs	r3, #0
 800490a:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800490c:	f7ff ff8a 	bl	8004824 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8004910:	2800      	cmp	r0, #0
 8004912:	d1f5      	bne.n	8004900 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004914:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004916:	2b01      	cmp	r3, #1
 8004918:	d001      	beq.n	800491e <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
        status = HAL_ERROR;
 800491a:	2001      	movs	r0, #1
    return status;
 800491c:	e7f0      	b.n	8004900 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800491e:	2300      	movs	r3, #0
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	9201      	str	r2, [sp, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	f102 030c 	add.w	r3, r2, #12
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	320c      	adds	r2, #12
 800493e:	e842 3100 	strex	r1, r3, [r2]
 8004942:	2900      	cmp	r1, #0
 8004944:	d1f3      	bne.n	800492e <HAL_UARTEx_ReceiveToIdle_DMA+0x42>
 8004946:	e7db      	b.n	8004900 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    return HAL_BUSY;
 8004948:	2002      	movs	r0, #2
}
 800494a:	4770      	bx	lr
      return HAL_ERROR;
 800494c:	2001      	movs	r0, #1
 800494e:	e7d7      	b.n	8004900 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>

08004950 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004950:	e7fe      	b.n	8004950 <NMI_Handler>

08004952 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004952:	e7fe      	b.n	8004952 <HardFault_Handler>

08004954 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004954:	e7fe      	b.n	8004954 <MemManage_Handler>

08004956 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004956:	e7fe      	b.n	8004956 <BusFault_Handler>

08004958 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004958:	e7fe      	b.n	8004958 <UsageFault_Handler>

0800495a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800495a:	4770      	bx	lr

0800495c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800495c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800495e:	4802      	ldr	r0, [pc, #8]	@ (8004968 <DMA1_Stream1_IRQHandler+0xc>)
 8004960:	f7fd fcc0 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004964:	bd08      	pop	{r3, pc}
 8004966:	bf00      	nop
 8004968:	20004368 	.word	0x20004368

0800496c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800496c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800496e:	4802      	ldr	r0, [pc, #8]	@ (8004978 <DMA1_Stream3_IRQHandler+0xc>)
 8004970:	f7fd fcb8 	bl	80022e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004974:	bd08      	pop	{r3, pc}
 8004976:	bf00      	nop
 8004978:	200043c8 	.word	0x200043c8

0800497c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800497c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800497e:	4805      	ldr	r0, [pc, #20]	@ (8004994 <ADC_IRQHandler+0x18>)
 8004980:	f7fc ff2e 	bl	80017e0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004984:	4804      	ldr	r0, [pc, #16]	@ (8004998 <ADC_IRQHandler+0x1c>)
 8004986:	f7fc ff2b 	bl	80017e0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800498a:	4804      	ldr	r0, [pc, #16]	@ (800499c <ADC_IRQHandler+0x20>)
 800498c:	f7fc ff28 	bl	80017e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004990:	bd08      	pop	{r3, pc}
 8004992:	bf00      	nop
 8004994:	200000bc 	.word	0x200000bc
 8004998:	20000074 	.word	0x20000074
 800499c:	2000002c 	.word	0x2000002c

080049a0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80049a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049a2:	4802      	ldr	r0, [pc, #8]	@ (80049ac <TIM1_BRK_TIM9_IRQHandler+0xc>)
 80049a4:	f7fe fe9f 	bl	80036e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80049a8:	bd08      	pop	{r3, pc}
 80049aa:	bf00      	nop
 80049ac:	20004320 	.word	0x20004320

080049b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80049b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049b2:	4802      	ldr	r0, [pc, #8]	@ (80049bc <TIM1_UP_TIM10_IRQHandler+0xc>)
 80049b4:	f7fe fe97 	bl	80036e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80049b8:	bd08      	pop	{r3, pc}
 80049ba:	bf00      	nop
 80049bc:	20004320 	.word	0x20004320

080049c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80049c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049c2:	4802      	ldr	r0, [pc, #8]	@ (80049cc <TIM1_CC_IRQHandler+0xc>)
 80049c4:	f7fe fe8f 	bl	80036e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80049c8:	bd08      	pop	{r3, pc}
 80049ca:	bf00      	nop
 80049cc:	20004320 	.word	0x20004320

080049d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80049d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80049d2:	4802      	ldr	r0, [pc, #8]	@ (80049dc <USART3_IRQHandler+0xc>)
 80049d4:	f7ff fd88 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80049d8:	bd08      	pop	{r3, pc}
 80049da:	bf00      	nop
 80049dc:	20004428 	.word	0x20004428

080049e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80049e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80049e2:	4802      	ldr	r0, [pc, #8]	@ (80049ec <TIM6_DAC_IRQHandler+0xc>)
 80049e4:	f7fe fe7f 	bl	80036e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80049e8:	bd08      	pop	{r3, pc}
 80049ea:	bf00      	nop
 80049ec:	20004164 	.word	0x20004164

080049f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049f0:	4a03      	ldr	r2, [pc, #12]	@ (8004a00 <SystemInit+0x10>)
 80049f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80049f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049fe:	4770      	bx	lr
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a04:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <prvResetNextTaskUnblockTime+0x24>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b923      	cbnz	r3, 8004a16 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a0c:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <prvResetNextTaskUnblockTime+0x28>)
 8004a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a16:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <prvResetNextTaskUnblockTime+0x24>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	4b02      	ldr	r3, [pc, #8]	@ (8004a2c <prvResetNextTaskUnblockTime+0x28>)
 8004a22:	601a      	str	r2, [r3, #0]
	}
}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	2000421c 	.word	0x2000421c
 8004a2c:	200041b4 	.word	0x200041b4

08004a30 <prvInitialiseNewTask>:
{
 8004a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a34:	4607      	mov	r7, r0
 8004a36:	4698      	mov	r8, r3
 8004a38:	9d08      	ldr	r5, [sp, #32]
 8004a3a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8004a3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a40:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8004a42:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004a46:	3a01      	subs	r2, #1
 8004a48:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a4c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8004a50:	b3c1      	cbz	r1, 8004ac4 <prvInitialiseNewTask+0x94>
 8004a52:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a54:	f04f 0c00 	mov.w	ip, #0
 8004a58:	f1bc 0f0f 	cmp.w	ip, #15
 8004a5c:	d809      	bhi.n	8004a72 <prvInitialiseNewTask+0x42>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a5e:	f810 200c 	ldrb.w	r2, [r0, ip]
 8004a62:	eb04 030c 	add.w	r3, r4, ip
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8004a6a:	b112      	cbz	r2, 8004a72 <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a6c:	f10c 0c01 	add.w	ip, ip, #1
 8004a70:	e7f2      	b.n	8004a58 <prvInitialiseNewTask+0x28>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a72:	2300      	movs	r3, #0
 8004a74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a78:	2d06      	cmp	r5, #6
 8004a7a:	d900      	bls.n	8004a7e <prvInitialiseNewTask+0x4e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a7c:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8004a7e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004a80:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a82:	f04f 0a00 	mov.w	sl, #0
 8004a86:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a8a:	1d20      	adds	r0, r4, #4
 8004a8c:	f7fc fa3b 	bl	8000f06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a90:	f104 0018 	add.w	r0, r4, #24
 8004a94:	f7fc fa37 	bl	8000f06 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a98:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a9a:	f1c5 0507 	rsb	r5, r5, #7
 8004a9e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004aa0:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004aa2:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aa6:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004aaa:	4642      	mov	r2, r8
 8004aac:	4639      	mov	r1, r7
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7fc fb2a 	bl	8001108 <pxPortInitialiseStack>
 8004ab4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004ab6:	f1b9 0f00 	cmp.w	r9, #0
 8004aba:	d001      	beq.n	8004ac0 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004abc:	f8c9 4000 	str.w	r4, [r9]
}
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8004aca:	e7d5      	b.n	8004a78 <prvInitialiseNewTask+0x48>

08004acc <prvInitialiseTaskLists>:
{
 8004acc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ace:	2400      	movs	r4, #0
 8004ad0:	e007      	b.n	8004ae2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ad2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8004ad6:	0093      	lsls	r3, r2, #2
 8004ad8:	480e      	ldr	r0, [pc, #56]	@ (8004b14 <prvInitialiseTaskLists+0x48>)
 8004ada:	4418      	add	r0, r3
 8004adc:	f7fc fa08 	bl	8000ef0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ae0:	3401      	adds	r4, #1
 8004ae2:	2c06      	cmp	r4, #6
 8004ae4:	d9f5      	bls.n	8004ad2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8004ae6:	4d0c      	ldr	r5, [pc, #48]	@ (8004b18 <prvInitialiseTaskLists+0x4c>)
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f7fc fa01 	bl	8000ef0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aee:	4c0b      	ldr	r4, [pc, #44]	@ (8004b1c <prvInitialiseTaskLists+0x50>)
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7fc f9fd 	bl	8000ef0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004af6:	480a      	ldr	r0, [pc, #40]	@ (8004b20 <prvInitialiseTaskLists+0x54>)
 8004af8:	f7fc f9fa 	bl	8000ef0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004afc:	4809      	ldr	r0, [pc, #36]	@ (8004b24 <prvInitialiseTaskLists+0x58>)
 8004afe:	f7fc f9f7 	bl	8000ef0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004b02:	4809      	ldr	r0, [pc, #36]	@ (8004b28 <prvInitialiseTaskLists+0x5c>)
 8004b04:	f7fc f9f4 	bl	8000ef0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b08:	4b08      	ldr	r3, [pc, #32]	@ (8004b2c <prvInitialiseTaskLists+0x60>)
 8004b0a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b0c:	4b08      	ldr	r3, [pc, #32]	@ (8004b30 <prvInitialiseTaskLists+0x64>)
 8004b0e:	601c      	str	r4, [r3, #0]
}
 8004b10:	bd38      	pop	{r3, r4, r5, pc}
 8004b12:	bf00      	nop
 8004b14:	20004248 	.word	0x20004248
 8004b18:	20004234 	.word	0x20004234
 8004b1c:	20004220 	.word	0x20004220
 8004b20:	20004204 	.word	0x20004204
 8004b24:	200041f0 	.word	0x200041f0
 8004b28:	200041d8 	.word	0x200041d8
 8004b2c:	2000421c 	.word	0x2000421c
 8004b30:	20004218 	.word	0x20004218

08004b34 <prvAddNewTaskToReadyList>:
{
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004b38:	f7fc fb14 	bl	8001164 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004b3c:	4a21      	ldr	r2, [pc, #132]	@ (8004bc4 <prvAddNewTaskToReadyList+0x90>)
 8004b3e:	6813      	ldr	r3, [r2, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b44:	4b20      	ldr	r3, [pc, #128]	@ (8004bc8 <prvAddNewTaskToReadyList+0x94>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	b15b      	cbz	r3, 8004b62 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004b4a:	4b20      	ldr	r3, [pc, #128]	@ (8004bcc <prvAddNewTaskToReadyList+0x98>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	b96b      	cbnz	r3, 8004b6c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b50:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc8 <prvAddNewTaskToReadyList+0x94>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b56:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d807      	bhi.n	8004b6c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc8 <prvAddNewTaskToReadyList+0x94>)
 8004b5e:	601c      	str	r4, [r3, #0]
 8004b60:	e004      	b.n	8004b6c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8004b62:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <prvAddNewTaskToReadyList+0x94>)
 8004b64:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b66:	6813      	ldr	r3, [r2, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d028      	beq.n	8004bbe <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8004b6c:	4a18      	ldr	r2, [pc, #96]	@ (8004bd0 <prvAddNewTaskToReadyList+0x9c>)
 8004b6e:	6813      	ldr	r3, [r2, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004b74:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004b76:	2301      	movs	r3, #1
 8004b78:	4083      	lsls	r3, r0
 8004b7a:	4a16      	ldr	r2, [pc, #88]	@ (8004bd4 <prvAddNewTaskToReadyList+0xa0>)
 8004b7c:	6811      	ldr	r1, [r2, #0]
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004b86:	1d21      	adds	r1, r4, #4
 8004b88:	4b13      	ldr	r3, [pc, #76]	@ (8004bd8 <prvAddNewTaskToReadyList+0xa4>)
 8004b8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b8e:	f7fc f9bd 	bl	8000f0c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004b92:	f7fc fb09 	bl	80011a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004b96:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <prvAddNewTaskToReadyList+0x98>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	b17b      	cbz	r3, 8004bbc <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <prvAddNewTaskToReadyList+0x94>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d209      	bcs.n	8004bbc <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8004ba8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
}
 8004bbc:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8004bbe:	f7ff ff85 	bl	8004acc <prvInitialiseTaskLists>
 8004bc2:	e7d3      	b.n	8004b6c <prvAddNewTaskToReadyList+0x38>
 8004bc4:	200041d4 	.word	0x200041d4
 8004bc8:	200042d4 	.word	0x200042d4
 8004bcc:	200041c8 	.word	0x200041c8
 8004bd0:	200041b8 	.word	0x200041b8
 8004bd4:	200041cc 	.word	0x200041cc
 8004bd8:	20004248 	.word	0x20004248

08004bdc <prvDeleteTCB>:
	{
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004be0:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 8004be4:	b163      	cbz	r3, 8004c00 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d011      	beq.n	8004c0e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d00e      	beq.n	8004c0c <prvDeleteTCB+0x30>
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	e7fe      	b.n	8004bfe <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8004c00:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8004c02:	f7fc f8e1 	bl	8000dc8 <vPortFree>
				vPortFree( pxTCB );
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7fc f8de 	bl	8000dc8 <vPortFree>
	}
 8004c0c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004c0e:	f7fc f8db 	bl	8000dc8 <vPortFree>
 8004c12:	e7fb      	b.n	8004c0c <prvDeleteTCB+0x30>

08004c14 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c14:	4b0f      	ldr	r3, [pc, #60]	@ (8004c54 <prvCheckTasksWaitingTermination+0x40>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	b1d3      	cbz	r3, 8004c50 <prvCheckTasksWaitingTermination+0x3c>
{
 8004c1a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8004c1c:	f7fc faa2 	bl	8001164 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c20:	4b0d      	ldr	r3, [pc, #52]	@ (8004c58 <prvCheckTasksWaitingTermination+0x44>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c26:	1d20      	adds	r0, r4, #4
 8004c28:	f7fc f994 	bl	8000f54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c5c <prvCheckTasksWaitingTermination+0x48>)
 8004c2e:	6813      	ldr	r3, [r2, #0]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c34:	4a07      	ldr	r2, [pc, #28]	@ (8004c54 <prvCheckTasksWaitingTermination+0x40>)
 8004c36:	6813      	ldr	r3, [r2, #0]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8004c3c:	f7fc fab4 	bl	80011a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7ff ffcb 	bl	8004bdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c46:	4b03      	ldr	r3, [pc, #12]	@ (8004c54 <prvCheckTasksWaitingTermination+0x40>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e6      	bne.n	8004c1c <prvCheckTasksWaitingTermination+0x8>
}
 8004c4e:	bd10      	pop	{r4, pc}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	200041ec 	.word	0x200041ec
 8004c58:	200041f0 	.word	0x200041f0
 8004c5c:	200041d4 	.word	0x200041d4

08004c60 <prvIdleTask>:
{
 8004c60:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8004c62:	f7ff ffd7 	bl	8004c14 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c66:	4b07      	ldr	r3, [pc, #28]	@ (8004c84 <prvIdleTask+0x24>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d9f9      	bls.n	8004c62 <prvIdleTask+0x2>
				taskYIELD();
 8004c6e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c76:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	e7ee      	b.n	8004c62 <prvIdleTask+0x2>
 8004c84:	20004248 	.word	0x20004248

08004c88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d04 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004c90:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c92:	4b1d      	ldr	r3, [pc, #116]	@ (8004d08 <prvAddCurrentTaskToDelayedList+0x80>)
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	3004      	adds	r0, #4
 8004c98:	f7fc f95c 	bl	8000f54 <uxListRemove>
 8004c9c:	b948      	cbnz	r0, 8004cb2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004d08 <prvAddCurrentTaskToDelayedList+0x80>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	4918      	ldr	r1, [pc, #96]	@ (8004d0c <prvAddCurrentTaskToDelayedList+0x84>)
 8004caa:	680b      	ldr	r3, [r1, #0]
 8004cac:	ea23 0302 	bic.w	r3, r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cb2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004cb6:	d00d      	beq.n	8004cd4 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cb8:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cba:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <prvAddCurrentTaskToDelayedList+0x80>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004cc0:	42a6      	cmp	r6, r4
 8004cc2:	d910      	bls.n	8004ce6 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc4:	4b12      	ldr	r3, [pc, #72]	@ (8004d10 <prvAddCurrentTaskToDelayedList+0x88>)
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d08 <prvAddCurrentTaskToDelayedList+0x80>)
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	3104      	adds	r1, #4
 8004cce:	f7fc f928 	bl	8000f22 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	d0ef      	beq.n	8004cb8 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d08 <prvAddCurrentTaskToDelayedList+0x80>)
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	3104      	adds	r1, #4
 8004cde:	480d      	ldr	r0, [pc, #52]	@ (8004d14 <prvAddCurrentTaskToDelayedList+0x8c>)
 8004ce0:	f7fc f914 	bl	8000f0c <vListInsertEnd>
 8004ce4:	e7f5      	b.n	8004cd2 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <prvAddCurrentTaskToDelayedList+0x80>)
 8004cec:	6819      	ldr	r1, [r3, #0]
 8004cee:	3104      	adds	r1, #4
 8004cf0:	f7fc f917 	bl	8000f22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cf4:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d9ea      	bls.n	8004cd2 <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8004cfc:	4b07      	ldr	r3, [pc, #28]	@ (8004d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cfe:	601c      	str	r4, [r3, #0]
}
 8004d00:	e7e7      	b.n	8004cd2 <prvAddCurrentTaskToDelayedList+0x4a>
 8004d02:	bf00      	nop
 8004d04:	200041d0 	.word	0x200041d0
 8004d08:	200042d4 	.word	0x200042d4
 8004d0c:	200041cc 	.word	0x200041cc
 8004d10:	20004218 	.word	0x20004218
 8004d14:	200041d8 	.word	0x200041d8
 8004d18:	2000421c 	.word	0x2000421c
 8004d1c:	200041b4 	.word	0x200041b4

08004d20 <xTaskCreateStatic>:
	{
 8004d20:	b530      	push	{r4, r5, lr}
 8004d22:	b087      	sub	sp, #28
 8004d24:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004d26:	b17c      	cbz	r4, 8004d48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d28:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004d2a:	b1b5      	cbz	r5, 8004d5a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d2c:	2554      	movs	r5, #84	@ 0x54
 8004d2e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d30:	9d04      	ldr	r5, [sp, #16]
 8004d32:	2d54      	cmp	r5, #84	@ 0x54
 8004d34:	d01a      	beq.n	8004d6c <xTaskCreateStatic+0x4c>
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	e7fe      	b.n	8004d46 <xTaskCreateStatic+0x26>
 8004d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004d58:	e7fe      	b.n	8004d58 <xTaskCreateStatic+0x38>
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004d6a:	e7fe      	b.n	8004d6a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d6c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d6e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004d70:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d72:	2402      	movs	r4, #2
 8004d74:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d78:	2400      	movs	r4, #0
 8004d7a:	9403      	str	r4, [sp, #12]
 8004d7c:	9502      	str	r5, [sp, #8]
 8004d7e:	ac05      	add	r4, sp, #20
 8004d80:	9401      	str	r4, [sp, #4]
 8004d82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d84:	9400      	str	r4, [sp, #0]
 8004d86:	f7ff fe53 	bl	8004a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d8a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004d8c:	f7ff fed2 	bl	8004b34 <prvAddNewTaskToReadyList>
	}
 8004d90:	9805      	ldr	r0, [sp, #20]
 8004d92:	b007      	add	sp, #28
 8004d94:	bd30      	pop	{r4, r5, pc}

08004d96 <xTaskCreate>:
	{
 8004d96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	4688      	mov	r8, r1
 8004da0:	4614      	mov	r4, r2
 8004da2:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004da4:	0090      	lsls	r0, r2, #2
 8004da6:	f7fb ff8d 	bl	8000cc4 <pvPortMalloc>
			if( pxStack != NULL )
 8004daa:	b308      	cbz	r0, 8004df0 <xTaskCreate+0x5a>
 8004dac:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dae:	2054      	movs	r0, #84	@ 0x54
 8004db0:	f7fb ff88 	bl	8000cc4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004db4:	4605      	mov	r5, r0
 8004db6:	b1a8      	cbz	r0, 8004de4 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8004db8:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	9002      	str	r0, [sp, #8]
 8004dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	4633      	mov	r3, r6
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	f7ff fe2b 	bl	8004a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f7ff feaa 	bl	8004b34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004de0:	2001      	movs	r0, #1
 8004de2:	e007      	b.n	8004df4 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8004de4:	4648      	mov	r0, r9
 8004de6:	f7fb ffef 	bl	8000dc8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dea:	f04f 30ff 	mov.w	r0, #4294967295
 8004dee:	e001      	b.n	8004df4 <xTaskCreate+0x5e>
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004df4:	b005      	add	sp, #20
 8004df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004dfc <vTaskStartScheduler>:
{
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e00:	2400      	movs	r4, #0
 8004e02:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e04:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e06:	aa07      	add	r2, sp, #28
 8004e08:	a906      	add	r1, sp, #24
 8004e0a:	a805      	add	r0, sp, #20
 8004e0c:	f7fb fe32 	bl	8000a74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e10:	9b05      	ldr	r3, [sp, #20]
 8004e12:	9302      	str	r3, [sp, #8]
 8004e14:	9b06      	ldr	r3, [sp, #24]
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	9400      	str	r4, [sp, #0]
 8004e1a:	4623      	mov	r3, r4
 8004e1c:	9a07      	ldr	r2, [sp, #28]
 8004e1e:	490e      	ldr	r1, [pc, #56]	@ (8004e58 <vTaskStartScheduler+0x5c>)
 8004e20:	480e      	ldr	r0, [pc, #56]	@ (8004e5c <vTaskStartScheduler+0x60>)
 8004e22:	f7ff ff7d 	bl	8004d20 <xTaskCreateStatic>
 8004e26:	4b0e      	ldr	r3, [pc, #56]	@ (8004e60 <vTaskStartScheduler+0x64>)
 8004e28:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8004e2a:	b190      	cbz	r0, 8004e52 <vTaskStartScheduler+0x56>
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e3c:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <vTaskStartScheduler+0x68>)
 8004e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e44:	4b08      	ldr	r3, [pc, #32]	@ (8004e68 <vTaskStartScheduler+0x6c>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e4a:	4b08      	ldr	r3, [pc, #32]	@ (8004e6c <vTaskStartScheduler+0x70>)
 8004e4c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004e4e:	f7fc fa23 	bl	8001298 <xPortStartScheduler>
}
 8004e52:	b008      	add	sp, #32
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	bf00      	nop
 8004e58:	080059e4 	.word	0x080059e4
 8004e5c:	08004c61 	.word	0x08004c61
 8004e60:	200041b0 	.word	0x200041b0
 8004e64:	200041b4 	.word	0x200041b4
 8004e68:	200041c8 	.word	0x200041c8
 8004e6c:	200041d0 	.word	0x200041d0

08004e70 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004e70:	4a02      	ldr	r2, [pc, #8]	@ (8004e7c <vTaskSuspendAll+0xc>)
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	6013      	str	r3, [r2, #0]
}
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	200041ac 	.word	0x200041ac

08004e80 <xTaskIncrementTick>:
{
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e82:	4b3a      	ldr	r3, [pc, #232]	@ (8004f6c <xTaskIncrementTick+0xec>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d169      	bne.n	8004f5e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e8a:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <xTaskIncrementTick+0xf0>)
 8004e8c:	681d      	ldr	r5, [r3, #0]
 8004e8e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004e90:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e92:	b9c5      	cbnz	r5, 8004ec6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004e94:	4b37      	ldr	r3, [pc, #220]	@ (8004f74 <xTaskIncrementTick+0xf4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	b143      	cbz	r3, 8004eae <xTaskIncrementTick+0x2e>
 8004e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	e7fe      	b.n	8004eac <xTaskIncrementTick+0x2c>
 8004eae:	4a31      	ldr	r2, [pc, #196]	@ (8004f74 <xTaskIncrementTick+0xf4>)
 8004eb0:	6811      	ldr	r1, [r2, #0]
 8004eb2:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <xTaskIncrementTick+0xf8>)
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	6010      	str	r0, [r2, #0]
 8004eb8:	6019      	str	r1, [r3, #0]
 8004eba:	4a30      	ldr	r2, [pc, #192]	@ (8004f7c <xTaskIncrementTick+0xfc>)
 8004ebc:	6813      	ldr	r3, [r2, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	f7ff fd9f 	bl	8004a04 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8004f80 <xTaskIncrementTick+0x100>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	42ab      	cmp	r3, r5
 8004ecc:	d93d      	bls.n	8004f4a <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8004ece:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8004f84 <xTaskIncrementTick+0x104>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004eda:	009a      	lsls	r2, r3, #2
 8004edc:	4b2a      	ldr	r3, [pc, #168]	@ (8004f88 <xTaskIncrementTick+0x108>)
 8004ede:	589b      	ldr	r3, [r3, r2]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d900      	bls.n	8004ee6 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8004ee4:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8004ee6:	4b29      	ldr	r3, [pc, #164]	@ (8004f8c <xTaskIncrementTick+0x10c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d03c      	beq.n	8004f68 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8004eee:	2701      	movs	r7, #1
	return xSwitchRequired;
 8004ef0:	e03a      	b.n	8004f68 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8004ef2:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f74 <xTaskIncrementTick+0xf4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	b343      	cbz	r3, 8004f4e <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004efc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <xTaskIncrementTick+0xf4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f04:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8004f06:	429d      	cmp	r5, r3
 8004f08:	d326      	bcc.n	8004f58 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f0a:	1d26      	adds	r6, r4, #4
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7fc f821 	bl	8000f54 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004f14:	b11b      	cbz	r3, 8004f1e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f16:	f104 0018 	add.w	r0, r4, #24
 8004f1a:	f7fc f81b 	bl	8000f54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004f20:	2201      	movs	r2, #1
 8004f22:	409a      	lsls	r2, r3
 8004f24:	491a      	ldr	r1, [pc, #104]	@ (8004f90 <xTaskIncrementTick+0x110>)
 8004f26:	6808      	ldr	r0, [r1, #0]
 8004f28:	4302      	orrs	r2, r0
 8004f2a:	600a      	str	r2, [r1, #0]
 8004f2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f30:	009a      	lsls	r2, r3, #2
 8004f32:	4631      	mov	r1, r6
 8004f34:	4814      	ldr	r0, [pc, #80]	@ (8004f88 <xTaskIncrementTick+0x108>)
 8004f36:	4410      	add	r0, r2
 8004f38:	f7fb ffe8 	bl	8000f0c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f3c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004f3e:	4b11      	ldr	r3, [pc, #68]	@ (8004f84 <xTaskIncrementTick+0x104>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d2d4      	bcs.n	8004ef2 <xTaskIncrementTick+0x72>
 8004f48:	e7d4      	b.n	8004ef4 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8004f4a:	2700      	movs	r7, #0
 8004f4c:	e7d2      	b.n	8004ef4 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <xTaskIncrementTick+0x100>)
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295
 8004f54:	601a      	str	r2, [r3, #0]
					break;
 8004f56:	e7bb      	b.n	8004ed0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8004f58:	4a09      	ldr	r2, [pc, #36]	@ (8004f80 <xTaskIncrementTick+0x100>)
 8004f5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f5c:	e7b8      	b.n	8004ed0 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8004f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f94 <xTaskIncrementTick+0x114>)
 8004f60:	6813      	ldr	r3, [r2, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004f66:	2700      	movs	r7, #0
}
 8004f68:	4638      	mov	r0, r7
 8004f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6c:	200041ac 	.word	0x200041ac
 8004f70:	200041d0 	.word	0x200041d0
 8004f74:	2000421c 	.word	0x2000421c
 8004f78:	20004218 	.word	0x20004218
 8004f7c:	200041bc 	.word	0x200041bc
 8004f80:	200041b4 	.word	0x200041b4
 8004f84:	200042d4 	.word	0x200042d4
 8004f88:	20004248 	.word	0x20004248
 8004f8c:	200041c0 	.word	0x200041c0
 8004f90:	200041cc 	.word	0x200041cc
 8004f94:	200041c4 	.word	0x200041c4

08004f98 <xTaskResumeAll>:
{
 8004f98:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8004f9a:	4b35      	ldr	r3, [pc, #212]	@ (8005070 <xTaskResumeAll+0xd8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	b943      	cbnz	r3, 8004fb2 <xTaskResumeAll+0x1a>
 8004fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	e7fe      	b.n	8004fb0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8004fb2:	f7fc f8d7 	bl	8001164 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8005070 <xTaskResumeAll+0xd8>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	3a01      	subs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d14f      	bne.n	8005064 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005074 <xTaskResumeAll+0xdc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	b90b      	cbnz	r3, 8004fce <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004fca:	2400      	movs	r4, #0
 8004fcc:	e04b      	b.n	8005066 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8004fce:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fd0:	4b29      	ldr	r3, [pc, #164]	@ (8005078 <xTaskResumeAll+0xe0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	b31b      	cbz	r3, 800501e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd6:	4b28      	ldr	r3, [pc, #160]	@ (8005078 <xTaskResumeAll+0xe0>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fdc:	f104 0018 	add.w	r0, r4, #24
 8004fe0:	f7fb ffb8 	bl	8000f54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fe4:	1d25      	adds	r5, r4, #4
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f7fb ffb4 	bl	8000f54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fec:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004fee:	2301      	movs	r3, #1
 8004ff0:	4083      	lsls	r3, r0
 8004ff2:	4a22      	ldr	r2, [pc, #136]	@ (800507c <xTaskResumeAll+0xe4>)
 8004ff4:	6811      	ldr	r1, [r2, #0]
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ffe:	4629      	mov	r1, r5
 8005000:	4b1f      	ldr	r3, [pc, #124]	@ (8005080 <xTaskResumeAll+0xe8>)
 8005002:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005006:	f7fb ff81 	bl	8000f0c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800500a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800500c:	4b1d      	ldr	r3, [pc, #116]	@ (8005084 <xTaskResumeAll+0xec>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	429a      	cmp	r2, r3
 8005014:	d3dc      	bcc.n	8004fd0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005016:	4b1c      	ldr	r3, [pc, #112]	@ (8005088 <xTaskResumeAll+0xf0>)
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e7d8      	b.n	8004fd0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800501e:	b10c      	cbz	r4, 8005024 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005020:	f7ff fcf0 	bl	8004a04 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005024:	4b19      	ldr	r3, [pc, #100]	@ (800508c <xTaskResumeAll+0xf4>)
 8005026:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005028:	b984      	cbnz	r4, 800504c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800502a:	4b17      	ldr	r3, [pc, #92]	@ (8005088 <xTaskResumeAll+0xf0>)
 800502c:	681c      	ldr	r4, [r3, #0]
 800502e:	b1d4      	cbz	r4, 8005066 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005030:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005038:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005044:	2401      	movs	r4, #1
 8005046:	e00e      	b.n	8005066 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005048:	3c01      	subs	r4, #1
 800504a:	d007      	beq.n	800505c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800504c:	f7ff ff18 	bl	8004e80 <xTaskIncrementTick>
 8005050:	2800      	cmp	r0, #0
 8005052:	d0f9      	beq.n	8005048 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005054:	4b0c      	ldr	r3, [pc, #48]	@ (8005088 <xTaskResumeAll+0xf0>)
 8005056:	2201      	movs	r2, #1
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	e7f5      	b.n	8005048 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800505c:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <xTaskResumeAll+0xf4>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e7e2      	b.n	800502a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005064:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005066:	f7fc f89f 	bl	80011a8 <vPortExitCritical>
}
 800506a:	4620      	mov	r0, r4
 800506c:	bd38      	pop	{r3, r4, r5, pc}
 800506e:	bf00      	nop
 8005070:	200041ac 	.word	0x200041ac
 8005074:	200041d4 	.word	0x200041d4
 8005078:	20004204 	.word	0x20004204
 800507c:	200041cc 	.word	0x200041cc
 8005080:	20004248 	.word	0x20004248
 8005084:	200042d4 	.word	0x200042d4
 8005088:	200041c0 	.word	0x200041c0
 800508c:	200041c4 	.word	0x200041c4

08005090 <vTaskDelay>:
	{
 8005090:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005092:	b1a8      	cbz	r0, 80050c0 <vTaskDelay+0x30>
 8005094:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005096:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <vTaskDelay+0x48>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	b143      	cbz	r3, 80050ae <vTaskDelay+0x1e>
 800509c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	e7fe      	b.n	80050ac <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80050ae:	f7ff fedf 	bl	8004e70 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050b2:	2100      	movs	r1, #0
 80050b4:	4620      	mov	r0, r4
 80050b6:	f7ff fde7 	bl	8004c88 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80050ba:	f7ff ff6d 	bl	8004f98 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80050be:	b948      	cbnz	r0, 80050d4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80050c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80050c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
	}
 80050d4:	bd10      	pop	{r4, pc}
 80050d6:	bf00      	nop
 80050d8:	200041ac 	.word	0x200041ac

080050dc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050dc:	4b20      	ldr	r3, [pc, #128]	@ (8005160 <vTaskSwitchContext+0x84>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	b11b      	cbz	r3, 80050ea <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80050e2:	4b20      	ldr	r3, [pc, #128]	@ (8005164 <vTaskSwitchContext+0x88>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80050ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005164 <vTaskSwitchContext+0x88>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005168 <vTaskSwitchContext+0x8c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80050f4:	fab3 f383 	clz	r3, r3
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f1c3 031f 	rsb	r3, r3, #31
 80050fe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005102:	008a      	lsls	r2, r1, #2
 8005104:	4919      	ldr	r1, [pc, #100]	@ (800516c <vTaskSwitchContext+0x90>)
 8005106:	588a      	ldr	r2, [r1, r2]
 8005108:	b942      	cbnz	r2, 800511c <vTaskSwitchContext+0x40>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	e7fe      	b.n	800511a <vTaskSwitchContext+0x3e>
 800511c:	4813      	ldr	r0, [pc, #76]	@ (800516c <vTaskSwitchContext+0x90>)
 800511e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005122:	008a      	lsls	r2, r1, #2
 8005124:	4402      	add	r2, r0
 8005126:	6851      	ldr	r1, [r2, #4]
 8005128:	6849      	ldr	r1, [r1, #4]
 800512a:	6051      	str	r1, [r2, #4]
 800512c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8005130:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8005134:	3208      	adds	r2, #8
 8005136:	4402      	add	r2, r0
 8005138:	4291      	cmp	r1, r2
 800513a:	d009      	beq.n	8005150 <vTaskSwitchContext+0x74>
 800513c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005140:	009a      	lsls	r2, r3, #2
 8005142:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <vTaskSwitchContext+0x90>)
 8005144:	4413      	add	r3, r2
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <vTaskSwitchContext+0x94>)
 800514c:	601a      	str	r2, [r3, #0]
}
 800514e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005150:	6848      	ldr	r0, [r1, #4]
 8005152:	4662      	mov	r2, ip
 8005154:	0091      	lsls	r1, r2, #2
 8005156:	4a05      	ldr	r2, [pc, #20]	@ (800516c <vTaskSwitchContext+0x90>)
 8005158:	440a      	add	r2, r1
 800515a:	6050      	str	r0, [r2, #4]
 800515c:	e7ee      	b.n	800513c <vTaskSwitchContext+0x60>
 800515e:	bf00      	nop
 8005160:	200041ac 	.word	0x200041ac
 8005164:	200041c0 	.word	0x200041c0
 8005168:	200041cc 	.word	0x200041cc
 800516c:	20004248 	.word	0x20004248
 8005170:	200042d4 	.word	0x200042d4

08005174 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005174:	b500      	push	{lr}
 8005176:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8005178:	a902      	add	r1, sp, #8
 800517a:	2300      	movs	r3, #0
 800517c:	9302      	str	r3, [sp, #8]
 800517e:	604b      	str	r3, [r1, #4]
 8005180:	608b      	str	r3, [r1, #8]
 8005182:	60cb      	str	r3, [r1, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005188:	480f      	ldr	r0, [pc, #60]	@ (80051c8 <MX_TIM3_Init+0x54>)
 800518a:	4a10      	ldr	r2, [pc, #64]	@ (80051cc <MX_TIM3_Init+0x58>)
 800518c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 800518e:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005190:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8005192:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005196:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005198:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800519a:	6183      	str	r3, [r0, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.Commutation_Delay = 0;
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800519c:	f7fe fe23 	bl	8003de6 <HAL_TIMEx_HallSensor_Init>
 80051a0:	b958      	cbnz	r0, 80051ba <MX_TIM3_Init+0x46>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80051a2:	2350      	movs	r3, #80	@ 0x50
 80051a4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80051aa:	4669      	mov	r1, sp
 80051ac:	4806      	ldr	r0, [pc, #24]	@ (80051c8 <MX_TIM3_Init+0x54>)
 80051ae:	f7fe fefd 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 80051b2:	b928      	cbnz	r0, 80051c0 <MX_TIM3_Init+0x4c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80051b4:	b007      	add	sp, #28
 80051b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80051ba:	f7fb feeb 	bl	8000f94 <Error_Handler>
 80051be:	e7f0      	b.n	80051a2 <MX_TIM3_Init+0x2e>
    Error_Handler();
 80051c0:	f7fb fee8 	bl	8000f94 <Error_Handler>
}
 80051c4:	e7f6      	b.n	80051b4 <MX_TIM3_Init+0x40>
 80051c6:	bf00      	nop
 80051c8:	200042d8 	.word	0x200042d8
 80051cc:	40000400 	.word	0x40000400

080051d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051d0:	b510      	push	{r4, lr}
 80051d2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051d4:	2300      	movs	r3, #0
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	9305      	str	r3, [sp, #20]
 80051dc:	9306      	str	r3, [sp, #24]
 80051de:	9307      	str	r3, [sp, #28]
  if(tim_baseHandle->Instance==TIM1)
 80051e0:	6802      	ldr	r2, [r0, #0]
 80051e2:	4b20      	ldr	r3, [pc, #128]	@ (8005264 <HAL_TIM_Base_MspInit+0x94>)
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d001      	beq.n	80051ec <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80051e8:	b008      	add	sp, #32
 80051ea:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051ec:	2400      	movs	r4, #0
 80051ee:	9401      	str	r4, [sp, #4]
 80051f0:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80051f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80051fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051fe:	f002 0201 	and.w	r2, r2, #1
 8005202:	9201      	str	r2, [sp, #4]
 8005204:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005206:	9402      	str	r4, [sp, #8]
 8005208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800520a:	f042 0202 	orr.w	r2, r2, #2
 800520e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	9302      	str	r3, [sp, #8]
 8005218:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800521a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800521e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005220:	2302      	movs	r3, #2
 8005222:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005224:	2301      	movs	r3, #1
 8005226:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005228:	a903      	add	r1, sp, #12
 800522a:	480f      	ldr	r0, [pc, #60]	@ (8005268 <HAL_TIM_Base_MspInit+0x98>)
 800522c:	f7fd f948 	bl	80024c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8005230:	4622      	mov	r2, r4
 8005232:	2105      	movs	r1, #5
 8005234:	2018      	movs	r0, #24
 8005236:	f7fc fecf 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800523a:	2018      	movs	r0, #24
 800523c:	f7fc fedc 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8005240:	4622      	mov	r2, r4
 8005242:	2105      	movs	r1, #5
 8005244:	2019      	movs	r0, #25
 8005246:	f7fc fec7 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800524a:	2019      	movs	r0, #25
 800524c:	f7fc fed4 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8005250:	4622      	mov	r2, r4
 8005252:	2105      	movs	r1, #5
 8005254:	201b      	movs	r0, #27
 8005256:	f7fc febf 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800525a:	201b      	movs	r0, #27
 800525c:	f7fc fecc 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
}
 8005260:	e7c2      	b.n	80051e8 <HAL_TIM_Base_MspInit+0x18>
 8005262:	bf00      	nop
 8005264:	40010000 	.word	0x40010000
 8005268:	40020400 	.word	0x40020400

0800526c <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005270:	2300      	movs	r3, #0
 8005272:	9303      	str	r3, [sp, #12]
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	9305      	str	r3, [sp, #20]
 8005278:	9306      	str	r3, [sp, #24]
 800527a:	9307      	str	r3, [sp, #28]
  if(timex_hallsensorHandle->Instance==TIM3)
 800527c:	6802      	ldr	r2, [r0, #0]
 800527e:	4b1d      	ldr	r3, [pc, #116]	@ (80052f4 <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_TIMEx_HallSensor_MspInit+0x1c>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005284:	b008      	add	sp, #32
 8005286:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005288:	2400      	movs	r4, #0
 800528a:	9400      	str	r4, [sp, #0]
 800528c:	f503 330d 	add.w	r3, r3, #144384	@ 0x23400
 8005290:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005292:	f042 0202 	orr.w	r2, r2, #2
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40
 8005298:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800529a:	f002 0202 	and.w	r2, r2, #2
 800529e:	9200      	str	r2, [sp, #0]
 80052a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a2:	9401      	str	r4, [sp, #4]
 80052a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80052ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ae:	f002 0201 	and.w	r2, r2, #1
 80052b2:	9201      	str	r2, [sp, #4]
 80052b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b6:	9402      	str	r4, [sp, #8]
 80052b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ba:	f042 0202 	orr.w	r2, r2, #2
 80052be:	631a      	str	r2, [r3, #48]	@ 0x30
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052ca:	23c0      	movs	r3, #192	@ 0xc0
 80052cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ce:	2502      	movs	r5, #2
 80052d0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052d2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d4:	ae03      	add	r6, sp, #12
 80052d6:	4631      	mov	r1, r6
 80052d8:	4807      	ldr	r0, [pc, #28]	@ (80052f8 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 80052da:	f7fd f8f1 	bl	80024c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80052de:	2301      	movs	r3, #1
 80052e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052e8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ea:	4631      	mov	r1, r6
 80052ec:	4803      	ldr	r0, [pc, #12]	@ (80052fc <HAL_TIMEx_HallSensor_MspInit+0x90>)
 80052ee:	f7fd f8e7 	bl	80024c0 <HAL_GPIO_Init>
}
 80052f2:	e7c7      	b.n	8005284 <HAL_TIMEx_HallSensor_MspInit+0x18>
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40020000 	.word	0x40020000
 80052fc:	40020400 	.word	0x40020400

08005300 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005300:	b500      	push	{lr}
 8005302:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005304:	2300      	movs	r3, #0
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	9302      	str	r3, [sp, #8]
 800530a:	9303      	str	r3, [sp, #12]
 800530c:	9304      	str	r3, [sp, #16]
 800530e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8005310:	6802      	ldr	r2, [r0, #0]
 8005312:	4b0f      	ldr	r3, [pc, #60]	@ (8005350 <HAL_TIM_MspPostInit+0x50>)
 8005314:	429a      	cmp	r2, r3
 8005316:	d002      	beq.n	800531e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005318:	b007      	add	sp, #28
 800531a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800531e:	2300      	movs	r3, #0
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <HAL_TIM_MspPostInit+0x54>)
 8005324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
 800532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005336:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800533a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	2302      	movs	r3, #2
 800533e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005340:	2301      	movs	r3, #1
 8005342:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005344:	a901      	add	r1, sp, #4
 8005346:	4804      	ldr	r0, [pc, #16]	@ (8005358 <HAL_TIM_MspPostInit+0x58>)
 8005348:	f7fd f8ba 	bl	80024c0 <HAL_GPIO_Init>
}
 800534c:	e7e4      	b.n	8005318 <HAL_TIM_MspPostInit+0x18>
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40023800 	.word	0x40023800
 8005358:	40020000 	.word	0x40020000

0800535c <MX_TIM1_Init>:
{
 800535c:	b530      	push	{r4, r5, lr}
 800535e:	b097      	sub	sp, #92	@ 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005360:	2400      	movs	r4, #0
 8005362:	9412      	str	r4, [sp, #72]	@ 0x48
 8005364:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005366:	9414      	str	r4, [sp, #80]	@ 0x50
 8005368:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800536a:	9410      	str	r4, [sp, #64]	@ 0x40
 800536c:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 800536e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005370:	940a      	str	r4, [sp, #40]	@ 0x28
 8005372:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005374:	940c      	str	r4, [sp, #48]	@ 0x30
 8005376:	940d      	str	r4, [sp, #52]	@ 0x34
 8005378:	940e      	str	r4, [sp, #56]	@ 0x38
 800537a:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800537c:	2520      	movs	r5, #32
 800537e:	462a      	mov	r2, r5
 8005380:	4621      	mov	r1, r4
 8005382:	a801      	add	r0, sp, #4
 8005384:	f000 f965 	bl	8005652 <memset>
  htim1.Instance = TIM1;
 8005388:	4840      	ldr	r0, [pc, #256]	@ (800548c <MX_TIM1_Init+0x130>)
 800538a:	4b41      	ldr	r3, [pc, #260]	@ (8005490 <MX_TIM1_Init+0x134>)
 800538c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 1-1;
 800538e:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005390:	6085      	str	r5, [r0, #8]
  htim1.Init.Period = 8000-1;
 8005392:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 8005396:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8005398:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800539c:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 1;
 800539e:	2301      	movs	r3, #1
 80053a0:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053a2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80053a4:	f7fe faba 	bl	800391c <HAL_TIM_Base_Init>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d154      	bne.n	8005456 <MX_TIM1_Init+0xfa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053b0:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80053b2:	a912      	add	r1, sp, #72	@ 0x48
 80053b4:	4835      	ldr	r0, [pc, #212]	@ (800548c <MX_TIM1_Init+0x130>)
 80053b6:	f7fe fbfa 	bl	8003bae <HAL_TIM_ConfigClockSource>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d14e      	bne.n	800545c <MX_TIM1_Init+0x100>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80053be:	4833      	ldr	r0, [pc, #204]	@ (800548c <MX_TIM1_Init+0x130>)
 80053c0:	f7fe fad8 	bl	8003974 <HAL_TIM_PWM_Init>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d14c      	bne.n	8005462 <MX_TIM1_Init+0x106>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053c8:	2300      	movs	r3, #0
 80053ca:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053cc:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80053ce:	a910      	add	r1, sp, #64	@ 0x40
 80053d0:	482e      	ldr	r0, [pc, #184]	@ (800548c <MX_TIM1_Init+0x130>)
 80053d2:	f7fe fdeb 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d146      	bne.n	8005468 <MX_TIM1_Init+0x10c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053da:	2360      	movs	r3, #96	@ 0x60
 80053dc:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80053de:	2200      	movs	r2, #0
 80053e0:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053e2:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80053e4:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053e6:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80053e8:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80053ea:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053ec:	a909      	add	r1, sp, #36	@ 0x24
 80053ee:	4827      	ldr	r0, [pc, #156]	@ (800548c <MX_TIM1_Init+0x130>)
 80053f0:	f7fe fb24 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d13a      	bne.n	800546e <MX_TIM1_Init+0x112>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80053f8:	2204      	movs	r2, #4
 80053fa:	a909      	add	r1, sp, #36	@ 0x24
 80053fc:	4823      	ldr	r0, [pc, #140]	@ (800548c <MX_TIM1_Init+0x130>)
 80053fe:	f7fe fb1d 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 8005402:	2800      	cmp	r0, #0
 8005404:	d136      	bne.n	8005474 <MX_TIM1_Init+0x118>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005406:	2208      	movs	r2, #8
 8005408:	a909      	add	r1, sp, #36	@ 0x24
 800540a:	4820      	ldr	r0, [pc, #128]	@ (800548c <MX_TIM1_Init+0x130>)
 800540c:	f7fe fb16 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 8005410:	2800      	cmp	r0, #0
 8005412:	d132      	bne.n	800547a <MX_TIM1_Init+0x11e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8005414:	2370      	movs	r3, #112	@ 0x70
 8005416:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 8000-2;
 8005418:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 800541c:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800541e:	220c      	movs	r2, #12
 8005420:	a909      	add	r1, sp, #36	@ 0x24
 8005422:	481a      	ldr	r0, [pc, #104]	@ (800548c <MX_TIM1_Init+0x130>)
 8005424:	f7fe fb0a 	bl	8003a3c <HAL_TIM_PWM_ConfigChannel>
 8005428:	bb50      	cbnz	r0, 8005480 <MX_TIM1_Init+0x124>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800542a:	2300      	movs	r3, #0
 800542c:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800542e:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005430:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005432:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8005434:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005438:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800543a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800543e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005440:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005442:	a901      	add	r1, sp, #4
 8005444:	4811      	ldr	r0, [pc, #68]	@ (800548c <MX_TIM1_Init+0x130>)
 8005446:	f7fe fdf7 	bl	8004038 <HAL_TIMEx_ConfigBreakDeadTime>
 800544a:	b9e0      	cbnz	r0, 8005486 <MX_TIM1_Init+0x12a>
  HAL_TIM_MspPostInit(&htim1);
 800544c:	480f      	ldr	r0, [pc, #60]	@ (800548c <MX_TIM1_Init+0x130>)
 800544e:	f7ff ff57 	bl	8005300 <HAL_TIM_MspPostInit>
}
 8005452:	b017      	add	sp, #92	@ 0x5c
 8005454:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8005456:	f7fb fd9d 	bl	8000f94 <Error_Handler>
 800545a:	e7a7      	b.n	80053ac <MX_TIM1_Init+0x50>
    Error_Handler();
 800545c:	f7fb fd9a 	bl	8000f94 <Error_Handler>
 8005460:	e7ad      	b.n	80053be <MX_TIM1_Init+0x62>
    Error_Handler();
 8005462:	f7fb fd97 	bl	8000f94 <Error_Handler>
 8005466:	e7af      	b.n	80053c8 <MX_TIM1_Init+0x6c>
    Error_Handler();
 8005468:	f7fb fd94 	bl	8000f94 <Error_Handler>
 800546c:	e7b5      	b.n	80053da <MX_TIM1_Init+0x7e>
    Error_Handler();
 800546e:	f7fb fd91 	bl	8000f94 <Error_Handler>
 8005472:	e7c1      	b.n	80053f8 <MX_TIM1_Init+0x9c>
    Error_Handler();
 8005474:	f7fb fd8e 	bl	8000f94 <Error_Handler>
 8005478:	e7c5      	b.n	8005406 <MX_TIM1_Init+0xaa>
    Error_Handler();
 800547a:	f7fb fd8b 	bl	8000f94 <Error_Handler>
 800547e:	e7c9      	b.n	8005414 <MX_TIM1_Init+0xb8>
    Error_Handler();
 8005480:	f7fb fd88 	bl	8000f94 <Error_Handler>
 8005484:	e7d1      	b.n	800542a <MX_TIM1_Init+0xce>
    Error_Handler();
 8005486:	f7fb fd85 	bl	8000f94 <Error_Handler>
 800548a:	e7df      	b.n	800544c <MX_TIM1_Init+0xf0>
 800548c:	20004320 	.word	0x20004320
 8005490:	40010000 	.word	0x40010000

08005494 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005494:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005496:	480a      	ldr	r0, [pc, #40]	@ (80054c0 <MX_USART3_UART_Init+0x2c>)
 8005498:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <MX_USART3_UART_Init+0x30>)
 800549a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 921600;
 800549c:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 80054a0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80054a2:	2300      	movs	r3, #0
 80054a4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80054a6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80054a8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80054aa:	220c      	movs	r2, #12
 80054ac:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054ae:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80054b0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80054b2:	f7fe ff35 	bl	8004320 <HAL_UART_Init>
 80054b6:	b900      	cbnz	r0, 80054ba <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80054b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80054ba:	f7fb fd6b 	bl	8000f94 <Error_Handler>
}
 80054be:	e7fb      	b.n	80054b8 <MX_USART3_UART_Init+0x24>
 80054c0:	20004428 	.word	0x20004428
 80054c4:	40004800 	.word	0x40004800

080054c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80054c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054cc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ce:	2300      	movs	r3, #0
 80054d0:	9303      	str	r3, [sp, #12]
 80054d2:	9304      	str	r3, [sp, #16]
 80054d4:	9305      	str	r3, [sp, #20]
 80054d6:	9306      	str	r3, [sp, #24]
 80054d8:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 80054da:	6802      	ldr	r2, [r0, #0]
 80054dc:	4b41      	ldr	r3, [pc, #260]	@ (80055e4 <HAL_UART_MspInit+0x11c>)
 80054de:	429a      	cmp	r2, r3
 80054e0:	d002      	beq.n	80054e8 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80054e2:	b008      	add	sp, #32
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_ENABLE();
 80054ea:	2500      	movs	r5, #0
 80054ec:	9500      	str	r5, [sp, #0]
 80054ee:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 80054f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054f4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80054f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80054fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054fc:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8005500:	9200      	str	r2, [sp, #0]
 8005502:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005504:	9501      	str	r5, [sp, #4]
 8005506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005508:	f042 0204 	orr.w	r2, r2, #4
 800550c:	631a      	str	r2, [r3, #48]	@ 0x30
 800550e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005510:	f002 0204 	and.w	r2, r2, #4
 8005514:	9201      	str	r2, [sp, #4]
 8005516:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005518:	9502      	str	r5, [sp, #8]
 800551a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800551c:	f042 0202 	orr.w	r2, r2, #2
 8005520:	631a      	str	r2, [r3, #48]	@ 0x30
 8005522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	9302      	str	r3, [sp, #8]
 800552a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800552c:	2320      	movs	r3, #32
 800552e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005530:	f04f 0a02 	mov.w	sl, #2
 8005534:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005538:	f04f 0903 	mov.w	r9, #3
 800553c:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005540:	f04f 0807 	mov.w	r8, #7
 8005544:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005548:	af03      	add	r7, sp, #12
 800554a:	4639      	mov	r1, r7
 800554c:	4826      	ldr	r0, [pc, #152]	@ (80055e8 <HAL_UART_MspInit+0x120>)
 800554e:	f7fc ffb7 	bl	80024c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005552:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8005556:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005558:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555e:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005562:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005566:	4639      	mov	r1, r7
 8005568:	4820      	ldr	r0, [pc, #128]	@ (80055ec <HAL_UART_MspInit+0x124>)
 800556a:	f7fc ffa9 	bl	80024c0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800556e:	4820      	ldr	r0, [pc, #128]	@ (80055f0 <HAL_UART_MspInit+0x128>)
 8005570:	4b20      	ldr	r3, [pc, #128]	@ (80055f4 <HAL_UART_MspInit+0x12c>)
 8005572:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005574:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005578:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800557a:	2340      	movs	r3, #64	@ 0x40
 800557c:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800557e:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005580:	6106      	str	r6, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005582:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005584:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005586:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005588:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800558a:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800558c:	f7fc fdb4 	bl	80020f8 <HAL_DMA_Init>
 8005590:	bb10      	cbnz	r0, 80055d8 <HAL_UART_MspInit+0x110>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005592:	4b17      	ldr	r3, [pc, #92]	@ (80055f0 <HAL_UART_MspInit+0x128>)
 8005594:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005596:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005598:	4817      	ldr	r0, [pc, #92]	@ (80055f8 <HAL_UART_MspInit+0x130>)
 800559a:	4b18      	ldr	r3, [pc, #96]	@ (80055fc <HAL_UART_MspInit+0x134>)
 800559c:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800559e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055a2:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055a4:	2300      	movs	r3, #0
 80055a6:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a8:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055ae:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055b0:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055b2:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80055b4:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055b6:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055b8:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80055ba:	f7fc fd9d 	bl	80020f8 <HAL_DMA_Init>
 80055be:	b970      	cbnz	r0, 80055de <HAL_UART_MspInit+0x116>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80055c0:	4b0d      	ldr	r3, [pc, #52]	@ (80055f8 <HAL_UART_MspInit+0x130>)
 80055c2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80055c4:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80055c6:	2200      	movs	r2, #0
 80055c8:	2105      	movs	r1, #5
 80055ca:	2027      	movs	r0, #39	@ 0x27
 80055cc:	f7fc fd04 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80055d0:	2027      	movs	r0, #39	@ 0x27
 80055d2:	f7fc fd11 	bl	8001ff8 <HAL_NVIC_EnableIRQ>
}
 80055d6:	e784      	b.n	80054e2 <HAL_UART_MspInit+0x1a>
      Error_Handler();
 80055d8:	f7fb fcdc 	bl	8000f94 <Error_Handler>
 80055dc:	e7d9      	b.n	8005592 <HAL_UART_MspInit+0xca>
      Error_Handler();
 80055de:	f7fb fcd9 	bl	8000f94 <Error_Handler>
 80055e2:	e7ed      	b.n	80055c0 <HAL_UART_MspInit+0xf8>
 80055e4:	40004800 	.word	0x40004800
 80055e8:	40020800 	.word	0x40020800
 80055ec:	40020400 	.word	0x40020400
 80055f0:	200043c8 	.word	0x200043c8
 80055f4:	40026058 	.word	0x40026058
 80055f8:	20004368 	.word	0x20004368
 80055fc:	40026028 	.word	0x40026028

08005600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005638 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005604:	f7ff f9f4 	bl	80049f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005608:	480c      	ldr	r0, [pc, #48]	@ (800563c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800560a:	490d      	ldr	r1, [pc, #52]	@ (8005640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800560c:	4a0d      	ldr	r2, [pc, #52]	@ (8005644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800560e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005610:	e002      	b.n	8005618 <LoopCopyDataInit>

08005612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005616:	3304      	adds	r3, #4

08005618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800561a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800561c:	d3f9      	bcc.n	8005612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800561e:	4a0a      	ldr	r2, [pc, #40]	@ (8005648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005620:	4c0a      	ldr	r4, [pc, #40]	@ (800564c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005624:	e001      	b.n	800562a <LoopFillZerobss>

08005626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005628:	3204      	adds	r2, #4

0800562a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800562a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800562c:	d3fb      	bcc.n	8005626 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800562e:	f000 f819 	bl	8005664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005632:	f7fb fd05 	bl	8001040 <main>
  bx  lr    
 8005636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800563c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005640:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8005644:	08005a1c 	.word	0x08005a1c
  ldr r2, =_sbss
 8005648:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800564c:	20004470 	.word	0x20004470

08005650 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005650:	e7fe      	b.n	8005650 <CAN1_RX0_IRQHandler>

08005652 <memset>:
 8005652:	4402      	add	r2, r0
 8005654:	4603      	mov	r3, r0
 8005656:	4293      	cmp	r3, r2
 8005658:	d100      	bne.n	800565c <memset+0xa>
 800565a:	4770      	bx	lr
 800565c:	f803 1b01 	strb.w	r1, [r3], #1
 8005660:	e7f9      	b.n	8005656 <memset+0x4>
	...

08005664 <__libc_init_array>:
 8005664:	b570      	push	{r4, r5, r6, lr}
 8005666:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <__libc_init_array+0x38>)
 8005668:	4d0d      	ldr	r5, [pc, #52]	@ (80056a0 <__libc_init_array+0x3c>)
 800566a:	1b5b      	subs	r3, r3, r5
 800566c:	109c      	asrs	r4, r3, #2
 800566e:	2600      	movs	r6, #0
 8005670:	42a6      	cmp	r6, r4
 8005672:	d109      	bne.n	8005688 <__libc_init_array+0x24>
 8005674:	f000 f996 	bl	80059a4 <_init>
 8005678:	4d0a      	ldr	r5, [pc, #40]	@ (80056a4 <__libc_init_array+0x40>)
 800567a:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <__libc_init_array+0x44>)
 800567c:	1b5b      	subs	r3, r3, r5
 800567e:	109c      	asrs	r4, r3, #2
 8005680:	2600      	movs	r6, #0
 8005682:	42a6      	cmp	r6, r4
 8005684:	d105      	bne.n	8005692 <__libc_init_array+0x2e>
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	f855 3b04 	ldr.w	r3, [r5], #4
 800568c:	4798      	blx	r3
 800568e:	3601      	adds	r6, #1
 8005690:	e7ee      	b.n	8005670 <__libc_init_array+0xc>
 8005692:	f855 3b04 	ldr.w	r3, [r5], #4
 8005696:	4798      	blx	r3
 8005698:	3601      	adds	r6, #1
 800569a:	e7f2      	b.n	8005682 <__libc_init_array+0x1e>
 800569c:	08005a14 	.word	0x08005a14
 80056a0:	08005a14 	.word	0x08005a14
 80056a4:	08005a14 	.word	0x08005a14
 80056a8:	08005a18 	.word	0x08005a18

080056ac <__udivmoddi4>:
 80056ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	9d08      	ldr	r5, [sp, #32]
 80056b2:	460f      	mov	r7, r1
 80056b4:	4604      	mov	r4, r0
 80056b6:	468c      	mov	ip, r1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d148      	bne.n	800574e <__udivmoddi4+0xa2>
 80056bc:	428a      	cmp	r2, r1
 80056be:	4616      	mov	r6, r2
 80056c0:	d961      	bls.n	8005786 <__udivmoddi4+0xda>
 80056c2:	fab2 f382 	clz	r3, r2
 80056c6:	b14b      	cbz	r3, 80056dc <__udivmoddi4+0x30>
 80056c8:	f1c3 0220 	rsb	r2, r3, #32
 80056cc:	fa01 fc03 	lsl.w	ip, r1, r3
 80056d0:	fa20 f202 	lsr.w	r2, r0, r2
 80056d4:	409e      	lsls	r6, r3
 80056d6:	ea42 0c0c 	orr.w	ip, r2, ip
 80056da:	409c      	lsls	r4, r3
 80056dc:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80056e0:	b2b7      	uxth	r7, r6
 80056e2:	fbbc f1fe 	udiv	r1, ip, lr
 80056e6:	0c22      	lsrs	r2, r4, #16
 80056e8:	fb0e cc11 	mls	ip, lr, r1, ip
 80056ec:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80056f0:	fb01 f007 	mul.w	r0, r1, r7
 80056f4:	4290      	cmp	r0, r2
 80056f6:	d909      	bls.n	800570c <__udivmoddi4+0x60>
 80056f8:	18b2      	adds	r2, r6, r2
 80056fa:	f101 3cff 	add.w	ip, r1, #4294967295
 80056fe:	f080 80ee 	bcs.w	80058de <__udivmoddi4+0x232>
 8005702:	4290      	cmp	r0, r2
 8005704:	f240 80eb 	bls.w	80058de <__udivmoddi4+0x232>
 8005708:	3902      	subs	r1, #2
 800570a:	4432      	add	r2, r6
 800570c:	1a12      	subs	r2, r2, r0
 800570e:	b2a4      	uxth	r4, r4
 8005710:	fbb2 f0fe 	udiv	r0, r2, lr
 8005714:	fb0e 2210 	mls	r2, lr, r0, r2
 8005718:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800571c:	fb00 f707 	mul.w	r7, r0, r7
 8005720:	42a7      	cmp	r7, r4
 8005722:	d909      	bls.n	8005738 <__udivmoddi4+0x8c>
 8005724:	1934      	adds	r4, r6, r4
 8005726:	f100 32ff 	add.w	r2, r0, #4294967295
 800572a:	f080 80da 	bcs.w	80058e2 <__udivmoddi4+0x236>
 800572e:	42a7      	cmp	r7, r4
 8005730:	f240 80d7 	bls.w	80058e2 <__udivmoddi4+0x236>
 8005734:	4434      	add	r4, r6
 8005736:	3802      	subs	r0, #2
 8005738:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800573c:	1be4      	subs	r4, r4, r7
 800573e:	2100      	movs	r1, #0
 8005740:	b11d      	cbz	r5, 800574a <__udivmoddi4+0x9e>
 8005742:	40dc      	lsrs	r4, r3
 8005744:	2300      	movs	r3, #0
 8005746:	e9c5 4300 	strd	r4, r3, [r5]
 800574a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574e:	428b      	cmp	r3, r1
 8005750:	d906      	bls.n	8005760 <__udivmoddi4+0xb4>
 8005752:	b10d      	cbz	r5, 8005758 <__udivmoddi4+0xac>
 8005754:	e9c5 0100 	strd	r0, r1, [r5]
 8005758:	2100      	movs	r1, #0
 800575a:	4608      	mov	r0, r1
 800575c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005760:	fab3 f183 	clz	r1, r3
 8005764:	2900      	cmp	r1, #0
 8005766:	d148      	bne.n	80057fa <__udivmoddi4+0x14e>
 8005768:	42bb      	cmp	r3, r7
 800576a:	d302      	bcc.n	8005772 <__udivmoddi4+0xc6>
 800576c:	4282      	cmp	r2, r0
 800576e:	f200 8107 	bhi.w	8005980 <__udivmoddi4+0x2d4>
 8005772:	1a84      	subs	r4, r0, r2
 8005774:	eb67 0203 	sbc.w	r2, r7, r3
 8005778:	2001      	movs	r0, #1
 800577a:	4694      	mov	ip, r2
 800577c:	2d00      	cmp	r5, #0
 800577e:	d0e4      	beq.n	800574a <__udivmoddi4+0x9e>
 8005780:	e9c5 4c00 	strd	r4, ip, [r5]
 8005784:	e7e1      	b.n	800574a <__udivmoddi4+0x9e>
 8005786:	2a00      	cmp	r2, #0
 8005788:	f000 8092 	beq.w	80058b0 <__udivmoddi4+0x204>
 800578c:	fab2 f382 	clz	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	f040 80a8 	bne.w	80058e6 <__udivmoddi4+0x23a>
 8005796:	1a8a      	subs	r2, r1, r2
 8005798:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800579c:	fa1f fc86 	uxth.w	ip, r6
 80057a0:	2101      	movs	r1, #1
 80057a2:	0c20      	lsrs	r0, r4, #16
 80057a4:	fbb2 f7fe 	udiv	r7, r2, lr
 80057a8:	fb0e 2217 	mls	r2, lr, r7, r2
 80057ac:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80057b0:	fb0c f007 	mul.w	r0, ip, r7
 80057b4:	4290      	cmp	r0, r2
 80057b6:	d907      	bls.n	80057c8 <__udivmoddi4+0x11c>
 80057b8:	18b2      	adds	r2, r6, r2
 80057ba:	f107 38ff 	add.w	r8, r7, #4294967295
 80057be:	d202      	bcs.n	80057c6 <__udivmoddi4+0x11a>
 80057c0:	4290      	cmp	r0, r2
 80057c2:	f200 80e2 	bhi.w	800598a <__udivmoddi4+0x2de>
 80057c6:	4647      	mov	r7, r8
 80057c8:	1a12      	subs	r2, r2, r0
 80057ca:	b2a4      	uxth	r4, r4
 80057cc:	fbb2 f0fe 	udiv	r0, r2, lr
 80057d0:	fb0e 2210 	mls	r2, lr, r0, r2
 80057d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80057d8:	fb0c fc00 	mul.w	ip, ip, r0
 80057dc:	45a4      	cmp	ip, r4
 80057de:	d907      	bls.n	80057f0 <__udivmoddi4+0x144>
 80057e0:	1934      	adds	r4, r6, r4
 80057e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80057e6:	d202      	bcs.n	80057ee <__udivmoddi4+0x142>
 80057e8:	45a4      	cmp	ip, r4
 80057ea:	f200 80cb 	bhi.w	8005984 <__udivmoddi4+0x2d8>
 80057ee:	4610      	mov	r0, r2
 80057f0:	eba4 040c 	sub.w	r4, r4, ip
 80057f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80057f8:	e7a2      	b.n	8005740 <__udivmoddi4+0x94>
 80057fa:	f1c1 0620 	rsb	r6, r1, #32
 80057fe:	408b      	lsls	r3, r1
 8005800:	fa22 fc06 	lsr.w	ip, r2, r6
 8005804:	ea4c 0c03 	orr.w	ip, ip, r3
 8005808:	fa07 f401 	lsl.w	r4, r7, r1
 800580c:	fa20 f306 	lsr.w	r3, r0, r6
 8005810:	40f7      	lsrs	r7, r6
 8005812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8005816:	4323      	orrs	r3, r4
 8005818:	fa00 f801 	lsl.w	r8, r0, r1
 800581c:	fa1f fe8c 	uxth.w	lr, ip
 8005820:	fbb7 f0f9 	udiv	r0, r7, r9
 8005824:	0c1c      	lsrs	r4, r3, #16
 8005826:	fb09 7710 	mls	r7, r9, r0, r7
 800582a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800582e:	fb00 f70e 	mul.w	r7, r0, lr
 8005832:	42a7      	cmp	r7, r4
 8005834:	fa02 f201 	lsl.w	r2, r2, r1
 8005838:	d90a      	bls.n	8005850 <__udivmoddi4+0x1a4>
 800583a:	eb1c 0404 	adds.w	r4, ip, r4
 800583e:	f100 3aff 	add.w	sl, r0, #4294967295
 8005842:	f080 809b 	bcs.w	800597c <__udivmoddi4+0x2d0>
 8005846:	42a7      	cmp	r7, r4
 8005848:	f240 8098 	bls.w	800597c <__udivmoddi4+0x2d0>
 800584c:	3802      	subs	r0, #2
 800584e:	4464      	add	r4, ip
 8005850:	1be4      	subs	r4, r4, r7
 8005852:	b29f      	uxth	r7, r3
 8005854:	fbb4 f3f9 	udiv	r3, r4, r9
 8005858:	fb09 4413 	mls	r4, r9, r3, r4
 800585c:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8005860:	fb03 fe0e 	mul.w	lr, r3, lr
 8005864:	45a6      	cmp	lr, r4
 8005866:	d909      	bls.n	800587c <__udivmoddi4+0x1d0>
 8005868:	eb1c 0404 	adds.w	r4, ip, r4
 800586c:	f103 37ff 	add.w	r7, r3, #4294967295
 8005870:	f080 8082 	bcs.w	8005978 <__udivmoddi4+0x2cc>
 8005874:	45a6      	cmp	lr, r4
 8005876:	d97f      	bls.n	8005978 <__udivmoddi4+0x2cc>
 8005878:	3b02      	subs	r3, #2
 800587a:	4464      	add	r4, ip
 800587c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8005880:	eba4 040e 	sub.w	r4, r4, lr
 8005884:	fba0 e702 	umull	lr, r7, r0, r2
 8005888:	42bc      	cmp	r4, r7
 800588a:	4673      	mov	r3, lr
 800588c:	46b9      	mov	r9, r7
 800588e:	d363      	bcc.n	8005958 <__udivmoddi4+0x2ac>
 8005890:	d060      	beq.n	8005954 <__udivmoddi4+0x2a8>
 8005892:	b15d      	cbz	r5, 80058ac <__udivmoddi4+0x200>
 8005894:	ebb8 0203 	subs.w	r2, r8, r3
 8005898:	eb64 0409 	sbc.w	r4, r4, r9
 800589c:	fa04 f606 	lsl.w	r6, r4, r6
 80058a0:	fa22 f301 	lsr.w	r3, r2, r1
 80058a4:	431e      	orrs	r6, r3
 80058a6:	40cc      	lsrs	r4, r1
 80058a8:	e9c5 6400 	strd	r6, r4, [r5]
 80058ac:	2100      	movs	r1, #0
 80058ae:	e74c      	b.n	800574a <__udivmoddi4+0x9e>
 80058b0:	0862      	lsrs	r2, r4, #1
 80058b2:	0848      	lsrs	r0, r1, #1
 80058b4:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 80058b8:	0c0b      	lsrs	r3, r1, #16
 80058ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80058be:	b28a      	uxth	r2, r1
 80058c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80058c4:	fbb3 f1f6 	udiv	r1, r3, r6
 80058c8:	07e4      	lsls	r4, r4, #31
 80058ca:	46b4      	mov	ip, r6
 80058cc:	4637      	mov	r7, r6
 80058ce:	46b6      	mov	lr, r6
 80058d0:	231f      	movs	r3, #31
 80058d2:	fbb0 f0f6 	udiv	r0, r0, r6
 80058d6:	1bd2      	subs	r2, r2, r7
 80058d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80058dc:	e761      	b.n	80057a2 <__udivmoddi4+0xf6>
 80058de:	4661      	mov	r1, ip
 80058e0:	e714      	b.n	800570c <__udivmoddi4+0x60>
 80058e2:	4610      	mov	r0, r2
 80058e4:	e728      	b.n	8005738 <__udivmoddi4+0x8c>
 80058e6:	f1c3 0120 	rsb	r1, r3, #32
 80058ea:	fa20 f201 	lsr.w	r2, r0, r1
 80058ee:	409e      	lsls	r6, r3
 80058f0:	fa27 f101 	lsr.w	r1, r7, r1
 80058f4:	409f      	lsls	r7, r3
 80058f6:	433a      	orrs	r2, r7
 80058f8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80058fc:	fa1f fc86 	uxth.w	ip, r6
 8005900:	fbb1 f7fe 	udiv	r7, r1, lr
 8005904:	fb0e 1017 	mls	r0, lr, r7, r1
 8005908:	0c11      	lsrs	r1, r2, #16
 800590a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800590e:	fb07 f80c 	mul.w	r8, r7, ip
 8005912:	4588      	cmp	r8, r1
 8005914:	fa04 f403 	lsl.w	r4, r4, r3
 8005918:	d93a      	bls.n	8005990 <__udivmoddi4+0x2e4>
 800591a:	1871      	adds	r1, r6, r1
 800591c:	f107 30ff 	add.w	r0, r7, #4294967295
 8005920:	d201      	bcs.n	8005926 <__udivmoddi4+0x27a>
 8005922:	4588      	cmp	r8, r1
 8005924:	d81f      	bhi.n	8005966 <__udivmoddi4+0x2ba>
 8005926:	eba1 0108 	sub.w	r1, r1, r8
 800592a:	fbb1 f8fe 	udiv	r8, r1, lr
 800592e:	fb08 f70c 	mul.w	r7, r8, ip
 8005932:	fb0e 1118 	mls	r1, lr, r8, r1
 8005936:	b292      	uxth	r2, r2
 8005938:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800593c:	42ba      	cmp	r2, r7
 800593e:	d22f      	bcs.n	80059a0 <__udivmoddi4+0x2f4>
 8005940:	18b2      	adds	r2, r6, r2
 8005942:	f108 31ff 	add.w	r1, r8, #4294967295
 8005946:	d2c6      	bcs.n	80058d6 <__udivmoddi4+0x22a>
 8005948:	42ba      	cmp	r2, r7
 800594a:	d2c4      	bcs.n	80058d6 <__udivmoddi4+0x22a>
 800594c:	f1a8 0102 	sub.w	r1, r8, #2
 8005950:	4432      	add	r2, r6
 8005952:	e7c0      	b.n	80058d6 <__udivmoddi4+0x22a>
 8005954:	45f0      	cmp	r8, lr
 8005956:	d29c      	bcs.n	8005892 <__udivmoddi4+0x1e6>
 8005958:	ebbe 0302 	subs.w	r3, lr, r2
 800595c:	eb67 070c 	sbc.w	r7, r7, ip
 8005960:	3801      	subs	r0, #1
 8005962:	46b9      	mov	r9, r7
 8005964:	e795      	b.n	8005892 <__udivmoddi4+0x1e6>
 8005966:	eba6 0808 	sub.w	r8, r6, r8
 800596a:	4441      	add	r1, r8
 800596c:	1eb8      	subs	r0, r7, #2
 800596e:	fbb1 f8fe 	udiv	r8, r1, lr
 8005972:	fb08 f70c 	mul.w	r7, r8, ip
 8005976:	e7dc      	b.n	8005932 <__udivmoddi4+0x286>
 8005978:	463b      	mov	r3, r7
 800597a:	e77f      	b.n	800587c <__udivmoddi4+0x1d0>
 800597c:	4650      	mov	r0, sl
 800597e:	e767      	b.n	8005850 <__udivmoddi4+0x1a4>
 8005980:	4608      	mov	r0, r1
 8005982:	e6fb      	b.n	800577c <__udivmoddi4+0xd0>
 8005984:	4434      	add	r4, r6
 8005986:	3802      	subs	r0, #2
 8005988:	e732      	b.n	80057f0 <__udivmoddi4+0x144>
 800598a:	3f02      	subs	r7, #2
 800598c:	4432      	add	r2, r6
 800598e:	e71b      	b.n	80057c8 <__udivmoddi4+0x11c>
 8005990:	eba1 0108 	sub.w	r1, r1, r8
 8005994:	4638      	mov	r0, r7
 8005996:	fbb1 f8fe 	udiv	r8, r1, lr
 800599a:	fb08 f70c 	mul.w	r7, r8, ip
 800599e:	e7c8      	b.n	8005932 <__udivmoddi4+0x286>
 80059a0:	4641      	mov	r1, r8
 80059a2:	e798      	b.n	80058d6 <__udivmoddi4+0x22a>

080059a4 <_init>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	bf00      	nop
 80059a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059aa:	bc08      	pop	{r3}
 80059ac:	469e      	mov	lr, r3
 80059ae:	4770      	bx	lr

080059b0 <_fini>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	bf00      	nop
 80059b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b6:	bc08      	pop	{r3}
 80059b8:	469e      	mov	lr, r3
 80059ba:	4770      	bx	lr
