
build/debug/CawDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc4  08004dc4  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004dc4  08004dc4  00005dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dcc  08004dcc  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dcc  08004dcc  00005dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dd0  08004dd0  00005dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004dd4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000445c  20000010  08004de4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000446c  08004de4  0000646c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000249ff  00000000  00000000  00006079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef1  00000000  00000000  0002aa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012685  00000000  00000000  0002f969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a20  00000000  00000000  00041ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014dc  00000000  00000000  00043a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000205c4  00000000  00000000  00044eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000084d2  00000000  00000000  000654b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004734  00000000  00000000  0006d984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000017f  00000000  00000000  000720b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b80c 	b.w	8000200 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f004 fc38 	bl	8004a64 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__aeabi_idiv0>:
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c05      	ldr	r4, [pc, #20]	@ (800021c <__do_global_dtors_aux+0x18>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b933      	cbnz	r3, 800021a <__do_global_dtors_aux+0x16>
 800020c:	4b04      	ldr	r3, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x1c>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x12>
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000010 	.word	0x20000010
 8000220:	00000000 	.word	0x00000000
 8000224:	08004d5c 	.word	0x08004d5c

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <frame_dummy+0x10>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4903      	ldr	r1, [pc, #12]	@ (800023c <frame_dummy+0x14>)
 8000230:	4803      	ldr	r0, [pc, #12]	@ (8000240 <frame_dummy+0x18>)
 8000232:	f3af 8000 	nop.w
 8000236:	bd08      	pop	{r3, pc}
 8000238:	00000000 	.word	0x00000000
 800023c:	20000014 	.word	0x20000014
 8000240:	08004d5c 	.word	0x08004d5c

08000244 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000244:	b500      	push	{lr}
 8000246:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000248:	2300      	movs	r3, #0
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	9301      	str	r3, [sp, #4]
 800024e:	9302      	str	r3, [sp, #8]
 8000250:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000252:	4815      	ldr	r0, [pc, #84]	@ (80002a8 <MX_ADC1_Init+0x64>)
 8000254:	4a15      	ldr	r2, [pc, #84]	@ (80002ac <MX_ADC1_Init+0x68>)
 8000256:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000258:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800025c:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800025e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000260:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000262:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000264:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000268:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800026a:	4a11      	ldr	r2, [pc, #68]	@ (80002b0 <MX_ADC1_Init+0x6c>)
 800026c:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800026e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000270:	2201      	movs	r2, #1
 8000272:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000274:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000278:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800027a:	f001 f86d 	bl	8001358 <HAL_ADC_Init>
 800027e:	b960      	cbnz	r0, 800029a <MX_ADC1_Init+0x56>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000280:	2300      	movs	r3, #0
 8000282:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000284:	2201      	movs	r2, #1
 8000286:	9201      	str	r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000288:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028a:	4669      	mov	r1, sp
 800028c:	4806      	ldr	r0, [pc, #24]	@ (80002a8 <MX_ADC1_Init+0x64>)
 800028e:	f001 f88f 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000292:	b928      	cbnz	r0, 80002a0 <MX_ADC1_Init+0x5c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000294:	b005      	add	sp, #20
 8000296:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800029a:	f000 fcab 	bl	8000bf4 <Error_Handler>
 800029e:	e7ef      	b.n	8000280 <MX_ADC1_Init+0x3c>
    Error_Handler();
 80002a0:	f000 fca8 	bl	8000bf4 <Error_Handler>
}
 80002a4:	e7f6      	b.n	8000294 <MX_ADC1_Init+0x50>
 80002a6:	bf00      	nop
 80002a8:	200000bc 	.word	0x200000bc
 80002ac:	40012000 	.word	0x40012000
 80002b0:	0f000001 	.word	0x0f000001

080002b4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80002b4:	b500      	push	{lr}
 80002b6:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002b8:	2300      	movs	r3, #0
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	9302      	str	r3, [sp, #8]
 80002c0:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80002c2:	4815      	ldr	r0, [pc, #84]	@ (8000318 <MX_ADC2_Init+0x64>)
 80002c4:	4a15      	ldr	r2, [pc, #84]	@ (800031c <MX_ADC2_Init+0x68>)
 80002c6:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002cc:	6042      	str	r2, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002ce:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80002d0:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002d2:	7603      	strb	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002d4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002d8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002da:	4a11      	ldr	r2, [pc, #68]	@ (8000320 <MX_ADC2_Init+0x6c>)
 80002dc:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002de:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 80002e0:	2201      	movs	r2, #1
 80002e2:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80002e4:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002e8:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80002ea:	f001 f835 	bl	8001358 <HAL_ADC_Init>
 80002ee:	b960      	cbnz	r0, 800030a <MX_ADC2_Init+0x56>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80002f4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80002f6:	2300      	movs	r3, #0
 80002f8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80002fa:	4669      	mov	r1, sp
 80002fc:	4806      	ldr	r0, [pc, #24]	@ (8000318 <MX_ADC2_Init+0x64>)
 80002fe:	f001 f857 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000302:	b928      	cbnz	r0, 8000310 <MX_ADC2_Init+0x5c>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000304:	b005      	add	sp, #20
 8000306:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800030a:	f000 fc73 	bl	8000bf4 <Error_Handler>
 800030e:	e7ef      	b.n	80002f0 <MX_ADC2_Init+0x3c>
    Error_Handler();
 8000310:	f000 fc70 	bl	8000bf4 <Error_Handler>
}
 8000314:	e7f6      	b.n	8000304 <MX_ADC2_Init+0x50>
 8000316:	bf00      	nop
 8000318:	20000074 	.word	0x20000074
 800031c:	40012100 	.word	0x40012100
 8000320:	0f000001 	.word	0x0f000001

08000324 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000324:	b500      	push	{lr}
 8000326:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000328:	2300      	movs	r3, #0
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	9302      	str	r3, [sp, #8]
 8000330:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000332:	4815      	ldr	r0, [pc, #84]	@ (8000388 <MX_ADC3_Init+0x64>)
 8000334:	4a15      	ldr	r2, [pc, #84]	@ (800038c <MX_ADC3_Init+0x68>)
 8000336:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000338:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800033c:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800033e:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000340:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000342:	7603      	strb	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000344:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000348:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034a:	4a11      	ldr	r2, [pc, #68]	@ (8000390 <MX_ADC3_Init+0x6c>)
 800034c:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034e:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000350:	2201      	movs	r2, #1
 8000352:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000354:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000358:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800035a:	f000 fffd 	bl	8001358 <HAL_ADC_Init>
 800035e:	b968      	cbnz	r0, 800037c <MX_ADC3_Init+0x58>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000360:	2302      	movs	r3, #2
 8000362:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000364:	2301      	movs	r3, #1
 8000366:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000368:	2300      	movs	r3, #0
 800036a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800036c:	4669      	mov	r1, sp
 800036e:	4806      	ldr	r0, [pc, #24]	@ (8000388 <MX_ADC3_Init+0x64>)
 8000370:	f001 f81e 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000374:	b928      	cbnz	r0, 8000382 <MX_ADC3_Init+0x5e>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000376:	b005      	add	sp, #20
 8000378:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800037c:	f000 fc3a 	bl	8000bf4 <Error_Handler>
 8000380:	e7ee      	b.n	8000360 <MX_ADC3_Init+0x3c>
    Error_Handler();
 8000382:	f000 fc37 	bl	8000bf4 <Error_Handler>
}
 8000386:	e7f6      	b.n	8000376 <MX_ADC3_Init+0x52>
 8000388:	2000002c 	.word	0x2000002c
 800038c:	40012200 	.word	0x40012200
 8000390:	0f000001 	.word	0x0f000001

08000394 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000396:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	2300      	movs	r3, #0
 800039a:	9309      	str	r3, [sp, #36]	@ 0x24
 800039c:	930a      	str	r3, [sp, #40]	@ 0x28
 800039e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80003a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80003a2:	930d      	str	r3, [sp, #52]	@ 0x34
  if(adcHandle->Instance==ADC1)
 80003a4:	6803      	ldr	r3, [r0, #0]
 80003a6:	4a46      	ldr	r2, [pc, #280]	@ (80004c0 <HAL_ADC_MspInit+0x12c>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d007      	beq.n	80003bc <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80003ac:	4a45      	ldr	r2, [pc, #276]	@ (80004c4 <HAL_ADC_MspInit+0x130>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d035      	beq.n	800041e <HAL_ADC_MspInit+0x8a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80003b2:	4a45      	ldr	r2, [pc, #276]	@ (80004c8 <HAL_ADC_MspInit+0x134>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d063      	beq.n	8000480 <HAL_ADC_MspInit+0xec>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80003b8:	b00f      	add	sp, #60	@ 0x3c
 80003ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003bc:	2400      	movs	r4, #0
 80003be:	9401      	str	r4, [sp, #4]
 80003c0:	4b42      	ldr	r3, [pc, #264]	@ (80004cc <HAL_ADC_MspInit+0x138>)
 80003c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80003c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80003c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80003ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80003cc:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	9402      	str	r4, [sp, #8]
 80003d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003d8:	f042 0204 	orr.w	r2, r2, #4
 80003dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80003de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003e0:	f002 0204 	and.w	r2, r2, #4
 80003e4:	9202      	str	r2, [sp, #8]
 80003e6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	9403      	str	r4, [sp, #12]
 80003ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003ec:	f042 0201 	orr.w	r2, r2, #1
 80003f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80003f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	9303      	str	r3, [sp, #12]
 80003fa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003fc:	2701      	movs	r7, #1
 80003fe:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000400:	2603      	movs	r6, #3
 8000402:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000404:	ad09      	add	r5, sp, #36	@ 0x24
 8000406:	4629      	mov	r1, r5
 8000408:	4831      	ldr	r0, [pc, #196]	@ (80004d0 <HAL_ADC_MspInit+0x13c>)
 800040a:	f001 fc15 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800040e:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000410:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000414:	4629      	mov	r1, r5
 8000416:	482f      	ldr	r0, [pc, #188]	@ (80004d4 <HAL_ADC_MspInit+0x140>)
 8000418:	f001 fc0e 	bl	8001c38 <HAL_GPIO_Init>
 800041c:	e7cc      	b.n	80003b8 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800041e:	2400      	movs	r4, #0
 8000420:	9404      	str	r4, [sp, #16]
 8000422:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <HAL_ADC_MspInit+0x138>)
 8000424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800042a:	645a      	str	r2, [r3, #68]	@ 0x44
 800042c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800042e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000432:	9204      	str	r2, [sp, #16]
 8000434:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	9405      	str	r4, [sp, #20]
 8000438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800043a:	f042 0201 	orr.w	r2, r2, #1
 800043e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000442:	f002 0201 	and.w	r2, r2, #1
 8000446:	9205      	str	r2, [sp, #20]
 8000448:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	9406      	str	r4, [sp, #24]
 800044c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800044e:	f042 0202 	orr.w	r2, r2, #2
 8000452:	631a      	str	r2, [r3, #48]	@ 0x30
 8000454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	9306      	str	r3, [sp, #24]
 800045c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800045e:	2702      	movs	r7, #2
 8000460:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000462:	2603      	movs	r6, #3
 8000464:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	ad09      	add	r5, sp, #36	@ 0x24
 8000468:	4629      	mov	r1, r5
 800046a:	481a      	ldr	r0, [pc, #104]	@ (80004d4 <HAL_ADC_MspInit+0x140>)
 800046c:	f001 fbe4 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000470:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000472:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000476:	4629      	mov	r1, r5
 8000478:	4817      	ldr	r0, [pc, #92]	@ (80004d8 <HAL_ADC_MspInit+0x144>)
 800047a:	f001 fbdd 	bl	8001c38 <HAL_GPIO_Init>
 800047e:	e79b      	b.n	80003b8 <HAL_ADC_MspInit+0x24>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000480:	2100      	movs	r1, #0
 8000482:	9107      	str	r1, [sp, #28]
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <HAL_ADC_MspInit+0x138>)
 8000486:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000488:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800048c:	645a      	str	r2, [r3, #68]	@ 0x44
 800048e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000490:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8000494:	9207      	str	r2, [sp, #28]
 8000496:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	9108      	str	r1, [sp, #32]
 800049a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800049c:	f042 0201 	orr.w	r2, r2, #1
 80004a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80004a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	9308      	str	r3, [sp, #32]
 80004aa:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004ac:	230c      	movs	r3, #12
 80004ae:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b0:	2303      	movs	r3, #3
 80004b2:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	a909      	add	r1, sp, #36	@ 0x24
 80004b6:	4807      	ldr	r0, [pc, #28]	@ (80004d4 <HAL_ADC_MspInit+0x140>)
 80004b8:	f001 fbbe 	bl	8001c38 <HAL_GPIO_Init>
}
 80004bc:	e77c      	b.n	80003b8 <HAL_ADC_MspInit+0x24>
 80004be:	bf00      	nop
 80004c0:	40012000 	.word	0x40012000
 80004c4:	40012100 	.word	0x40012100
 80004c8:	40012200 	.word	0x40012200
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40020800 	.word	0x40020800
 80004d4:	40020000 	.word	0x40020000
 80004d8:	40020400 	.word	0x40020400

080004dc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004dc:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004de:	480b      	ldr	r0, [pc, #44]	@ (800050c <MX_CAN1_Init+0x30>)
 80004e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <MX_CAN1_Init+0x34>)
 80004e2:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 80004e4:	2310      	movs	r3, #16
 80004e6:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ec:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004ee:	6103      	str	r3, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004f0:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004f2:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80004f4:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004f6:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80004f8:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80004fa:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80004fc:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80004fe:	f001 f82d 	bl	800155c <HAL_CAN_Init>
 8000502:	b900      	cbnz	r0, 8000506 <MX_CAN1_Init+0x2a>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000504:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000506:	f000 fb75 	bl	8000bf4 <Error_Handler>
}
 800050a:	e7fb      	b.n	8000504 <MX_CAN1_Init+0x28>
 800050c:	20000104 	.word	0x20000104
 8000510:	40006400 	.word	0x40006400

08000514 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000514:	b500      	push	{lr}
 8000516:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	2300      	movs	r3, #0
 800051a:	9303      	str	r3, [sp, #12]
 800051c:	9304      	str	r3, [sp, #16]
 800051e:	9305      	str	r3, [sp, #20]
 8000520:	9306      	str	r3, [sp, #24]
 8000522:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 8000524:	6802      	ldr	r2, [r0, #0]
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <HAL_CAN_MspInit+0x68>)
 8000528:	429a      	cmp	r2, r3
 800052a:	d002      	beq.n	8000532 <HAL_CAN_MspInit+0x1e>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800052c:	b009      	add	sp, #36	@ 0x24
 800052e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000532:	2100      	movs	r1, #0
 8000534:	9101      	str	r1, [sp, #4]
 8000536:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 800053a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800053c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000540:	641a      	str	r2, [r3, #64]	@ 0x40
 8000542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000544:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000548:	9201      	str	r2, [sp, #4]
 800054a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	9102      	str	r1, [sp, #8]
 800054e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000550:	f042 0202 	orr.w	r2, r2, #2
 8000554:	631a      	str	r2, [r3, #48]	@ 0x30
 8000556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	9302      	str	r3, [sp, #8]
 800055e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000560:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000564:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000566:	2302      	movs	r3, #2
 8000568:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056a:	2303      	movs	r3, #3
 800056c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800056e:	2309      	movs	r3, #9
 8000570:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	a903      	add	r1, sp, #12
 8000574:	4802      	ldr	r0, [pc, #8]	@ (8000580 <HAL_CAN_MspInit+0x6c>)
 8000576:	f001 fb5f 	bl	8001c38 <HAL_GPIO_Init>
}
 800057a:	e7d7      	b.n	800052c <HAL_CAN_MspInit+0x18>
 800057c:	40006400 	.word	0x40006400
 8000580:	40020400 	.word	0x40020400

08000584 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8000584:	2884      	cmp	r0, #132	@ 0x84
 8000586:	d001      	beq.n	800058c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8000588:	3003      	adds	r0, #3
 800058a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800058c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800058e:	4770      	bx	lr

08000590 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000590:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000592:	f003 fdf7 	bl	8004184 <vTaskStartScheduler>
  
  return osOK;
}
 8000596:	2000      	movs	r0, #0
 8000598:	bd08      	pop	{r3, pc}

0800059a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800059a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800059e:	b087      	sub	sp, #28
 80005a0:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80005a2:	6944      	ldr	r4, [r0, #20]
 80005a4:	b1c4      	cbz	r4, 80005d8 <osThreadCreate+0x3e>
 80005a6:	6985      	ldr	r5, [r0, #24]
 80005a8:	b1b5      	cbz	r5, 80005d8 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005aa:	6847      	ldr	r7, [r0, #4]
 80005ac:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80005b0:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005b4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80005b8:	f7ff ffe4 	bl	8000584 <makeFreeRtosPriority>
 80005bc:	9502      	str	r5, [sp, #8]
 80005be:	9401      	str	r4, [sp, #4]
 80005c0:	9000      	str	r0, [sp, #0]
 80005c2:	4633      	mov	r3, r6
 80005c4:	464a      	mov	r2, r9
 80005c6:	4641      	mov	r1, r8
 80005c8:	4638      	mov	r0, r7
 80005ca:	f003 fd6d 	bl	80040a8 <xTaskCreateStatic>
 80005ce:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80005d0:	9805      	ldr	r0, [sp, #20]
}
 80005d2:	b007      	add	sp, #28
 80005d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005d8:	6844      	ldr	r4, [r0, #4]
 80005da:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80005dc:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005de:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80005e2:	f7ff ffcf 	bl	8000584 <makeFreeRtosPriority>
 80005e6:	ab05      	add	r3, sp, #20
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	9000      	str	r0, [sp, #0]
 80005ec:	4633      	mov	r3, r6
 80005ee:	b2ba      	uxth	r2, r7
 80005f0:	4629      	mov	r1, r5
 80005f2:	4620      	mov	r0, r4
 80005f4:	f003 fd93 	bl	800411e <xTaskCreate>
 80005f8:	2801      	cmp	r0, #1
 80005fa:	d0e9      	beq.n	80005d0 <osThreadCreate+0x36>
      return NULL;
 80005fc:	2000      	movs	r0, #0
 80005fe:	e7e8      	b.n	80005d2 <osThreadCreate+0x38>

08000600 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000600:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000602:	b900      	cbnz	r0, 8000606 <osDelay+0x6>
 8000604:	2001      	movs	r0, #1
 8000606:	f003 ff07 	bl	8004418 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800060a:	2000      	movs	r0, #0
 800060c:	bd08      	pop	{r3, pc}
	...

08000610 <HAL_UART_ErrorCallback>:
int dev_usart_write(const uint8_t* buf, uint16_t len) {}

/// 下面错误处理函数中把奇偶校验错误以及数据溢出错误标志清除
/// 可以直接在调试时打断点查看huart->ErrorCode的值
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
  if (huart->Instance == USART6) {
 8000610:	6803      	ldr	r3, [r0, #0]
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <HAL_UART_ErrorCallback+0x4c>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d000      	beq.n	800061a <HAL_UART_ErrorCallback+0xa>
 8000618:	4770      	bx	lr
void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 800061a:	b500      	push	{lr}
 800061c:	b083      	sub	sp, #12
    __HAL_UART_CLEAR_OREFLAG(huart);
 800061e:	2200      	movs	r2, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	6819      	ldr	r1, [r3, #0]
 8000624:	9100      	str	r1, [sp, #0]
 8000626:	6859      	ldr	r1, [r3, #4]
 8000628:	9100      	str	r1, [sp, #0]
 800062a:	9900      	ldr	r1, [sp, #0]
    __HAL_UART_CLEAR_PEFLAG(huart);
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	9201      	str	r2, [sp, #4]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	9b01      	ldr	r3, [sp, #4]
    huart->RxState = HAL_UART_STATE_READY;
 8000638:	2320      	movs	r3, #32
 800063a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    HAL_UARTEx_ReceiveToIdle_DMA(huart, rx_buffer, RX_BUFFER_SIZE);
 800063e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000642:	4907      	ldr	r1, [pc, #28]	@ (8000660 <HAL_UART_ErrorCallback+0x50>)
 8000644:	f003 fb28 	bl	8003c98 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_UART_ErrorCallback+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	6813      	ldr	r3, [r2, #0]
 800064e:	f023 0308 	bic.w	r3, r3, #8
 8000652:	6013      	str	r3, [r2, #0]
  }
 8000654:	b003      	add	sp, #12
 8000656:	f85d fb04 	ldr.w	pc, [sp], #4
 800065a:	bf00      	nop
 800065c:	40011400 	.word	0x40011400
 8000660:	2000012c 	.word	0x2000012c
 8000664:	20004364 	.word	0x20004364

08000668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000668:	b510      	push	{r4, lr}
 800066a:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066c:	2400      	movs	r4, #0
 800066e:	9401      	str	r4, [sp, #4]
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <MX_DMA_Init+0x40>)
 8000672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000674:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000678:	631a      	str	r2, [r3, #48]	@ 0x30
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000684:	4622      	mov	r2, r4
 8000686:	2105      	movs	r1, #5
 8000688:	200c      	movs	r0, #12
 800068a:	f001 f861 	bl	8001750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800068e:	200c      	movs	r0, #12
 8000690:	f001 f86e 	bl	8001770 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000694:	4622      	mov	r2, r4
 8000696:	2105      	movs	r1, #5
 8000698:	200e      	movs	r0, #14
 800069a:	f001 f859 	bl	8001750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800069e:	200e      	movs	r0, #14
 80006a0:	f001 f866 	bl	8001770 <HAL_NVIC_EnableIRQ>

}
 80006a4:	b002      	add	sp, #8
 80006a6:	bd10      	pop	{r4, pc}
 80006a8:	40023800 	.word	0x40023800

080006ac <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80006ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;) {
    state_step();
 80006ae:	f000 fd57 	bl	8001160 <state_step>
    osDelay(50);
 80006b2:	2032      	movs	r0, #50	@ 0x32
 80006b4:	f7ff ffa4 	bl	8000600 <osDelay>
  for (;;) {
 80006b8:	e7f9      	b.n	80006ae <StartDefaultTask+0x2>
	...

080006bc <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <vApplicationGetIdleTaskMemory+0x10>)
 80006be:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006c0:	4b03      	ldr	r3, [pc, #12]	@ (80006d0 <vApplicationGetIdleTaskMemory+0x14>)
 80006c2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	2000042c 	.word	0x2000042c
 80006d0:	2000022c 	.word	0x2000022c

080006d4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80006d4:	b510      	push	{r4, lr}
 80006d6:	b088      	sub	sp, #32
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006d8:	f10d 0c04 	add.w	ip, sp, #4
 80006dc:	4c07      	ldr	r4, [pc, #28]	@ (80006fc <MX_FREERTOS_Init+0x28>)
 80006de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006ec:	2100      	movs	r1, #0
 80006ee:	a801      	add	r0, sp, #4
 80006f0:	f7ff ff53 	bl	800059a <osThreadCreate>
 80006f4:	4b02      	ldr	r3, [pc, #8]	@ (8000700 <MX_FREERTOS_Init+0x2c>)
 80006f6:	6018      	str	r0, [r3, #0]
}
 80006f8:	b008      	add	sp, #32
 80006fa:	bd10      	pop	{r4, pc}
 80006fc:	08004d74 	.word	0x08004d74
 8000700:	20000480 	.word	0x20000480

08000704 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA5   ------> SPI1_SCK
*/
void MX_GPIO_Init(void)
{
 8000704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000708:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	ad05      	add	r5, sp, #20
 800070c:	2400      	movs	r4, #0
 800070e:	9405      	str	r4, [sp, #20]
 8000710:	9406      	str	r4, [sp, #24]
 8000712:	9407      	str	r4, [sp, #28]
 8000714:	9408      	str	r4, [sp, #32]
 8000716:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000718:	9400      	str	r4, [sp, #0]
 800071a:	4b4b      	ldr	r3, [pc, #300]	@ (8000848 <MX_GPIO_Init+0x144>)
 800071c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800071e:	f042 0204 	orr.w	r2, r2, #4
 8000722:	631a      	str	r2, [r3, #48]	@ 0x30
 8000724:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000726:	f002 0204 	and.w	r2, r2, #4
 800072a:	9200      	str	r2, [sp, #0]
 800072c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	9401      	str	r4, [sp, #4]
 8000730:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000732:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000736:	631a      	str	r2, [r3, #48]	@ 0x30
 8000738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800073a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800073e:	9201      	str	r2, [sp, #4]
 8000740:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	9402      	str	r4, [sp, #8]
 8000744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000746:	f042 0201 	orr.w	r2, r2, #1
 800074a:	631a      	str	r2, [r3, #48]	@ 0x30
 800074c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800074e:	f002 0201 	and.w	r2, r2, #1
 8000752:	9202      	str	r2, [sp, #8]
 8000754:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	9403      	str	r4, [sp, #12]
 8000758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800075a:	f042 0202 	orr.w	r2, r2, #2
 800075e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000762:	f002 0202 	and.w	r2, r2, #2
 8000766:	9203      	str	r2, [sp, #12]
 8000768:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	9404      	str	r4, [sp, #16]
 800076c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800076e:	f042 0208 	orr.w	r2, r2, #8
 8000772:	631a      	str	r2, [r3, #48]	@ 0x30
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	9304      	str	r3, [sp, #16]
 800077c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 800077e:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 8000850 <MX_GPIO_Init+0x14c>
 8000782:	4622      	mov	r2, r4
 8000784:	f242 11ce 	movw	r1, #8654	@ 0x21ce
 8000788:	4648      	mov	r0, r9
 800078a:	f001 fb45 	bl	8001e18 <HAL_GPIO_WritePin>
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_CAL_GPIO_Port, ENCODER_CAL_Pin, GPIO_PIN_RESET);
 800078e:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8000854 <MX_GPIO_Init+0x150>
 8000792:	4622      	mov	r2, r4
 8000794:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000798:	4640      	mov	r0, r8
 800079a:	f001 fb3d 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_SPI_NSS_GPIO_Port, DRV_SPI_NSS_Pin, GPIO_PIN_SET);
 800079e:	f8df a0b8 	ldr.w	sl, [pc, #184]	@ 8000858 <MX_GPIO_Init+0x154>
 80007a2:	2201      	movs	r2, #1
 80007a4:	2104      	movs	r1, #4
 80007a6:	4650      	mov	r0, sl
 80007a8:	f001 fb36 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER_SPI_NSS_GPIO_Port, ENCODER_SPI_NSS_Pin, GPIO_PIN_SET);
 80007ac:	4f27      	ldr	r7, [pc, #156]	@ (800084c <MX_GPIO_Init+0x148>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	4638      	mov	r0, r7
 80007b4:	f001 fb30 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STB_GPIO_Port, CAN_STB_Pin, GPIO_PIN_RESET);
 80007b8:	4622      	mov	r2, r4
 80007ba:	2120      	movs	r1, #32
 80007bc:	4638      	mov	r0, r7
 80007be:	f001 fb2b 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 LED_3_Pin LED_2_Pin LED_1_Pin
                           TIM1_BREAK_Pin DRV_CAL_Pin DRV_ENABLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED_3_Pin|LED_2_Pin|LED_1_Pin
 80007c2:	f242 13ce 	movw	r3, #8654	@ 0x21ce
 80007c6:	9305      	str	r3, [sp, #20]
                          |TIM1_BREAK_Pin|DRV_CAL_Pin|DRV_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2601      	movs	r6, #1
 80007ca:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d0:	4629      	mov	r1, r5
 80007d2:	4648      	mov	r0, r9
 80007d4:	f001 fa30 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007d8:	2320      	movs	r3, #32
 80007da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e6:	2305      	movs	r3, #5
 80007e8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	4629      	mov	r1, r5
 80007ec:	4640      	mov	r0, r8
 80007ee:	f001 fa23 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 80007f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007f6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007fc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000800:	4629      	mov	r1, r5
 8000802:	4648      	mov	r0, r9
 8000804:	f001 fa18 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_CAL_Pin */
  GPIO_InitStruct.Pin = ENCODER_CAL_Pin;
 8000808:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800080c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER_CAL_GPIO_Port, &GPIO_InitStruct);
 8000814:	4629      	mov	r1, r5
 8000816:	4640      	mov	r0, r8
 8000818:	f001 fa0e 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = DRV_SPI_NSS_Pin;
 800081c:	2304      	movs	r3, #4
 800081e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DRV_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000826:	4629      	mov	r1, r5
 8000828:	4650      	mov	r0, sl
 800082a:	f001 fa05 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_SPI_NSS_Pin CAN_STB_Pin */
  GPIO_InitStruct.Pin = ENCODER_SPI_NSS_Pin|CAN_STB_Pin;
 800082e:	2328      	movs	r3, #40	@ 0x28
 8000830:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	4629      	mov	r1, r5
 800083a:	4638      	mov	r0, r7
 800083c:	f001 f9fc 	bl	8001c38 <HAL_GPIO_Init>

}
 8000840:	b00a      	add	sp, #40	@ 0x28
 8000842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020400 	.word	0x40020400
 8000850:	40020800 	.word	0x40020800
 8000854:	40020000 	.word	0x40020000
 8000858:	40020c00 	.word	0x40020c00

0800085c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800085c:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800085e:	f012 0f07 	tst.w	r2, #7
 8000862:	d01e      	beq.n	80008a2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000864:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000866:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800086a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800086e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000870:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000872:	480e      	ldr	r0, [pc, #56]	@ (80008ac <prvHeapInit+0x50>)
 8000874:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000876:	2100      	movs	r1, #0
 8000878:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800087a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800087c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800087e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8000882:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <prvHeapInit+0x54>)
 8000884:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8000886:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000888:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800088a:	1a99      	subs	r1, r3, r2
 800088c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800088e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <prvHeapInit+0x58>)
 8000892:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <prvHeapInit+0x5c>)
 8000896:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <prvHeapInit+0x60>)
 800089a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80008a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80008a6:	e7e4      	b.n	8000872 <prvHeapInit+0x16>
 80008a8:	200004a4 	.word	0x200004a4
 80008ac:	2000049c 	.word	0x2000049c
 80008b0:	20000498 	.word	0x20000498
 80008b4:	20000490 	.word	0x20000490
 80008b8:	20000494 	.word	0x20000494
 80008bc:	20000484 	.word	0x20000484

080008c0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80008c0:	4b16      	ldr	r3, [pc, #88]	@ (800091c <prvInsertBlockIntoFreeList+0x5c>)
 80008c2:	461a      	mov	r2, r3
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4283      	cmp	r3, r0
 80008c8:	d3fb      	bcc.n	80008c2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80008ca:	6851      	ldr	r1, [r2, #4]
 80008cc:	eb02 0c01 	add.w	ip, r2, r1
 80008d0:	4584      	cmp	ip, r0
 80008d2:	d009      	beq.n	80008e8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80008d4:	6841      	ldr	r1, [r0, #4]
 80008d6:	eb00 0c01 	add.w	ip, r0, r1
 80008da:	4563      	cmp	r3, ip
 80008dc:	d009      	beq.n	80008f2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80008de:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80008e0:	4290      	cmp	r0, r2
 80008e2:	d019      	beq.n	8000918 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80008e4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80008e6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80008e8:	6840      	ldr	r0, [r0, #4]
 80008ea:	4401      	add	r1, r0
 80008ec:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80008ee:	4610      	mov	r0, r2
 80008f0:	e7f0      	b.n	80008d4 <prvInsertBlockIntoFreeList+0x14>
{
 80008f2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80008f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000920 <prvInsertBlockIntoFreeList+0x60>)
 80008f6:	6824      	ldr	r4, [r4, #0]
 80008f8:	42a3      	cmp	r3, r4
 80008fa:	d00b      	beq.n	8000914 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	4419      	add	r1, r3
 8000900:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000902:	6813      	ldr	r3, [r2, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8000908:	4290      	cmp	r0, r2
 800090a:	d000      	beq.n	800090e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800090c:	6010      	str	r0, [r2, #0]
	}
}
 800090e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000912:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000914:	6004      	str	r4, [r0, #0]
 8000916:	e7f7      	b.n	8000908 <prvInsertBlockIntoFreeList+0x48>
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	2000049c 	.word	0x2000049c
 8000920:	20000498 	.word	0x20000498

08000924 <pvPortMalloc>:
{
 8000924:	b538      	push	{r3, r4, r5, lr}
 8000926:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8000928:	f003 fc66 	bl	80041f8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800092c:	4b38      	ldr	r3, [pc, #224]	@ (8000a10 <pvPortMalloc+0xec>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	b1b3      	cbz	r3, 8000960 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000932:	4b38      	ldr	r3, [pc, #224]	@ (8000a14 <pvPortMalloc+0xf0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	421c      	tst	r4, r3
 8000938:	d150      	bne.n	80009dc <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800093a:	2c00      	cmp	r4, #0
 800093c:	d050      	beq.n	80009e0 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800093e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000942:	f014 0f07 	tst.w	r4, #7
 8000946:	d002      	beq.n	800094e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000948:	f022 0207 	bic.w	r2, r2, #7
 800094c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800094e:	2a00      	cmp	r2, #0
 8000950:	d055      	beq.n	80009fe <pvPortMalloc+0xda>
 8000952:	4b31      	ldr	r3, [pc, #196]	@ (8000a18 <pvPortMalloc+0xf4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4293      	cmp	r3, r2
 8000958:	d353      	bcc.n	8000a02 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800095a:	4930      	ldr	r1, [pc, #192]	@ (8000a1c <pvPortMalloc+0xf8>)
 800095c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800095e:	e004      	b.n	800096a <pvPortMalloc+0x46>
			prvHeapInit();
 8000960:	f7ff ff7c 	bl	800085c <prvHeapInit>
 8000964:	e7e5      	b.n	8000932 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000966:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000968:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800096a:	6863      	ldr	r3, [r4, #4]
 800096c:	4293      	cmp	r3, r2
 800096e:	d202      	bcs.n	8000976 <pvPortMalloc+0x52>
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f7      	bne.n	8000966 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000976:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <pvPortMalloc+0xec>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	42a3      	cmp	r3, r4
 800097c:	d043      	beq.n	8000a06 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800097e:	680d      	ldr	r5, [r1, #0]
 8000980:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000986:	6863      	ldr	r3, [r4, #4]
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	2b10      	cmp	r3, #16
 800098c:	d910      	bls.n	80009b0 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800098e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000990:	f010 0f07 	tst.w	r0, #7
 8000994:	d008      	beq.n	80009a8 <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800099a:	f383 8811 	msr	BASEPRI, r3
 800099e:	f3bf 8f6f 	isb	sy
 80009a2:	f3bf 8f4f 	dsb	sy
 80009a6:	e7fe      	b.n	80009a6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80009a8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80009aa:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80009ac:	f7ff ff88 	bl	80008c0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80009b0:	6862      	ldr	r2, [r4, #4]
 80009b2:	4919      	ldr	r1, [pc, #100]	@ (8000a18 <pvPortMalloc+0xf4>)
 80009b4:	680b      	ldr	r3, [r1, #0]
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80009ba:	4919      	ldr	r1, [pc, #100]	@ (8000a20 <pvPortMalloc+0xfc>)
 80009bc:	6809      	ldr	r1, [r1, #0]
 80009be:	428b      	cmp	r3, r1
 80009c0:	d201      	bcs.n	80009c6 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80009c2:	4917      	ldr	r1, [pc, #92]	@ (8000a20 <pvPortMalloc+0xfc>)
 80009c4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <pvPortMalloc+0xf0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80009d2:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <pvPortMalloc+0x100>)
 80009d4:	6813      	ldr	r3, [r2, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e002      	b.n	80009e2 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 80009dc:	2500      	movs	r5, #0
 80009de:	e000      	b.n	80009e2 <pvPortMalloc+0xbe>
 80009e0:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80009e2:	f003 fc9d 	bl	8004320 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80009e6:	f015 0f07 	tst.w	r5, #7
 80009ea:	d00e      	beq.n	8000a0a <pvPortMalloc+0xe6>
 80009ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009f0:	f383 8811 	msr	BASEPRI, r3
 80009f4:	f3bf 8f6f 	isb	sy
 80009f8:	f3bf 8f4f 	dsb	sy
 80009fc:	e7fe      	b.n	80009fc <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 80009fe:	2500      	movs	r5, #0
 8000a00:	e7ef      	b.n	80009e2 <pvPortMalloc+0xbe>
 8000a02:	2500      	movs	r5, #0
 8000a04:	e7ed      	b.n	80009e2 <pvPortMalloc+0xbe>
 8000a06:	2500      	movs	r5, #0
 8000a08:	e7eb      	b.n	80009e2 <pvPortMalloc+0xbe>
}
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	bd38      	pop	{r3, r4, r5, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000498 	.word	0x20000498
 8000a14:	20000484 	.word	0x20000484
 8000a18:	20000494 	.word	0x20000494
 8000a1c:	2000049c 	.word	0x2000049c
 8000a20:	20000490 	.word	0x20000490
 8000a24:	2000048c 	.word	0x2000048c

08000a28 <vPortFree>:
	if( pv != NULL )
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d034      	beq.n	8000a96 <vPortFree+0x6e>
{
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8000a30:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000a34:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000a38:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <vPortFree+0x70>)
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	4213      	tst	r3, r2
 8000a3e:	d108      	bne.n	8000a52 <vPortFree+0x2a>
 8000a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a44:	f383 8811 	msr	BASEPRI, r3
 8000a48:	f3bf 8f6f 	isb	sy
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	e7fe      	b.n	8000a50 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000a52:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000a56:	b141      	cbz	r1, 8000a6a <vPortFree+0x42>
 8000a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a5c:	f383 8811 	msr	BASEPRI, r3
 8000a60:	f3bf 8f6f 	isb	sy
 8000a64:	f3bf 8f4f 	dsb	sy
 8000a68:	e7fe      	b.n	8000a68 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000a6a:	ea23 0302 	bic.w	r3, r3, r2
 8000a6e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8000a72:	f003 fbc1 	bl	80041f8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000a76:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000a7a:	4a08      	ldr	r2, [pc, #32]	@ (8000a9c <vPortFree+0x74>)
 8000a7c:	6813      	ldr	r3, [r2, #0]
 8000a7e:	440b      	add	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000a82:	4628      	mov	r0, r5
 8000a84:	f7ff ff1c 	bl	80008c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000a88:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <vPortFree+0x78>)
 8000a8a:	6813      	ldr	r3, [r2, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8000a90:	f003 fc46 	bl	8004320 <xTaskResumeAll>
}
 8000a94:	bd38      	pop	{r3, r4, r5, pc}
 8000a96:	4770      	bx	lr
 8000a98:	20000484 	.word	0x20000484
 8000a9c:	20000494 	.word	0x20000494
 8000aa0:	20000488 	.word	0x20000488

08000aa4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa6:	480b      	ldr	r0, [pc, #44]	@ (8000ad4 <MX_I2C1_Init+0x30>)
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_I2C1_Init+0x34>)
 8000aaa:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_I2C1_Init+0x38>)
 8000aae:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aba:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac4:	f001 f9ae 	bl	8001e24 <HAL_I2C_Init>
 8000ac8:	b900      	cbnz	r0, 8000acc <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aca:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000acc:	f000 f892 	bl	8000bf4 <Error_Handler>
}
 8000ad0:	e7fb      	b.n	8000aca <MX_I2C1_Init+0x26>
 8000ad2:	bf00      	nop
 8000ad4:	200040a4 	.word	0x200040a4
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	000186a0 	.word	0x000186a0

08000ae0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae0:	b530      	push	{r4, r5, lr}
 8000ae2:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9303      	str	r3, [sp, #12]
 8000ae8:	9304      	str	r3, [sp, #16]
 8000aea:	9305      	str	r3, [sp, #20]
 8000aec:	9306      	str	r3, [sp, #24]
 8000aee:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000af0:	6802      	ldr	r2, [r0, #0]
 8000af2:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <HAL_I2C_MspInit+0x64>)
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d001      	beq.n	8000afc <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000af8:	b009      	add	sp, #36	@ 0x24
 8000afa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	2500      	movs	r5, #0
 8000afe:	9501      	str	r5, [sp, #4]
 8000b00:	4c11      	ldr	r4, [pc, #68]	@ (8000b48 <HAL_I2C_MspInit+0x68>)
 8000b02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b14:	23c0      	movs	r3, #192	@ 0xc0
 8000b16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b18:	2312      	movs	r3, #18
 8000b1a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b20:	2304      	movs	r3, #4
 8000b22:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	a903      	add	r1, sp, #12
 8000b26:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <HAL_I2C_MspInit+0x6c>)
 8000b28:	f001 f886 	bl	8001c38 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b2c:	9502      	str	r5, [sp, #8]
 8000b2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b34:	6423      	str	r3, [r4, #64]	@ 0x40
 8000b36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b3c:	9302      	str	r3, [sp, #8]
 8000b3e:	9b02      	ldr	r3, [sp, #8]
}
 8000b40:	e7da      	b.n	8000af8 <HAL_I2C_MspInit+0x18>
 8000b42:	bf00      	nop
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400

08000b50 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b50:	f100 0308 	add.w	r3, r0, #8
 8000b54:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b56:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b5c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b5e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b64:	4770      	bx	lr

08000b66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000b6a:	4770      	bx	lr

08000b6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000b6c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000b6e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b74:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000b76:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000b78:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000b7a:	6803      	ldr	r3, [r0, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	6003      	str	r3, [r0, #0]
}
 8000b80:	4770      	bx	lr

08000b82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b82:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b84:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000b86:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000b8a:	d011      	beq.n	8000bb0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b8c:	f100 0308 	add.w	r3, r0, #8
 8000b90:	461c      	mov	r4, r3
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	42aa      	cmp	r2, r5
 8000b98:	d9fa      	bls.n	8000b90 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000b9a:	6863      	ldr	r3, [r4, #4]
 8000b9c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b9e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000ba0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000ba2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000ba4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000ba6:	6803      	ldr	r3, [r0, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	6003      	str	r3, [r0, #0]
}
 8000bac:	bc30      	pop	{r4, r5}
 8000bae:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8000bb0:	6904      	ldr	r4, [r0, #16]
 8000bb2:	e7f2      	b.n	8000b9a <vListInsert+0x18>

08000bb4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000bb4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000bb6:	6841      	ldr	r1, [r0, #4]
 8000bb8:	6882      	ldr	r2, [r0, #8]
 8000bba:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000bbc:	6841      	ldr	r1, [r0, #4]
 8000bbe:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	d006      	beq.n	8000bd4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000bd0:	6818      	ldr	r0, [r3, #0]
}
 8000bd2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000bd4:	6882      	ldr	r2, [r0, #8]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	e7f5      	b.n	8000bc6 <uxListRemove+0x12>
	...

08000bdc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bde:	6802      	ldr	r2, [r0, #0]
 8000be0:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d000      	beq.n	8000be8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000be8:	f000 faf6 	bl	80011d8 <HAL_IncTick>
}
 8000bec:	e7fb      	b.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000bee:	bf00      	nop
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
 */
void Error_Handler(void) {
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000bf6:	e7fe      	b.n	8000bf6 <Error_Handler+0x2>

08000bf8 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfc:	ac07      	add	r4, sp, #28
 8000bfe:	2234      	movs	r2, #52	@ 0x34
 8000c00:	2100      	movs	r1, #0
 8000c02:	4620      	mov	r0, r4
 8000c04:	f003 ff01 	bl	8004a0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	2300      	movs	r3, #0
 8000c0a:	9302      	str	r3, [sp, #8]
 8000c0c:	9303      	str	r3, [sp, #12]
 8000c0e:	9304      	str	r3, [sp, #16]
 8000c10:	9305      	str	r3, [sp, #20]
 8000c12:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	4a20      	ldr	r2, [pc, #128]	@ (8000c98 <SystemClock_Config+0xa0>)
 8000c18:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000c1a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000c1e:	6411      	str	r1, [r2, #64]	@ 0x40
 8000c20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000c22:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <SystemClock_Config+0xa4>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c48:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c52:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c54:	2208      	movs	r2, #8
 8000c56:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c58:	22a0      	movs	r2, #160	@ 0xa0
 8000c5a:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c5c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c5e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c60:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c62:	4620      	mov	r0, r4
 8000c64:	f001 fb94 	bl	8002390 <HAL_RCC_OscConfig>
 8000c68:	b990      	cbnz	r0, 8000c90 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c7a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c80:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000c82:	2105      	movs	r1, #5
 8000c84:	a802      	add	r0, sp, #8
 8000c86:	f001 f9cd 	bl	8002024 <HAL_RCC_ClockConfig>
 8000c8a:	b918      	cbnz	r0, 8000c94 <SystemClock_Config+0x9c>
}
 8000c8c:	b014      	add	sp, #80	@ 0x50
 8000c8e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c90:	f7ff ffb0 	bl	8000bf4 <Error_Handler>
    Error_Handler();
 8000c94:	f7ff ffae 	bl	8000bf4 <Error_Handler>
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <main>:
int main(void) {
 8000ca0:	b508      	push	{r3, lr}
  HAL_Init();
 8000ca2:	f000 fa7f 	bl	80011a4 <HAL_Init>
  SystemClock_Config();
 8000ca6:	f7ff ffa7 	bl	8000bf8 <SystemClock_Config>
  MX_GPIO_Init();
 8000caa:	f7ff fd2b 	bl	8000704 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cae:	f7ff fcdb 	bl	8000668 <MX_DMA_Init>
  MX_CAN1_Init();
 8000cb2:	f7ff fc13 	bl	80004dc <MX_CAN1_Init>
  MX_TIM1_Init();
 8000cb6:	f003 fd2b 	bl	8004710 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000cba:	f7ff fac3 	bl	8000244 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000cbe:	f7ff faf9 	bl	80002b4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000cc2:	f7ff fb2f 	bl	8000324 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000cc6:	f7ff feed 	bl	8000aa4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000cca:	f000 f9c1 	bl	8001050 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000cce:	f003 fdbd 	bl	800484c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000cd2:	f003 fc13 	bl	80044fc <MX_TIM3_Init>
  HAL_Delay(500);
 8000cd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cda:	f000 fa8f 	bl	80011fc <HAL_Delay>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cde:	4c14      	ldr	r4, [pc, #80]	@ (8000d30 <main+0x90>)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f002 f9d8 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4620      	mov	r0, r4
 8000cec:	f002 f9d4 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f002 f9d0 	bl	8003098 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f002 fac4 	bl	8003288 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000d00:	2104      	movs	r1, #4
 8000d02:	4620      	mov	r0, r4
 8000d04:	f002 fac0 	bl	8003288 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000d08:	2108      	movs	r1, #8
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f002 fabc 	bl	8003288 <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 4000);
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000d16:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, 2000);
 8000d18:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, 1000);
 8000d1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d22:	63da      	str	r2, [r3, #60]	@ 0x3c
  MX_FREERTOS_Init();
 8000d24:	f7ff fcd6 	bl	80006d4 <MX_FREERTOS_Init>
  osKernelStart();
 8000d28:	f7ff fc32 	bl	8000590 <osKernelStart>
  while (1) {
 8000d2c:	e7fe      	b.n	8000d2c <main+0x8c>
 8000d2e:	bf00      	nop
 8000d30:	2000431c 	.word	0x2000431c

08000d34 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d34:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <prvTaskExitError+0x3c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d42:	d008      	beq.n	8000d56 <prvTaskExitError+0x22>
 8000d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d48:	f383 8811 	msr	BASEPRI, r3
 8000d4c:	f3bf 8f6f 	isb	sy
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	e7fe      	b.n	8000d54 <prvTaskExitError+0x20>
 8000d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d5a:	f383 8811 	msr	BASEPRI, r3
 8000d5e:	f3bf 8f6f 	isb	sy
 8000d62:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000d66:	9b01      	ldr	r3, [sp, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0fc      	beq.n	8000d66 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000d6c:	b002      	add	sp, #8
 8000d6e:	4770      	bx	lr
 8000d70:	20000000 	.word	0x20000000

08000d74 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000d74:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <prvPortStartFirstTask+0x24>)
 8000d76:	6800      	ldr	r0, [r0, #0]
 8000d78:	6800      	ldr	r0, [r0, #0]
 8000d7a:	f380 8808 	msr	MSP, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	f380 8814 	msr	CONTROL, r0
 8000d86:	b662      	cpsie	i
 8000d88:	b661      	cpsie	f
 8000d8a:	f3bf 8f4f 	dsb	sy
 8000d8e:	f3bf 8f6f 	isb	sy
 8000d92:	df00      	svc	0
 8000d94:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000d96:	0000      	.short	0x0000
 8000d98:	e000ed08 	.word	0xe000ed08

08000d9c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000d9c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8000dac <vPortEnableVFP+0x10>
 8000da0:	6801      	ldr	r1, [r0, #0]
 8000da2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000da6:	6001      	str	r1, [r0, #0]
 8000da8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000daa:	0000      	.short	0x0000
 8000dac:	e000ed88 	.word	0xe000ed88

08000db0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000db0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000db4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000db8:	f021 0101 	bic.w	r1, r1, #1
 8000dbc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <pxPortInitialiseStack+0x28>)
 8000dc2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000dc6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000dca:	f06f 0302 	mvn.w	r3, #2
 8000dce:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8000dd2:	3844      	subs	r0, #68	@ 0x44
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	08000d35 	.word	0x08000d35
 8000ddc:	00000000 	.word	0x00000000

08000de0 <SVC_Handler>:
	__asm volatile (
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <pxCurrentTCBConst2>)
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	6808      	ldr	r0, [r1, #0]
 8000de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dea:	f380 8809 	msr	PSP, r0
 8000dee:	f3bf 8f6f 	isb	sy
 8000df2:	f04f 0000 	mov.w	r0, #0
 8000df6:	f380 8811 	msr	BASEPRI, r0
 8000dfa:	4770      	bx	lr
 8000dfc:	f3af 8000 	nop.w

08000e00 <pxCurrentTCBConst2>:
 8000e00:	200042d0 	.word	0x200042d0

08000e04 <vPortEnterCritical>:
 8000e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e08:	f383 8811 	msr	BASEPRI, r3
 8000e0c:	f3bf 8f6f 	isb	sy
 8000e10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8000e14:	4a0b      	ldr	r2, [pc, #44]	@ (8000e44 <vPortEnterCritical+0x40>)
 8000e16:	6813      	ldr	r3, [r2, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d000      	beq.n	8000e22 <vPortEnterCritical+0x1e>
}
 8000e20:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000e22:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e26:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8000e2a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8000e2e:	d0f7      	beq.n	8000e20 <vPortEnterCritical+0x1c>
 8000e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e34:	f383 8811 	msr	BASEPRI, r3
 8000e38:	f3bf 8f6f 	isb	sy
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	e7fe      	b.n	8000e40 <vPortEnterCritical+0x3c>
 8000e42:	bf00      	nop
 8000e44:	20000000 	.word	0x20000000

08000e48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <vPortExitCritical+0x28>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	b943      	cbnz	r3, 8000e60 <vPortExitCritical+0x18>
 8000e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e52:	f383 8811 	msr	BASEPRI, r3
 8000e56:	f3bf 8f6f 	isb	sy
 8000e5a:	f3bf 8f4f 	dsb	sy
 8000e5e:	e7fe      	b.n	8000e5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8000e60:	3b01      	subs	r3, #1
 8000e62:	4a03      	ldr	r2, [pc, #12]	@ (8000e70 <vPortExitCritical+0x28>)
 8000e64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000e66:	b90b      	cbnz	r3, 8000e6c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e68:	f383 8811 	msr	BASEPRI, r3
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
	...

08000e80 <PendSV_Handler>:
	__asm volatile
 8000e80:	f3ef 8009 	mrs	r0, PSP
 8000e84:	f3bf 8f6f 	isb	sy
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <pxCurrentTCBConst>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	f01e 0f10 	tst.w	lr, #16
 8000e90:	bf08      	it	eq
 8000e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e9a:	6010      	str	r0, [r2, #0]
 8000e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000ea0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8000ea4:	f380 8811 	msr	BASEPRI, r0
 8000ea8:	f3bf 8f4f 	dsb	sy
 8000eac:	f3bf 8f6f 	isb	sy
 8000eb0:	f003 fad8 	bl	8004464 <vTaskSwitchContext>
 8000eb4:	f04f 0000 	mov.w	r0, #0
 8000eb8:	f380 8811 	msr	BASEPRI, r0
 8000ebc:	bc09      	pop	{r0, r3}
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	6808      	ldr	r0, [r1, #0]
 8000ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec6:	f01e 0f10 	tst.w	lr, #16
 8000eca:	bf08      	it	eq
 8000ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000ed0:	f380 8809 	msr	PSP, r0
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w

08000ee0 <pxCurrentTCBConst>:
 8000ee0:	200042d0 	.word	0x200042d0

08000ee4 <SysTick_Handler>:
{
 8000ee4:	b508      	push	{r3, lr}
	__asm volatile
 8000ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eea:	f383 8811 	msr	BASEPRI, r3
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8000ef6:	f003 f987 	bl	8004208 <xTaskIncrementTick>
 8000efa:	b128      	cbz	r0, 8000f08 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000efc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f383 8811 	msr	BASEPRI, r3
}
 8000f0e:	bd08      	pop	{r3, pc}

08000f10 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000f10:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000f14:	2300      	movs	r3, #0
 8000f16:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000f18:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000f1a:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <vPortSetupTimerInterrupt+0x20>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4905      	ldr	r1, [pc, #20]	@ (8000f34 <vPortSetupTimerInterrupt+0x24>)
 8000f20:	fba1 1303 	umull	r1, r3, r1, r3
 8000f24:	099b      	lsrs	r3, r3, #6
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	6113      	str	r3, [r2, #16]
}
 8000f2e:	4770      	bx	lr
 8000f30:	2000000c 	.word	0x2000000c
 8000f34:	10624dd3 	.word	0x10624dd3

08000f38 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000f38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000f3c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8000f40:	4b3d      	ldr	r3, [pc, #244]	@ (8001038 <xPortStartScheduler+0x100>)
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d01c      	beq.n	8000f80 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000f46:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000f4a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800103c <xPortStartScheduler+0x104>)
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d01e      	beq.n	8000f92 <xPortStartScheduler+0x5a>
{
 8000f54:	b530      	push	{r4, r5, lr}
 8000f56:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000f58:	4b39      	ldr	r3, [pc, #228]	@ (8001040 <xPortStartScheduler+0x108>)
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000f60:	22ff      	movs	r2, #255	@ 0xff
 8000f62:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000f6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000f70:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000f74:	4a33      	ldr	r2, [pc, #204]	@ (8001044 <xPortStartScheduler+0x10c>)
 8000f76:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000f78:	4b33      	ldr	r3, [pc, #204]	@ (8001048 <xPortStartScheduler+0x110>)
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000f7e:	e01b      	b.n	8000fb8 <xPortStartScheduler+0x80>
	__asm volatile
 8000f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f84:	f383 8811 	msr	BASEPRI, r3
 8000f88:	f3bf 8f6f 	isb	sy
 8000f8c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000f90:	e7fe      	b.n	8000f90 <xPortStartScheduler+0x58>
 8000f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f96:	f383 8811 	msr	BASEPRI, r3
 8000f9a:	f3bf 8f6f 	isb	sy
 8000f9e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000fa2:	e7fe      	b.n	8000fa2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8000fa4:	4a28      	ldr	r2, [pc, #160]	@ (8001048 <xPortStartScheduler+0x110>)
 8000fa6:	6813      	ldr	r3, [r2, #0]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000fac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000fb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000fbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000fc0:	d1f0      	bne.n	8000fa4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <xPortStartScheduler+0x110>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d008      	beq.n	8000fdc <xPortStartScheduler+0xa4>
 8000fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fce:	f383 8811 	msr	BASEPRI, r3
 8000fd2:	f3bf 8f6f 	isb	sy
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	e7fe      	b.n	8000fda <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <xPortStartScheduler+0x110>)
 8000fe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000fe2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000fe6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000fe8:	9b01      	ldr	r3, [sp, #4]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <xPortStartScheduler+0x108>)
 8000fee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000ff0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8000ff4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001000:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8001004:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001008:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800100c:	f7ff ff80 	bl	8000f10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001010:	2500      	movs	r5, #0
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <xPortStartScheduler+0x114>)
 8001014:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8001016:	f7ff fec1 	bl	8000d9c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800101a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800101e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001022:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8001026:	f7ff fea5 	bl	8000d74 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800102a:	f003 fa1b 	bl	8004464 <vTaskSwitchContext>
	prvTaskExitError();
 800102e:	f7ff fe81 	bl	8000d34 <prvTaskExitError>
}
 8001032:	4628      	mov	r0, r5
 8001034:	b003      	add	sp, #12
 8001036:	bd30      	pop	{r4, r5, pc}
 8001038:	410fc271 	.word	0x410fc271
 800103c:	410fc270 	.word	0x410fc270
 8001040:	e000e400 	.word	0xe000e400
 8001044:	200040fc 	.word	0x200040fc
 8001048:	200040f8 	.word	0x200040f8
 800104c:	20000000 	.word	0x20000000

08001050 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001050:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001052:	480d      	ldr	r0, [pc, #52]	@ (8001088 <MX_SPI3_Init+0x38>)
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_SPI3_Init+0x3c>)
 8001056:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001058:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800105c:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800105e:	2300      	movs	r3, #0
 8001060:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001062:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001064:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001066:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800106c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800106e:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001070:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001074:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001076:	230a      	movs	r3, #10
 8001078:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800107a:	f001 fbab 	bl	80027d4 <HAL_SPI_Init>
 800107e:	b900      	cbnz	r0, 8001082 <MX_SPI3_Init+0x32>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001080:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001082:	f7ff fdb7 	bl	8000bf4 <Error_Handler>
}
 8001086:	e7fb      	b.n	8001080 <MX_SPI3_Init+0x30>
 8001088:	20004100 	.word	0x20004100
 800108c:	40003c00 	.word	0x40003c00

08001090 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001090:	b500      	push	{lr}
 8001092:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	2300      	movs	r3, #0
 8001096:	9303      	str	r3, [sp, #12]
 8001098:	9304      	str	r3, [sp, #16]
 800109a:	9305      	str	r3, [sp, #20]
 800109c:	9306      	str	r3, [sp, #24]
 800109e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 80010a0:	6802      	ldr	r2, [r0, #0]
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_SPI_MspInit+0x68>)
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d002      	beq.n	80010ae <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80010a8:	b009      	add	sp, #36	@ 0x24
 80010aa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010ae:	2100      	movs	r1, #0
 80010b0:	9101      	str	r1, [sp, #4]
 80010b2:	f503 33fe 	add.w	r3, r3, #130048	@ 0x1fc00
 80010b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80010be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010c0:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	9102      	str	r1, [sp, #8]
 80010ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010cc:	f042 0204 	orr.w	r2, r2, #4
 80010d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80010dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ea:	2306      	movs	r3, #6
 80010ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	a903      	add	r1, sp, #12
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <HAL_SPI_MspInit+0x6c>)
 80010f2:	f000 fda1 	bl	8001c38 <HAL_GPIO_Init>
}
 80010f6:	e7d7      	b.n	80010a8 <HAL_SPI_MspInit+0x18>
 80010f8:	40003c00 	.word	0x40003c00
 80010fc:	40020800 	.word	0x40020800

08001100 <led_ctl>:
#include "gpio.h"

static state_e g_state = STATE_DEBUG;
static uint8_t g_led_state = 0x01;

void led_ctl(uint8_t led_state) {
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
  if (led_state & 0x01) {
 8001104:	f010 0f01 	tst.w	r0, #1
 8001108:	d015      	beq.n	8001136 <led_ctl+0x36>
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2108      	movs	r1, #8
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <led_ctl+0x5c>)
 8001110:	f000 fe82 	bl	8001e18 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x02) {
 8001114:	f014 0f02 	tst.w	r4, #2
 8001118:	d013      	beq.n	8001142 <led_ctl+0x42>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2104      	movs	r1, #4
 800111e:	480f      	ldr	r0, [pc, #60]	@ (800115c <led_ctl+0x5c>)
 8001120:	f000 fe7a 	bl	8001e18 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
  }

  if (led_state & 0x04) {
 8001124:	f014 0f04 	tst.w	r4, #4
 8001128:	d011      	beq.n	800114e <led_ctl+0x4e>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2102      	movs	r1, #2
 800112e:	480b      	ldr	r0, [pc, #44]	@ (800115c <led_ctl+0x5c>)
 8001130:	f000 fe72 	bl	8001e18 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
  }
}
 8001134:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2108      	movs	r1, #8
 800113a:	4808      	ldr	r0, [pc, #32]	@ (800115c <led_ctl+0x5c>)
 800113c:	f000 fe6c 	bl	8001e18 <HAL_GPIO_WritePin>
 8001140:	e7e8      	b.n	8001114 <led_ctl+0x14>
    HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2104      	movs	r1, #4
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <led_ctl+0x5c>)
 8001148:	f000 fe66 	bl	8001e18 <HAL_GPIO_WritePin>
 800114c:	e7ea      	b.n	8001124 <led_ctl+0x24>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2102      	movs	r1, #2
 8001152:	4802      	ldr	r0, [pc, #8]	@ (800115c <led_ctl+0x5c>)
 8001154:	f000 fe60 	bl	8001e18 <HAL_GPIO_WritePin>
}
 8001158:	e7ec      	b.n	8001134 <led_ctl+0x34>
 800115a:	bf00      	nop
 800115c:	40020800 	.word	0x40020800

08001160 <state_step>:

void state_step(void) {
 8001160:	b508      	push	{r3, lr}
    led_ctl(g_led_state);
  }

  else if (STATE_DEBUG == g_state) {
    static uint8_t dir = 0;
    led_ctl(g_led_state);
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <state_step+0x3c>)
 8001164:	7818      	ldrb	r0, [r3, #0]
 8001166:	f7ff ffcb 	bl	8001100 <led_ctl>
    if (0 == dir) {
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <state_step+0x40>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b95b      	cbnz	r3, 8001188 <state_step+0x28>
      g_led_state = g_led_state << 1;
 8001170:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <state_step+0x3c>)
 8001172:	7813      	ldrb	r3, [r2, #0]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	7013      	strb	r3, [r2, #0]
      if (0x04 == g_led_state) {
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <state_step+0x20>

  else if (STATE_ERROR == g_state) {
    g_led_state = 0x02;
    led_ctl(g_led_state);
  }
 800117e:	bd08      	pop	{r3, pc}
        dir = 1;
 8001180:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <state_step+0x40>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e7fa      	b.n	800117e <state_step+0x1e>
      g_led_state = g_led_state >> 1;
 8001188:	4a04      	ldr	r2, [pc, #16]	@ (800119c <state_step+0x3c>)
 800118a:	7813      	ldrb	r3, [r2, #0]
 800118c:	085b      	lsrs	r3, r3, #1
 800118e:	7013      	strb	r3, [r2, #0]
      if (0x01 == g_led_state) {
 8001190:	2b01      	cmp	r3, #1
 8001192:	d1f4      	bne.n	800117e <state_step+0x1e>
        dir = 0;
 8001194:	4b02      	ldr	r3, [pc, #8]	@ (80011a0 <state_step+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e7f0      	b.n	800117e <state_step+0x1e>
 800119c:	20000004 	.word	0x20000004
 80011a0:	20004158 	.word	0x20004158

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_Init+0x30>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011ae:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80011b6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 fab3 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f002 f948 	bl	800345c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f000 ff08 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80011d0:	2000      	movs	r0, #0
 80011d2:	bd08      	pop	{r3, pc}
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011d8:	4a03      	ldr	r2, [pc, #12]	@ (80011e8 <HAL_IncTick+0x10>)
 80011da:	6811      	ldr	r1, [r2, #0]
 80011dc:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <HAL_IncTick+0x14>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	440b      	add	r3, r1
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000415c 	.word	0x2000415c
 80011ec:	20000005 	.word	0x20000005

080011f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011f0:	4b01      	ldr	r3, [pc, #4]	@ (80011f8 <HAL_GetTick+0x8>)
 80011f2:	6818      	ldr	r0, [r3, #0]
}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	2000415c 	.word	0x2000415c

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff fff6 	bl	80011f0 <HAL_GetTick>
 8001204:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	f1b4 3fff 	cmp.w	r4, #4294967295
 800120a:	d002      	beq.n	8001212 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <HAL_Delay+0x24>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001212:	f7ff ffed 	bl	80011f0 <HAL_GetTick>
 8001216:	1b40      	subs	r0, r0, r5
 8001218:	42a0      	cmp	r0, r4
 800121a:	d3fa      	bcc.n	8001212 <HAL_Delay+0x16>
  {
  }
}
 800121c:	bd38      	pop	{r3, r4, r5, pc}
 800121e:	bf00      	nop
 8001220:	20000005 	.word	0x20000005

08001224 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001224:	4b4a      	ldr	r3, [pc, #296]	@ (8001350 <ADC_Init+0x12c>)
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800122c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	6841      	ldr	r1, [r0, #4]
 8001232:	430a      	orrs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001236:	6802      	ldr	r2, [r0, #0]
 8001238:	6853      	ldr	r3, [r2, #4]
 800123a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800123e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001240:	6802      	ldr	r2, [r0, #0]
 8001242:	6853      	ldr	r3, [r2, #4]
 8001244:	6901      	ldr	r1, [r0, #16]
 8001246:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800124a:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800124c:	6802      	ldr	r2, [r0, #0]
 800124e:	6853      	ldr	r3, [r2, #4]
 8001250:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001254:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001256:	6802      	ldr	r2, [r0, #0]
 8001258:	6853      	ldr	r3, [r2, #4]
 800125a:	6881      	ldr	r1, [r0, #8]
 800125c:	430b      	orrs	r3, r1
 800125e:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001260:	6802      	ldr	r2, [r0, #0]
 8001262:	6893      	ldr	r3, [r2, #8]
 8001264:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001268:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800126a:	6802      	ldr	r2, [r0, #0]
 800126c:	6893      	ldr	r3, [r2, #8]
 800126e:	68c1      	ldr	r1, [r0, #12]
 8001270:	430b      	orrs	r3, r1
 8001272:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001274:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001276:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <ADC_Init+0x130>)
 8001278:	429a      	cmp	r2, r3
 800127a:	d057      	beq.n	800132c <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800127c:	6802      	ldr	r2, [r0, #0]
 800127e:	6893      	ldr	r3, [r2, #8]
 8001280:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001284:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001286:	6802      	ldr	r2, [r0, #0]
 8001288:	6893      	ldr	r3, [r2, #8]
 800128a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800128c:	430b      	orrs	r3, r1
 800128e:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001290:	6802      	ldr	r2, [r0, #0]
 8001292:	6893      	ldr	r3, [r2, #8]
 8001294:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001298:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800129a:	6802      	ldr	r2, [r0, #0]
 800129c:	6893      	ldr	r3, [r2, #8]
 800129e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012a4:	6802      	ldr	r2, [r0, #0]
 80012a6:	6893      	ldr	r3, [r2, #8]
 80012a8:	f023 0302 	bic.w	r3, r3, #2
 80012ac:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012ae:	6802      	ldr	r2, [r0, #0]
 80012b0:	6893      	ldr	r3, [r2, #8]
 80012b2:	7e01      	ldrb	r1, [r0, #24]
 80012b4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80012b8:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80012ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d03f      	beq.n	8001342 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012c2:	6802      	ldr	r2, [r0, #0]
 80012c4:	6853      	ldr	r3, [r2, #4]
 80012c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012ca:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012cc:	6802      	ldr	r2, [r0, #0]
 80012ce:	6853      	ldr	r3, [r2, #4]
 80012d0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80012d4:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012d6:	6801      	ldr	r1, [r0, #0]
 80012d8:	684b      	ldr	r3, [r1, #4]
 80012da:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80012dc:	3a01      	subs	r2, #1
 80012de:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80012e2:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012e4:	6802      	ldr	r2, [r0, #0]
 80012e6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80012e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80012ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012ee:	6801      	ldr	r1, [r0, #0]
 80012f0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80012f2:	69c2      	ldr	r2, [r0, #28]
 80012f4:	3a01      	subs	r2, #1
 80012f6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80012fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012fc:	6802      	ldr	r2, [r0, #0]
 80012fe:	6893      	ldr	r3, [r2, #8]
 8001300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001304:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001306:	6802      	ldr	r2, [r0, #0]
 8001308:	6893      	ldr	r3, [r2, #8]
 800130a:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 800130e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001312:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001314:	6802      	ldr	r2, [r0, #0]
 8001316:	6893      	ldr	r3, [r2, #8]
 8001318:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800131c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800131e:	6802      	ldr	r2, [r0, #0]
 8001320:	6893      	ldr	r3, [r2, #8]
 8001322:	6941      	ldr	r1, [r0, #20]
 8001324:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001328:	6093      	str	r3, [r2, #8]
}
 800132a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800132c:	6802      	ldr	r2, [r0, #0]
 800132e:	6893      	ldr	r3, [r2, #8]
 8001330:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001334:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001336:	6802      	ldr	r2, [r0, #0]
 8001338:	6893      	ldr	r3, [r2, #8]
 800133a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800133e:	6093      	str	r3, [r2, #8]
 8001340:	e7b0      	b.n	80012a4 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001342:	6802      	ldr	r2, [r0, #0]
 8001344:	6853      	ldr	r3, [r2, #4]
 8001346:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800134a:	6053      	str	r3, [r2, #4]
 800134c:	e7ca      	b.n	80012e4 <ADC_Init+0xc0>
 800134e:	bf00      	nop
 8001350:	40012300 	.word	0x40012300
 8001354:	0f000001 	.word	0x0f000001

08001358 <HAL_ADC_Init>:
  if (hadc == NULL)
 8001358:	b338      	cbz	r0, 80013aa <HAL_ADC_Init+0x52>
{
 800135a:	b510      	push	{r4, lr}
 800135c:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 800135e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001360:	b143      	cbz	r3, 8001374 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001362:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001364:	f013 0f10 	tst.w	r3, #16
 8001368:	d00b      	beq.n	8001382 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800136a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800136c:	2300      	movs	r3, #0
 800136e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001372:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001374:	f7ff f80e 	bl	8000394 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001378:	2300      	movs	r3, #0
 800137a:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 800137c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001380:	e7ef      	b.n	8001362 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001382:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001384:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001388:	f023 0302 	bic.w	r3, r3, #2
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8001392:	4620      	mov	r0, r4
 8001394:	f7ff ff46 	bl	8001224 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001398:	2000      	movs	r0, #0
 800139a:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800139c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6423      	str	r3, [r4, #64]	@ 0x40
 80013a8:	e7e0      	b.n	800136c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
}
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_ADC_ConfigChannel>:
{
 80013b0:	b430      	push	{r4, r5}
 80013b2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80013b4:	2200      	movs	r2, #0
 80013b6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80013b8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80013bc:	2a01      	cmp	r2, #1
 80013be:	f000 80c0 	beq.w	8001542 <HAL_ADC_ConfigChannel+0x192>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2201      	movs	r2, #1
 80013c6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013ca:	680a      	ldr	r2, [r1, #0]
 80013cc:	2a09      	cmp	r2, #9
 80013ce:	d940      	bls.n	8001452 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013d0:	6804      	ldr	r4, [r0, #0]
 80013d2:	68e0      	ldr	r0, [r4, #12]
 80013d4:	b292      	uxth	r2, r2
 80013d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013da:	3a1e      	subs	r2, #30
 80013dc:	f04f 0c07 	mov.w	ip, #7
 80013e0:	fa0c f202 	lsl.w	r2, ip, r2
 80013e4:	ea20 0202 	bic.w	r2, r0, r2
 80013e8:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	681c      	ldr	r4, [r3, #0]
 80013ec:	68e0      	ldr	r0, [r4, #12]
 80013ee:	880a      	ldrh	r2, [r1, #0]
 80013f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013f4:	3a1e      	subs	r2, #30
 80013f6:	688d      	ldr	r5, [r1, #8]
 80013f8:	fa05 f202 	lsl.w	r2, r5, r2
 80013fc:	4302      	orrs	r2, r0
 80013fe:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001400:	684a      	ldr	r2, [r1, #4]
 8001402:	2a06      	cmp	r2, #6
 8001404:	d83c      	bhi.n	8001480 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001406:	681c      	ldr	r4, [r3, #0]
 8001408:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800140a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800140e:	3a05      	subs	r2, #5
 8001410:	f04f 0c1f 	mov.w	ip, #31
 8001414:	fa0c f202 	lsl.w	r2, ip, r2
 8001418:	ea20 0202 	bic.w	r2, r0, r2
 800141c:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800141e:	681c      	ldr	r4, [r3, #0]
 8001420:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001422:	684a      	ldr	r2, [r1, #4]
 8001424:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001428:	3a05      	subs	r2, #5
 800142a:	f8b1 c000 	ldrh.w	ip, [r1]
 800142e:	fa0c f202 	lsl.w	r2, ip, r2
 8001432:	4302      	orrs	r2, r0
 8001434:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	4a43      	ldr	r2, [pc, #268]	@ (8001548 <HAL_ADC_ConfigChannel+0x198>)
 800143a:	4290      	cmp	r0, r2
 800143c:	d050      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	4a41      	ldr	r2, [pc, #260]	@ (8001548 <HAL_ADC_ConfigChannel+0x198>)
 8001442:	4290      	cmp	r0, r2
 8001444:	d059      	beq.n	80014fa <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8001446:	2000      	movs	r0, #0
 8001448:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800144c:	b002      	add	sp, #8
 800144e:	bc30      	pop	{r4, r5}
 8001450:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001452:	6804      	ldr	r4, [r0, #0]
 8001454:	6920      	ldr	r0, [r4, #16]
 8001456:	b292      	uxth	r2, r2
 8001458:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800145c:	f04f 0c07 	mov.w	ip, #7
 8001460:	fa0c f202 	lsl.w	r2, ip, r2
 8001464:	ea20 0202 	bic.w	r2, r0, r2
 8001468:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800146a:	681c      	ldr	r4, [r3, #0]
 800146c:	6920      	ldr	r0, [r4, #16]
 800146e:	880a      	ldrh	r2, [r1, #0]
 8001470:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001474:	688d      	ldr	r5, [r1, #8]
 8001476:	fa05 f202 	lsl.w	r2, r5, r2
 800147a:	4302      	orrs	r2, r0
 800147c:	6122      	str	r2, [r4, #16]
 800147e:	e7bf      	b.n	8001400 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001480:	2a0c      	cmp	r2, #12
 8001482:	d816      	bhi.n	80014b2 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001484:	681d      	ldr	r5, [r3, #0]
 8001486:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001488:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800148c:	3a23      	subs	r2, #35	@ 0x23
 800148e:	241f      	movs	r4, #31
 8001490:	fa04 f202 	lsl.w	r2, r4, r2
 8001494:	ea20 0202 	bic.w	r2, r0, r2
 8001498:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800149a:	681d      	ldr	r5, [r3, #0]
 800149c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800149e:	684a      	ldr	r2, [r1, #4]
 80014a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80014a4:	3a23      	subs	r2, #35	@ 0x23
 80014a6:	880c      	ldrh	r4, [r1, #0]
 80014a8:	fa04 f202 	lsl.w	r2, r4, r2
 80014ac:	4302      	orrs	r2, r0
 80014ae:	632a      	str	r2, [r5, #48]	@ 0x30
 80014b0:	e7c1      	b.n	8001436 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014b2:	681d      	ldr	r5, [r3, #0]
 80014b4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80014b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80014ba:	3a41      	subs	r2, #65	@ 0x41
 80014bc:	241f      	movs	r4, #31
 80014be:	fa04 f202 	lsl.w	r2, r4, r2
 80014c2:	ea20 0202 	bic.w	r2, r0, r2
 80014c6:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014c8:	681d      	ldr	r5, [r3, #0]
 80014ca:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80014cc:	684a      	ldr	r2, [r1, #4]
 80014ce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80014d2:	3a41      	subs	r2, #65	@ 0x41
 80014d4:	880c      	ldrh	r4, [r1, #0]
 80014d6:	fa04 f202 	lsl.w	r2, r4, r2
 80014da:	4302      	orrs	r2, r0
 80014dc:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80014de:	e7aa      	b.n	8001436 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014e0:	680a      	ldr	r2, [r1, #0]
 80014e2:	2a12      	cmp	r2, #18
 80014e4:	d1ab      	bne.n	800143e <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014e6:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_ADC_ConfigChannel+0x19c>)
 80014e8:	6850      	ldr	r0, [r2, #4]
 80014ea:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 80014ee:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014f0:	6850      	ldr	r0, [r2, #4]
 80014f2:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 80014f6:	6050      	str	r0, [r2, #4]
 80014f8:	e7a1      	b.n	800143e <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014fa:	680a      	ldr	r2, [r1, #0]
 80014fc:	4814      	ldr	r0, [pc, #80]	@ (8001550 <HAL_ADC_ConfigChannel+0x1a0>)
 80014fe:	4282      	cmp	r2, r0
 8001500:	d001      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x156>
 8001502:	2a11      	cmp	r2, #17
 8001504:	d19f      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001506:	4a11      	ldr	r2, [pc, #68]	@ (800154c <HAL_ADC_ConfigChannel+0x19c>)
 8001508:	6850      	ldr	r0, [r2, #4]
 800150a:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 800150e:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001510:	6850      	ldr	r0, [r2, #4]
 8001512:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001516:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001518:	6809      	ldr	r1, [r1, #0]
 800151a:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <HAL_ADC_ConfigChannel+0x1a0>)
 800151c:	4291      	cmp	r1, r2
 800151e:	d192      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001520:	4a0c      	ldr	r2, [pc, #48]	@ (8001554 <HAL_ADC_ConfigChannel+0x1a4>)
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	490c      	ldr	r1, [pc, #48]	@ (8001558 <HAL_ADC_ConfigChannel+0x1a8>)
 8001526:	fba1 1202 	umull	r1, r2, r1, r2
 800152a:	0c92      	lsrs	r2, r2, #18
 800152c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001530:	0052      	lsls	r2, r2, #1
 8001532:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001534:	9a01      	ldr	r2, [sp, #4]
 8001536:	2a00      	cmp	r2, #0
 8001538:	d085      	beq.n	8001446 <HAL_ADC_ConfigChannel+0x96>
        counter--;
 800153a:	9a01      	ldr	r2, [sp, #4]
 800153c:	3a01      	subs	r2, #1
 800153e:	9201      	str	r2, [sp, #4]
 8001540:	e7f8      	b.n	8001534 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001542:	2002      	movs	r0, #2
 8001544:	e782      	b.n	800144c <HAL_ADC_ConfigChannel+0x9c>
 8001546:	bf00      	nop
 8001548:	40012000 	.word	0x40012000
 800154c:	40012300 	.word	0x40012300
 8001550:	10000012 	.word	0x10000012
 8001554:	2000000c 	.word	0x2000000c
 8001558:	431bde83 	.word	0x431bde83

0800155c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800155c:	2800      	cmp	r0, #0
 800155e:	f000 80a1 	beq.w	80016a4 <HAL_CAN_Init+0x148>
{
 8001562:	b538      	push	{r3, r4, r5, lr}
 8001564:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001566:	f890 3020 	ldrb.w	r3, [r0, #32]
 800156a:	b1d3      	cbz	r3, 80015a2 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800156c:	6822      	ldr	r2, [r4, #0]
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001576:	f7ff fe3b 	bl	80011f0 <HAL_GetTick>
 800157a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	f012 0f01 	tst.w	r2, #1
 8001584:	d110      	bne.n	80015a8 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001586:	f7ff fe33 	bl	80011f0 <HAL_GetTick>
 800158a:	1b40      	subs	r0, r0, r5
 800158c:	280a      	cmp	r0, #10
 800158e:	d9f5      	bls.n	800157c <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001590:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001596:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001598:	2305      	movs	r3, #5
 800159a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80015a0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80015a2:	f7fe ffb7 	bl	8000514 <HAL_CAN_MspInit>
 80015a6:	e7e1      	b.n	800156c <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	f022 0202 	bic.w	r2, r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80015b0:	f7ff fe1e 	bl	80011f0 <HAL_GetTick>
 80015b4:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	f012 0f02 	tst.w	r2, #2
 80015be:	d00d      	beq.n	80015dc <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c0:	f7ff fe16 	bl	80011f0 <HAL_GetTick>
 80015c4:	1b40      	subs	r0, r0, r5
 80015c6:	280a      	cmp	r0, #10
 80015c8:	d9f5      	bls.n	80015b6 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d0:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80015d2:	2305      	movs	r3, #5
 80015d4:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80015d8:	2001      	movs	r0, #1
 80015da:	e7e1      	b.n	80015a0 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015dc:	7e22      	ldrb	r2, [r4, #24]
 80015de:	2a01      	cmp	r2, #1
 80015e0:	d03d      	beq.n	800165e <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015e8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80015ea:	7e63      	ldrb	r3, [r4, #25]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d03b      	beq.n	8001668 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	6813      	ldr	r3, [r2, #0]
 80015f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80015f8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015fa:	7ea3      	ldrb	r3, [r4, #26]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d039      	beq.n	8001674 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001600:	6822      	ldr	r2, [r4, #0]
 8001602:	6813      	ldr	r3, [r2, #0]
 8001604:	f023 0320 	bic.w	r3, r3, #32
 8001608:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800160a:	7ee3      	ldrb	r3, [r4, #27]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d037      	beq.n	8001680 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001610:	6822      	ldr	r2, [r4, #0]
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800161a:	7f23      	ldrb	r3, [r4, #28]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d035      	beq.n	800168c <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001620:	6822      	ldr	r2, [r4, #0]
 8001622:	6813      	ldr	r3, [r2, #0]
 8001624:	f023 0308 	bic.w	r3, r3, #8
 8001628:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800162a:	7f63      	ldrb	r3, [r4, #29]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d033      	beq.n	8001698 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001630:	6822      	ldr	r2, [r4, #0]
 8001632:	6813      	ldr	r3, [r2, #0]
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800163a:	68a3      	ldr	r3, [r4, #8]
 800163c:	68e2      	ldr	r2, [r4, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	6922      	ldr	r2, [r4, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	6962      	ldr	r2, [r4, #20]
 8001646:	4313      	orrs	r3, r2
 8001648:	6862      	ldr	r2, [r4, #4]
 800164a:	3a01      	subs	r2, #1
 800164c:	6821      	ldr	r1, [r4, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001652:	2000      	movs	r0, #0
 8001654:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001656:	2301      	movs	r3, #1
 8001658:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 800165c:	e7a0      	b.n	80015a0 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e7c0      	b.n	80015ea <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001668:	6822      	ldr	r2, [r4, #0]
 800166a:	6813      	ldr	r3, [r2, #0]
 800166c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e7c2      	b.n	80015fa <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001674:	6822      	ldr	r2, [r4, #0]
 8001676:	6813      	ldr	r3, [r2, #0]
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e7c4      	b.n	800160a <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001680:	6822      	ldr	r2, [r4, #0]
 8001682:	6813      	ldr	r3, [r2, #0]
 8001684:	f023 0310 	bic.w	r3, r3, #16
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e7c6      	b.n	800161a <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800168c:	6822      	ldr	r2, [r4, #0]
 800168e:	6813      	ldr	r3, [r2, #0]
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e7c8      	b.n	800162a <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001698:	6822      	ldr	r2, [r4, #0]
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e7ca      	b.n	800163a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80016a4:	2001      	movs	r0, #1
}
 80016a6:	4770      	bx	lr

080016a8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80016a8:	2800      	cmp	r0, #0
 80016aa:	db07      	blt.n	80016bc <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ac:	f000 021f 	and.w	r2, r0, #31
 80016b0:	0940      	lsrs	r0, r0, #5
 80016b2:	2301      	movs	r3, #1
 80016b4:	4093      	lsls	r3, r2
 80016b6:	4a02      	ldr	r2, [pc, #8]	@ (80016c0 <__NVIC_EnableIRQ+0x18>)
 80016b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80016c4:	2800      	cmp	r0, #0
 80016c6:	db08      	blt.n	80016da <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	0109      	lsls	r1, r1, #4
 80016ca:	b2c9      	uxtb	r1, r1
 80016cc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80016d0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80016d4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80016d8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	f000 000f 	and.w	r0, r0, #15
 80016de:	0109      	lsls	r1, r1, #4
 80016e0:	b2c9      	uxtb	r1, r1
 80016e2:	4b01      	ldr	r3, [pc, #4]	@ (80016e8 <__NVIC_SetPriority+0x24>)
 80016e4:	5419      	strb	r1, [r3, r0]
  }
}
 80016e6:	4770      	bx	lr
 80016e8:	e000ed14 	.word	0xe000ed14

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ee:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f2:	f1c0 0c07 	rsb	ip, r0, #7
 80016f6:	f1bc 0f04 	cmp.w	ip, #4
 80016fa:	bf28      	it	cs
 80016fc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001700:	1d03      	adds	r3, r0, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d90f      	bls.n	8001726 <NVIC_EncodePriority+0x3a>
 8001706:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 3eff 	mov.w	lr, #4294967295
 800170c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001710:	ea21 0100 	bic.w	r1, r1, r0
 8001714:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001716:	fa0e fe03 	lsl.w	lr, lr, r3
 800171a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800171e:	ea41 0002 	orr.w	r0, r1, r2
 8001722:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	2300      	movs	r3, #0
 8001728:	e7ee      	b.n	8001708 <NVIC_EncodePriority+0x1c>
	...

0800172c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800172e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001730:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	0200      	lsls	r0, r0, #8
 800173a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001748:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001750:	b510      	push	{r4, lr}
 8001752:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_NVIC_SetPriority+0x1c>)
 8001756:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001758:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800175c:	f7ff ffc6 	bl	80016ec <NVIC_EncodePriority>
 8001760:	4601      	mov	r1, r0
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff ffae 	bl	80016c4 <__NVIC_SetPriority>
}
 8001768:	bd10      	pop	{r4, pc}
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001772:	f7ff ff99 	bl	80016a8 <__NVIC_EnableIRQ>
}
 8001776:	bd08      	pop	{r3, pc}

08001778 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001778:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800177a:	6805      	ldr	r5, [r0, #0]
 800177c:	682c      	ldr	r4, [r5, #0]
 800177e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001782:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001784:	6804      	ldr	r4, [r0, #0]
 8001786:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001788:	6883      	ldr	r3, [r0, #8]
 800178a:	2b40      	cmp	r3, #64	@ 0x40
 800178c:	d005      	beq.n	800179a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800178e:	6803      	ldr	r3, [r0, #0]
 8001790:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001792:	6803      	ldr	r3, [r0, #0]
 8001794:	60da      	str	r2, [r3, #12]
  }
}
 8001796:	bc30      	pop	{r4, r5}
 8001798:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800179a:	6803      	ldr	r3, [r0, #0]
 800179c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800179e:	6803      	ldr	r3, [r0, #0]
 80017a0:	60d9      	str	r1, [r3, #12]
 80017a2:	e7f8      	b.n	8001796 <DMA_SetConfig+0x1e>

080017a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017a4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017a6:	6803      	ldr	r3, [r0, #0]
 80017a8:	b2d9      	uxtb	r1, r3
 80017aa:	3910      	subs	r1, #16
 80017ac:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <DMA_CalcBaseAndBitshift+0x34>)
 80017ae:	fba2 4201 	umull	r4, r2, r2, r1
 80017b2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017b4:	4c09      	ldr	r4, [pc, #36]	@ (80017dc <DMA_CalcBaseAndBitshift+0x38>)
 80017b6:	5ca2      	ldrb	r2, [r4, r2]
 80017b8:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017ba:	295f      	cmp	r1, #95	@ 0x5f
 80017bc:	d907      	bls.n	80017ce <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017be:	f36f 0309 	bfc	r3, #0, #10
 80017c2:	3304      	adds	r3, #4
 80017c4:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80017c6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80017c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017cc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ce:	f36f 0309 	bfc	r3, #0, #10
 80017d2:	6583      	str	r3, [r0, #88]	@ 0x58
 80017d4:	e7f7      	b.n	80017c6 <DMA_CalcBaseAndBitshift+0x22>
 80017d6:	bf00      	nop
 80017d8:	aaaaaaab 	.word	0xaaaaaaab
 80017dc:	08004da4 	.word	0x08004da4

080017e0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017e0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017e2:	6982      	ldr	r2, [r0, #24]
 80017e4:	b992      	cbnz	r2, 800180c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d00a      	beq.n	8001800 <DMA_CheckFifoParam+0x20>
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d002      	beq.n	80017f4 <DMA_CheckFifoParam+0x14>
 80017ee:	b10b      	cbz	r3, 80017f4 <DMA_CheckFifoParam+0x14>
 80017f0:	2000      	movs	r0, #0
 80017f2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80017f6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80017fa:	d128      	bne.n	800184e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	2000      	movs	r0, #0
 80017fe:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001800:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001802:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001806:	d024      	beq.n	8001852 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001808:	2000      	movs	r0, #0
 800180a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800180c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001810:	d009      	beq.n	8001826 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001812:	2b02      	cmp	r3, #2
 8001814:	d925      	bls.n	8001862 <DMA_CheckFifoParam+0x82>
 8001816:	2b03      	cmp	r3, #3
 8001818:	d125      	bne.n	8001866 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800181a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800181c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001820:	d123      	bne.n	800186a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001822:	2000      	movs	r0, #0
 8001824:	4770      	bx	lr
    switch (tmp)
 8001826:	2b03      	cmp	r3, #3
 8001828:	d803      	bhi.n	8001832 <DMA_CheckFifoParam+0x52>
 800182a:	e8df f003 	tbb	[pc, r3]
 800182e:	0414      	.short	0x0414
 8001830:	0a14      	.short	0x0a14
 8001832:	2000      	movs	r0, #0
 8001834:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001836:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001838:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800183c:	d10d      	bne.n	800185a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800183e:	2000      	movs	r0, #0
 8001840:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001842:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001844:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001848:	d009      	beq.n	800185e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800184a:	2000      	movs	r0, #0
 800184c:	4770      	bx	lr
        status = HAL_ERROR;
 800184e:	2001      	movs	r0, #1
 8001850:	4770      	bx	lr
        status = HAL_ERROR;
 8001852:	2001      	movs	r0, #1
 8001854:	4770      	bx	lr
      status = HAL_ERROR;
 8001856:	2001      	movs	r0, #1
 8001858:	4770      	bx	lr
        status = HAL_ERROR;
 800185a:	2001      	movs	r0, #1
 800185c:	4770      	bx	lr
        status = HAL_ERROR;
 800185e:	2001      	movs	r0, #1
 8001860:	4770      	bx	lr
      status = HAL_ERROR;
 8001862:	2001      	movs	r0, #1
 8001864:	4770      	bx	lr
    switch (tmp)
 8001866:	2000      	movs	r0, #0
 8001868:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800186a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800186c:	4770      	bx	lr
	...

08001870 <HAL_DMA_Init>:
{
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fcbc 	bl	80011f0 <HAL_GetTick>
  if(hdma == NULL)
 8001878:	2c00      	cmp	r4, #0
 800187a:	d05b      	beq.n	8001934 <HAL_DMA_Init+0xc4>
 800187c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800187e:	2302      	movs	r3, #2
 8001880:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001884:	2300      	movs	r3, #0
 8001886:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	f012 0f01 	tst.w	r2, #1
 800189c:	d00a      	beq.n	80018b4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800189e:	f7ff fca7 	bl	80011f0 <HAL_GetTick>
 80018a2:	1b43      	subs	r3, r0, r5
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d9f5      	bls.n	8001894 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a8:	2320      	movs	r3, #32
 80018aa:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ac:	2003      	movs	r0, #3
 80018ae:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80018b2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80018b4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018b6:	4920      	ldr	r1, [pc, #128]	@ (8001938 <HAL_DMA_Init+0xc8>)
 80018b8:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ba:	6862      	ldr	r2, [r4, #4]
 80018bc:	68a0      	ldr	r0, [r4, #8]
 80018be:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c0:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018c2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	6920      	ldr	r0, [r4, #16]
 80018c6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c8:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018cc:	69a0      	ldr	r0, [r4, #24]
 80018ce:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d4:	6a20      	ldr	r0, [r4, #32]
 80018d6:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d8:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80018dc:	2904      	cmp	r1, #4
 80018de:	d01e      	beq.n	800191e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80018e0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80018e2:	6826      	ldr	r6, [r4, #0]
 80018e4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018e6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80018ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80018ec:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d107      	bne.n	8001902 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80018f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80018f4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018f6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80018f8:	b11b      	cbz	r3, 8001902 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff ff70 	bl	80017e0 <DMA_CheckFifoParam>
 8001900:	b990      	cbnz	r0, 8001928 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001902:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001904:	4620      	mov	r0, r4
 8001906:	f7ff ff4d 	bl	80017a4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800190c:	233f      	movs	r3, #63	@ 0x3f
 800190e:	4093      	lsls	r3, r2
 8001910:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001912:	2000      	movs	r0, #0
 8001914:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001916:	2301      	movs	r3, #1
 8001918:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800191c:	e7c9      	b.n	80018b2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800191e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001920:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001922:	4301      	orrs	r1, r0
 8001924:	430a      	orrs	r2, r1
 8001926:	e7db      	b.n	80018e0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001928:	2340      	movs	r3, #64	@ 0x40
 800192a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800192c:	2001      	movs	r0, #1
 800192e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001932:	e7be      	b.n	80018b2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
 8001936:	e7bc      	b.n	80018b2 <HAL_DMA_Init+0x42>
 8001938:	f010803f 	.word	0xf010803f

0800193c <HAL_DMA_Start_IT>:
{
 800193c:	b538      	push	{r3, r4, r5, lr}
 800193e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001940:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001942:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001946:	2801      	cmp	r0, #1
 8001948:	d02a      	beq.n	80019a0 <HAL_DMA_Start_IT+0x64>
 800194a:	2001      	movs	r0, #1
 800194c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001950:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001954:	2801      	cmp	r0, #1
 8001956:	d004      	beq.n	8001962 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8001958:	2300      	movs	r3, #0
 800195a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 800195e:	2002      	movs	r0, #2
}
 8001960:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001962:	2002      	movs	r0, #2
 8001964:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001968:	2000      	movs	r0, #0
 800196a:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff ff03 	bl	8001778 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001972:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001974:	233f      	movs	r3, #63	@ 0x3f
 8001976:	4093      	lsls	r3, r2
 8001978:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800197a:	6822      	ldr	r2, [r4, #0]
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	f043 0316 	orr.w	r3, r3, #22
 8001982:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001984:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001986:	b123      	cbz	r3, 8001992 <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001988:	6822      	ldr	r2, [r4, #0]
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001992:	6822      	ldr	r2, [r4, #0]
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800199c:	2000      	movs	r0, #0
 800199e:	e7df      	b.n	8001960 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80019a0:	2002      	movs	r0, #2
 80019a2:	e7dd      	b.n	8001960 <HAL_DMA_Start_IT+0x24>

080019a4 <HAL_DMA_Abort>:
{
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a8:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 80019aa:	f7ff fc21 	bl	80011f0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ae:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d006      	beq.n	80019c4 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80019ba:	2300      	movs	r3, #0
 80019bc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
}
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
 80019c4:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	6813      	ldr	r3, [r2, #0]
 80019ca:	f023 0316 	bic.w	r3, r3, #22
 80019ce:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019d0:	6822      	ldr	r2, [r4, #0]
 80019d2:	6953      	ldr	r3, [r2, #20]
 80019d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80019d8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019dc:	b1e3      	cbz	r3, 8001a18 <HAL_DMA_Abort+0x74>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f023 0308 	bic.w	r3, r3, #8
 80019e6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	6813      	ldr	r3, [r2, #0]
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f013 0f01 	tst.w	r3, #1
 80019fa:	d011      	beq.n	8001a20 <HAL_DMA_Abort+0x7c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019fc:	f7ff fbf8 	bl	80011f0 <HAL_GetTick>
 8001a00:	1b43      	subs	r3, r0, r5
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d9f5      	bls.n	80019f2 <HAL_DMA_Abort+0x4e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a06:	2320      	movs	r3, #32
 8001a08:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001a10:	2300      	movs	r3, #0
 8001a12:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001a16:	e7d4      	b.n	80019c2 <HAL_DMA_Abort+0x1e>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a18:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1df      	bne.n	80019de <HAL_DMA_Abort+0x3a>
 8001a1e:	e7e3      	b.n	80019e8 <HAL_DMA_Abort+0x44>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a20:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001a22:	233f      	movs	r3, #63	@ 0x3f
 8001a24:	4093      	lsls	r3, r2
 8001a26:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001a34:	e7c5      	b.n	80019c2 <HAL_DMA_Abort+0x1e>

08001a36 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a36:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
 8001a44:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a46:	2305      	movs	r3, #5
 8001a48:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001a4c:	6802      	ldr	r2, [r0, #0]
 8001a4e:	6813      	ldr	r3, [r2, #0]
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001a56:	2000      	movs	r0, #0
}
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_DMA_IRQHandler>:
{
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a66:	4b72      	ldr	r3, [pc, #456]	@ (8001c30 <HAL_DMA_IRQHandler+0x1d4>)
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	4b72      	ldr	r3, [pc, #456]	@ (8001c34 <HAL_DMA_IRQHandler+0x1d8>)
 8001a6c:	fba3 3505 	umull	r3, r5, r3, r5
 8001a70:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a72:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8001a74:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a76:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001a78:	2308      	movs	r3, #8
 8001a7a:	4093      	lsls	r3, r2
 8001a7c:	4233      	tst	r3, r6
 8001a7e:	d010      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a80:	6803      	ldr	r3, [r0, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	f012 0f04 	tst.w	r2, #4
 8001a88:	d00b      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	f022 0204 	bic.w	r2, r2, #4
 8001a90:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a92:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001a94:	2308      	movs	r3, #8
 8001a96:	4093      	lsls	r3, r2
 8001a98:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a9a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	4233      	tst	r3, r6
 8001aaa:	d009      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aac:	6822      	ldr	r2, [r4, #0]
 8001aae:	6952      	ldr	r2, [r2, #20]
 8001ab0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001ab4:	d004      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ab6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ab8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	4233      	tst	r3, r6
 8001ac8:	d009      	beq.n	8001ade <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	f012 0f02 	tst.w	r2, #2
 8001ad2:	d004      	beq.n	8001ade <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ad4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ad6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ade:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	4093      	lsls	r3, r2
 8001ae4:	4233      	tst	r3, r6
 8001ae6:	d024      	beq.n	8001b32 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	f012 0f08 	tst.w	r2, #8
 8001af0:	d01f      	beq.n	8001b32 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001af2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001afc:	d00d      	beq.n	8001b1a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001b04:	d104      	bne.n	8001b10 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001b06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b08:	b19b      	cbz	r3, 8001b32 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4798      	blx	r3
 8001b0e:	e010      	b.n	8001b32 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b10:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001b12:	b173      	cbz	r3, 8001b32 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001b14:	4620      	mov	r0, r4
 8001b16:	4798      	blx	r3
 8001b18:	e00b      	b.n	8001b32 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001b20:	d103      	bne.n	8001b2a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	f022 0208 	bic.w	r2, r2, #8
 8001b28:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001b2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b2c:	b10b      	cbz	r3, 8001b32 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b32:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001b34:	2320      	movs	r3, #32
 8001b36:	4093      	lsls	r3, r2
 8001b38:	4233      	tst	r3, r6
 8001b3a:	d054      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b3c:	6822      	ldr	r2, [r4, #0]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	f012 0f10 	tst.w	r2, #16
 8001b44:	d04f      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b46:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b48:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d00e      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8001b58:	d033      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8001b60:	d12a      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8001b62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d03e      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4798      	blx	r3
 8001b6c:	e03b      	b.n	8001be6 <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	f023 0316 	bic.w	r3, r3, #22
 8001b76:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b78:	6822      	ldr	r2, [r4, #0]
 8001b7a:	6953      	ldr	r3, [r2, #20]
 8001b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b80:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b84:	b1a3      	cbz	r3, 8001bb0 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b86:	6822      	ldr	r2, [r4, #0]
 8001b88:	6813      	ldr	r3, [r2, #0]
 8001b8a:	f023 0308 	bic.w	r3, r3, #8
 8001b8e:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001b92:	233f      	movs	r3, #63	@ 0x3f
 8001b94:	4093      	lsls	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001ba4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d03f      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8001baa:	4620      	mov	r0, r4
 8001bac:	4798      	blx	r3
        return;
 8001bae:	e03c      	b.n	8001c2a <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bb0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1e7      	bne.n	8001b86 <HAL_DMA_IRQHandler+0x12a>
 8001bb6:	e7eb      	b.n	8001b90 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8001bb8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001bba:	b1a3      	cbz	r3, 8001be6 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4798      	blx	r3
 8001bc0:	e011      	b.n	8001be6 <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001bc8:	d109      	bne.n	8001bde <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f022 0210 	bic.w	r2, r2, #16
 8001bd0:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8001bde:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001be0:	b10b      	cbz	r3, 8001be6 <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8001be2:	4620      	mov	r0, r4
 8001be4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001be6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001be8:	b1fb      	cbz	r3, 8001c2a <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001bec:	f013 0f01 	tst.w	r3, #1
 8001bf0:	d017      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001bf8:	6822      	ldr	r2, [r4, #0]
 8001bfa:	6813      	ldr	r3, [r2, #0]
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001c02:	9b01      	ldr	r3, [sp, #4]
 8001c04:	3301      	adds	r3, #1
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	42ab      	cmp	r3, r5
 8001c0a:	d804      	bhi.n	8001c16 <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f013 0f01 	tst.w	r3, #1
 8001c14:	d1f5      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001c22:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c24:	b10b      	cbz	r3, 8001c2a <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 8001c26:	4620      	mov	r0, r4
 8001c28:	4798      	blx	r3
}
 8001c2a:	b003      	add	sp, #12
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000000c 	.word	0x2000000c
 8001c34:	1b4e81b5 	.word	0x1b4e81b5

08001c38 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	f200 80e3 	bhi.w	8001e06 <HAL_GPIO_Init+0x1ce>
{
 8001c40:	b570      	push	{r4, r5, r6, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	e065      	b.n	8001d12 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c46:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c48:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001c4c:	2403      	movs	r4, #3
 8001c4e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c52:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c56:	68cc      	ldr	r4, [r1, #12]
 8001c58:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c5c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001c5e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c60:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c62:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c66:	684a      	ldr	r2, [r1, #4]
 8001c68:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001c70:	6042      	str	r2, [r0, #4]
 8001c72:	e05c      	b.n	8001d2e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c74:	08dc      	lsrs	r4, r3, #3
 8001c76:	3408      	adds	r4, #8
 8001c78:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7c:	f003 0507 	and.w	r5, r3, #7
 8001c80:	00ad      	lsls	r5, r5, #2
 8001c82:	f04f 0e0f 	mov.w	lr, #15
 8001c86:	fa0e fe05 	lsl.w	lr, lr, r5
 8001c8a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c8e:	690a      	ldr	r2, [r1, #16]
 8001c90:	40aa      	lsls	r2, r5
 8001c92:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001c96:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001c9a:	e05c      	b.n	8001d56 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9c:	2206      	movs	r2, #6
 8001c9e:	e000      	b.n	8001ca2 <HAL_GPIO_Init+0x6a>
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ca6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	3402      	adds	r4, #2
 8001caa:	4d57      	ldr	r5, [pc, #348]	@ (8001e08 <HAL_GPIO_Init+0x1d0>)
 8001cac:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb0:	4a56      	ldr	r2, [pc, #344]	@ (8001e0c <HAL_GPIO_Init+0x1d4>)
 8001cb2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	ea6f 020c 	mvn.w	r2, ip
 8001cb8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cbc:	684e      	ldr	r6, [r1, #4]
 8001cbe:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001cc2:	d001      	beq.n	8001cc8 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001cc4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001cc8:	4c50      	ldr	r4, [pc, #320]	@ (8001e0c <HAL_GPIO_Init+0x1d4>)
 8001cca:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001ccc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd2:	684e      	ldr	r6, [r1, #4]
 8001cd4:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001cd8:	d001      	beq.n	8001cde <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001cda:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001cde:	4c4b      	ldr	r4, [pc, #300]	@ (8001e0c <HAL_GPIO_Init+0x1d4>)
 8001ce0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001ce2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce8:	684e      	ldr	r6, [r1, #4]
 8001cea:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001cee:	d001      	beq.n	8001cf4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001cf0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001cf4:	4c45      	ldr	r4, [pc, #276]	@ (8001e0c <HAL_GPIO_Init+0x1d4>)
 8001cf6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cfc:	684d      	ldr	r5, [r1, #4]
 8001cfe:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001d02:	d001      	beq.n	8001d08 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001d04:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001d08:	4c40      	ldr	r4, [pc, #256]	@ (8001e0c <HAL_GPIO_Init+0x1d4>)
 8001d0a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	d877      	bhi.n	8001e02 <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8001d12:	2201      	movs	r2, #1
 8001d14:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	680c      	ldr	r4, [r1, #0]
 8001d18:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001d1c:	ea32 0404 	bics.w	r4, r2, r4
 8001d20:	d1f4      	bne.n	8001d0c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d22:	684c      	ldr	r4, [r1, #4]
 8001d24:	f004 0403 	and.w	r4, r4, #3
 8001d28:	3c01      	subs	r4, #1
 8001d2a:	2c01      	cmp	r4, #1
 8001d2c:	d98b      	bls.n	8001c46 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2e:	684a      	ldr	r2, [r1, #4]
 8001d30:	f002 0203 	and.w	r2, r2, #3
 8001d34:	2a03      	cmp	r2, #3
 8001d36:	d009      	beq.n	8001d4c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001d38:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	005d      	lsls	r5, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	40aa      	lsls	r2, r5
 8001d40:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	688a      	ldr	r2, [r1, #8]
 8001d46:	40aa      	lsls	r2, r5
 8001d48:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001d4a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4c:	684a      	ldr	r2, [r1, #4]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	2a02      	cmp	r2, #2
 8001d54:	d08e      	beq.n	8001c74 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001d56:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d58:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001d62:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d66:	684a      	ldr	r2, [r1, #4]
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001d70:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001d72:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d74:	684a      	ldr	r2, [r1, #4]
 8001d76:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001d7a:	d0c7      	beq.n	8001d0c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	9201      	str	r2, [sp, #4]
 8001d80:	4a23      	ldr	r2, [pc, #140]	@ (8001e10 <HAL_GPIO_Init+0x1d8>)
 8001d82:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001d84:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001d88:	6454      	str	r4, [r2, #68]	@ 0x44
 8001d8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d8c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001d90:	9201      	str	r2, [sp, #4]
 8001d92:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d94:	089c      	lsrs	r4, r3, #2
 8001d96:	1ca5      	adds	r5, r4, #2
 8001d98:	4a1b      	ldr	r2, [pc, #108]	@ (8001e08 <HAL_GPIO_Init+0x1d0>)
 8001d9a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d9e:	f003 0e03 	and.w	lr, r3, #3
 8001da2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f20e 	lsl.w	r2, r2, lr
 8001dac:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db0:	4a18      	ldr	r2, [pc, #96]	@ (8001e14 <HAL_GPIO_Init+0x1dc>)
 8001db2:	4290      	cmp	r0, r2
 8001db4:	f43f af74 	beq.w	8001ca0 <HAL_GPIO_Init+0x68>
 8001db8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dbc:	4290      	cmp	r0, r2
 8001dbe:	d016      	beq.n	8001dee <HAL_GPIO_Init+0x1b6>
 8001dc0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dc4:	4290      	cmp	r0, r2
 8001dc6:	d014      	beq.n	8001df2 <HAL_GPIO_Init+0x1ba>
 8001dc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dcc:	4290      	cmp	r0, r2
 8001dce:	d012      	beq.n	8001df6 <HAL_GPIO_Init+0x1be>
 8001dd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dd4:	4290      	cmp	r0, r2
 8001dd6:	d010      	beq.n	8001dfa <HAL_GPIO_Init+0x1c2>
 8001dd8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ddc:	4290      	cmp	r0, r2
 8001dde:	d00e      	beq.n	8001dfe <HAL_GPIO_Init+0x1c6>
 8001de0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001de4:	4290      	cmp	r0, r2
 8001de6:	f43f af59 	beq.w	8001c9c <HAL_GPIO_Init+0x64>
 8001dea:	2207      	movs	r2, #7
 8001dec:	e759      	b.n	8001ca2 <HAL_GPIO_Init+0x6a>
 8001dee:	2201      	movs	r2, #1
 8001df0:	e757      	b.n	8001ca2 <HAL_GPIO_Init+0x6a>
 8001df2:	2202      	movs	r2, #2
 8001df4:	e755      	b.n	8001ca2 <HAL_GPIO_Init+0x6a>
 8001df6:	2203      	movs	r2, #3
 8001df8:	e753      	b.n	8001ca2 <HAL_GPIO_Init+0x6a>
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	e751      	b.n	8001ca2 <HAL_GPIO_Init+0x6a>
 8001dfe:	2205      	movs	r2, #5
 8001e00:	e74f      	b.n	8001ca2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001e02:	b002      	add	sp, #8
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
 8001e06:	4770      	bx	lr
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40013c00 	.word	0x40013c00
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000

08001e18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	b10a      	cbz	r2, 8001e1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	6181      	str	r1, [r0, #24]
 8001e1c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	0409      	lsls	r1, r1, #16
 8001e20:	6181      	str	r1, [r0, #24]
  }
}
 8001e22:	4770      	bx	lr

08001e24 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e24:	2800      	cmp	r0, #0
 8001e26:	f000 80cc 	beq.w	8001fc2 <HAL_I2C_Init+0x19e>
{
 8001e2a:	b570      	push	{r4, r5, r6, lr}
 8001e2c:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e2e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d077      	beq.n	8001f26 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e36:	2324      	movs	r3, #36	@ 0x24
 8001e38:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	6813      	ldr	r3, [r2, #0]
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e46:	6822      	ldr	r2, [r4, #0]
 8001e48:	6813      	ldr	r3, [r2, #0]
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e4e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	6813      	ldr	r3, [r2, #0]
 8001e54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001e58:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e5a:	f000 f999 	bl	8002190 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e5e:	6862      	ldr	r2, [r4, #4]
 8001e60:	4b5a      	ldr	r3, [pc, #360]	@ (8001fcc <HAL_I2C_Init+0x1a8>)
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d864      	bhi.n	8001f30 <HAL_I2C_Init+0x10c>
 8001e66:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd0 <HAL_I2C_Init+0x1ac>)
 8001e68:	4298      	cmp	r0, r3
 8001e6a:	bf8c      	ite	hi
 8001e6c:	2300      	movhi	r3, #0
 8001e6e:	2301      	movls	r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f040 80a8 	bne.w	8001fc6 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e76:	4957      	ldr	r1, [pc, #348]	@ (8001fd4 <HAL_I2C_Init+0x1b0>)
 8001e78:	fba1 3100 	umull	r3, r1, r1, r0
 8001e7c:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e7e:	6825      	ldr	r5, [r4, #0]
 8001e80:	686a      	ldr	r2, [r5, #4]
 8001e82:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001e86:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001e8a:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e8c:	6821      	ldr	r1, [r4, #0]
 8001e8e:	6a0a      	ldr	r2, [r1, #32]
 8001e90:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001e94:	6866      	ldr	r6, [r4, #4]
 8001e96:	4d4d      	ldr	r5, [pc, #308]	@ (8001fcc <HAL_I2C_Init+0x1a8>)
 8001e98:	42ae      	cmp	r6, r5
 8001e9a:	d84f      	bhi.n	8001f3c <HAL_I2C_Init+0x118>
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea2:	6821      	ldr	r1, [r4, #0]
 8001ea4:	69ca      	ldr	r2, [r1, #28]
 8001ea6:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8001eaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001eae:	6865      	ldr	r5, [r4, #4]
 8001eb0:	4b46      	ldr	r3, [pc, #280]	@ (8001fcc <HAL_I2C_Init+0x1a8>)
 8001eb2:	429d      	cmp	r5, r3
 8001eb4:	d84c      	bhi.n	8001f50 <HAL_I2C_Init+0x12c>
 8001eb6:	1e43      	subs	r3, r0, #1
 8001eb8:	006d      	lsls	r5, r5, #1
 8001eba:	fbb3 f3f5 	udiv	r3, r3, r5
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001ec4:	4203      	tst	r3, r0
 8001ec6:	d078      	beq.n	8001fba <HAL_I2C_Init+0x196>
 8001ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed0:	6821      	ldr	r1, [r4, #0]
 8001ed2:	680b      	ldr	r3, [r1, #0]
 8001ed4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001ed8:	69e2      	ldr	r2, [r4, #28]
 8001eda:	6a20      	ldr	r0, [r4, #32]
 8001edc:	4302      	orrs	r2, r0
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ee2:	6821      	ldr	r1, [r4, #0]
 8001ee4:	688b      	ldr	r3, [r1, #8]
 8001ee6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001eea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001eee:	6922      	ldr	r2, [r4, #16]
 8001ef0:	68e0      	ldr	r0, [r4, #12]
 8001ef2:	4302      	orrs	r2, r0
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef8:	6821      	ldr	r1, [r4, #0]
 8001efa:	68cb      	ldr	r3, [r1, #12]
 8001efc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f00:	6962      	ldr	r2, [r4, #20]
 8001f02:	69a0      	ldr	r0, [r4, #24]
 8001f04:	4302      	orrs	r2, r0
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f0a:	6822      	ldr	r2, [r4, #0]
 8001f0c:	6813      	ldr	r3, [r2, #0]
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f14:	2000      	movs	r0, #0
 8001f16:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f1e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001f26:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001f2a:	f7fe fdd9 	bl	8000ae0 <HAL_I2C_MspInit>
 8001f2e:	e782      	b.n	8001e36 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f30:	4b29      	ldr	r3, [pc, #164]	@ (8001fd8 <HAL_I2C_Init+0x1b4>)
 8001f32:	4298      	cmp	r0, r3
 8001f34:	bf8c      	ite	hi
 8001f36:	2300      	movhi	r3, #0
 8001f38:	2301      	movls	r3, #1
 8001f3a:	e799      	b.n	8001e70 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f3c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001f40:	fb05 f303 	mul.w	r3, r5, r3
 8001f44:	4d25      	ldr	r5, [pc, #148]	@ (8001fdc <HAL_I2C_Init+0x1b8>)
 8001f46:	fba5 5303 	umull	r5, r3, r5, r3
 8001f4a:	099b      	lsrs	r3, r3, #6
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	e7a6      	b.n	8001e9e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f50:	68a6      	ldr	r6, [r4, #8]
 8001f52:	b9be      	cbnz	r6, 8001f84 <HAL_I2C_Init+0x160>
 8001f54:	1e43      	subs	r3, r0, #1
 8001f56:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001f5a:	fbb3 f3fc 	udiv	r3, r3, ip
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	bb43      	cbnz	r3, 8001fbe <HAL_I2C_Init+0x19a>
 8001f6c:	b9c6      	cbnz	r6, 8001fa0 <HAL_I2C_Init+0x17c>
 8001f6e:	1e43      	subs	r3, r0, #1
 8001f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f74:	fbb3 f3f5 	udiv	r3, r3, r5
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f82:	e7a3      	b.n	8001ecc <HAL_I2C_Init+0xa8>
 8001f84:	1e43      	subs	r3, r0, #1
 8001f86:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001f8a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001f8e:	fbb3 f3fc 	udiv	r3, r3, ip
 8001f92:	3301      	adds	r3, #1
 8001f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	e7e4      	b.n	8001f6a <HAL_I2C_Init+0x146>
 8001fa0:	1e43      	subs	r3, r0, #1
 8001fa2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001fa6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001faa:	fbb3 f3f5 	udiv	r3, r3, r5
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fb8:	e788      	b.n	8001ecc <HAL_I2C_Init+0xa8>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e786      	b.n	8001ecc <HAL_I2C_Init+0xa8>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e784      	b.n	8001ecc <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001fc2:	2001      	movs	r0, #1
}
 8001fc4:	4770      	bx	lr
    return HAL_ERROR;
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	e7ac      	b.n	8001f24 <HAL_I2C_Init+0x100>
 8001fca:	bf00      	nop
 8001fcc:	000186a0 	.word	0x000186a0
 8001fd0:	001e847f 	.word	0x001e847f
 8001fd4:	431bde83 	.word	0x431bde83
 8001fd8:	003d08ff 	.word	0x003d08ff
 8001fdc:	10624dd3 	.word	0x10624dd3

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b500      	push	{lr}
 8001fe2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	9200      	str	r2, [sp, #0]
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_MspInit+0x40>)
 8001fea:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001fec:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001ff0:	6459      	str	r1, [r3, #68]	@ 0x44
 8001ff2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001ff4:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8001ff8:	9100      	str	r1, [sp, #0]
 8001ffa:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	9201      	str	r2, [sp, #4]
 8001ffe:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002000:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002004:	6419      	str	r1, [r3, #64]	@ 0x40
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002010:	210f      	movs	r1, #15
 8002012:	f06f 0001 	mvn.w	r0, #1
 8002016:	f7ff fb9b 	bl	8001750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201a:	b003      	add	sp, #12
 800201c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002024:	2800      	cmp	r0, #0
 8002026:	f000 809b 	beq.w	8002160 <HAL_RCC_ClockConfig+0x13c>
{
 800202a:	b570      	push	{r4, r5, r6, lr}
 800202c:	460d      	mov	r5, r1
 800202e:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b4f      	ldr	r3, [pc, #316]	@ (8002170 <HAL_RCC_ClockConfig+0x14c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	428b      	cmp	r3, r1
 800203a:	d208      	bcs.n	800204e <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203c:	b2cb      	uxtb	r3, r1
 800203e:	4a4c      	ldr	r2, [pc, #304]	@ (8002170 <HAL_RCC_ClockConfig+0x14c>)
 8002040:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	428b      	cmp	r3, r1
 800204a:	f040 808b 	bne.w	8002164 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	f013 0f02 	tst.w	r3, #2
 8002054:	d017      	beq.n	8002086 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002056:	f013 0f04 	tst.w	r3, #4
 800205a:	d004      	beq.n	8002066 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800205c:	4a45      	ldr	r2, [pc, #276]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 800205e:	6893      	ldr	r3, [r2, #8]
 8002060:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002064:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	f013 0f08 	tst.w	r3, #8
 800206c:	d004      	beq.n	8002078 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800206e:	4a41      	ldr	r2, [pc, #260]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 8002070:	6893      	ldr	r3, [r2, #8]
 8002072:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4a3e      	ldr	r2, [pc, #248]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 800207a:	6893      	ldr	r3, [r2, #8]
 800207c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002080:	68a1      	ldr	r1, [r4, #8]
 8002082:	430b      	orrs	r3, r1
 8002084:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	f013 0f01 	tst.w	r3, #1
 800208c:	d032      	beq.n	80020f4 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	6863      	ldr	r3, [r4, #4]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d021      	beq.n	80020d8 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002094:	1e9a      	subs	r2, r3, #2
 8002096:	2a01      	cmp	r2, #1
 8002098:	d925      	bls.n	80020e6 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4a36      	ldr	r2, [pc, #216]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	f012 0f02 	tst.w	r2, #2
 80020a2:	d061      	beq.n	8002168 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a4:	4933      	ldr	r1, [pc, #204]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 80020a6:	688a      	ldr	r2, [r1, #8]
 80020a8:	f022 0203 	bic.w	r2, r2, #3
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b0:	f7ff f89e 	bl	80011f0 <HAL_GetTick>
 80020b4:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	6862      	ldr	r2, [r4, #4]
 80020c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020c4:	d016      	beq.n	80020f4 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c6:	f7ff f893 	bl	80011f0 <HAL_GetTick>
 80020ca:	1b80      	subs	r0, r0, r6
 80020cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80020d0:	4298      	cmp	r0, r3
 80020d2:	d9f0      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 80020d4:	2003      	movs	r0, #3
 80020d6:	e042      	b.n	800215e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d8:	4a26      	ldr	r2, [pc, #152]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80020e0:	d1e0      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80020e2:	2001      	movs	r0, #1
 80020e4:	e03b      	b.n	800215e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	4a23      	ldr	r2, [pc, #140]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80020ee:	d1d9      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80020f0:	2001      	movs	r0, #1
 80020f2:	e034      	b.n	800215e <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <HAL_RCC_ClockConfig+0x14c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	42ab      	cmp	r3, r5
 80020fe:	d907      	bls.n	8002110 <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002100:	b2ea      	uxtb	r2, r5
 8002102:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_RCC_ClockConfig+0x14c>)
 8002104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	42ab      	cmp	r3, r5
 800210e:	d12d      	bne.n	800216c <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	f013 0f04 	tst.w	r3, #4
 8002116:	d006      	beq.n	8002126 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4a16      	ldr	r2, [pc, #88]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 800211a:	6893      	ldr	r3, [r2, #8]
 800211c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002120:	68e1      	ldr	r1, [r4, #12]
 8002122:	430b      	orrs	r3, r1
 8002124:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	f013 0f08 	tst.w	r3, #8
 800212c:	d007      	beq.n	800213e <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 8002130:	6893      	ldr	r3, [r2, #8]
 8002132:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002136:	6921      	ldr	r1, [r4, #16]
 8002138:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800213c:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800213e:	f000 f865 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8002142:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <HAL_RCC_ClockConfig+0x150>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800214a:	4a0b      	ldr	r2, [pc, #44]	@ (8002178 <HAL_RCC_ClockConfig+0x154>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	40d8      	lsrs	r0, r3
 8002150:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_RCC_ClockConfig+0x158>)
 8002152:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_RCC_ClockConfig+0x15c>)
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	f001 f980 	bl	800345c <HAL_InitTick>

  return HAL_OK;
 800215c:	2000      	movs	r0, #0
}
 800215e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002160:	2001      	movs	r0, #1
}
 8002162:	4770      	bx	lr
      return HAL_ERROR;
 8002164:	2001      	movs	r0, #1
 8002166:	e7fa      	b.n	800215e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002168:	2001      	movs	r0, #1
 800216a:	e7f8      	b.n	800215e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800216c:	2001      	movs	r0, #1
 800216e:	e7f6      	b.n	800215e <HAL_RCC_ClockConfig+0x13a>
 8002170:	40023c00 	.word	0x40023c00
 8002174:	40023800 	.word	0x40023800
 8002178:	08004db4 	.word	0x08004db4
 800217c:	2000000c 	.word	0x2000000c
 8002180:	20000008 	.word	0x20000008

08002184 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002184:	4b01      	ldr	r3, [pc, #4]	@ (800218c <HAL_RCC_GetHCLKFreq+0x8>)
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	2000000c 	.word	0x2000000c

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002192:	f7ff fff7 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 8002196:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800219e:	4a03      	ldr	r2, [pc, #12]	@ (80021ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80021a2:	40d8      	lsrs	r0, r3
 80021a4:	bd08      	pop	{r3, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	08004dac 	.word	0x08004dac

080021b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b2:	f7ff ffe7 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021b6:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80021be:	4a03      	ldr	r2, [pc, #12]	@ (80021cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80021c2:	40d8      	lsrs	r0, r3
 80021c4:	bd08      	pop	{r3, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08004dac 	.word	0x08004dac

080021d0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021d0:	230f      	movs	r3, #15
 80021d2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_GetClockConfig+0x34>)
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	f002 0203 	and.w	r2, r2, #3
 80021dc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80021e4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80021ec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80021f6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <HAL_RCC_GetClockConfig+0x38>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	600b      	str	r3, [r1, #0]
}
 8002202:	4770      	bx	lr
 8002204:	40023800 	.word	0x40023800
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800220e:	4b5e      	ldr	r3, [pc, #376]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b08      	cmp	r3, #8
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x16>
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d05b      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0xca>
 800221e:	485b      	ldr	r0, [pc, #364]	@ (800238c <HAL_RCC_GetSysClockFreq+0x180>)
 8002220:	e033      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x7e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002222:	4b59      	ldr	r3, [pc, #356]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002230:	d02c      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002232:	4b55      	ldr	r3, [pc, #340]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002234:	6858      	ldr	r0, [r3, #4]
 8002236:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800223a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800223e:	ebbc 0c00 	subs.w	ip, ip, r0
 8002242:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002246:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800224a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800224e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002252:	ebb1 010c 	subs.w	r1, r1, ip
 8002256:	eb63 030e 	sbc.w	r3, r3, lr
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002260:	00c9      	lsls	r1, r1, #3
 8002262:	eb11 0c00 	adds.w	ip, r1, r0
 8002266:	f143 0300 	adc.w	r3, r3, #0
 800226a:	0299      	lsls	r1, r3, #10
 800226c:	2300      	movs	r3, #0
 800226e:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002272:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002276:	f7fd ffab 	bl	80001d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800227a:	4b43      	ldr	r3, [pc, #268]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x17c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002282:	3301      	adds	r3, #1
 8002284:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002286:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800228a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228c:	4b3e      	ldr	r3, [pc, #248]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x17c>)
 800228e:	6858      	ldr	r0, [r3, #4]
 8002290:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002294:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002298:	ebbc 0c00 	subs.w	ip, ip, r0
 800229c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80022a0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80022a4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80022a8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80022ac:	ebb1 010c 	subs.w	r1, r1, ip
 80022b0:	eb63 030e 	sbc.w	r3, r3, lr
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ba:	00c9      	lsls	r1, r1, #3
 80022bc:	eb11 0c00 	adds.w	ip, r1, r0
 80022c0:	f143 0300 	adc.w	r3, r3, #0
 80022c4:	0299      	lsls	r1, r3, #10
 80022c6:	2300      	movs	r3, #0
 80022c8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80022cc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80022d0:	f7fd ff7e 	bl	80001d0 <__aeabi_uldivmod>
 80022d4:	e7d1      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x6e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x17c>)
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80022e4:	d02a      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x130>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e6:	4b28      	ldr	r3, [pc, #160]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x17c>)
 80022e8:	6858      	ldr	r0, [r3, #4]
 80022ea:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80022ee:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80022f2:	ebbc 0c00 	subs.w	ip, ip, r0
 80022f6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80022fa:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80022fe:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002302:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002306:	ebb1 010c 	subs.w	r1, r1, ip
 800230a:	eb63 030e 	sbc.w	r3, r3, lr
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002314:	00c9      	lsls	r1, r1, #3
 8002316:	eb11 0c00 	adds.w	ip, r1, r0
 800231a:	f143 0300 	adc.w	r3, r3, #0
 800231e:	0299      	lsls	r1, r3, #10
 8002320:	2300      	movs	r3, #0
 8002322:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002326:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800232a:	f7fd ff51 	bl	80001d0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x17c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8002336:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800233a:	e7a6      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x7e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x17c>)
 800233e:	6858      	ldr	r0, [r3, #4]
 8002340:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002344:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002348:	ebbc 0c00 	subs.w	ip, ip, r0
 800234c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002350:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002354:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002358:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800235c:	ebb1 010c 	subs.w	r1, r1, ip
 8002360:	eb63 030e 	sbc.w	r3, r3, lr
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800236a:	00c9      	lsls	r1, r1, #3
 800236c:	eb11 0c00 	adds.w	ip, r1, r0
 8002370:	f143 0300 	adc.w	r3, r3, #0
 8002374:	0299      	lsls	r1, r3, #10
 8002376:	2300      	movs	r3, #0
 8002378:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800237c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002380:	f7fd ff26 	bl	80001d0 <__aeabi_uldivmod>
 8002384:	e7d3      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x122>
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	00f42400 	.word	0x00f42400

08002390 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002390:	2800      	cmp	r0, #0
 8002392:	f000 8201 	beq.w	8002798 <HAL_RCC_OscConfig+0x408>
{
 8002396:	b570      	push	{r4, r5, r6, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239c:	6803      	ldr	r3, [r0, #0]
 800239e:	f013 0f01 	tst.w	r3, #1
 80023a2:	d041      	beq.n	8002428 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023a4:	4b99      	ldr	r3, [pc, #612]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d032      	beq.n	8002416 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023b0:	4b96      	ldr	r3, [pc, #600]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d027      	beq.n	800240c <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023bc:	4b93      	ldr	r3, [pc, #588]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	d059      	beq.n	800247c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c8:	6863      	ldr	r3, [r4, #4]
 80023ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ce:	d05b      	beq.n	8002488 <HAL_RCC_OscConfig+0xf8>
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d4:	d05e      	beq.n	8002494 <HAL_RCC_OscConfig+0x104>
 80023d6:	4b8d      	ldr	r3, [pc, #564]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	6863      	ldr	r3, [r4, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d05c      	beq.n	80024a8 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe feff 	bl	80011f0 <HAL_GetTick>
 80023f2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f4:	4b85      	ldr	r3, [pc, #532]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80023fc:	d114      	bne.n	8002428 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fe:	f7fe fef7 	bl	80011f0 <HAL_GetTick>
 8002402:	1b40      	subs	r0, r0, r5
 8002404:	2864      	cmp	r0, #100	@ 0x64
 8002406:	d9f5      	bls.n	80023f4 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8002408:	2003      	movs	r0, #3
 800240a:	e1cc      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800240c:	4b7f      	ldr	r3, [pc, #508]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002414:	d0d2      	beq.n	80023bc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002416:	4b7d      	ldr	r3, [pc, #500]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800241e:	d003      	beq.n	8002428 <HAL_RCC_OscConfig+0x98>
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 81ba 	beq.w	800279c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f013 0f02 	tst.w	r3, #2
 800242e:	d060      	beq.n	80024f2 <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002430:	4b76      	ldr	r3, [pc, #472]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f013 0f0c 	tst.w	r3, #12
 8002438:	d04a      	beq.n	80024d0 <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800243a:	4b74      	ldr	r3, [pc, #464]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002442:	2b08      	cmp	r3, #8
 8002444:	d03f      	beq.n	80024c6 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002446:	4b71      	ldr	r3, [pc, #452]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d069      	beq.n	8002526 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002452:	68e3      	ldr	r3, [r4, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d075      	beq.n	8002544 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b6d      	ldr	r3, [pc, #436]	@ (8002610 <HAL_RCC_OscConfig+0x280>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fec7 	bl	80011f0 <HAL_GetTick>
 8002462:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	4b69      	ldr	r3, [pc, #420]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f013 0f02 	tst.w	r3, #2
 800246c:	d161      	bne.n	8002532 <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe febf 	bl	80011f0 <HAL_GetTick>
 8002472:	1b40      	subs	r0, r0, r5
 8002474:	2802      	cmp	r0, #2
 8002476:	d9f5      	bls.n	8002464 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002478:	2003      	movs	r0, #3
 800247a:	e194      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247c:	4b63      	ldr	r3, [pc, #396]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002484:	d0a0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x38>
 8002486:	e7c6      	b.n	8002416 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002488:	4a60      	ldr	r2, [pc, #384]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 800248a:	6813      	ldr	r3, [r2, #0]
 800248c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e7a9      	b.n	80023e8 <HAL_RCC_OscConfig+0x58>
 8002494:	4b5d      	ldr	r3, [pc, #372]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e79f      	b.n	80023e8 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 80024a8:	f7fe fea2 	bl	80011f0 <HAL_GetTick>
 80024ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	4b57      	ldr	r3, [pc, #348]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024b6:	d0b7      	beq.n	8002428 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe fe9a 	bl	80011f0 <HAL_GetTick>
 80024bc:	1b40      	subs	r0, r0, r5
 80024be:	2864      	cmp	r0, #100	@ 0x64
 80024c0:	d9f5      	bls.n	80024ae <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80024c2:	2003      	movs	r0, #3
 80024c4:	e16f      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024c6:	4b51      	ldr	r3, [pc, #324]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80024ce:	d1ba      	bne.n	8002446 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d0:	4b4e      	ldr	r3, [pc, #312]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f013 0f02 	tst.w	r3, #2
 80024d8:	d003      	beq.n	80024e2 <HAL_RCC_OscConfig+0x152>
 80024da:	68e3      	ldr	r3, [r4, #12]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	f040 815f 	bne.w	80027a0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	4a4a      	ldr	r2, [pc, #296]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80024ea:	6921      	ldr	r1, [r4, #16]
 80024ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024f0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	f013 0f08 	tst.w	r3, #8
 80024f8:	d049      	beq.n	800258e <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024fa:	6963      	ldr	r3, [r4, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d033      	beq.n	8002568 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002500:	4b43      	ldr	r3, [pc, #268]	@ (8002610 <HAL_RCC_OscConfig+0x280>)
 8002502:	2201      	movs	r2, #1
 8002504:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe fe72 	bl	80011f0 <HAL_GetTick>
 800250c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b3f      	ldr	r3, [pc, #252]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002512:	f013 0f02 	tst.w	r3, #2
 8002516:	d13a      	bne.n	800258e <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe fe6a 	bl	80011f0 <HAL_GetTick>
 800251c:	1b40      	subs	r0, r0, r5
 800251e:	2802      	cmp	r0, #2
 8002520:	d9f5      	bls.n	800250e <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8002522:	2003      	movs	r0, #3
 8002524:	e13f      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002526:	4b39      	ldr	r3, [pc, #228]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800252e:	d190      	bne.n	8002452 <HAL_RCC_OscConfig+0xc2>
 8002530:	e7ce      	b.n	80024d0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4a36      	ldr	r2, [pc, #216]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800253a:	6921      	ldr	r1, [r4, #16]
 800253c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e7d6      	b.n	80024f2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <HAL_RCC_OscConfig+0x280>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800254a:	f7fe fe51 	bl	80011f0 <HAL_GetTick>
 800254e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002550:	4b2e      	ldr	r3, [pc, #184]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f013 0f02 	tst.w	r3, #2
 8002558:	d0cb      	beq.n	80024f2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe fe49 	bl	80011f0 <HAL_GetTick>
 800255e:	1b40      	subs	r0, r0, r5
 8002560:	2802      	cmp	r0, #2
 8002562:	d9f5      	bls.n	8002550 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8002564:	2003      	movs	r0, #3
 8002566:	e11e      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002568:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <HAL_RCC_OscConfig+0x280>)
 800256a:	2200      	movs	r2, #0
 800256c:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fe3e 	bl	80011f0 <HAL_GetTick>
 8002574:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002576:	4b25      	ldr	r3, [pc, #148]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257a:	f013 0f02 	tst.w	r3, #2
 800257e:	d006      	beq.n	800258e <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7fe fe36 	bl	80011f0 <HAL_GetTick>
 8002584:	1b40      	subs	r0, r0, r5
 8002586:	2802      	cmp	r0, #2
 8002588:	d9f5      	bls.n	8002576 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 800258a:	2003      	movs	r0, #3
 800258c:	e10b      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	f013 0f04 	tst.w	r3, #4
 8002594:	d076      	beq.n	8002684 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800259e:	d133      	bne.n	8002608 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	4b19      	ldr	r3, [pc, #100]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80025a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025a8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80025ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80025b8:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <HAL_RCC_OscConfig+0x284>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80025c2:	d029      	beq.n	8002618 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	68a3      	ldr	r3, [r4, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d03a      	beq.n	8002640 <HAL_RCC_OscConfig+0x2b0>
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d03e      	beq.n	800264c <HAL_RCC_OscConfig+0x2bc>
 80025ce:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80025d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	671a      	str	r2, [r3, #112]	@ 0x70
 80025d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025da:	f022 0204 	bic.w	r2, r2, #4
 80025de:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e0:	68a3      	ldr	r3, [r4, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d03c      	beq.n	8002660 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7fe fe03 	bl	80011f0 <HAL_GetTick>
 80025ea:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b07      	ldr	r3, [pc, #28]	@ (800260c <HAL_RCC_OscConfig+0x27c>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	f013 0f02 	tst.w	r3, #2
 80025f4:	d145      	bne.n	8002682 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fdfb 	bl	80011f0 <HAL_GetTick>
 80025fa:	1b80      	subs	r0, r0, r6
 80025fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002600:	4298      	cmp	r0, r3
 8002602:	d9f3      	bls.n	80025ec <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8002604:	2003      	movs	r0, #3
 8002606:	e0ce      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8002608:	2500      	movs	r5, #0
 800260a:	e7d6      	b.n	80025ba <HAL_RCC_OscConfig+0x22a>
 800260c:	40023800 	.word	0x40023800
 8002610:	42470000 	.word	0x42470000
 8002614:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002618:	4a6b      	ldr	r2, [pc, #428]	@ (80027c8 <HAL_RCC_OscConfig+0x438>)
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002620:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002622:	f7fe fde5 	bl	80011f0 <HAL_GetTick>
 8002626:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4b67      	ldr	r3, [pc, #412]	@ (80027c8 <HAL_RCC_OscConfig+0x438>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002630:	d1c8      	bne.n	80025c4 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe fddd 	bl	80011f0 <HAL_GetTick>
 8002636:	1b80      	subs	r0, r0, r6
 8002638:	2802      	cmp	r0, #2
 800263a:	d9f5      	bls.n	8002628 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 800263c:	2003      	movs	r0, #3
 800263e:	e0b2      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002640:	4a62      	ldr	r2, [pc, #392]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 8002642:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	@ 0x70
 800264a:	e7c9      	b.n	80025e0 <HAL_RCC_OscConfig+0x250>
 800264c:	4b5f      	ldr	r3, [pc, #380]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 800264e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002650:	f042 0204 	orr.w	r2, r2, #4
 8002654:	671a      	str	r2, [r3, #112]	@ 0x70
 8002656:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	671a      	str	r2, [r3, #112]	@ 0x70
 800265e:	e7bf      	b.n	80025e0 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fe fdc6 	bl	80011f0 <HAL_GetTick>
 8002664:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002666:	4b59      	ldr	r3, [pc, #356]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	f013 0f02 	tst.w	r3, #2
 800266e:	d008      	beq.n	8002682 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe fdbe 	bl	80011f0 <HAL_GetTick>
 8002674:	1b80      	subs	r0, r0, r6
 8002676:	f241 3388 	movw	r3, #5000	@ 0x1388
 800267a:	4298      	cmp	r0, r3
 800267c:	d9f3      	bls.n	8002666 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800267e:	2003      	movs	r0, #3
 8002680:	e091      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002682:	b9ed      	cbnz	r5, 80026c0 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002684:	69a3      	ldr	r3, [r4, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 808c 	beq.w	80027a4 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268c:	4a4f      	ldr	r2, [pc, #316]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 800268e:	6892      	ldr	r2, [r2, #8]
 8002690:	f002 020c 	and.w	r2, r2, #12
 8002694:	2a08      	cmp	r2, #8
 8002696:	d054      	beq.n	8002742 <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002698:	2b02      	cmp	r3, #2
 800269a:	d017      	beq.n	80026cc <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b4c      	ldr	r3, [pc, #304]	@ (80027d0 <HAL_RCC_OscConfig+0x440>)
 800269e:	2200      	movs	r2, #0
 80026a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fda5 	bl	80011f0 <HAL_GetTick>
 80026a6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	4b48      	ldr	r3, [pc, #288]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80026b0:	d045      	beq.n	800273e <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7fe fd9d 	bl	80011f0 <HAL_GetTick>
 80026b6:	1b00      	subs	r0, r0, r4
 80026b8:	2802      	cmp	r0, #2
 80026ba:	d9f5      	bls.n	80026a8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80026bc:	2003      	movs	r0, #3
 80026be:	e072      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4a42      	ldr	r2, [pc, #264]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 80026c2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80026c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ca:	e7db      	b.n	8002684 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b40      	ldr	r3, [pc, #256]	@ (80027d0 <HAL_RCC_OscConfig+0x440>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80026d2:	f7fe fd8d 	bl	80011f0 <HAL_GetTick>
 80026d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d8:	4b3c      	ldr	r3, [pc, #240]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80026e0:	d006      	beq.n	80026f0 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e2:	f7fe fd85 	bl	80011f0 <HAL_GetTick>
 80026e6:	1b40      	subs	r0, r0, r5
 80026e8:	2802      	cmp	r0, #2
 80026ea:	d9f5      	bls.n	80026d8 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 80026ec:	2003      	movs	r0, #3
 80026ee:	e05a      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026f0:	69e3      	ldr	r3, [r4, #28]
 80026f2:	6a22      	ldr	r2, [r4, #32]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80026f8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80026fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80026fe:	0852      	lsrs	r2, r2, #1
 8002700:	3a01      	subs	r2, #1
 8002702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002706:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002708:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800270c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800270e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002712:	4a2e      	ldr	r2, [pc, #184]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 8002714:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002716:	4b2e      	ldr	r3, [pc, #184]	@ (80027d0 <HAL_RCC_OscConfig+0x440>)
 8002718:	2201      	movs	r2, #1
 800271a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800271c:	f7fe fd68 	bl	80011f0 <HAL_GetTick>
 8002720:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b2a      	ldr	r3, [pc, #168]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fd60 	bl	80011f0 <HAL_GetTick>
 8002730:	1b00      	subs	r0, r0, r4
 8002732:	2802      	cmp	r0, #2
 8002734:	d9f5      	bls.n	8002722 <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8002736:	2003      	movs	r0, #3
 8002738:	e035      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2000      	movs	r0, #0
 800273c:	e033      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
 800273e:	2000      	movs	r0, #0
 8002740:	e031      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002742:	2b01      	cmp	r3, #1
 8002744:	d031      	beq.n	80027aa <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8002746:	4b21      	ldr	r3, [pc, #132]	@ (80027cc <HAL_RCC_OscConfig+0x43c>)
 8002748:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800274e:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	4291      	cmp	r1, r2
 8002752:	d12c      	bne.n	80027ae <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002754:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002758:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	428a      	cmp	r2, r1
 800275c:	d129      	bne.n	80027b2 <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002760:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002764:	401a      	ands	r2, r3
 8002766:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800276a:	d124      	bne.n	80027b6 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800276c:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002770:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002772:	0852      	lsrs	r2, r2, #1
 8002774:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002776:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800277a:	d11e      	bne.n	80027ba <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800277c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002780:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002782:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8002786:	d11a      	bne.n	80027be <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002788:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800278c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278e:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002792:	d116      	bne.n	80027c2 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8002794:	2000      	movs	r0, #0
 8002796:	e006      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8002798:	2001      	movs	r0, #1
}
 800279a:	4770      	bx	lr
        return HAL_ERROR;
 800279c:	2001      	movs	r0, #1
 800279e:	e002      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80027a4:	2000      	movs	r0, #0
}
 80027a6:	b002      	add	sp, #8
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80027aa:	2001      	movs	r0, #1
 80027ac:	e7fb      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80027ae:	2001      	movs	r0, #1
 80027b0:	e7f9      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
 80027b2:	2001      	movs	r0, #1
 80027b4:	e7f7      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
 80027b6:	2001      	movs	r0, #1
 80027b8:	e7f5      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
 80027ba:	2001      	movs	r0, #1
 80027bc:	e7f3      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
 80027be:	2001      	movs	r0, #1
 80027c0:	e7f1      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
 80027c2:	2001      	movs	r0, #1
 80027c4:	e7ef      	b.n	80027a6 <HAL_RCC_OscConfig+0x416>
 80027c6:	bf00      	nop
 80027c8:	40007000 	.word	0x40007000
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470000 	.word	0x42470000

080027d4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d05a      	beq.n	800288e <HAL_SPI_Init+0xba>
{
 80027d8:	b510      	push	{r4, lr}
 80027da:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027dc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80027de:	b933      	cbnz	r3, 80027ee <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027e0:	6843      	ldr	r3, [r0, #4]
 80027e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027e6:	d005      	beq.n	80027f4 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61c3      	str	r3, [r0, #28]
 80027ec:	e002      	b.n	80027f4 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ee:	2300      	movs	r3, #0
 80027f0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027f2:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027f8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d040      	beq.n	8002882 <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002800:	2302      	movs	r3, #2
 8002802:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002806:	6822      	ldr	r2, [r4, #0]
 8002808:	6813      	ldr	r3, [r2, #0]
 800280a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800280e:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002810:	6863      	ldr	r3, [r4, #4]
 8002812:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002816:	68a2      	ldr	r2, [r4, #8]
 8002818:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 800281c:	4313      	orrs	r3, r2
 800281e:	68e2      	ldr	r2, [r4, #12]
 8002820:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002824:	4313      	orrs	r3, r2
 8002826:	6922      	ldr	r2, [r4, #16]
 8002828:	f002 0202 	and.w	r2, r2, #2
 800282c:	4313      	orrs	r3, r2
 800282e:	6962      	ldr	r2, [r4, #20]
 8002830:	f002 0201 	and.w	r2, r2, #1
 8002834:	4313      	orrs	r3, r2
 8002836:	69a2      	ldr	r2, [r4, #24]
 8002838:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800283c:	4313      	orrs	r3, r2
 800283e:	69e2      	ldr	r2, [r4, #28]
 8002840:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002844:	4313      	orrs	r3, r2
 8002846:	6a22      	ldr	r2, [r4, #32]
 8002848:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800284c:	4313      	orrs	r3, r2
 800284e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002850:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002854:	6821      	ldr	r1, [r4, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800285a:	8b63      	ldrh	r3, [r4, #26]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002862:	f002 0210 	and.w	r2, r2, #16
 8002866:	6821      	ldr	r1, [r4, #0]
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	69d3      	ldr	r3, [r2, #28]
 8002870:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002874:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002876:	2000      	movs	r0, #0
 8002878:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800287a:	2301      	movs	r3, #1
 800287c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8002880:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002882:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002886:	4620      	mov	r0, r4
 8002888:	f7fe fc02 	bl	8001090 <HAL_SPI_MspInit>
 800288c:	e7b8      	b.n	8002800 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800288e:	2001      	movs	r0, #1
}
 8002890:	4770      	bx	lr
	...

08002894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002898:	6a02      	ldr	r2, [r0, #32]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028a2:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028a4:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a8:	680c      	ldr	r4, [r1, #0]
 80028aa:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028ae:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028b2:	688b      	ldr	r3, [r1, #8]
 80028b4:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028b8:	4d11      	ldr	r5, [pc, #68]	@ (8002900 <TIM_OC1_SetConfig+0x6c>)
 80028ba:	42a8      	cmp	r0, r5
 80028bc:	d003      	beq.n	80028c6 <TIM_OC1_SetConfig+0x32>
 80028be:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80028c2:	42a8      	cmp	r0, r5
 80028c4:	d105      	bne.n	80028d2 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028c6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028ca:	68cd      	ldr	r5, [r1, #12]
 80028cc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ce:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d2:	4d0b      	ldr	r5, [pc, #44]	@ (8002900 <TIM_OC1_SetConfig+0x6c>)
 80028d4:	42a8      	cmp	r0, r5
 80028d6:	d003      	beq.n	80028e0 <TIM_OC1_SetConfig+0x4c>
 80028d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80028dc:	42a8      	cmp	r0, r5
 80028de:	d107      	bne.n	80028f0 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028e4:	694d      	ldr	r5, [r1, #20]
 80028e6:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ea:	698a      	ldr	r2, [r1, #24]
 80028ec:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f2:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028f4:	684a      	ldr	r2, [r1, #4]
 80028f6:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f8:	6203      	str	r3, [r0, #32]
}
 80028fa:	bc30      	pop	{r4, r5}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40010000 	.word	0x40010000

08002904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002906:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002908:	6a02      	ldr	r2, [r0, #32]
 800290a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800290e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002910:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002912:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002914:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002918:	680c      	ldr	r4, [r1, #0]
 800291a:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800291e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002922:	688c      	ldr	r4, [r1, #8]
 8002924:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002928:	4c11      	ldr	r4, [pc, #68]	@ (8002970 <TIM_OC3_SetConfig+0x6c>)
 800292a:	42a0      	cmp	r0, r4
 800292c:	d003      	beq.n	8002936 <TIM_OC3_SetConfig+0x32>
 800292e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002932:	42a0      	cmp	r0, r4
 8002934:	d106      	bne.n	8002944 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800293a:	68cc      	ldr	r4, [r1, #12]
 800293c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002940:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002944:	4c0a      	ldr	r4, [pc, #40]	@ (8002970 <TIM_OC3_SetConfig+0x6c>)
 8002946:	42a0      	cmp	r0, r4
 8002948:	d003      	beq.n	8002952 <TIM_OC3_SetConfig+0x4e>
 800294a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800294e:	42a0      	cmp	r0, r4
 8002950:	d107      	bne.n	8002962 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002952:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002956:	694c      	ldr	r4, [r1, #20]
 8002958:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800295c:	698c      	ldr	r4, [r1, #24]
 800295e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002962:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002964:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002966:	684a      	ldr	r2, [r1, #4]
 8002968:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296a:	6203      	str	r3, [r0, #32]
}
 800296c:	bc30      	pop	{r4, r5}
 800296e:	4770      	bx	lr
 8002970:	40010000 	.word	0x40010000

08002974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002976:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002978:	6a02      	ldr	r2, [r0, #32]
 800297a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800297e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002982:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002984:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002988:	680d      	ldr	r5, [r1, #0]
 800298a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800298e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002992:	688d      	ldr	r5, [r1, #8]
 8002994:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002998:	4d09      	ldr	r5, [pc, #36]	@ (80029c0 <TIM_OC4_SetConfig+0x4c>)
 800299a:	42a8      	cmp	r0, r5
 800299c:	d003      	beq.n	80029a6 <TIM_OC4_SetConfig+0x32>
 800299e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80029a2:	42a8      	cmp	r0, r5
 80029a4:	d104      	bne.n	80029b0 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029a6:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029aa:	694d      	ldr	r5, [r1, #20]
 80029ac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029b4:	684a      	ldr	r2, [r1, #4]
 80029b6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b8:	6203      	str	r3, [r0, #32]
}
 80029ba:	bc30      	pop	{r4, r5}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000

080029c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029c6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c8:	6a04      	ldr	r4, [r0, #32]
 80029ca:	f024 0401 	bic.w	r4, r4, #1
 80029ce:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029da:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80029de:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029e0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029e2:	6203      	str	r3, [r0, #32]
}
 80029e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029ea:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ec:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ee:	6a04      	ldr	r4, [r0, #32]
 80029f0:	f024 0410 	bic.w	r4, r4, #16
 80029f4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f6:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029f8:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029fc:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a04:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a08:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a0a:	6203      	str	r3, [r0, #32]
}
 8002a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a12:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1e:	6083      	str	r3, [r0, #8]
}
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002a24:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d137      	bne.n	8002a9c <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a32:	6802      	ldr	r2, [r0, #0]
 8002a34:	68d3      	ldr	r3, [r2, #12]
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3c:	6803      	ldr	r3, [r0, #0]
 8002a3e:	4a19      	ldr	r2, [pc, #100]	@ (8002aa4 <HAL_TIM_Base_Start_IT+0x80>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d020      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x62>
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a48:	d01d      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x62>
 8002a4a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d019      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x62>
 8002a52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d015      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x62>
 8002a5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d011      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x62>
 8002a62:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00d      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x62>
 8002a6a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d009      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x62>
 8002a72:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d005      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x62>
    __HAL_TIM_ENABLE(htim);
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a82:	2000      	movs	r0, #0
 8002a84:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	2a06      	cmp	r2, #6
 8002a8e:	d007      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a98:	2000      	movs	r0, #0
 8002a9a:	4770      	bx	lr
    return HAL_ERROR;
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	4770      	bx	lr
  return HAL_OK;
 8002aa0:	2000      	movs	r0, #0
}
 8002aa2:	4770      	bx	lr
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <HAL_TIM_PWM_MspInit>:
}
 8002aa8:	4770      	bx	lr

08002aaa <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002aaa:	4770      	bx	lr

08002aac <HAL_TIM_IC_CaptureCallback>:
}
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIM_TriggerCallback>:
}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_TIM_IRQHandler>:
{
 8002ab2:	b570      	push	{r4, r5, r6, lr}
 8002ab4:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002ab6:	6803      	ldr	r3, [r0, #0]
 8002ab8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002aba:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002abc:	f015 0f02 	tst.w	r5, #2
 8002ac0:	d010      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ac2:	f016 0f02 	tst.w	r6, #2
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ac8:	f06f 0202 	mvn.w	r2, #2
 8002acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad2:	6803      	ldr	r3, [r0, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f013 0f03 	tst.w	r3, #3
 8002ada:	d05e      	beq.n	8002b9a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002adc:	f7ff ffe6 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ae4:	f015 0f04 	tst.w	r5, #4
 8002ae8:	d012      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aea:	f016 0f04 	tst.w	r6, #4
 8002aee:	d00f      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	f06f 0204 	mvn.w	r2, #4
 8002af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af8:	2302      	movs	r3, #2
 8002afa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002b04:	d04f      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7ff ffd0 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b10:	f015 0f08 	tst.w	r5, #8
 8002b14:	d012      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b16:	f016 0f08 	tst.w	r6, #8
 8002b1a:	d00f      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	f06f 0208 	mvn.w	r2, #8
 8002b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b24:	2304      	movs	r3, #4
 8002b26:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f013 0f03 	tst.w	r3, #3
 8002b30:	d040      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7ff ffba 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b3c:	f015 0f10 	tst.w	r5, #16
 8002b40:	d012      	beq.n	8002b68 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b42:	f016 0f10 	tst.w	r6, #16
 8002b46:	d00f      	beq.n	8002b68 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	f06f 0210 	mvn.w	r2, #16
 8002b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b50:	2308      	movs	r3, #8
 8002b52:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002b5c:	d031      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7ff ffa4 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b64:	2300      	movs	r3, #0
 8002b66:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b68:	f015 0f01 	tst.w	r5, #1
 8002b6c:	d002      	beq.n	8002b74 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b6e:	f016 0f01 	tst.w	r6, #1
 8002b72:	d12d      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b74:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002b78:	d002      	beq.n	8002b80 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b7a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002b7e:	d12f      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b80:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002b84:	d002      	beq.n	8002b8c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b86:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002b8a:	d131      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b8c:	f015 0f20 	tst.w	r5, #32
 8002b90:	d002      	beq.n	8002b98 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b92:	f016 0f20 	tst.w	r6, #32
 8002b96:	d133      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x14e>
}
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	f7ff ff86 	bl	8002aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff ff85 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
 8002ba4:	e79c      	b.n	8002ae0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7ff ff7f 	bl	8002aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7ff ff7e 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
 8002bb2:	e7ab      	b.n	8002b0c <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7ff ff78 	bl	8002aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7ff ff77 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
 8002bc0:	e7ba      	b.n	8002b38 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff ff71 	bl	8002aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff ff70 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
 8002bce:	e7c9      	b.n	8002b64 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f06f 0201 	mvn.w	r2, #1
 8002bd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7fd ffff 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
 8002bde:	e7c9      	b.n	8002b74 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002be6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002be8:	4620      	mov	r0, r4
 8002bea:	f000 fc35 	bl	8003458 <HAL_TIMEx_BreakCallback>
 8002bee:	e7c7      	b.n	8002b80 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bf6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7ff ff59 	bl	8002ab0 <HAL_TIM_TriggerCallback>
 8002bfe:	e7c5      	b.n	8002b8c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	f06f 0220 	mvn.w	r2, #32
 8002c06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f000 fc24 	bl	8003456 <HAL_TIMEx_CommutCallback>
}
 8002c0e:	e7c3      	b.n	8002b98 <HAL_TIM_IRQHandler+0xe6>

08002c10 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002c10:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c12:	4a34      	ldr	r2, [pc, #208]	@ (8002ce4 <TIM_Base_SetConfig+0xd4>)
 8002c14:	4290      	cmp	r0, r2
 8002c16:	d012      	beq.n	8002c3e <TIM_Base_SetConfig+0x2e>
 8002c18:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002c1c:	d00f      	beq.n	8002c3e <TIM_Base_SetConfig+0x2e>
 8002c1e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002c22:	4290      	cmp	r0, r2
 8002c24:	d00b      	beq.n	8002c3e <TIM_Base_SetConfig+0x2e>
 8002c26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c2a:	4290      	cmp	r0, r2
 8002c2c:	d007      	beq.n	8002c3e <TIM_Base_SetConfig+0x2e>
 8002c2e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c32:	4290      	cmp	r0, r2
 8002c34:	d003      	beq.n	8002c3e <TIM_Base_SetConfig+0x2e>
 8002c36:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002c3a:	4290      	cmp	r0, r2
 8002c3c:	d103      	bne.n	8002c46 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c42:	684a      	ldr	r2, [r1, #4]
 8002c44:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c46:	4a27      	ldr	r2, [pc, #156]	@ (8002ce4 <TIM_Base_SetConfig+0xd4>)
 8002c48:	4290      	cmp	r0, r2
 8002c4a:	d02a      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c4c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002c50:	d027      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c52:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002c56:	4290      	cmp	r0, r2
 8002c58:	d023      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c5e:	4290      	cmp	r0, r2
 8002c60:	d01f      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c66:	4290      	cmp	r0, r2
 8002c68:	d01b      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c6a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002c6e:	4290      	cmp	r0, r2
 8002c70:	d017      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c72:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002c76:	4290      	cmp	r0, r2
 8002c78:	d013      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c7e:	4290      	cmp	r0, r2
 8002c80:	d00f      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c86:	4290      	cmp	r0, r2
 8002c88:	d00b      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c8a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002c8e:	4290      	cmp	r0, r2
 8002c90:	d007      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c96:	4290      	cmp	r0, r2
 8002c98:	d003      	beq.n	8002ca2 <TIM_Base_SetConfig+0x92>
 8002c9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c9e:	4290      	cmp	r0, r2
 8002ca0:	d103      	bne.n	8002caa <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca6:	68ca      	ldr	r2, [r1, #12]
 8002ca8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cae:	694a      	ldr	r2, [r1, #20]
 8002cb0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002cb2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb4:	688b      	ldr	r3, [r1, #8]
 8002cb6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002cb8:	680b      	ldr	r3, [r1, #0]
 8002cba:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <TIM_Base_SetConfig+0xd4>)
 8002cbe:	4298      	cmp	r0, r3
 8002cc0:	d003      	beq.n	8002cca <TIM_Base_SetConfig+0xba>
 8002cc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cc6:	4298      	cmp	r0, r3
 8002cc8:	d101      	bne.n	8002cce <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002cca:	690b      	ldr	r3, [r1, #16]
 8002ccc:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cd2:	6903      	ldr	r3, [r0, #16]
 8002cd4:	f013 0f01 	tst.w	r3, #1
 8002cd8:	d003      	beq.n	8002ce2 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cda:	6903      	ldr	r3, [r0, #16]
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6103      	str	r3, [r0, #16]
}
 8002ce2:	4770      	bx	lr
 8002ce4:	40010000 	.word	0x40010000

08002ce8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002ce8:	b340      	cbz	r0, 8002d3c <HAL_TIM_Base_Init+0x54>
{
 8002cea:	b510      	push	{r4, lr}
 8002cec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002cee:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002cf2:	b1f3      	cbz	r3, 8002d32 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	f851 0b04 	ldr.w	r0, [r1], #4
 8002d00:	f7ff ff86 	bl	8002c10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002d0e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002d12:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002d16:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d22:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002d26:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002d2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002d2e:	2000      	movs	r0, #0
}
 8002d30:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d32:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d36:	f001 fc0f 	bl	8004558 <HAL_TIM_Base_MspInit>
 8002d3a:	e7db      	b.n	8002cf4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002d3c:	2001      	movs	r0, #1
}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002d40:	b340      	cbz	r0, 8002d94 <HAL_TIM_PWM_Init+0x54>
{
 8002d42:	b510      	push	{r4, lr}
 8002d44:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d46:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002d4a:	b1f3      	cbz	r3, 8002d8a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d52:	4621      	mov	r1, r4
 8002d54:	f851 0b04 	ldr.w	r0, [r1], #4
 8002d58:	f7ff ff5a 	bl	8002c10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002d66:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002d6a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002d6e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d7a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002d7e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002d82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002d86:	2000      	movs	r0, #0
}
 8002d88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d8a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002d8e:	f7ff fe8b 	bl	8002aa8 <HAL_TIM_PWM_MspInit>
 8002d92:	e7db      	b.n	8002d4c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
}
 8002d96:	4770      	bx	lr

08002d98 <TIM_OC2_SetConfig>:
{
 8002d98:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8002d9a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9c:	6a02      	ldr	r2, [r0, #32]
 8002d9e:	f022 0210 	bic.w	r2, r2, #16
 8002da2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002da4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002da6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002da8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dac:	680d      	ldr	r5, [r1, #0]
 8002dae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002db2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002db6:	688d      	ldr	r5, [r1, #8]
 8002db8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dbc:	4d11      	ldr	r5, [pc, #68]	@ (8002e04 <TIM_OC2_SetConfig+0x6c>)
 8002dbe:	42a8      	cmp	r0, r5
 8002dc0:	d003      	beq.n	8002dca <TIM_OC2_SetConfig+0x32>
 8002dc2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	d106      	bne.n	8002dd8 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dce:	68cd      	ldr	r5, [r1, #12]
 8002dd0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd8:	4d0a      	ldr	r5, [pc, #40]	@ (8002e04 <TIM_OC2_SetConfig+0x6c>)
 8002dda:	42a8      	cmp	r0, r5
 8002ddc:	d003      	beq.n	8002de6 <TIM_OC2_SetConfig+0x4e>
 8002dde:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002de2:	42a8      	cmp	r0, r5
 8002de4:	d107      	bne.n	8002df6 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002de6:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dea:	694d      	ldr	r5, [r1, #20]
 8002dec:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002df0:	698d      	ldr	r5, [r1, #24]
 8002df2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002df6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002df8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002dfa:	684a      	ldr	r2, [r1, #4]
 8002dfc:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002dfe:	6203      	str	r3, [r0, #32]
}
 8002e00:	bc30      	pop	{r4, r5}
 8002e02:	4770      	bx	lr
 8002e04:	40010000 	.word	0x40010000

08002e08 <HAL_TIM_PWM_ConfigChannel>:
{
 8002e08:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002e0a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d066      	beq.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002e12:	4604      	mov	r4, r0
 8002e14:	460d      	mov	r5, r1
 8002e16:	2301      	movs	r3, #1
 8002e18:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002e1c:	2a0c      	cmp	r2, #12
 8002e1e:	d85a      	bhi.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8002e20:	e8df f002 	tbb	[pc, r2]
 8002e24:	59595907 	.word	0x59595907
 8002e28:	5959591b 	.word	0x5959591b
 8002e2c:	59595930 	.word	0x59595930
 8002e30:	44          	.byte	0x44
 8002e31:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e32:	6800      	ldr	r0, [r0, #0]
 8002e34:	f7ff fd2e 	bl	8002894 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e38:	6822      	ldr	r2, [r4, #0]
 8002e3a:	6993      	ldr	r3, [r2, #24]
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	6993      	ldr	r3, [r2, #24]
 8002e46:	f023 0304 	bic.w	r3, r3, #4
 8002e4a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e4c:	6822      	ldr	r2, [r4, #0]
 8002e4e:	6993      	ldr	r3, [r2, #24]
 8002e50:	6929      	ldr	r1, [r5, #16]
 8002e52:	430b      	orrs	r3, r1
 8002e54:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2000      	movs	r0, #0
      break;
 8002e58:	e03e      	b.n	8002ed8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e5a:	6800      	ldr	r0, [r0, #0]
 8002e5c:	f7ff ff9c 	bl	8002d98 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e60:	6822      	ldr	r2, [r4, #0]
 8002e62:	6993      	ldr	r3, [r2, #24]
 8002e64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e68:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e6a:	6822      	ldr	r2, [r4, #0]
 8002e6c:	6993      	ldr	r3, [r2, #24]
 8002e6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e72:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e74:	6822      	ldr	r2, [r4, #0]
 8002e76:	6993      	ldr	r3, [r2, #24]
 8002e78:	6929      	ldr	r1, [r5, #16]
 8002e7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e7e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2000      	movs	r0, #0
      break;
 8002e82:	e029      	b.n	8002ed8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e84:	6800      	ldr	r0, [r0, #0]
 8002e86:	f7ff fd3d 	bl	8002904 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e8a:	6822      	ldr	r2, [r4, #0]
 8002e8c:	69d3      	ldr	r3, [r2, #28]
 8002e8e:	f043 0308 	orr.w	r3, r3, #8
 8002e92:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e94:	6822      	ldr	r2, [r4, #0]
 8002e96:	69d3      	ldr	r3, [r2, #28]
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	69d3      	ldr	r3, [r2, #28]
 8002ea2:	6929      	ldr	r1, [r5, #16]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2000      	movs	r0, #0
      break;
 8002eaa:	e015      	b.n	8002ed8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eac:	6800      	ldr	r0, [r0, #0]
 8002eae:	f7ff fd61 	bl	8002974 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	69d3      	ldr	r3, [r2, #28]
 8002eb6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002eba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	69d3      	ldr	r3, [r2, #28]
 8002ec0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ec4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ec6:	6822      	ldr	r2, [r4, #0]
 8002ec8:	69d3      	ldr	r3, [r2, #28]
 8002eca:	6929      	ldr	r1, [r5, #16]
 8002ecc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ed0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed2:	2000      	movs	r0, #0
      break;
 8002ed4:	e000      	b.n	8002ed8 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002ed6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002ede:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002ee0:	2002      	movs	r0, #2
 8002ee2:	e7fc      	b.n	8002ede <HAL_TIM_PWM_ConfigChannel+0xd6>

08002ee4 <TIM_TI1_SetConfig>:
{
 8002ee4:	b470      	push	{r4, r5, r6}
 8002ee6:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 8002ee8:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eea:	6a04      	ldr	r4, [r0, #32]
 8002eec:	f024 0401 	bic.w	r4, r4, #1
 8002ef0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef2:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ef4:	4d18      	ldr	r5, [pc, #96]	@ (8002f58 <TIM_TI1_SetConfig+0x74>)
 8002ef6:	42a8      	cmp	r0, r5
 8002ef8:	d01c      	beq.n	8002f34 <TIM_TI1_SetConfig+0x50>
 8002efa:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002efe:	d019      	beq.n	8002f34 <TIM_TI1_SetConfig+0x50>
 8002f00:	4a16      	ldr	r2, [pc, #88]	@ (8002f5c <TIM_TI1_SetConfig+0x78>)
 8002f02:	4290      	cmp	r0, r2
 8002f04:	d016      	beq.n	8002f34 <TIM_TI1_SetConfig+0x50>
 8002f06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f0a:	4290      	cmp	r0, r2
 8002f0c:	d012      	beq.n	8002f34 <TIM_TI1_SetConfig+0x50>
 8002f0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d00e      	beq.n	8002f34 <TIM_TI1_SetConfig+0x50>
 8002f16:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002f1a:	4290      	cmp	r0, r2
 8002f1c:	d00a      	beq.n	8002f34 <TIM_TI1_SetConfig+0x50>
 8002f1e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002f22:	4290      	cmp	r0, r2
 8002f24:	d006      	beq.n	8002f34 <TIM_TI1_SetConfig+0x50>
 8002f26:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002f2a:	4290      	cmp	r0, r2
 8002f2c:	d002      	beq.n	8002f34 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f2e:	f044 0201 	orr.w	r2, r4, #1
 8002f32:	e003      	b.n	8002f3c <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f34:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002f38:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f3c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f46:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f4a:	f001 010a 	and.w	r1, r1, #10
 8002f4e:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8002f50:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f52:	6201      	str	r1, [r0, #32]
}
 8002f54:	bc70      	pop	{r4, r5, r6}
 8002f56:	4770      	bx	lr
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40000400 	.word	0x40000400

08002f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f60:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f62:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f64:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f68:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f72:	6082      	str	r2, [r0, #8]
}
 8002f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f7a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d078      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0xfa>
{
 8002f82:	b510      	push	{r4, lr}
 8002f84:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002f86:	2301      	movs	r3, #1
 8002f88:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002f92:	6802      	ldr	r2, [r0, #0]
 8002f94:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002f9e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002fa0:	680b      	ldr	r3, [r1, #0]
 8002fa2:	2b60      	cmp	r3, #96	@ 0x60
 8002fa4:	d04c      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0xc6>
 8002fa6:	d823      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x76>
 8002fa8:	2b40      	cmp	r3, #64	@ 0x40
 8002faa:	d054      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0xdc>
 8002fac:	d811      	bhi.n	8002fd2 <HAL_TIM_ConfigClockSource+0x58>
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x40>
 8002fb2:	d80a      	bhi.n	8002fca <HAL_TIM_ConfigClockSource+0x50>
 8002fb4:	b10b      	cbz	r3, 8002fba <HAL_TIM_ConfigClockSource+0x40>
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d105      	bne.n	8002fc6 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	f7ff fd28 	bl	8002a12 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2000      	movs	r0, #0
      break;
 8002fc4:	e028      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	e026      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002fca:	2b30      	cmp	r3, #48	@ 0x30
 8002fcc:	d0f5      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
 8002fd0:	e022      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002fd2:	2b50      	cmp	r3, #80	@ 0x50
 8002fd4:	d10a      	bne.n	8002fec <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd6:	68ca      	ldr	r2, [r1, #12]
 8002fd8:	6849      	ldr	r1, [r1, #4]
 8002fda:	6800      	ldr	r0, [r0, #0]
 8002fdc:	f7ff fcf2 	bl	80029c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe0:	2150      	movs	r1, #80	@ 0x50
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	f7ff fd15 	bl	8002a12 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002fe8:	2000      	movs	r0, #0
      break;
 8002fea:	e015      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002fec:	2001      	movs	r0, #1
 8002fee:	e013      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff4:	d03a      	beq.n	800306c <HAL_TIM_ConfigClockSource+0xf2>
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ffa:	d014      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0xac>
 8002ffc:	2b70      	cmp	r3, #112	@ 0x70
 8002ffe:	d137      	bne.n	8003070 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8003000:	68cb      	ldr	r3, [r1, #12]
 8003002:	684a      	ldr	r2, [r1, #4]
 8003004:	6889      	ldr	r1, [r1, #8]
 8003006:	6800      	ldr	r0, [r0, #0]
 8003008:	f7ff ffaa 	bl	8002f60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800300c:	6822      	ldr	r2, [r4, #0]
 800300e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003010:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003014:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003018:	2301      	movs	r3, #1
 800301a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800301e:	2300      	movs	r3, #0
 8003020:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003024:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8003026:	68cb      	ldr	r3, [r1, #12]
 8003028:	684a      	ldr	r2, [r1, #4]
 800302a:	6889      	ldr	r1, [r1, #8]
 800302c:	6800      	ldr	r0, [r0, #0]
 800302e:	f7ff ff97 	bl	8002f60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	6893      	ldr	r3, [r2, #8]
 8003036:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800303a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2000      	movs	r0, #0
      break;
 800303e:	e7eb      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003040:	68ca      	ldr	r2, [r1, #12]
 8003042:	6849      	ldr	r1, [r1, #4]
 8003044:	6800      	ldr	r0, [r0, #0]
 8003046:	f7ff fcd0 	bl	80029ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800304a:	2160      	movs	r1, #96	@ 0x60
 800304c:	6820      	ldr	r0, [r4, #0]
 800304e:	f7ff fce0 	bl	8002a12 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2000      	movs	r0, #0
      break;
 8003054:	e7e0      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	68ca      	ldr	r2, [r1, #12]
 8003058:	6849      	ldr	r1, [r1, #4]
 800305a:	6800      	ldr	r0, [r0, #0]
 800305c:	f7ff fcb2 	bl	80029c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003060:	2140      	movs	r1, #64	@ 0x40
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	f7ff fcd5 	bl	8002a12 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2000      	movs	r0, #0
      break;
 800306a:	e7d5      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800306c:	2000      	movs	r0, #0
 800306e:	e7d3      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8003070:	2001      	movs	r0, #1
 8003072:	e7d1      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8003074:	2002      	movs	r0, #2
}
 8003076:	4770      	bx	lr

08003078 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003078:	f001 011f 	and.w	r1, r1, #31
 800307c:	f04f 0c01 	mov.w	ip, #1
 8003080:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003084:	6a03      	ldr	r3, [r0, #32]
 8003086:	ea23 030c 	bic.w	r3, r3, ip
 800308a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800308c:	6a03      	ldr	r3, [r0, #32]
 800308e:	408a      	lsls	r2, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	6203      	str	r3, [r0, #32]
}
 8003094:	4770      	bx	lr
	...

08003098 <HAL_TIM_PWM_Start>:
{
 8003098:	b510      	push	{r4, lr}
 800309a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800309c:	4608      	mov	r0, r1
 800309e:	2900      	cmp	r1, #0
 80030a0:	d141      	bne.n	8003126 <HAL_TIM_PWM_Start+0x8e>
 80030a2:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80030a6:	3b01      	subs	r3, #1
 80030a8:	bf18      	it	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d16b      	bne.n	8003188 <HAL_TIM_PWM_Start+0xf0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d14e      	bne.n	8003152 <HAL_TIM_PWM_Start+0xba>
 80030b4:	2302      	movs	r3, #2
 80030b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ba:	2201      	movs	r2, #1
 80030bc:	4601      	mov	r1, r0
 80030be:	6820      	ldr	r0, [r4, #0]
 80030c0:	f7ff ffda 	bl	8003078 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	4a32      	ldr	r2, [pc, #200]	@ (8003190 <HAL_TIM_PWM_Start+0xf8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <HAL_TIM_PWM_Start+0x3c>
 80030cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d103      	bne.n	80030dc <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 80030d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030da:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	4a2c      	ldr	r2, [pc, #176]	@ (8003190 <HAL_TIM_PWM_Start+0xf8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d046      	beq.n	8003172 <HAL_TIM_PWM_Start+0xda>
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e8:	d043      	beq.n	8003172 <HAL_TIM_PWM_Start+0xda>
 80030ea:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d03f      	beq.n	8003172 <HAL_TIM_PWM_Start+0xda>
 80030f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d03b      	beq.n	8003172 <HAL_TIM_PWM_Start+0xda>
 80030fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80030fe:	4293      	cmp	r3, r2
 8003100:	d037      	beq.n	8003172 <HAL_TIM_PWM_Start+0xda>
 8003102:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003106:	4293      	cmp	r3, r2
 8003108:	d033      	beq.n	8003172 <HAL_TIM_PWM_Start+0xda>
 800310a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800310e:	4293      	cmp	r3, r2
 8003110:	d02f      	beq.n	8003172 <HAL_TIM_PWM_Start+0xda>
 8003112:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003116:	4293      	cmp	r3, r2
 8003118:	d02b      	beq.n	8003172 <HAL_TIM_PWM_Start+0xda>
    __HAL_TIM_ENABLE(htim);
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003122:	2000      	movs	r0, #0
 8003124:	e02f      	b.n	8003186 <HAL_TIM_PWM_Start+0xee>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003126:	2904      	cmp	r1, #4
 8003128:	d007      	beq.n	800313a <HAL_TIM_PWM_Start+0xa2>
 800312a:	2908      	cmp	r1, #8
 800312c:	d00b      	beq.n	8003146 <HAL_TIM_PWM_Start+0xae>
 800312e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003132:	3b01      	subs	r3, #1
 8003134:	bf18      	it	ne
 8003136:	2301      	movne	r3, #1
 8003138:	e7b8      	b.n	80030ac <HAL_TIM_PWM_Start+0x14>
 800313a:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800313e:	3b01      	subs	r3, #1
 8003140:	bf18      	it	ne
 8003142:	2301      	movne	r3, #1
 8003144:	e7b2      	b.n	80030ac <HAL_TIM_PWM_Start+0x14>
 8003146:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800314a:	3b01      	subs	r3, #1
 800314c:	bf18      	it	ne
 800314e:	2301      	movne	r3, #1
 8003150:	e7ac      	b.n	80030ac <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003152:	2804      	cmp	r0, #4
 8003154:	d005      	beq.n	8003162 <HAL_TIM_PWM_Start+0xca>
 8003156:	2808      	cmp	r0, #8
 8003158:	d007      	beq.n	800316a <HAL_TIM_PWM_Start+0xd2>
 800315a:	2302      	movs	r3, #2
 800315c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003160:	e7ab      	b.n	80030ba <HAL_TIM_PWM_Start+0x22>
 8003162:	2302      	movs	r3, #2
 8003164:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003168:	e7a7      	b.n	80030ba <HAL_TIM_PWM_Start+0x22>
 800316a:	2302      	movs	r3, #2
 800316c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003170:	e7a3      	b.n	80030ba <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003178:	2a06      	cmp	r2, #6
 800317a:	d007      	beq.n	800318c <HAL_TIM_PWM_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003184:	2000      	movs	r0, #0
}
 8003186:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003188:	2001      	movs	r0, #1
 800318a:	e7fc      	b.n	8003186 <HAL_TIM_PWM_Start+0xee>
  return HAL_OK;
 800318c:	2000      	movs	r0, #0
 800318e:	e7fa      	b.n	8003186 <HAL_TIM_PWM_Start+0xee>
 8003190:	40010000 	.word	0x40010000

08003194 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003194:	f001 010f 	and.w	r1, r1, #15
 8003198:	f04f 0c04 	mov.w	ip, #4
 800319c:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80031a0:	6a03      	ldr	r3, [r0, #32]
 80031a2:	ea23 030c 	bic.w	r3, r3, ip
 80031a6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80031a8:	6a03      	ldr	r3, [r0, #32]
 80031aa:	408a      	lsls	r2, r1
 80031ac:	4313      	orrs	r3, r2
 80031ae:	6203      	str	r3, [r0, #32]
}
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80031b2:	2800      	cmp	r0, #0
 80031b4:	d065      	beq.n	8003282 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 80031b6:	b570      	push	{r4, r5, r6, lr}
 80031b8:	b088      	sub	sp, #32
 80031ba:	460e      	mov	r6, r1
 80031bc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d058      	beq.n	8003278 <HAL_TIMEx_HallSensor_Init+0xc6>
  htim->State = HAL_TIM_STATE_BUSY;
 80031c6:	2302      	movs	r3, #2
 80031c8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	4621      	mov	r1, r4
 80031ce:	f851 0b04 	ldr.w	r0, [r1], #4
 80031d2:	f7ff fd1d 	bl	8002c10 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80031d6:	68b3      	ldr	r3, [r6, #8]
 80031d8:	2203      	movs	r2, #3
 80031da:	6831      	ldr	r1, [r6, #0]
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	f7ff fe81 	bl	8002ee4 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031e2:	6822      	ldr	r2, [r4, #0]
 80031e4:	6993      	ldr	r3, [r2, #24]
 80031e6:	f023 030c 	bic.w	r3, r3, #12
 80031ea:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	6993      	ldr	r3, [r2, #24]
 80031f0:	6871      	ldr	r1, [r6, #4]
 80031f2:	430b      	orrs	r3, r1
 80031f4:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80031f6:	6822      	ldr	r2, [r4, #0]
 80031f8:	6853      	ldr	r3, [r2, #4]
 80031fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031fe:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	6893      	ldr	r3, [r2, #8]
 8003204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003208:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800320a:	6822      	ldr	r2, [r4, #0]
 800320c:	6893      	ldr	r3, [r2, #8]
 800320e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003212:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	6893      	ldr	r3, [r2, #8]
 8003218:	f023 0307 	bic.w	r3, r3, #7
 800321c:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	6893      	ldr	r3, [r2, #8]
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003228:	2500      	movs	r5, #0
 800322a:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800322c:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800322e:	2370      	movs	r3, #112	@ 0x70
 8003230:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003232:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003234:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003236:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003238:	68f3      	ldr	r3, [r6, #12]
 800323a:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800323c:	a901      	add	r1, sp, #4
 800323e:	6820      	ldr	r0, [r4, #0]
 8003240:	f7ff fdaa 	bl	8002d98 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003244:	6822      	ldr	r2, [r4, #0]
 8003246:	6853      	ldr	r3, [r2, #4]
 8003248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	6853      	ldr	r3, [r2, #4]
 8003252:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003256:	6053      	str	r3, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003258:	2301      	movs	r3, #1
 800325a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800326a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 800326e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003272:	4628      	mov	r0, r5
}
 8003274:	b008      	add	sp, #32
 8003276:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003278:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800327c:	f001 f9ba 	bl	80045f4 <HAL_TIMEx_HallSensor_MspInit>
 8003280:	e7a1      	b.n	80031c6 <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 8003282:	2001      	movs	r0, #1
}
 8003284:	4770      	bx	lr
	...

08003288 <HAL_TIMEx_PWMN_Start>:
{
 8003288:	b510      	push	{r4, lr}
 800328a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800328c:	4608      	mov	r0, r1
 800328e:	2900      	cmp	r1, #0
 8003290:	d13a      	bne.n	8003308 <HAL_TIMEx_PWMN_Start+0x80>
 8003292:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8003296:	3b01      	subs	r3, #1
 8003298:	bf18      	it	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d164      	bne.n	800336a <HAL_TIMEx_PWMN_Start+0xe2>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d147      	bne.n	8003334 <HAL_TIMEx_PWMN_Start+0xac>
 80032a4:	2302      	movs	r3, #2
 80032a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80032aa:	2204      	movs	r2, #4
 80032ac:	4601      	mov	r1, r0
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	f7ff ff70 	bl	8003194 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80032b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032bc:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003374 <HAL_TIMEx_PWMN_Start+0xec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d046      	beq.n	8003354 <HAL_TIMEx_PWMN_Start+0xcc>
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ca:	d043      	beq.n	8003354 <HAL_TIMEx_PWMN_Start+0xcc>
 80032cc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d03f      	beq.n	8003354 <HAL_TIMEx_PWMN_Start+0xcc>
 80032d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032d8:	4293      	cmp	r3, r2
 80032da:	d03b      	beq.n	8003354 <HAL_TIMEx_PWMN_Start+0xcc>
 80032dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d037      	beq.n	8003354 <HAL_TIMEx_PWMN_Start+0xcc>
 80032e4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d033      	beq.n	8003354 <HAL_TIMEx_PWMN_Start+0xcc>
 80032ec:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d02f      	beq.n	8003354 <HAL_TIMEx_PWMN_Start+0xcc>
 80032f4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d02b      	beq.n	8003354 <HAL_TIMEx_PWMN_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003304:	2000      	movs	r0, #0
 8003306:	e02f      	b.n	8003368 <HAL_TIMEx_PWMN_Start+0xe0>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003308:	2904      	cmp	r1, #4
 800330a:	d007      	beq.n	800331c <HAL_TIMEx_PWMN_Start+0x94>
 800330c:	2908      	cmp	r1, #8
 800330e:	d00b      	beq.n	8003328 <HAL_TIMEx_PWMN_Start+0xa0>
 8003310:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003314:	3b01      	subs	r3, #1
 8003316:	bf18      	it	ne
 8003318:	2301      	movne	r3, #1
 800331a:	e7bf      	b.n	800329c <HAL_TIMEx_PWMN_Start+0x14>
 800331c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003320:	3b01      	subs	r3, #1
 8003322:	bf18      	it	ne
 8003324:	2301      	movne	r3, #1
 8003326:	e7b9      	b.n	800329c <HAL_TIMEx_PWMN_Start+0x14>
 8003328:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800332c:	3b01      	subs	r3, #1
 800332e:	bf18      	it	ne
 8003330:	2301      	movne	r3, #1
 8003332:	e7b3      	b.n	800329c <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003334:	2804      	cmp	r0, #4
 8003336:	d005      	beq.n	8003344 <HAL_TIMEx_PWMN_Start+0xbc>
 8003338:	2808      	cmp	r0, #8
 800333a:	d007      	beq.n	800334c <HAL_TIMEx_PWMN_Start+0xc4>
 800333c:	2302      	movs	r3, #2
 800333e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003342:	e7b2      	b.n	80032aa <HAL_TIMEx_PWMN_Start+0x22>
 8003344:	2302      	movs	r3, #2
 8003346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800334a:	e7ae      	b.n	80032aa <HAL_TIMEx_PWMN_Start+0x22>
 800334c:	2302      	movs	r3, #2
 800334e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003352:	e7aa      	b.n	80032aa <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335a:	2a06      	cmp	r2, #6
 800335c:	d007      	beq.n	800336e <HAL_TIMEx_PWMN_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003366:	2000      	movs	r0, #0
}
 8003368:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800336a:	2001      	movs	r0, #1
 800336c:	e7fc      	b.n	8003368 <HAL_TIMEx_PWMN_Start+0xe0>
  return HAL_OK;
 800336e:	2000      	movs	r0, #0
 8003370:	e7fa      	b.n	8003368 <HAL_TIMEx_PWMN_Start+0xe0>
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000

08003378 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8003378:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800337c:	2a01      	cmp	r2, #1
 800337e:	d03d      	beq.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8003380:	b410      	push	{r4}
 8003382:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003384:	2201      	movs	r2, #1
 8003386:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800338a:	2202      	movs	r2, #2
 800338c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003390:	6802      	ldr	r2, [r0, #0]
 8003392:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003394:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003396:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800339a:	6808      	ldr	r0, [r1, #0]
 800339c:	ea40 000c 	orr.w	r0, r0, ip
  htim->Instance->CR2 = tmpcr2;
 80033a0:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4816      	ldr	r0, [pc, #88]	@ (8003400 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80033a6:	4282      	cmp	r2, r0
 80033a8:	d01a      	beq.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033aa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80033ae:	d017      	beq.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033b0:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80033b4:	4282      	cmp	r2, r0
 80033b6:	d013      	beq.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033b8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80033bc:	4282      	cmp	r2, r0
 80033be:	d00f      	beq.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033c0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80033c4:	4282      	cmp	r2, r0
 80033c6:	d00b      	beq.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033c8:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80033cc:	4282      	cmp	r2, r0
 80033ce:	d007      	beq.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033d0:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80033d4:	4282      	cmp	r2, r0
 80033d6:	d003      	beq.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033d8:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80033dc:	4282      	cmp	r2, r0
 80033de:	d104      	bne.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0x72>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033e0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e4:	6849      	ldr	r1, [r1, #4]
 80033e6:	4321      	orrs	r1, r4
    htim->Instance->SMCR = tmpsmcr;
 80033e8:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80033f0:	2000      	movs	r0, #0
 80033f2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 80033f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033fa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80033fc:	2002      	movs	r0, #2
}
 80033fe:	4770      	bx	lr
 8003400:	40010000 	.word	0x40010000

08003404 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8003404:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003406:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800340a:	2b01      	cmp	r3, #1
 800340c:	d021      	beq.n	8003452 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800340e:	2301      	movs	r3, #1
 8003410:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003414:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341a:	6888      	ldr	r0, [r1, #8]
 800341c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800341e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003422:	6848      	ldr	r0, [r1, #4]
 8003424:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003426:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800342a:	6808      	ldr	r0, [r1, #0]
 800342c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800342e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003432:	6908      	ldr	r0, [r1, #16]
 8003434:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003436:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800343a:	6948      	ldr	r0, [r1, #20]
 800343c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800343e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003442:	69c9      	ldr	r1, [r1, #28]
 8003444:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003446:	6811      	ldr	r1, [r2, #0]
 8003448:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800344a:	2000      	movs	r0, #0
 800344c:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  return HAL_OK;
 8003450:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003452:	2002      	movs	r0, #2
}
 8003454:	4770      	bx	lr

08003456 <HAL_TIMEx_CommutCallback>:
}
 8003456:	4770      	bx	lr

08003458 <HAL_TIMEx_BreakCallback>:
}
 8003458:	4770      	bx	lr
	...

0800345c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800345c:	b530      	push	{r4, r5, lr}
 800345e:	b089      	sub	sp, #36	@ 0x24
 8003460:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <HAL_InitTick+0x90>)
 8003468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800346a:	f042 0210 	orr.w	r2, r2, #16
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800347a:	a902      	add	r1, sp, #8
 800347c:	a803      	add	r0, sp, #12
 800347e:	f7fe fea7 	bl	80021d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003482:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003484:	b9cb      	cbnz	r3, 80034ba <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003486:	f7fe fe83 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800348a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800348c:	4a18      	ldr	r2, [pc, #96]	@ (80034f0 <HAL_InitTick+0x94>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0c9b      	lsrs	r3, r3, #18
 8003494:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003496:	4817      	ldr	r0, [pc, #92]	@ (80034f4 <HAL_InitTick+0x98>)
 8003498:	4a17      	ldr	r2, [pc, #92]	@ (80034f8 <HAL_InitTick+0x9c>)
 800349a:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800349c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034a0:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034a2:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a8:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034aa:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80034ac:	f7ff fc1c 	bl	8002ce8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80034b0:	4605      	mov	r5, r0
 80034b2:	b130      	cbz	r0, 80034c2 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 80034b4:	4628      	mov	r0, r5
 80034b6:	b009      	add	sp, #36	@ 0x24
 80034b8:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034ba:	f7fe fe69 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80034be:	0043      	lsls	r3, r0, #1
 80034c0:	e7e4      	b.n	800348c <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 80034c2:	480c      	ldr	r0, [pc, #48]	@ (80034f4 <HAL_InitTick+0x98>)
 80034c4:	f7ff faae 	bl	8002a24 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80034c8:	4605      	mov	r5, r0
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d1f2      	bne.n	80034b4 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034ce:	2036      	movs	r0, #54	@ 0x36
 80034d0:	f7fe f94e 	bl	8001770 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034d4:	2c0f      	cmp	r4, #15
 80034d6:	d901      	bls.n	80034dc <HAL_InitTick+0x80>
        status = HAL_ERROR;
 80034d8:	2501      	movs	r5, #1
 80034da:	e7eb      	b.n	80034b4 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80034dc:	2200      	movs	r2, #0
 80034de:	4621      	mov	r1, r4
 80034e0:	2036      	movs	r0, #54	@ 0x36
 80034e2:	f7fe f935 	bl	8001750 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_InitTick+0xa0>)
 80034e8:	601c      	str	r4, [r3, #0]
 80034ea:	e7e3      	b.n	80034b4 <HAL_InitTick+0x58>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	431bde83 	.word	0x431bde83
 80034f4:	20004160 	.word	0x20004160
 80034f8:	40001000 	.word	0x40001000
 80034fc:	20000008 	.word	0x20000008

08003500 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003500:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	f102 030c 	add.w	r3, r2, #12
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	320c      	adds	r2, #12
 8003510:	e842 3100 	strex	r1, r3, [r2]
 8003514:	2900      	cmp	r1, #0
 8003516:	d1f3      	bne.n	8003500 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003518:	2320      	movs	r3, #32
 800351a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 800351e:	4770      	bx	lr

08003520 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003520:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	f102 030c 	add.w	r3, r2, #12
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	320c      	adds	r2, #12
 8003530:	e842 3100 	strex	r1, r3, [r2]
 8003534:	2900      	cmp	r1, #0
 8003536:	d1f3      	bne.n	8003520 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003538:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	f102 0314 	add.w	r3, r2, #20
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	3214      	adds	r2, #20
 8003548:	e842 3100 	strex	r1, r3, [r2]
 800354c:	2900      	cmp	r1, #0
 800354e:	d1f3      	bne.n	8003538 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003550:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003552:	2b01      	cmp	r3, #1
 8003554:	d005      	beq.n	8003562 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003556:	2320      	movs	r3, #32
 8003558:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355c:	2300      	movs	r3, #0
 800355e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003560:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003562:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	f102 030c 	add.w	r3, r2, #12
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	320c      	adds	r2, #12
 8003572:	e842 3100 	strex	r1, r3, [r2]
 8003576:	2900      	cmp	r1, #0
 8003578:	d1f3      	bne.n	8003562 <UART_EndRxTransfer+0x42>
 800357a:	e7ec      	b.n	8003556 <UART_EndRxTransfer+0x36>

0800357c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800357c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003580:	2b21      	cmp	r3, #33	@ 0x21
 8003582:	d001      	beq.n	8003588 <UART_Transmit_IT+0xc>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003584:	2002      	movs	r0, #2
  }
}
 8003586:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003588:	6883      	ldr	r3, [r0, #8]
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358e:	d017      	beq.n	80035c0 <UART_Transmit_IT+0x44>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003590:	6a03      	ldr	r3, [r0, #32]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	6202      	str	r2, [r0, #32]
 8003596:	781a      	ldrb	r2, [r3, #0]
 8003598:	6803      	ldr	r3, [r0, #0]
 800359a:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800359c:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80035a6:	b94b      	cbnz	r3, 80035bc <UART_Transmit_IT+0x40>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035a8:	6802      	ldr	r2, [r0, #0]
 80035aa:	68d3      	ldr	r3, [r2, #12]
 80035ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035b0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035b2:	6802      	ldr	r2, [r0, #0]
 80035b4:	68d3      	ldr	r3, [r2, #12]
 80035b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ba:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80035bc:	2000      	movs	r0, #0
 80035be:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c0:	6903      	ldr	r3, [r0, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e4      	bne.n	8003590 <UART_Transmit_IT+0x14>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035c6:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	6802      	ldr	r2, [r0, #0]
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80035d2:	6a03      	ldr	r3, [r0, #32]
 80035d4:	3302      	adds	r3, #2
 80035d6:	6203      	str	r3, [r0, #32]
 80035d8:	e7e0      	b.n	800359c <UART_Transmit_IT+0x20>
	...

080035dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035dc:	b510      	push	{r4, lr}
 80035de:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e0:	6802      	ldr	r2, [r0, #0]
 80035e2:	6913      	ldr	r3, [r2, #16]
 80035e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035e8:	68c1      	ldr	r1, [r0, #12]
 80035ea:	430b      	orrs	r3, r1
 80035ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ee:	6883      	ldr	r3, [r0, #8]
 80035f0:	6902      	ldr	r2, [r0, #16]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	6943      	ldr	r3, [r0, #20]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	69c3      	ldr	r3, [r0, #28]
 80035fa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80035fc:	6801      	ldr	r1, [r0, #0]
 80035fe:	68cb      	ldr	r3, [r1, #12]
 8003600:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003604:	f023 030c 	bic.w	r3, r3, #12
 8003608:	4313      	orrs	r3, r2
 800360a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800360c:	6802      	ldr	r2, [r0, #0]
 800360e:	6953      	ldr	r3, [r2, #20]
 8003610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003614:	6981      	ldr	r1, [r0, #24]
 8003616:	430b      	orrs	r3, r1
 8003618:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800361a:	6803      	ldr	r3, [r0, #0]
 800361c:	4a31      	ldr	r2, [pc, #196]	@ (80036e4 <UART_SetConfig+0x108>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d006      	beq.n	8003630 <UART_SetConfig+0x54>
 8003622:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003626:	4293      	cmp	r3, r2
 8003628:	d002      	beq.n	8003630 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800362a:	f7fe fdb1 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800362e:	e001      	b.n	8003634 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003630:	f7fe fdbe 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003634:	69e3      	ldr	r3, [r4, #28]
 8003636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800363a:	d029      	beq.n	8003690 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800363c:	2100      	movs	r1, #0
 800363e:	1803      	adds	r3, r0, r0
 8003640:	4149      	adcs	r1, r1
 8003642:	181b      	adds	r3, r3, r0
 8003644:	f141 0100 	adc.w	r1, r1, #0
 8003648:	00c9      	lsls	r1, r1, #3
 800364a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1818      	adds	r0, r3, r0
 8003652:	6863      	ldr	r3, [r4, #4]
 8003654:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003658:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800365c:	f141 0100 	adc.w	r1, r1, #0
 8003660:	f7fc fdb6 	bl	80001d0 <__aeabi_uldivmod>
 8003664:	4a20      	ldr	r2, [pc, #128]	@ (80036e8 <UART_SetConfig+0x10c>)
 8003666:	fba2 3100 	umull	r3, r1, r2, r0
 800366a:	0949      	lsrs	r1, r1, #5
 800366c:	2364      	movs	r3, #100	@ 0x64
 800366e:	fb03 0311 	mls	r3, r3, r1, r0
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	3332      	adds	r3, #50	@ 0x32
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003680:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	6821      	ldr	r1, [r4, #0]
 800368a:	4413      	add	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }
}
 800368e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003690:	2300      	movs	r3, #0
 8003692:	1802      	adds	r2, r0, r0
 8003694:	eb43 0103 	adc.w	r1, r3, r3
 8003698:	1812      	adds	r2, r2, r0
 800369a:	f141 0100 	adc.w	r1, r1, #0
 800369e:	00c9      	lsls	r1, r1, #3
 80036a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036a4:	00d2      	lsls	r2, r2, #3
 80036a6:	1810      	adds	r0, r2, r0
 80036a8:	f141 0100 	adc.w	r1, r1, #0
 80036ac:	6862      	ldr	r2, [r4, #4]
 80036ae:	1892      	adds	r2, r2, r2
 80036b0:	415b      	adcs	r3, r3
 80036b2:	f7fc fd8d 	bl	80001d0 <__aeabi_uldivmod>
 80036b6:	4a0c      	ldr	r2, [pc, #48]	@ (80036e8 <UART_SetConfig+0x10c>)
 80036b8:	fba2 3100 	umull	r3, r1, r2, r0
 80036bc:	0949      	lsrs	r1, r1, #5
 80036be:	2364      	movs	r3, #100	@ 0x64
 80036c0:	fb03 0311 	mls	r3, r3, r1, r0
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	3332      	adds	r3, #50	@ 0x32
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	005a      	lsls	r2, r3, #1
 80036d0:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80036d4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	6821      	ldr	r1, [r4, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
 80036e2:	e7d4      	b.n	800368e <UART_SetConfig+0xb2>
 80036e4:	40011000 	.word	0x40011000
 80036e8:	51eb851f 	.word	0x51eb851f

080036ec <HAL_UART_Init>:
  if (huart == NULL)
 80036ec:	b360      	cbz	r0, 8003748 <HAL_UART_Init+0x5c>
{
 80036ee:	b510      	push	{r4, lr}
 80036f0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80036f2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80036f6:	b313      	cbz	r3, 800373e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80036f8:	2324      	movs	r3, #36	@ 0x24
 80036fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80036fe:	6822      	ldr	r2, [r4, #0]
 8003700:	68d3      	ldr	r3, [r2, #12]
 8003702:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003706:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003708:	4620      	mov	r0, r4
 800370a:	f7ff ff67 	bl	80035dc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	6913      	ldr	r3, [r2, #16]
 8003712:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003716:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003718:	6822      	ldr	r2, [r4, #0]
 800371a:	6953      	ldr	r3, [r2, #20]
 800371c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003720:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003722:	6822      	ldr	r2, [r4, #0]
 8003724:	68d3      	ldr	r3, [r2, #12]
 8003726:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800372a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372c:	2000      	movs	r0, #0
 800372e:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003730:	2320      	movs	r3, #32
 8003732:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003736:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800373a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800373c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800373e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003742:	f001 f89d 	bl	8004880 <HAL_UART_MspInit>
 8003746:	e7d7      	b.n	80036f8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003748:	2001      	movs	r0, #1
}
 800374a:	4770      	bx	lr

0800374c <HAL_UART_TxCpltCallback>:
}
 800374c:	4770      	bx	lr

0800374e <UART_EndTransmit_IT>:
{
 800374e:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003750:	6801      	ldr	r1, [r0, #0]
 8003752:	68ca      	ldr	r2, [r1, #12]
 8003754:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003758:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800375a:	2220      	movs	r2, #32
 800375c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8003760:	f7ff fff4 	bl	800374c <HAL_UART_TxCpltCallback>
}
 8003764:	2000      	movs	r0, #0
 8003766:	bd08      	pop	{r3, pc}

08003768 <HAL_UART_RxCpltCallback>:
}
 8003768:	4770      	bx	lr

0800376a <HAL_UART_RxHalfCpltCallback>:
}
 800376a:	4770      	bx	lr

0800376c <UART_DMAError>:
{
 800376c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800376e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003774:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8003778:	2a21      	cmp	r2, #33	@ 0x21
 800377a:	d00f      	beq.n	800379c <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003784:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8003788:	2a22      	cmp	r2, #34	@ 0x22
 800378a:	d011      	beq.n	80037b0 <UART_DMAError+0x44>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800378c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800378e:	f043 0310 	orr.w	r3, r3, #16
 8003792:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8003794:	4620      	mov	r0, r4
 8003796:	f7fc ff3b 	bl	8000610 <HAL_UART_ErrorCallback>
}
 800379a:	bd10      	pop	{r4, pc}
 800379c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0eb      	beq.n	800377c <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80037a8:	4620      	mov	r0, r4
 80037aa:	f7ff fea9 	bl	8003500 <UART_EndTxTransfer>
 80037ae:	e7e5      	b.n	800377c <UART_DMAError+0x10>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0eb      	beq.n	800378c <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7ff feb1 	bl	8003520 <UART_EndRxTransfer>
 80037be:	e7e5      	b.n	800378c <UART_DMAError+0x20>

080037c0 <UART_DMAAbortOnError>:
{
 80037c0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037c8:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80037ca:	f7fc ff21 	bl	8000610 <HAL_UART_ErrorCallback>
}
 80037ce:	bd08      	pop	{r3, pc}

080037d0 <HAL_UARTEx_RxEventCallback>:
}
 80037d0:	4770      	bx	lr

080037d2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037d2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80037d6:	2b22      	cmp	r3, #34	@ 0x22
 80037d8:	d169      	bne.n	80038ae <UART_Receive_IT+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037da:	6883      	ldr	r3, [r0, #8]
 80037dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e0:	d04f      	beq.n	8003882 <UART_Receive_IT+0xb0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037e2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e8:	d004      	beq.n	80037f4 <UART_Receive_IT+0x22>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d156      	bne.n	800389c <UART_Receive_IT+0xca>
 80037ee:	6903      	ldr	r3, [r0, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d153      	bne.n	800389c <UART_Receive_IT+0xca>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037f4:	6803      	ldr	r3, [r0, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80037fa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80037fc:	3301      	adds	r3, #1
 80037fe:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8003800:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29b      	uxth	r3, r3
 8003808:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800380a:	2b00      	cmp	r3, #0
 800380c:	d151      	bne.n	80038b2 <UART_Receive_IT+0xe0>
{
 800380e:	b500      	push	{lr}
 8003810:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003812:	6802      	ldr	r2, [r0, #0]
 8003814:	68d3      	ldr	r3, [r2, #12]
 8003816:	f023 0320 	bic.w	r3, r3, #32
 800381a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800381c:	6802      	ldr	r2, [r0, #0]
 800381e:	68d3      	ldr	r3, [r2, #12]
 8003820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003824:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003826:	6802      	ldr	r2, [r0, #0]
 8003828:	6953      	ldr	r3, [r2, #20]
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003830:	2320      	movs	r3, #32
 8003832:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003836:	2300      	movs	r3, #0
 8003838:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800383a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800383c:	2b01      	cmp	r3, #1
 800383e:	d133      	bne.n	80038a8 <UART_Receive_IT+0xd6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003840:	2300      	movs	r3, #0
 8003842:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003844:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	f102 030c 	add.w	r3, r2, #12
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	320c      	adds	r2, #12
 8003854:	e842 3100 	strex	r1, r3, [r2]
 8003858:	2900      	cmp	r1, #0
 800385a:	d1f3      	bne.n	8003844 <UART_Receive_IT+0x72>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800385c:	6803      	ldr	r3, [r0, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	f012 0f10 	tst.w	r2, #16
 8003864:	d006      	beq.n	8003874 <UART_Receive_IT+0xa2>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003866:	2200      	movs	r2, #0
 8003868:	9201      	str	r2, [sp, #4]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	9201      	str	r2, [sp, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003874:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003876:	f7ff ffab 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800387a:	2000      	movs	r0, #0
}
 800387c:	b003      	add	sp, #12
 800387e:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003882:	6902      	ldr	r2, [r0, #16]
 8003884:	2a00      	cmp	r2, #0
 8003886:	d1ac      	bne.n	80037e2 <UART_Receive_IT+0x10>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003888:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800388a:	6803      	ldr	r3, [r0, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003894:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003896:	3302      	adds	r3, #2
 8003898:	6283      	str	r3, [r0, #40]	@ 0x28
 800389a:	e7b1      	b.n	8003800 <UART_Receive_IT+0x2e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800389c:	6803      	ldr	r3, [r0, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a4:	7013      	strb	r3, [r2, #0]
 80038a6:	e7a8      	b.n	80037fa <UART_Receive_IT+0x28>
        HAL_UART_RxCpltCallback(huart);
 80038a8:	f7ff ff5e 	bl	8003768 <HAL_UART_RxCpltCallback>
 80038ac:	e7e5      	b.n	800387a <UART_Receive_IT+0xa8>
    return HAL_BUSY;
 80038ae:	2002      	movs	r0, #2
 80038b0:	4770      	bx	lr
    return HAL_OK;
 80038b2:	2000      	movs	r0, #0
}
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_UART_IRQHandler>:
{
 80038b8:	b510      	push	{r4, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038be:	6802      	ldr	r2, [r0, #0]
 80038c0:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c2:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038c4:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80038c6:	f013 0f0f 	tst.w	r3, #15
 80038ca:	d109      	bne.n	80038e0 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038cc:	f013 0f20 	tst.w	r3, #32
 80038d0:	d00c      	beq.n	80038ec <HAL_UART_IRQHandler+0x34>
 80038d2:	f010 0f20 	tst.w	r0, #32
 80038d6:	d009      	beq.n	80038ec <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff ff7a 	bl	80037d2 <UART_Receive_IT>
      return;
 80038de:	e016      	b.n	800390e <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038e0:	f011 0101 	ands.w	r1, r1, #1
 80038e4:	d115      	bne.n	8003912 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038e6:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80038ea:	d112      	bne.n	8003912 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80038ee:	2901      	cmp	r1, #1
 80038f0:	d079      	beq.n	80039e6 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80038f6:	d003      	beq.n	8003900 <HAL_UART_IRQHandler+0x48>
 80038f8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80038fc:	f040 8114 	bne.w	8003b28 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003900:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003904:	d003      	beq.n	800390e <HAL_UART_IRQHandler+0x56>
 8003906:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800390a:	f040 8111 	bne.w	8003b30 <HAL_UART_IRQHandler+0x278>
}
 800390e:	b002      	add	sp, #8
 8003910:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003912:	f013 0f01 	tst.w	r3, #1
 8003916:	d006      	beq.n	8003926 <HAL_UART_IRQHandler+0x6e>
 8003918:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800391c:	d003      	beq.n	8003926 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800391e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003926:	f013 0f04 	tst.w	r3, #4
 800392a:	d004      	beq.n	8003936 <HAL_UART_IRQHandler+0x7e>
 800392c:	b119      	cbz	r1, 8003936 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800392e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003930:	f042 0202 	orr.w	r2, r2, #2
 8003934:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003936:	f013 0f02 	tst.w	r3, #2
 800393a:	d004      	beq.n	8003946 <HAL_UART_IRQHandler+0x8e>
 800393c:	b119      	cbz	r1, 8003946 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800393e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003940:	f042 0204 	orr.w	r2, r2, #4
 8003944:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003946:	f013 0f08 	tst.w	r3, #8
 800394a:	d007      	beq.n	800395c <HAL_UART_IRQHandler+0xa4>
 800394c:	f010 0f20 	tst.w	r0, #32
 8003950:	d100      	bne.n	8003954 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003952:	b119      	cbz	r1, 800395c <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003954:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003956:	f042 0208 	orr.w	r2, r2, #8
 800395a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800395c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800395e:	2a00      	cmp	r2, #0
 8003960:	d0d5      	beq.n	800390e <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003962:	f013 0f20 	tst.w	r3, #32
 8003966:	d002      	beq.n	800396e <HAL_UART_IRQHandler+0xb6>
 8003968:	f010 0f20 	tst.w	r0, #32
 800396c:	d129      	bne.n	80039c2 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003976:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003978:	f012 0f08 	tst.w	r2, #8
 800397c:	d100      	bne.n	8003980 <HAL_UART_IRQHandler+0xc8>
 800397e:	b363      	cbz	r3, 80039da <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003980:	4620      	mov	r0, r4
 8003982:	f7ff fdcd 	bl	8003520 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800398e:	d020      	beq.n	80039d2 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003990:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	f102 0314 	add.w	r3, r2, #20
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	3214      	adds	r2, #20
 80039a0:	e842 3100 	strex	r1, r3, [r2]
 80039a4:	2900      	cmp	r1, #0
 80039a6:	d1f3      	bne.n	8003990 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80039a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039aa:	b173      	cbz	r3, 80039ca <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ac:	4a62      	ldr	r2, [pc, #392]	@ (8003b38 <HAL_UART_IRQHandler+0x280>)
 80039ae:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039b0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039b2:	f7fe f840 	bl	8001a36 <HAL_DMA_Abort_IT>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d0a9      	beq.n	800390e <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ba:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039bc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80039be:	4798      	blx	r3
 80039c0:	e7a5      	b.n	800390e <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7ff ff05 	bl	80037d2 <UART_Receive_IT>
 80039c8:	e7d1      	b.n	800396e <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7fc fe20 	bl	8000610 <HAL_UART_ErrorCallback>
 80039d0:	e79d      	b.n	800390e <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7fc fe1c 	bl	8000610 <HAL_UART_ErrorCallback>
 80039d8:	e799      	b.n	800390e <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80039da:	4620      	mov	r0, r4
 80039dc:	f7fc fe18 	bl	8000610 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80039e4:	e793      	b.n	800390e <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039e6:	f013 0f10 	tst.w	r3, #16
 80039ea:	d082      	beq.n	80038f2 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039ec:	f010 0f10 	tst.w	r0, #16
 80039f0:	f43f af7f 	beq.w	80038f2 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039f4:	2300      	movs	r3, #0
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	6813      	ldr	r3, [r2, #0]
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	6853      	ldr	r3, [r2, #4]
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a02:	6953      	ldr	r3, [r2, #20]
 8003a04:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003a08:	d052      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a0a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003a0c:	6813      	ldr	r3, [r2, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f43f af7b 	beq.w	800390e <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a18:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003a1a:	4299      	cmp	r1, r3
 8003a1c:	f67f af77 	bls.w	800390e <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8003a20:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a22:	69d3      	ldr	r3, [r2, #28]
 8003a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a28:	d037      	beq.n	8003a9a <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	f102 030c 	add.w	r3, r2, #12
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	320c      	adds	r2, #12
 8003a3a:	e842 3100 	strex	r1, r3, [r2]
 8003a3e:	2900      	cmp	r1, #0
 8003a40:	d1f3      	bne.n	8003a2a <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	f102 0314 	add.w	r3, r2, #20
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	3214      	adds	r2, #20
 8003a52:	e842 3100 	strex	r1, r3, [r2]
 8003a56:	2900      	cmp	r1, #0
 8003a58:	d1f3      	bne.n	8003a42 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	f102 0314 	add.w	r3, r2, #20
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	3214      	adds	r2, #20
 8003a6a:	e842 3100 	strex	r1, r3, [r2]
 8003a6e:	2900      	cmp	r1, #0
 8003a70:	d1f3      	bne.n	8003a5a <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8003a72:	2320      	movs	r3, #32
 8003a74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	f102 030c 	add.w	r3, r2, #12
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	320c      	adds	r2, #12
 8003a8c:	e842 3100 	strex	r1, r3, [r2]
 8003a90:	2900      	cmp	r1, #0
 8003a92:	d1f3      	bne.n	8003a7c <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a94:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003a96:	f7fd ff85 	bl	80019a4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a9e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003aa0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	1ac9      	subs	r1, r1, r3
 8003aa6:	b289      	uxth	r1, r1
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff fe91 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
      return;
 8003aae:	e72e      	b.n	800390e <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ab0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003ab2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	1ac9      	subs	r1, r1, r3
 8003ab8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003aba:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f43f af25 	beq.w	800390e <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8003ac4:	2900      	cmp	r1, #0
 8003ac6:	f43f af22 	beq.w	800390e <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	f102 030c 	add.w	r3, r2, #12
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	320c      	adds	r2, #12
 8003ada:	e842 3000 	strex	r0, r3, [r2]
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d1f3      	bne.n	8003aca <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	f102 0314 	add.w	r3, r2, #20
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	3214      	adds	r2, #20
 8003af2:	e842 3000 	strex	r0, r3, [r2]
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d1f3      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8003afa:	2320      	movs	r3, #32
 8003afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	2300      	movs	r3, #0
 8003b02:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b04:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	f102 030c 	add.w	r3, r2, #12
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	320c      	adds	r2, #12
 8003b14:	e842 3000 	strex	r0, r3, [r2]
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d1f3      	bne.n	8003b04 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff fe55 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
      return;
 8003b26:	e6f2      	b.n	800390e <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff fd27 	bl	800357c <UART_Transmit_IT>
    return;
 8003b2e:	e6ee      	b.n	800390e <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003b30:	4620      	mov	r0, r4
 8003b32:	f7ff fe0c 	bl	800374e <UART_EndTransmit_IT>
    return;
 8003b36:	e6ea      	b.n	800390e <HAL_UART_IRQHandler+0x56>
 8003b38:	080037c1 	.word	0x080037c1

08003b3c <UART_DMARxHalfCplt>:
{
 8003b3c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b3e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003b40:	2301      	movs	r3, #1
 8003b42:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b44:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d002      	beq.n	8003b50 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b4a:	f7ff fe0e 	bl	800376a <HAL_UART_RxHalfCpltCallback>
}
 8003b4e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b50:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003b52:	0849      	lsrs	r1, r1, #1
 8003b54:	f7ff fe3c 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
 8003b58:	e7f9      	b.n	8003b4e <UART_DMARxHalfCplt+0x12>

08003b5a <UART_DMAReceiveCplt>:
{
 8003b5a:	b508      	push	{r3, lr}
 8003b5c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b5e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003b68:	d12b      	bne.n	8003bc2 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	f102 030c 	add.w	r3, r2, #12
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	320c      	adds	r2, #12
 8003b7e:	e842 3100 	strex	r1, r3, [r2]
 8003b82:	2900      	cmp	r1, #0
 8003b84:	d1f3      	bne.n	8003b6e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b86:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	f102 0314 	add.w	r3, r2, #20
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	3214      	adds	r2, #20
 8003b96:	e842 3100 	strex	r1, r3, [r2]
 8003b9a:	2900      	cmp	r1, #0
 8003b9c:	d1f3      	bne.n	8003b86 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	f102 0314 	add.w	r3, r2, #20
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	3214      	adds	r2, #20
 8003bae:	e842 3100 	strex	r1, r3, [r2]
 8003bb2:	2900      	cmp	r1, #0
 8003bb4:	d1f3      	bne.n	8003b9e <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8003bb6:	2320      	movs	r3, #32
 8003bb8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d007      	beq.n	8003bd2 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d00f      	beq.n	8003bec <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8003bcc:	f7ff fdcc 	bl	8003768 <HAL_UART_RxCpltCallback>
}
 8003bd0:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	f102 030c 	add.w	r3, r2, #12
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	320c      	adds	r2, #12
 8003be2:	e842 3100 	strex	r1, r3, [r2]
 8003be6:	2900      	cmp	r1, #0
 8003be8:	d1f3      	bne.n	8003bd2 <UART_DMAReceiveCplt+0x78>
 8003bea:	e7ea      	b.n	8003bc2 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bec:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003bee:	f7ff fdef 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
 8003bf2:	e7ed      	b.n	8003bd0 <UART_DMAReceiveCplt+0x76>

08003bf4 <UART_Start_Receive_DMA>:
{
 8003bf4:	b530      	push	{r4, r5, lr}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8003bfc:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003bfe:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	2500      	movs	r5, #0
 8003c02:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c04:	2222      	movs	r2, #34	@ 0x22
 8003c06:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003c0c:	481f      	ldr	r0, [pc, #124]	@ (8003c8c <UART_Start_Receive_DMA+0x98>)
 8003c0e:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c10:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003c12:	481f      	ldr	r0, [pc, #124]	@ (8003c90 <UART_Start_Receive_DMA+0x9c>)
 8003c14:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c16:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003c18:	481e      	ldr	r0, [pc, #120]	@ (8003c94 <UART_Start_Receive_DMA+0xa0>)
 8003c1a:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8003c1c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003c1e:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c20:	6820      	ldr	r0, [r4, #0]
 8003c22:	460a      	mov	r2, r1
 8003c24:	1d01      	adds	r1, r0, #4
 8003c26:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003c28:	f7fd fe88 	bl	800193c <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c2c:	9501      	str	r5, [sp, #4]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	9201      	str	r2, [sp, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	b15b      	cbz	r3, 8003c56 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c3e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	f102 030c 	add.w	r3, r2, #12
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	320c      	adds	r2, #12
 8003c4e:	e842 3100 	strex	r1, r3, [r2]
 8003c52:	2900      	cmp	r1, #0
 8003c54:	d1f3      	bne.n	8003c3e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c56:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	f102 0314 	add.w	r3, r2, #20
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	3214      	adds	r2, #20
 8003c66:	e842 3100 	strex	r1, r3, [r2]
 8003c6a:	2900      	cmp	r1, #0
 8003c6c:	d1f3      	bne.n	8003c56 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	f102 0314 	add.w	r3, r2, #20
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	3214      	adds	r2, #20
 8003c7e:	e842 3100 	strex	r1, r3, [r2]
 8003c82:	2900      	cmp	r1, #0
 8003c84:	d1f3      	bne.n	8003c6e <UART_Start_Receive_DMA+0x7a>
}
 8003c86:	2000      	movs	r0, #0
 8003c88:	b003      	add	sp, #12
 8003c8a:	bd30      	pop	{r4, r5, pc}
 8003c8c:	08003b5b 	.word	0x08003b5b
 8003c90:	08003b3d 	.word	0x08003b3d
 8003c94:	0800376d 	.word	0x0800376d

08003c98 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c98:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d129      	bne.n	8003cf4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5c>
{
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8003ca6:	b339      	cbz	r1, 8003cf8 <HAL_UARTEx_ReceiveToIdle_DMA+0x60>
 8003ca8:	b912      	cbnz	r2, 8003cb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x18>
      return HAL_ERROR;
 8003caa:	2001      	movs	r0, #1
}
 8003cac:	b002      	add	sp, #8
 8003cae:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003cb8:	f7ff ff9c 	bl	8003bf4 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	d1f5      	bne.n	8003cac <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
        status = HAL_ERROR;
 8003cc6:	2001      	movs	r0, #1
    return status;
 8003cc8:	e7f0      	b.n	8003cac <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	9201      	str	r2, [sp, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cda:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	f102 030c 	add.w	r3, r2, #12
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	320c      	adds	r2, #12
 8003cea:	e842 3100 	strex	r1, r3, [r2]
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d1f3      	bne.n	8003cda <HAL_UARTEx_ReceiveToIdle_DMA+0x42>
 8003cf2:	e7db      	b.n	8003cac <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    return HAL_BUSY;
 8003cf4:	2002      	movs	r0, #2
}
 8003cf6:	4770      	bx	lr
      return HAL_ERROR;
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	e7d7      	b.n	8003cac <HAL_UARTEx_ReceiveToIdle_DMA+0x14>

08003cfc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cfc:	e7fe      	b.n	8003cfc <NMI_Handler>

08003cfe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cfe:	e7fe      	b.n	8003cfe <HardFault_Handler>

08003d00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d00:	e7fe      	b.n	8003d00 <MemManage_Handler>

08003d02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d02:	e7fe      	b.n	8003d02 <BusFault_Handler>

08003d04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d04:	e7fe      	b.n	8003d04 <UsageFault_Handler>

08003d06 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d06:	4770      	bx	lr

08003d08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d0a:	4802      	ldr	r0, [pc, #8]	@ (8003d14 <DMA1_Stream1_IRQHandler+0xc>)
 8003d0c:	f7fd fea6 	bl	8001a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d10:	bd08      	pop	{r3, pc}
 8003d12:	bf00      	nop
 8003d14:	20004364 	.word	0x20004364

08003d18 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003d18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003d1a:	4802      	ldr	r0, [pc, #8]	@ (8003d24 <DMA1_Stream3_IRQHandler+0xc>)
 8003d1c:	f7fd fe9e 	bl	8001a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003d20:	bd08      	pop	{r3, pc}
 8003d22:	bf00      	nop
 8003d24:	200043c4 	.word	0x200043c4

08003d28 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003d28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d2a:	4802      	ldr	r0, [pc, #8]	@ (8003d34 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8003d2c:	f7fe fec1 	bl	8002ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003d30:	bd08      	pop	{r3, pc}
 8003d32:	bf00      	nop
 8003d34:	2000431c 	.word	0x2000431c

08003d38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003d38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d3a:	4802      	ldr	r0, [pc, #8]	@ (8003d44 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8003d3c:	f7fe feb9 	bl	8002ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d40:	bd08      	pop	{r3, pc}
 8003d42:	bf00      	nop
 8003d44:	2000431c 	.word	0x2000431c

08003d48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003d48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d4a:	4802      	ldr	r0, [pc, #8]	@ (8003d54 <TIM1_CC_IRQHandler+0xc>)
 8003d4c:	f7fe feb1 	bl	8002ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003d50:	bd08      	pop	{r3, pc}
 8003d52:	bf00      	nop
 8003d54:	2000431c 	.word	0x2000431c

08003d58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d5a:	4802      	ldr	r0, [pc, #8]	@ (8003d64 <USART3_IRQHandler+0xc>)
 8003d5c:	f7ff fdac 	bl	80038b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d60:	bd08      	pop	{r3, pc}
 8003d62:	bf00      	nop
 8003d64:	20004424 	.word	0x20004424

08003d68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d6a:	4802      	ldr	r0, [pc, #8]	@ (8003d74 <TIM6_DAC_IRQHandler+0xc>)
 8003d6c:	f7fe fea1 	bl	8002ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d70:	bd08      	pop	{r3, pc}
 8003d72:	bf00      	nop
 8003d74:	20004160 	.word	0x20004160

08003d78 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d78:	4a03      	ldr	r2, [pc, #12]	@ (8003d88 <SystemInit+0x10>)
 8003d7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003d7e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d86:	4770      	bx	lr
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d8c:	4b08      	ldr	r3, [pc, #32]	@ (8003db0 <prvResetNextTaskUnblockTime+0x24>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	b923      	cbnz	r3, 8003d9e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d94:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <prvResetNextTaskUnblockTime+0x28>)
 8003d96:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9e:	4b04      	ldr	r3, [pc, #16]	@ (8003db0 <prvResetNextTaskUnblockTime+0x24>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	4b02      	ldr	r3, [pc, #8]	@ (8003db4 <prvResetNextTaskUnblockTime+0x28>)
 8003daa:	601a      	str	r2, [r3, #0]
	}
}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20004218 	.word	0x20004218
 8003db4:	200041b0 	.word	0x200041b0

08003db8 <prvInitialiseNewTask>:
{
 8003db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	4607      	mov	r7, r0
 8003dbe:	4698      	mov	r8, r3
 8003dc0:	9d08      	ldr	r5, [sp, #32]
 8003dc2:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8003dc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003dc8:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8003dca:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003dd4:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8003dd8:	b3c1      	cbz	r1, 8003e4c <prvInitialiseNewTask+0x94>
 8003dda:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ddc:	f04f 0c00 	mov.w	ip, #0
 8003de0:	f1bc 0f0f 	cmp.w	ip, #15
 8003de4:	d809      	bhi.n	8003dfa <prvInitialiseNewTask+0x42>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003de6:	f810 200c 	ldrb.w	r2, [r0, ip]
 8003dea:	eb04 030c 	add.w	r3, r4, ip
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8003df2:	b112      	cbz	r2, 8003dfa <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df4:	f10c 0c01 	add.w	ip, ip, #1
 8003df8:	e7f2      	b.n	8003de0 <prvInitialiseNewTask+0x28>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e00:	2d06      	cmp	r5, #6
 8003e02:	d900      	bls.n	8003e06 <prvInitialiseNewTask+0x4e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e04:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8003e06:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003e08:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e0a:	f04f 0a00 	mov.w	sl, #0
 8003e0e:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e12:	1d20      	adds	r0, r4, #4
 8003e14:	f7fc fea7 	bl	8000b66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e18:	f104 0018 	add.w	r0, r4, #24
 8003e1c:	f7fc fea3 	bl	8000b66 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e20:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e22:	f1c5 0507 	rsb	r5, r5, #7
 8003e26:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e28:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003e2a:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e2e:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e32:	4642      	mov	r2, r8
 8003e34:	4639      	mov	r1, r7
 8003e36:	4630      	mov	r0, r6
 8003e38:	f7fc ffba 	bl	8000db0 <pxPortInitialiseStack>
 8003e3c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8003e3e:	f1b9 0f00 	cmp.w	r9, #0
 8003e42:	d001      	beq.n	8003e48 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e44:	f8c9 4000 	str.w	r4, [r9]
}
 8003e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8003e52:	e7d5      	b.n	8003e00 <prvInitialiseNewTask+0x48>

08003e54 <prvInitialiseTaskLists>:
{
 8003e54:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e56:	2400      	movs	r4, #0
 8003e58:	e007      	b.n	8003e6a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003e5e:	0093      	lsls	r3, r2, #2
 8003e60:	480e      	ldr	r0, [pc, #56]	@ (8003e9c <prvInitialiseTaskLists+0x48>)
 8003e62:	4418      	add	r0, r3
 8003e64:	f7fc fe74 	bl	8000b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e68:	3401      	adds	r4, #1
 8003e6a:	2c06      	cmp	r4, #6
 8003e6c:	d9f5      	bls.n	8003e5a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003e6e:	4d0c      	ldr	r5, [pc, #48]	@ (8003ea0 <prvInitialiseTaskLists+0x4c>)
 8003e70:	4628      	mov	r0, r5
 8003e72:	f7fc fe6d 	bl	8000b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e76:	4c0b      	ldr	r4, [pc, #44]	@ (8003ea4 <prvInitialiseTaskLists+0x50>)
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f7fc fe69 	bl	8000b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e7e:	480a      	ldr	r0, [pc, #40]	@ (8003ea8 <prvInitialiseTaskLists+0x54>)
 8003e80:	f7fc fe66 	bl	8000b50 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003e84:	4809      	ldr	r0, [pc, #36]	@ (8003eac <prvInitialiseTaskLists+0x58>)
 8003e86:	f7fc fe63 	bl	8000b50 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003e8a:	4809      	ldr	r0, [pc, #36]	@ (8003eb0 <prvInitialiseTaskLists+0x5c>)
 8003e8c:	f7fc fe60 	bl	8000b50 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e90:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <prvInitialiseTaskLists+0x60>)
 8003e92:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e94:	4b08      	ldr	r3, [pc, #32]	@ (8003eb8 <prvInitialiseTaskLists+0x64>)
 8003e96:	601c      	str	r4, [r3, #0]
}
 8003e98:	bd38      	pop	{r3, r4, r5, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20004244 	.word	0x20004244
 8003ea0:	20004230 	.word	0x20004230
 8003ea4:	2000421c 	.word	0x2000421c
 8003ea8:	20004200 	.word	0x20004200
 8003eac:	200041ec 	.word	0x200041ec
 8003eb0:	200041d4 	.word	0x200041d4
 8003eb4:	20004218 	.word	0x20004218
 8003eb8:	20004214 	.word	0x20004214

08003ebc <prvAddNewTaskToReadyList>:
{
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003ec0:	f7fc ffa0 	bl	8000e04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003ec4:	4a21      	ldr	r2, [pc, #132]	@ (8003f4c <prvAddNewTaskToReadyList+0x90>)
 8003ec6:	6813      	ldr	r3, [r2, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ecc:	4b20      	ldr	r3, [pc, #128]	@ (8003f50 <prvAddNewTaskToReadyList+0x94>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	b15b      	cbz	r3, 8003eea <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8003ed2:	4b20      	ldr	r3, [pc, #128]	@ (8003f54 <prvAddNewTaskToReadyList+0x98>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	b96b      	cbnz	r3, 8003ef4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f50 <prvAddNewTaskToReadyList+0x94>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ede:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d807      	bhi.n	8003ef4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f50 <prvAddNewTaskToReadyList+0x94>)
 8003ee6:	601c      	str	r4, [r3, #0]
 8003ee8:	e004      	b.n	8003ef4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8003eea:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <prvAddNewTaskToReadyList+0x94>)
 8003eec:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003eee:	6813      	ldr	r3, [r2, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d028      	beq.n	8003f46 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8003ef4:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <prvAddNewTaskToReadyList+0x9c>)
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003efc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003efe:	2301      	movs	r3, #1
 8003f00:	4083      	lsls	r3, r0
 8003f02:	4a16      	ldr	r2, [pc, #88]	@ (8003f5c <prvAddNewTaskToReadyList+0xa0>)
 8003f04:	6811      	ldr	r1, [r2, #0]
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003f0e:	1d21      	adds	r1, r4, #4
 8003f10:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <prvAddNewTaskToReadyList+0xa4>)
 8003f12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003f16:	f7fc fe29 	bl	8000b6c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003f1a:	f7fc ff95 	bl	8000e48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <prvAddNewTaskToReadyList+0x98>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b17b      	cbz	r3, 8003f44 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f24:	4b0a      	ldr	r3, [pc, #40]	@ (8003f50 <prvAddNewTaskToReadyList+0x94>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d209      	bcs.n	8003f44 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8003f30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f38:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	f3bf 8f6f 	isb	sy
}
 8003f44:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8003f46:	f7ff ff85 	bl	8003e54 <prvInitialiseTaskLists>
 8003f4a:	e7d3      	b.n	8003ef4 <prvAddNewTaskToReadyList+0x38>
 8003f4c:	200041d0 	.word	0x200041d0
 8003f50:	200042d0 	.word	0x200042d0
 8003f54:	200041c4 	.word	0x200041c4
 8003f58:	200041b4 	.word	0x200041b4
 8003f5c:	200041c8 	.word	0x200041c8
 8003f60:	20004244 	.word	0x20004244

08003f64 <prvDeleteTCB>:
	{
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f68:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 8003f6c:	b163      	cbz	r3, 8003f88 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d011      	beq.n	8003f96 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d00e      	beq.n	8003f94 <prvDeleteTCB+0x30>
 8003f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	e7fe      	b.n	8003f86 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8003f88:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003f8a:	f7fc fd4d 	bl	8000a28 <vPortFree>
				vPortFree( pxTCB );
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f7fc fd4a 	bl	8000a28 <vPortFree>
	}
 8003f94:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8003f96:	f7fc fd47 	bl	8000a28 <vPortFree>
 8003f9a:	e7fb      	b.n	8003f94 <prvDeleteTCB+0x30>

08003f9c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fdc <prvCheckTasksWaitingTermination+0x40>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b1d3      	cbz	r3, 8003fd8 <prvCheckTasksWaitingTermination+0x3c>
{
 8003fa2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8003fa4:	f7fc ff2e 	bl	8000e04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <prvCheckTasksWaitingTermination+0x44>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fae:	1d20      	adds	r0, r4, #4
 8003fb0:	f7fc fe00 	bl	8000bb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8003fe4 <prvCheckTasksWaitingTermination+0x48>)
 8003fb6:	6813      	ldr	r3, [r2, #0]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fbc:	4a07      	ldr	r2, [pc, #28]	@ (8003fdc <prvCheckTasksWaitingTermination+0x40>)
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8003fc4:	f7fc ff40 	bl	8000e48 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f7ff ffcb 	bl	8003f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fce:	4b03      	ldr	r3, [pc, #12]	@ (8003fdc <prvCheckTasksWaitingTermination+0x40>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e6      	bne.n	8003fa4 <prvCheckTasksWaitingTermination+0x8>
}
 8003fd6:	bd10      	pop	{r4, pc}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	200041e8 	.word	0x200041e8
 8003fe0:	200041ec 	.word	0x200041ec
 8003fe4:	200041d0 	.word	0x200041d0

08003fe8 <prvIdleTask>:
{
 8003fe8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8003fea:	f7ff ffd7 	bl	8003f9c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fee:	4b07      	ldr	r3, [pc, #28]	@ (800400c <prvIdleTask+0x24>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d9f9      	bls.n	8003fea <prvIdleTask+0x2>
				taskYIELD();
 8003ff6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ffe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	e7ee      	b.n	8003fea <prvIdleTask+0x2>
 800400c:	20004244 	.word	0x20004244

08004010 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4604      	mov	r4, r0
 8004014:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004016:	4b1d      	ldr	r3, [pc, #116]	@ (800408c <prvAddCurrentTaskToDelayedList+0x7c>)
 8004018:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800401a:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x80>)
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	3004      	adds	r0, #4
 8004020:	f7fc fdc8 	bl	8000bb4 <uxListRemove>
 8004024:	b948      	cbnz	r0, 800403a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004026:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x80>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	2201      	movs	r2, #1
 800402e:	409a      	lsls	r2, r3
 8004030:	4918      	ldr	r1, [pc, #96]	@ (8004094 <prvAddCurrentTaskToDelayedList+0x84>)
 8004032:	680b      	ldr	r3, [r1, #0]
 8004034:	ea23 0302 	bic.w	r3, r3, r2
 8004038:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800403a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800403e:	d00d      	beq.n	800405c <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004040:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004042:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x80>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004048:	42a6      	cmp	r6, r4
 800404a:	d910      	bls.n	800406e <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800404c:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <prvAddCurrentTaskToDelayedList+0x88>)
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	4b0f      	ldr	r3, [pc, #60]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x80>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	3104      	adds	r1, #4
 8004056:	f7fc fd94 	bl	8000b82 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800405a:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800405c:	2d00      	cmp	r5, #0
 800405e:	d0ef      	beq.n	8004040 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004060:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x80>)
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	3104      	adds	r1, #4
 8004066:	480d      	ldr	r0, [pc, #52]	@ (800409c <prvAddCurrentTaskToDelayedList+0x8c>)
 8004068:	f7fc fd80 	bl	8000b6c <vListInsertEnd>
 800406c:	e7f5      	b.n	800405a <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800406e:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <prvAddCurrentTaskToDelayedList+0x80>)
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	3104      	adds	r1, #4
 8004078:	f7fc fd83 	bl	8000b82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800407c:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	42a3      	cmp	r3, r4
 8004082:	d9ea      	bls.n	800405a <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8004084:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004086:	601c      	str	r4, [r3, #0]
}
 8004088:	e7e7      	b.n	800405a <prvAddCurrentTaskToDelayedList+0x4a>
 800408a:	bf00      	nop
 800408c:	200041cc 	.word	0x200041cc
 8004090:	200042d0 	.word	0x200042d0
 8004094:	200041c8 	.word	0x200041c8
 8004098:	20004214 	.word	0x20004214
 800409c:	200041d4 	.word	0x200041d4
 80040a0:	20004218 	.word	0x20004218
 80040a4:	200041b0 	.word	0x200041b0

080040a8 <xTaskCreateStatic>:
	{
 80040a8:	b530      	push	{r4, r5, lr}
 80040aa:	b087      	sub	sp, #28
 80040ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80040ae:	b17c      	cbz	r4, 80040d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040b0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80040b2:	b1b5      	cbz	r5, 80040e2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80040b4:	2554      	movs	r5, #84	@ 0x54
 80040b6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040b8:	9d04      	ldr	r5, [sp, #16]
 80040ba:	2d54      	cmp	r5, #84	@ 0x54
 80040bc:	d01a      	beq.n	80040f4 <xTaskCreateStatic+0x4c>
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	e7fe      	b.n	80040ce <xTaskCreateStatic+0x26>
 80040d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80040e0:	e7fe      	b.n	80040e0 <xTaskCreateStatic+0x38>
 80040e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80040f2:	e7fe      	b.n	80040f2 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040f4:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040f6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80040f8:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040fa:	2402      	movs	r4, #2
 80040fc:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004100:	2400      	movs	r4, #0
 8004102:	9403      	str	r4, [sp, #12]
 8004104:	9502      	str	r5, [sp, #8]
 8004106:	ac05      	add	r4, sp, #20
 8004108:	9401      	str	r4, [sp, #4]
 800410a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800410c:	9400      	str	r4, [sp, #0]
 800410e:	f7ff fe53 	bl	8003db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004112:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004114:	f7ff fed2 	bl	8003ebc <prvAddNewTaskToReadyList>
	}
 8004118:	9805      	ldr	r0, [sp, #20]
 800411a:	b007      	add	sp, #28
 800411c:	bd30      	pop	{r4, r5, pc}

0800411e <xTaskCreate>:
	{
 800411e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004122:	b085      	sub	sp, #20
 8004124:	4607      	mov	r7, r0
 8004126:	4688      	mov	r8, r1
 8004128:	4614      	mov	r4, r2
 800412a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800412c:	0090      	lsls	r0, r2, #2
 800412e:	f7fc fbf9 	bl	8000924 <pvPortMalloc>
			if( pxStack != NULL )
 8004132:	b308      	cbz	r0, 8004178 <xTaskCreate+0x5a>
 8004134:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004136:	2054      	movs	r0, #84	@ 0x54
 8004138:	f7fc fbf4 	bl	8000924 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800413c:	4605      	mov	r5, r0
 800413e:	b1a8      	cbz	r0, 800416c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8004140:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004144:	2300      	movs	r3, #0
 8004146:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800414a:	9303      	str	r3, [sp, #12]
 800414c:	9002      	str	r0, [sp, #8]
 800414e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	4633      	mov	r3, r6
 8004158:	4622      	mov	r2, r4
 800415a:	4641      	mov	r1, r8
 800415c:	4638      	mov	r0, r7
 800415e:	f7ff fe2b 	bl	8003db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004162:	4628      	mov	r0, r5
 8004164:	f7ff feaa 	bl	8003ebc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004168:	2001      	movs	r0, #1
 800416a:	e007      	b.n	800417c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800416c:	4648      	mov	r0, r9
 800416e:	f7fc fc5b 	bl	8000a28 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004172:	f04f 30ff 	mov.w	r0, #4294967295
 8004176:	e001      	b.n	800417c <xTaskCreate+0x5e>
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800417c:	b005      	add	sp, #20
 800417e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004184 <vTaskStartScheduler>:
{
 8004184:	b510      	push	{r4, lr}
 8004186:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004188:	2400      	movs	r4, #0
 800418a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800418c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800418e:	aa07      	add	r2, sp, #28
 8004190:	a906      	add	r1, sp, #24
 8004192:	a805      	add	r0, sp, #20
 8004194:	f7fc fa92 	bl	80006bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004198:	9b05      	ldr	r3, [sp, #20]
 800419a:	9302      	str	r3, [sp, #8]
 800419c:	9b06      	ldr	r3, [sp, #24]
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	9400      	str	r4, [sp, #0]
 80041a2:	4623      	mov	r3, r4
 80041a4:	9a07      	ldr	r2, [sp, #28]
 80041a6:	490e      	ldr	r1, [pc, #56]	@ (80041e0 <vTaskStartScheduler+0x5c>)
 80041a8:	480e      	ldr	r0, [pc, #56]	@ (80041e4 <vTaskStartScheduler+0x60>)
 80041aa:	f7ff ff7d 	bl	80040a8 <xTaskCreateStatic>
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <vTaskStartScheduler+0x64>)
 80041b0:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80041b2:	b190      	cbz	r0, 80041da <vTaskStartScheduler+0x56>
 80041b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80041c4:	4b09      	ldr	r3, [pc, #36]	@ (80041ec <vTaskStartScheduler+0x68>)
 80041c6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041cc:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <vTaskStartScheduler+0x6c>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041d2:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <vTaskStartScheduler+0x70>)
 80041d4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80041d6:	f7fc feaf 	bl	8000f38 <xPortStartScheduler>
}
 80041da:	b008      	add	sp, #32
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	bf00      	nop
 80041e0:	08004d9c 	.word	0x08004d9c
 80041e4:	08003fe9 	.word	0x08003fe9
 80041e8:	200041ac 	.word	0x200041ac
 80041ec:	200041b0 	.word	0x200041b0
 80041f0:	200041c4 	.word	0x200041c4
 80041f4:	200041cc 	.word	0x200041cc

080041f8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80041f8:	4a02      	ldr	r2, [pc, #8]	@ (8004204 <vTaskSuspendAll+0xc>)
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	6013      	str	r3, [r2, #0]
}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	200041a8 	.word	0x200041a8

08004208 <xTaskIncrementTick>:
{
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800420a:	4b3a      	ldr	r3, [pc, #232]	@ (80042f4 <xTaskIncrementTick+0xec>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d169      	bne.n	80042e6 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004212:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <xTaskIncrementTick+0xf0>)
 8004214:	681d      	ldr	r5, [r3, #0]
 8004216:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004218:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800421a:	b9c5      	cbnz	r5, 800424e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800421c:	4b37      	ldr	r3, [pc, #220]	@ (80042fc <xTaskIncrementTick+0xf4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b143      	cbz	r3, 8004236 <xTaskIncrementTick+0x2e>
 8004224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	e7fe      	b.n	8004234 <xTaskIncrementTick+0x2c>
 8004236:	4a31      	ldr	r2, [pc, #196]	@ (80042fc <xTaskIncrementTick+0xf4>)
 8004238:	6811      	ldr	r1, [r2, #0]
 800423a:	4b31      	ldr	r3, [pc, #196]	@ (8004300 <xTaskIncrementTick+0xf8>)
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	6010      	str	r0, [r2, #0]
 8004240:	6019      	str	r1, [r3, #0]
 8004242:	4a30      	ldr	r2, [pc, #192]	@ (8004304 <xTaskIncrementTick+0xfc>)
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	3301      	adds	r3, #1
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	f7ff fd9f 	bl	8003d8c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800424e:	4b2e      	ldr	r3, [pc, #184]	@ (8004308 <xTaskIncrementTick+0x100>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	42ab      	cmp	r3, r5
 8004254:	d93d      	bls.n	80042d2 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8004256:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004258:	4b2c      	ldr	r3, [pc, #176]	@ (800430c <xTaskIncrementTick+0x104>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	4b2a      	ldr	r3, [pc, #168]	@ (8004310 <xTaskIncrementTick+0x108>)
 8004266:	589b      	ldr	r3, [r3, r2]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d900      	bls.n	800426e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800426c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800426e:	4b29      	ldr	r3, [pc, #164]	@ (8004314 <xTaskIncrementTick+0x10c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d03c      	beq.n	80042f0 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8004276:	2701      	movs	r7, #1
	return xSwitchRequired;
 8004278:	e03a      	b.n	80042f0 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800427a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800427c:	4b1f      	ldr	r3, [pc, #124]	@ (80042fc <xTaskIncrementTick+0xf4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	b343      	cbz	r3, 80042d6 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004284:	4b1d      	ldr	r3, [pc, #116]	@ (80042fc <xTaskIncrementTick+0xf4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800428c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800428e:	429d      	cmp	r5, r3
 8004290:	d326      	bcc.n	80042e0 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004292:	1d26      	adds	r6, r4, #4
 8004294:	4630      	mov	r0, r6
 8004296:	f7fc fc8d 	bl	8000bb4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800429a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800429c:	b11b      	cbz	r3, 80042a6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800429e:	f104 0018 	add.w	r0, r4, #24
 80042a2:	f7fc fc87 	bl	8000bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80042a8:	2201      	movs	r2, #1
 80042aa:	409a      	lsls	r2, r3
 80042ac:	491a      	ldr	r1, [pc, #104]	@ (8004318 <xTaskIncrementTick+0x110>)
 80042ae:	6808      	ldr	r0, [r1, #0]
 80042b0:	4302      	orrs	r2, r0
 80042b2:	600a      	str	r2, [r1, #0]
 80042b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042b8:	009a      	lsls	r2, r3, #2
 80042ba:	4631      	mov	r1, r6
 80042bc:	4814      	ldr	r0, [pc, #80]	@ (8004310 <xTaskIncrementTick+0x108>)
 80042be:	4410      	add	r0, r2
 80042c0:	f7fc fc54 	bl	8000b6c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042c4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80042c6:	4b11      	ldr	r3, [pc, #68]	@ (800430c <xTaskIncrementTick+0x104>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d2d4      	bcs.n	800427a <xTaskIncrementTick+0x72>
 80042d0:	e7d4      	b.n	800427c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80042d2:	2700      	movs	r7, #0
 80042d4:	e7d2      	b.n	800427c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <xTaskIncrementTick+0x100>)
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	601a      	str	r2, [r3, #0]
					break;
 80042de:	e7bb      	b.n	8004258 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80042e0:	4a09      	ldr	r2, [pc, #36]	@ (8004308 <xTaskIncrementTick+0x100>)
 80042e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042e4:	e7b8      	b.n	8004258 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 80042e6:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <xTaskIncrementTick+0x114>)
 80042e8:	6813      	ldr	r3, [r2, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80042ee:	2700      	movs	r7, #0
}
 80042f0:	4638      	mov	r0, r7
 80042f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f4:	200041a8 	.word	0x200041a8
 80042f8:	200041cc 	.word	0x200041cc
 80042fc:	20004218 	.word	0x20004218
 8004300:	20004214 	.word	0x20004214
 8004304:	200041b8 	.word	0x200041b8
 8004308:	200041b0 	.word	0x200041b0
 800430c:	200042d0 	.word	0x200042d0
 8004310:	20004244 	.word	0x20004244
 8004314:	200041bc 	.word	0x200041bc
 8004318:	200041c8 	.word	0x200041c8
 800431c:	200041c0 	.word	0x200041c0

08004320 <xTaskResumeAll>:
{
 8004320:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8004322:	4b35      	ldr	r3, [pc, #212]	@ (80043f8 <xTaskResumeAll+0xd8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	b943      	cbnz	r3, 800433a <xTaskResumeAll+0x1a>
 8004328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	e7fe      	b.n	8004338 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800433a:	f7fc fd63 	bl	8000e04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800433e:	4b2e      	ldr	r3, [pc, #184]	@ (80043f8 <xTaskResumeAll+0xd8>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	3a01      	subs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d14f      	bne.n	80043ec <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800434c:	4b2b      	ldr	r3, [pc, #172]	@ (80043fc <xTaskResumeAll+0xdc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b90b      	cbnz	r3, 8004356 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004352:	2400      	movs	r4, #0
 8004354:	e04b      	b.n	80043ee <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8004356:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004358:	4b29      	ldr	r3, [pc, #164]	@ (8004400 <xTaskResumeAll+0xe0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	b31b      	cbz	r3, 80043a6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800435e:	4b28      	ldr	r3, [pc, #160]	@ (8004400 <xTaskResumeAll+0xe0>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004364:	f104 0018 	add.w	r0, r4, #24
 8004368:	f7fc fc24 	bl	8000bb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800436c:	1d25      	adds	r5, r4, #4
 800436e:	4628      	mov	r0, r5
 8004370:	f7fc fc20 	bl	8000bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004374:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004376:	2301      	movs	r3, #1
 8004378:	4083      	lsls	r3, r0
 800437a:	4a22      	ldr	r2, [pc, #136]	@ (8004404 <xTaskResumeAll+0xe4>)
 800437c:	6811      	ldr	r1, [r2, #0]
 800437e:	430b      	orrs	r3, r1
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004386:	4629      	mov	r1, r5
 8004388:	4b1f      	ldr	r3, [pc, #124]	@ (8004408 <xTaskResumeAll+0xe8>)
 800438a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800438e:	f7fc fbed 	bl	8000b6c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004392:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004394:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <xTaskResumeAll+0xec>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	429a      	cmp	r2, r3
 800439c:	d3dc      	bcc.n	8004358 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800439e:	4b1c      	ldr	r3, [pc, #112]	@ (8004410 <xTaskResumeAll+0xf0>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e7d8      	b.n	8004358 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80043a6:	b10c      	cbz	r4, 80043ac <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80043a8:	f7ff fcf0 	bl	8003d8c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043ac:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <xTaskResumeAll+0xf4>)
 80043ae:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80043b0:	b984      	cbnz	r4, 80043d4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80043b2:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <xTaskResumeAll+0xf0>)
 80043b4:	681c      	ldr	r4, [r3, #0]
 80043b6:	b1d4      	cbz	r4, 80043ee <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80043b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80043bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80043cc:	2401      	movs	r4, #1
 80043ce:	e00e      	b.n	80043ee <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043d0:	3c01      	subs	r4, #1
 80043d2:	d007      	beq.n	80043e4 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80043d4:	f7ff ff18 	bl	8004208 <xTaskIncrementTick>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d0f9      	beq.n	80043d0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80043dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004410 <xTaskResumeAll+0xf0>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e7f5      	b.n	80043d0 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 80043e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <xTaskResumeAll+0xf4>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e7e2      	b.n	80043b2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 80043ec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80043ee:	f7fc fd2b 	bl	8000e48 <vPortExitCritical>
}
 80043f2:	4620      	mov	r0, r4
 80043f4:	bd38      	pop	{r3, r4, r5, pc}
 80043f6:	bf00      	nop
 80043f8:	200041a8 	.word	0x200041a8
 80043fc:	200041d0 	.word	0x200041d0
 8004400:	20004200 	.word	0x20004200
 8004404:	200041c8 	.word	0x200041c8
 8004408:	20004244 	.word	0x20004244
 800440c:	200042d0 	.word	0x200042d0
 8004410:	200041bc 	.word	0x200041bc
 8004414:	200041c0 	.word	0x200041c0

08004418 <vTaskDelay>:
	{
 8004418:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800441a:	b1a8      	cbz	r0, 8004448 <vTaskDelay+0x30>
 800441c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800441e:	4b10      	ldr	r3, [pc, #64]	@ (8004460 <vTaskDelay+0x48>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	b143      	cbz	r3, 8004436 <vTaskDelay+0x1e>
 8004424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	e7fe      	b.n	8004434 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004436:	f7ff fedf 	bl	80041f8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800443a:	2100      	movs	r1, #0
 800443c:	4620      	mov	r0, r4
 800443e:	f7ff fde7 	bl	8004010 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004442:	f7ff ff6d 	bl	8004320 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004446:	b948      	cbnz	r0, 800445c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8004448:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800444c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004450:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	f3bf 8f6f 	isb	sy
	}
 800445c:	bd10      	pop	{r4, pc}
 800445e:	bf00      	nop
 8004460:	200041a8 	.word	0x200041a8

08004464 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004464:	4b20      	ldr	r3, [pc, #128]	@ (80044e8 <vTaskSwitchContext+0x84>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	b11b      	cbz	r3, 8004472 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800446a:	4b20      	ldr	r3, [pc, #128]	@ (80044ec <vTaskSwitchContext+0x88>)
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8004472:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <vTaskSwitchContext+0x88>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004478:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <vTaskSwitchContext+0x8c>)
 800447a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800447c:	fab3 f383 	clz	r3, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f1c3 031f 	rsb	r3, r3, #31
 8004486:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800448a:	008a      	lsls	r2, r1, #2
 800448c:	4919      	ldr	r1, [pc, #100]	@ (80044f4 <vTaskSwitchContext+0x90>)
 800448e:	588a      	ldr	r2, [r1, r2]
 8004490:	b942      	cbnz	r2, 80044a4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	e7fe      	b.n	80044a2 <vTaskSwitchContext+0x3e>
 80044a4:	4813      	ldr	r0, [pc, #76]	@ (80044f4 <vTaskSwitchContext+0x90>)
 80044a6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80044aa:	008a      	lsls	r2, r1, #2
 80044ac:	4402      	add	r2, r0
 80044ae:	6851      	ldr	r1, [r2, #4]
 80044b0:	6849      	ldr	r1, [r1, #4]
 80044b2:	6051      	str	r1, [r2, #4]
 80044b4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80044b8:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80044bc:	3208      	adds	r2, #8
 80044be:	4402      	add	r2, r0
 80044c0:	4291      	cmp	r1, r2
 80044c2:	d009      	beq.n	80044d8 <vTaskSwitchContext+0x74>
 80044c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044c8:	009a      	lsls	r2, r3, #2
 80044ca:	4b0a      	ldr	r3, [pc, #40]	@ (80044f4 <vTaskSwitchContext+0x90>)
 80044cc:	4413      	add	r3, r2
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	4b09      	ldr	r3, [pc, #36]	@ (80044f8 <vTaskSwitchContext+0x94>)
 80044d4:	601a      	str	r2, [r3, #0]
}
 80044d6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d8:	6848      	ldr	r0, [r1, #4]
 80044da:	4662      	mov	r2, ip
 80044dc:	0091      	lsls	r1, r2, #2
 80044de:	4a05      	ldr	r2, [pc, #20]	@ (80044f4 <vTaskSwitchContext+0x90>)
 80044e0:	440a      	add	r2, r1
 80044e2:	6050      	str	r0, [r2, #4]
 80044e4:	e7ee      	b.n	80044c4 <vTaskSwitchContext+0x60>
 80044e6:	bf00      	nop
 80044e8:	200041a8 	.word	0x200041a8
 80044ec:	200041bc 	.word	0x200041bc
 80044f0:	200041c8 	.word	0x200041c8
 80044f4:	20004244 	.word	0x20004244
 80044f8:	200042d0 	.word	0x200042d0

080044fc <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80044fc:	b500      	push	{lr}
 80044fe:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8004500:	a902      	add	r1, sp, #8
 8004502:	2300      	movs	r3, #0
 8004504:	9302      	str	r3, [sp, #8]
 8004506:	604b      	str	r3, [r1, #4]
 8004508:	608b      	str	r3, [r1, #8]
 800450a:	60cb      	str	r3, [r1, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004510:	480f      	ldr	r0, [pc, #60]	@ (8004550 <MX_TIM3_Init+0x54>)
 8004512:	4a10      	ldr	r2, [pc, #64]	@ (8004554 <MX_TIM3_Init+0x58>)
 8004514:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8004516:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004518:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 800451a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800451e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004520:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004522:	6183      	str	r3, [r0, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.Commutation_Delay = 0;
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8004524:	f7fe fe45 	bl	80031b2 <HAL_TIMEx_HallSensor_Init>
 8004528:	b958      	cbnz	r0, 8004542 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800452a:	2350      	movs	r3, #80	@ 0x50
 800452c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800452e:	2300      	movs	r3, #0
 8004530:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004532:	4669      	mov	r1, sp
 8004534:	4806      	ldr	r0, [pc, #24]	@ (8004550 <MX_TIM3_Init+0x54>)
 8004536:	f7fe ff1f 	bl	8003378 <HAL_TIMEx_MasterConfigSynchronization>
 800453a:	b928      	cbnz	r0, 8004548 <MX_TIM3_Init+0x4c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800453c:	b007      	add	sp, #28
 800453e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004542:	f7fc fb57 	bl	8000bf4 <Error_Handler>
 8004546:	e7f0      	b.n	800452a <MX_TIM3_Init+0x2e>
    Error_Handler();
 8004548:	f7fc fb54 	bl	8000bf4 <Error_Handler>
}
 800454c:	e7f6      	b.n	800453c <MX_TIM3_Init+0x40>
 800454e:	bf00      	nop
 8004550:	200042d4 	.word	0x200042d4
 8004554:	40000400 	.word	0x40000400

08004558 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004558:	b510      	push	{r4, lr}
 800455a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800455c:	2300      	movs	r3, #0
 800455e:	9303      	str	r3, [sp, #12]
 8004560:	9304      	str	r3, [sp, #16]
 8004562:	9305      	str	r3, [sp, #20]
 8004564:	9306      	str	r3, [sp, #24]
 8004566:	9307      	str	r3, [sp, #28]
  if(tim_baseHandle->Instance==TIM1)
 8004568:	6802      	ldr	r2, [r0, #0]
 800456a:	4b20      	ldr	r3, [pc, #128]	@ (80045ec <HAL_TIM_Base_MspInit+0x94>)
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004570:	b008      	add	sp, #32
 8004572:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004574:	2400      	movs	r4, #0
 8004576:	9401      	str	r4, [sp, #4]
 8004578:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 800457c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	645a      	str	r2, [r3, #68]	@ 0x44
 8004584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004586:	f002 0201 	and.w	r2, r2, #1
 800458a:	9201      	str	r2, [sp, #4]
 800458c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800458e:	9402      	str	r4, [sp, #8]
 8004590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004592:	f042 0202 	orr.w	r2, r2, #2
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	9302      	str	r3, [sp, #8]
 80045a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80045a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a8:	2302      	movs	r3, #2
 80045aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b0:	a903      	add	r1, sp, #12
 80045b2:	480f      	ldr	r0, [pc, #60]	@ (80045f0 <HAL_TIM_Base_MspInit+0x98>)
 80045b4:	f7fd fb40 	bl	8001c38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80045b8:	4622      	mov	r2, r4
 80045ba:	2105      	movs	r1, #5
 80045bc:	2018      	movs	r0, #24
 80045be:	f7fd f8c7 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80045c2:	2018      	movs	r0, #24
 80045c4:	f7fd f8d4 	bl	8001770 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80045c8:	4622      	mov	r2, r4
 80045ca:	2105      	movs	r1, #5
 80045cc:	2019      	movs	r0, #25
 80045ce:	f7fd f8bf 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045d2:	2019      	movs	r0, #25
 80045d4:	f7fd f8cc 	bl	8001770 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80045d8:	4622      	mov	r2, r4
 80045da:	2105      	movs	r1, #5
 80045dc:	201b      	movs	r0, #27
 80045de:	f7fd f8b7 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80045e2:	201b      	movs	r0, #27
 80045e4:	f7fd f8c4 	bl	8001770 <HAL_NVIC_EnableIRQ>
}
 80045e8:	e7c2      	b.n	8004570 <HAL_TIM_Base_MspInit+0x18>
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40020400 	.word	0x40020400

080045f4 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f8:	2300      	movs	r3, #0
 80045fa:	9303      	str	r3, [sp, #12]
 80045fc:	9304      	str	r3, [sp, #16]
 80045fe:	9305      	str	r3, [sp, #20]
 8004600:	9306      	str	r3, [sp, #24]
 8004602:	9307      	str	r3, [sp, #28]
  if(timex_hallsensorHandle->Instance==TIM3)
 8004604:	6802      	ldr	r2, [r0, #0]
 8004606:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <HAL_TIMEx_HallSensor_MspInit+0x88>)
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_TIMEx_HallSensor_MspInit+0x1c>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800460c:	b008      	add	sp, #32
 800460e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004610:	2400      	movs	r4, #0
 8004612:	9400      	str	r4, [sp, #0]
 8004614:	f503 330d 	add.w	r3, r3, #144384	@ 0x23400
 8004618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800461a:	f042 0202 	orr.w	r2, r2, #2
 800461e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004622:	f002 0202 	and.w	r2, r2, #2
 8004626:	9200      	str	r2, [sp, #0]
 8004628:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462a:	9401      	str	r4, [sp, #4]
 800462c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
 8004634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004636:	f002 0201 	and.w	r2, r2, #1
 800463a:	9201      	str	r2, [sp, #4]
 800463c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800463e:	9402      	str	r4, [sp, #8]
 8004640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004642:	f042 0202 	orr.w	r2, r2, #2
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	9302      	str	r3, [sp, #8]
 8004650:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004652:	23c0      	movs	r3, #192	@ 0xc0
 8004654:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004656:	2502      	movs	r5, #2
 8004658:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800465a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800465c:	ae03      	add	r6, sp, #12
 800465e:	4631      	mov	r1, r6
 8004660:	4807      	ldr	r0, [pc, #28]	@ (8004680 <HAL_TIMEx_HallSensor_MspInit+0x8c>)
 8004662:	f7fd fae9 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004666:	2301      	movs	r3, #1
 8004668:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004670:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004672:	4631      	mov	r1, r6
 8004674:	4803      	ldr	r0, [pc, #12]	@ (8004684 <HAL_TIMEx_HallSensor_MspInit+0x90>)
 8004676:	f7fd fadf 	bl	8001c38 <HAL_GPIO_Init>
}
 800467a:	e7c7      	b.n	800460c <HAL_TIMEx_HallSensor_MspInit+0x18>
 800467c:	40000400 	.word	0x40000400
 8004680:	40020000 	.word	0x40020000
 8004684:	40020400 	.word	0x40020400

08004688 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468c:	2300      	movs	r3, #0
 800468e:	9303      	str	r3, [sp, #12]
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	9305      	str	r3, [sp, #20]
 8004694:	9306      	str	r3, [sp, #24]
 8004696:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8004698:	6802      	ldr	r2, [r0, #0]
 800469a:	4b1a      	ldr	r3, [pc, #104]	@ (8004704 <HAL_TIM_MspPostInit+0x7c>)
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80046a0:	b009      	add	sp, #36	@ 0x24
 80046a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046a4:	2400      	movs	r4, #0
 80046a6:	9401      	str	r4, [sp, #4]
 80046a8:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80046ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ae:	f042 0202 	orr.w	r2, r2, #2
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80046b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046b6:	f002 0202 	and.w	r2, r2, #2
 80046ba:	9201      	str	r2, [sp, #4]
 80046bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046be:	9402      	str	r4, [sp, #8]
 80046c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	9302      	str	r3, [sp, #8]
 80046d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80046d2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80046d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d8:	2702      	movs	r7, #2
 80046da:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80046dc:	2601      	movs	r6, #1
 80046de:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e0:	ad03      	add	r5, sp, #12
 80046e2:	4629      	mov	r1, r5
 80046e4:	4808      	ldr	r0, [pc, #32]	@ (8004708 <HAL_TIM_MspPostInit+0x80>)
 80046e6:	f7fd faa7 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80046ea:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80046ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80046f6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f8:	4629      	mov	r1, r5
 80046fa:	4804      	ldr	r0, [pc, #16]	@ (800470c <HAL_TIM_MspPostInit+0x84>)
 80046fc:	f7fd fa9c 	bl	8001c38 <HAL_GPIO_Init>
}
 8004700:	e7ce      	b.n	80046a0 <HAL_TIM_MspPostInit+0x18>
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000
 8004708:	40020400 	.word	0x40020400
 800470c:	40020000 	.word	0x40020000

08004710 <MX_TIM1_Init>:
{
 8004710:	b530      	push	{r4, r5, lr}
 8004712:	b097      	sub	sp, #92	@ 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004714:	2400      	movs	r4, #0
 8004716:	9412      	str	r4, [sp, #72]	@ 0x48
 8004718:	9413      	str	r4, [sp, #76]	@ 0x4c
 800471a:	9414      	str	r4, [sp, #80]	@ 0x50
 800471c:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800471e:	9410      	str	r4, [sp, #64]	@ 0x40
 8004720:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004722:	9409      	str	r4, [sp, #36]	@ 0x24
 8004724:	940a      	str	r4, [sp, #40]	@ 0x28
 8004726:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004728:	940c      	str	r4, [sp, #48]	@ 0x30
 800472a:	940d      	str	r4, [sp, #52]	@ 0x34
 800472c:	940e      	str	r4, [sp, #56]	@ 0x38
 800472e:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004730:	2520      	movs	r5, #32
 8004732:	462a      	mov	r2, r5
 8004734:	4621      	mov	r1, r4
 8004736:	a801      	add	r0, sp, #4
 8004738:	f000 f967 	bl	8004a0a <memset>
  htim1.Instance = TIM1;
 800473c:	4841      	ldr	r0, [pc, #260]	@ (8004844 <MX_TIM1_Init+0x134>)
 800473e:	4b42      	ldr	r3, [pc, #264]	@ (8004848 <MX_TIM1_Init+0x138>)
 8004740:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 1-1;
 8004742:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004744:	6085      	str	r5, [r0, #8]
  htim1.Init.Period = 8000-1;
 8004746:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 800474a:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800474c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004750:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004756:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004758:	f7fe fac6 	bl	8002ce8 <HAL_TIM_Base_Init>
 800475c:	2800      	cmp	r0, #0
 800475e:	d155      	bne.n	800480c <MX_TIM1_Init+0xfc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004764:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004766:	a912      	add	r1, sp, #72	@ 0x48
 8004768:	4836      	ldr	r0, [pc, #216]	@ (8004844 <MX_TIM1_Init+0x134>)
 800476a:	f7fe fc06 	bl	8002f7a <HAL_TIM_ConfigClockSource>
 800476e:	2800      	cmp	r0, #0
 8004770:	d14f      	bne.n	8004812 <MX_TIM1_Init+0x102>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004772:	4834      	ldr	r0, [pc, #208]	@ (8004844 <MX_TIM1_Init+0x134>)
 8004774:	f7fe fae4 	bl	8002d40 <HAL_TIM_PWM_Init>
 8004778:	2800      	cmp	r0, #0
 800477a:	d14d      	bne.n	8004818 <MX_TIM1_Init+0x108>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800477c:	2300      	movs	r3, #0
 800477e:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004780:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004782:	a910      	add	r1, sp, #64	@ 0x40
 8004784:	482f      	ldr	r0, [pc, #188]	@ (8004844 <MX_TIM1_Init+0x134>)
 8004786:	f7fe fdf7 	bl	8003378 <HAL_TIMEx_MasterConfigSynchronization>
 800478a:	2800      	cmp	r0, #0
 800478c:	d147      	bne.n	800481e <MX_TIM1_Init+0x10e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800478e:	2360      	movs	r3, #96	@ 0x60
 8004790:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004792:	2200      	movs	r2, #0
 8004794:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004796:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004798:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800479a:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800479c:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800479e:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047a0:	a909      	add	r1, sp, #36	@ 0x24
 80047a2:	4828      	ldr	r0, [pc, #160]	@ (8004844 <MX_TIM1_Init+0x134>)
 80047a4:	f7fe fb30 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d13b      	bne.n	8004824 <MX_TIM1_Init+0x114>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80047ac:	2204      	movs	r2, #4
 80047ae:	a909      	add	r1, sp, #36	@ 0x24
 80047b0:	4824      	ldr	r0, [pc, #144]	@ (8004844 <MX_TIM1_Init+0x134>)
 80047b2:	f7fe fb29 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d137      	bne.n	800482a <MX_TIM1_Init+0x11a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047ba:	2208      	movs	r2, #8
 80047bc:	a909      	add	r1, sp, #36	@ 0x24
 80047be:	4821      	ldr	r0, [pc, #132]	@ (8004844 <MX_TIM1_Init+0x134>)
 80047c0:	f7fe fb22 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d133      	bne.n	8004830 <MX_TIM1_Init+0x120>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80047c8:	2370      	movs	r3, #112	@ 0x70
 80047ca:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 8000-2;
 80047cc:	f641 733e 	movw	r3, #7998	@ 0x1f3e
 80047d0:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80047d2:	220c      	movs	r2, #12
 80047d4:	a909      	add	r1, sp, #36	@ 0x24
 80047d6:	481b      	ldr	r0, [pc, #108]	@ (8004844 <MX_TIM1_Init+0x134>)
 80047d8:	f7fe fb16 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 80047dc:	bb58      	cbnz	r0, 8004836 <MX_TIM1_Init+0x126>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80047de:	2300      	movs	r3, #0
 80047e0:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80047e2:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80047e4:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 120;
 80047e6:	2278      	movs	r2, #120	@ 0x78
 80047e8:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80047ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80047ee:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047f4:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80047f6:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80047f8:	a901      	add	r1, sp, #4
 80047fa:	4812      	ldr	r0, [pc, #72]	@ (8004844 <MX_TIM1_Init+0x134>)
 80047fc:	f7fe fe02 	bl	8003404 <HAL_TIMEx_ConfigBreakDeadTime>
 8004800:	b9e0      	cbnz	r0, 800483c <MX_TIM1_Init+0x12c>
  HAL_TIM_MspPostInit(&htim1);
 8004802:	4810      	ldr	r0, [pc, #64]	@ (8004844 <MX_TIM1_Init+0x134>)
 8004804:	f7ff ff40 	bl	8004688 <HAL_TIM_MspPostInit>
}
 8004808:	b017      	add	sp, #92	@ 0x5c
 800480a:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800480c:	f7fc f9f2 	bl	8000bf4 <Error_Handler>
 8004810:	e7a6      	b.n	8004760 <MX_TIM1_Init+0x50>
    Error_Handler();
 8004812:	f7fc f9ef 	bl	8000bf4 <Error_Handler>
 8004816:	e7ac      	b.n	8004772 <MX_TIM1_Init+0x62>
    Error_Handler();
 8004818:	f7fc f9ec 	bl	8000bf4 <Error_Handler>
 800481c:	e7ae      	b.n	800477c <MX_TIM1_Init+0x6c>
    Error_Handler();
 800481e:	f7fc f9e9 	bl	8000bf4 <Error_Handler>
 8004822:	e7b4      	b.n	800478e <MX_TIM1_Init+0x7e>
    Error_Handler();
 8004824:	f7fc f9e6 	bl	8000bf4 <Error_Handler>
 8004828:	e7c0      	b.n	80047ac <MX_TIM1_Init+0x9c>
    Error_Handler();
 800482a:	f7fc f9e3 	bl	8000bf4 <Error_Handler>
 800482e:	e7c4      	b.n	80047ba <MX_TIM1_Init+0xaa>
    Error_Handler();
 8004830:	f7fc f9e0 	bl	8000bf4 <Error_Handler>
 8004834:	e7c8      	b.n	80047c8 <MX_TIM1_Init+0xb8>
    Error_Handler();
 8004836:	f7fc f9dd 	bl	8000bf4 <Error_Handler>
 800483a:	e7d0      	b.n	80047de <MX_TIM1_Init+0xce>
    Error_Handler();
 800483c:	f7fc f9da 	bl	8000bf4 <Error_Handler>
 8004840:	e7df      	b.n	8004802 <MX_TIM1_Init+0xf2>
 8004842:	bf00      	nop
 8004844:	2000431c 	.word	0x2000431c
 8004848:	40010000 	.word	0x40010000

0800484c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800484c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800484e:	480a      	ldr	r0, [pc, #40]	@ (8004878 <MX_USART3_UART_Init+0x2c>)
 8004850:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <MX_USART3_UART_Init+0x30>)
 8004852:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004854:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004858:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800485a:	2300      	movs	r3, #0
 800485c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800485e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004860:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004862:	220c      	movs	r2, #12
 8004864:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004866:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004868:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800486a:	f7fe ff3f 	bl	80036ec <HAL_UART_Init>
 800486e:	b900      	cbnz	r0, 8004872 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004870:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004872:	f7fc f9bf 	bl	8000bf4 <Error_Handler>
}
 8004876:	e7fb      	b.n	8004870 <MX_USART3_UART_Init+0x24>
 8004878:	20004424 	.word	0x20004424
 800487c:	40004800 	.word	0x40004800

08004880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004884:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004886:	2300      	movs	r3, #0
 8004888:	9303      	str	r3, [sp, #12]
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	9305      	str	r3, [sp, #20]
 800488e:	9306      	str	r3, [sp, #24]
 8004890:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 8004892:	6802      	ldr	r2, [r0, #0]
 8004894:	4b41      	ldr	r3, [pc, #260]	@ (800499c <HAL_UART_MspInit+0x11c>)
 8004896:	429a      	cmp	r2, r3
 8004898:	d002      	beq.n	80048a0 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800489a:	b008      	add	sp, #32
 800489c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a0:	4604      	mov	r4, r0
    __HAL_RCC_USART3_CLK_ENABLE();
 80048a2:	2500      	movs	r5, #0
 80048a4:	9500      	str	r5, [sp, #0]
 80048a6:	f503 33f8 	add.w	r3, r3, #126976	@ 0x1f000
 80048aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80048b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80048b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048b4:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80048b8:	9200      	str	r2, [sp, #0]
 80048ba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048bc:	9501      	str	r5, [sp, #4]
 80048be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c0:	f042 0204 	orr.w	r2, r2, #4
 80048c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80048c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c8:	f002 0204 	and.w	r2, r2, #4
 80048cc:	9201      	str	r2, [sp, #4]
 80048ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d0:	9502      	str	r5, [sp, #8]
 80048d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048d4:	f042 0202 	orr.w	r2, r2, #2
 80048d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80048da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	9302      	str	r3, [sp, #8]
 80048e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80048e4:	2320      	movs	r3, #32
 80048e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e8:	f04f 0a02 	mov.w	sl, #2
 80048ec:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f0:	f04f 0903 	mov.w	r9, #3
 80048f4:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048f8:	f04f 0807 	mov.w	r8, #7
 80048fc:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004900:	af03      	add	r7, sp, #12
 8004902:	4639      	mov	r1, r7
 8004904:	4826      	ldr	r0, [pc, #152]	@ (80049a0 <HAL_UART_MspInit+0x120>)
 8004906:	f7fd f997 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800490a:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 800490e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004910:	f8cd a010 	str.w	sl, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004914:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004916:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800491a:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491e:	4639      	mov	r1, r7
 8004920:	4820      	ldr	r0, [pc, #128]	@ (80049a4 <HAL_UART_MspInit+0x124>)
 8004922:	f7fd f989 	bl	8001c38 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004926:	4820      	ldr	r0, [pc, #128]	@ (80049a8 <HAL_UART_MspInit+0x128>)
 8004928:	4b20      	ldr	r3, [pc, #128]	@ (80049ac <HAL_UART_MspInit+0x12c>)
 800492a:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800492c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004930:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004932:	2340      	movs	r3, #64	@ 0x40
 8004934:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004936:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004938:	6106      	str	r6, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800493a:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800493c:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800493e:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004940:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004942:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004944:	f7fc ff94 	bl	8001870 <HAL_DMA_Init>
 8004948:	bb10      	cbnz	r0, 8004990 <HAL_UART_MspInit+0x110>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800494a:	4b17      	ldr	r3, [pc, #92]	@ (80049a8 <HAL_UART_MspInit+0x128>)
 800494c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800494e:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004950:	4817      	ldr	r0, [pc, #92]	@ (80049b0 <HAL_UART_MspInit+0x130>)
 8004952:	4b18      	ldr	r3, [pc, #96]	@ (80049b4 <HAL_UART_MspInit+0x134>)
 8004954:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004956:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800495a:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800495c:	2300      	movs	r3, #0
 800495e:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004960:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004966:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004968:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800496a:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800496c:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800496e:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004970:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004972:	f7fc ff7d 	bl	8001870 <HAL_DMA_Init>
 8004976:	b970      	cbnz	r0, 8004996 <HAL_UART_MspInit+0x116>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004978:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <HAL_UART_MspInit+0x130>)
 800497a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800497c:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800497e:	2200      	movs	r2, #0
 8004980:	2105      	movs	r1, #5
 8004982:	2027      	movs	r0, #39	@ 0x27
 8004984:	f7fc fee4 	bl	8001750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004988:	2027      	movs	r0, #39	@ 0x27
 800498a:	f7fc fef1 	bl	8001770 <HAL_NVIC_EnableIRQ>
}
 800498e:	e784      	b.n	800489a <HAL_UART_MspInit+0x1a>
      Error_Handler();
 8004990:	f7fc f930 	bl	8000bf4 <Error_Handler>
 8004994:	e7d9      	b.n	800494a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8004996:	f7fc f92d 	bl	8000bf4 <Error_Handler>
 800499a:	e7ed      	b.n	8004978 <HAL_UART_MspInit+0xf8>
 800499c:	40004800 	.word	0x40004800
 80049a0:	40020800 	.word	0x40020800
 80049a4:	40020400 	.word	0x40020400
 80049a8:	200043c4 	.word	0x200043c4
 80049ac:	40026058 	.word	0x40026058
 80049b0:	20004364 	.word	0x20004364
 80049b4:	40026028 	.word	0x40026028

080049b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80049f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80049bc:	f7ff f9dc 	bl	8003d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049c0:	480c      	ldr	r0, [pc, #48]	@ (80049f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049c2:	490d      	ldr	r1, [pc, #52]	@ (80049f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049c4:	4a0d      	ldr	r2, [pc, #52]	@ (80049fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049c8:	e002      	b.n	80049d0 <LoopCopyDataInit>

080049ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ce:	3304      	adds	r3, #4

080049d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049d4:	d3f9      	bcc.n	80049ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049d8:	4c0a      	ldr	r4, [pc, #40]	@ (8004a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049dc:	e001      	b.n	80049e2 <LoopFillZerobss>

080049de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049e0:	3204      	adds	r2, #4

080049e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049e4:	d3fb      	bcc.n	80049de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80049e6:	f000 f819 	bl	8004a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049ea:	f7fc f959 	bl	8000ca0 <main>
  bx  lr    
 80049ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80049fc:	08004dd4 	.word	0x08004dd4
  ldr r2, =_sbss
 8004a00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004a04:	2000446c 	.word	0x2000446c

08004a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a08:	e7fe      	b.n	8004a08 <ADC_IRQHandler>

08004a0a <memset>:
 8004a0a:	4402      	add	r2, r0
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d100      	bne.n	8004a14 <memset+0xa>
 8004a12:	4770      	bx	lr
 8004a14:	f803 1b01 	strb.w	r1, [r3], #1
 8004a18:	e7f9      	b.n	8004a0e <memset+0x4>
	...

08004a1c <__libc_init_array>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <__libc_init_array+0x38>)
 8004a20:	4d0d      	ldr	r5, [pc, #52]	@ (8004a58 <__libc_init_array+0x3c>)
 8004a22:	1b5b      	subs	r3, r3, r5
 8004a24:	109c      	asrs	r4, r3, #2
 8004a26:	2600      	movs	r6, #0
 8004a28:	42a6      	cmp	r6, r4
 8004a2a:	d109      	bne.n	8004a40 <__libc_init_array+0x24>
 8004a2c:	f000 f996 	bl	8004d5c <_init>
 8004a30:	4d0a      	ldr	r5, [pc, #40]	@ (8004a5c <__libc_init_array+0x40>)
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <__libc_init_array+0x44>)
 8004a34:	1b5b      	subs	r3, r3, r5
 8004a36:	109c      	asrs	r4, r3, #2
 8004a38:	2600      	movs	r6, #0
 8004a3a:	42a6      	cmp	r6, r4
 8004a3c:	d105      	bne.n	8004a4a <__libc_init_array+0x2e>
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a44:	4798      	blx	r3
 8004a46:	3601      	adds	r6, #1
 8004a48:	e7ee      	b.n	8004a28 <__libc_init_array+0xc>
 8004a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4e:	4798      	blx	r3
 8004a50:	3601      	adds	r6, #1
 8004a52:	e7f2      	b.n	8004a3a <__libc_init_array+0x1e>
 8004a54:	08004dcc 	.word	0x08004dcc
 8004a58:	08004dcc 	.word	0x08004dcc
 8004a5c:	08004dcc 	.word	0x08004dcc
 8004a60:	08004dd0 	.word	0x08004dd0

08004a64 <__udivmoddi4>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	9d08      	ldr	r5, [sp, #32]
 8004a6a:	460f      	mov	r7, r1
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	468c      	mov	ip, r1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d148      	bne.n	8004b06 <__udivmoddi4+0xa2>
 8004a74:	428a      	cmp	r2, r1
 8004a76:	4616      	mov	r6, r2
 8004a78:	d961      	bls.n	8004b3e <__udivmoddi4+0xda>
 8004a7a:	fab2 f382 	clz	r3, r2
 8004a7e:	b14b      	cbz	r3, 8004a94 <__udivmoddi4+0x30>
 8004a80:	f1c3 0220 	rsb	r2, r3, #32
 8004a84:	fa01 fc03 	lsl.w	ip, r1, r3
 8004a88:	fa20 f202 	lsr.w	r2, r0, r2
 8004a8c:	409e      	lsls	r6, r3
 8004a8e:	ea42 0c0c 	orr.w	ip, r2, ip
 8004a92:	409c      	lsls	r4, r3
 8004a94:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004a98:	b2b7      	uxth	r7, r6
 8004a9a:	fbbc f1fe 	udiv	r1, ip, lr
 8004a9e:	0c22      	lsrs	r2, r4, #16
 8004aa0:	fb0e cc11 	mls	ip, lr, r1, ip
 8004aa4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8004aa8:	fb01 f007 	mul.w	r0, r1, r7
 8004aac:	4290      	cmp	r0, r2
 8004aae:	d909      	bls.n	8004ac4 <__udivmoddi4+0x60>
 8004ab0:	18b2      	adds	r2, r6, r2
 8004ab2:	f101 3cff 	add.w	ip, r1, #4294967295
 8004ab6:	f080 80ee 	bcs.w	8004c96 <__udivmoddi4+0x232>
 8004aba:	4290      	cmp	r0, r2
 8004abc:	f240 80eb 	bls.w	8004c96 <__udivmoddi4+0x232>
 8004ac0:	3902      	subs	r1, #2
 8004ac2:	4432      	add	r2, r6
 8004ac4:	1a12      	subs	r2, r2, r0
 8004ac6:	b2a4      	uxth	r4, r4
 8004ac8:	fbb2 f0fe 	udiv	r0, r2, lr
 8004acc:	fb0e 2210 	mls	r2, lr, r0, r2
 8004ad0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004ad4:	fb00 f707 	mul.w	r7, r0, r7
 8004ad8:	42a7      	cmp	r7, r4
 8004ada:	d909      	bls.n	8004af0 <__udivmoddi4+0x8c>
 8004adc:	1934      	adds	r4, r6, r4
 8004ade:	f100 32ff 	add.w	r2, r0, #4294967295
 8004ae2:	f080 80da 	bcs.w	8004c9a <__udivmoddi4+0x236>
 8004ae6:	42a7      	cmp	r7, r4
 8004ae8:	f240 80d7 	bls.w	8004c9a <__udivmoddi4+0x236>
 8004aec:	4434      	add	r4, r6
 8004aee:	3802      	subs	r0, #2
 8004af0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004af4:	1be4      	subs	r4, r4, r7
 8004af6:	2100      	movs	r1, #0
 8004af8:	b11d      	cbz	r5, 8004b02 <__udivmoddi4+0x9e>
 8004afa:	40dc      	lsrs	r4, r3
 8004afc:	2300      	movs	r3, #0
 8004afe:	e9c5 4300 	strd	r4, r3, [r5]
 8004b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b06:	428b      	cmp	r3, r1
 8004b08:	d906      	bls.n	8004b18 <__udivmoddi4+0xb4>
 8004b0a:	b10d      	cbz	r5, 8004b10 <__udivmoddi4+0xac>
 8004b0c:	e9c5 0100 	strd	r0, r1, [r5]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4608      	mov	r0, r1
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b18:	fab3 f183 	clz	r1, r3
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	d148      	bne.n	8004bb2 <__udivmoddi4+0x14e>
 8004b20:	42bb      	cmp	r3, r7
 8004b22:	d302      	bcc.n	8004b2a <__udivmoddi4+0xc6>
 8004b24:	4282      	cmp	r2, r0
 8004b26:	f200 8107 	bhi.w	8004d38 <__udivmoddi4+0x2d4>
 8004b2a:	1a84      	subs	r4, r0, r2
 8004b2c:	eb67 0203 	sbc.w	r2, r7, r3
 8004b30:	2001      	movs	r0, #1
 8004b32:	4694      	mov	ip, r2
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	d0e4      	beq.n	8004b02 <__udivmoddi4+0x9e>
 8004b38:	e9c5 4c00 	strd	r4, ip, [r5]
 8004b3c:	e7e1      	b.n	8004b02 <__udivmoddi4+0x9e>
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	f000 8092 	beq.w	8004c68 <__udivmoddi4+0x204>
 8004b44:	fab2 f382 	clz	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f040 80a8 	bne.w	8004c9e <__udivmoddi4+0x23a>
 8004b4e:	1a8a      	subs	r2, r1, r2
 8004b50:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004b54:	fa1f fc86 	uxth.w	ip, r6
 8004b58:	2101      	movs	r1, #1
 8004b5a:	0c20      	lsrs	r0, r4, #16
 8004b5c:	fbb2 f7fe 	udiv	r7, r2, lr
 8004b60:	fb0e 2217 	mls	r2, lr, r7, r2
 8004b64:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8004b68:	fb0c f007 	mul.w	r0, ip, r7
 8004b6c:	4290      	cmp	r0, r2
 8004b6e:	d907      	bls.n	8004b80 <__udivmoddi4+0x11c>
 8004b70:	18b2      	adds	r2, r6, r2
 8004b72:	f107 38ff 	add.w	r8, r7, #4294967295
 8004b76:	d202      	bcs.n	8004b7e <__udivmoddi4+0x11a>
 8004b78:	4290      	cmp	r0, r2
 8004b7a:	f200 80e2 	bhi.w	8004d42 <__udivmoddi4+0x2de>
 8004b7e:	4647      	mov	r7, r8
 8004b80:	1a12      	subs	r2, r2, r0
 8004b82:	b2a4      	uxth	r4, r4
 8004b84:	fbb2 f0fe 	udiv	r0, r2, lr
 8004b88:	fb0e 2210 	mls	r2, lr, r0, r2
 8004b8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004b90:	fb0c fc00 	mul.w	ip, ip, r0
 8004b94:	45a4      	cmp	ip, r4
 8004b96:	d907      	bls.n	8004ba8 <__udivmoddi4+0x144>
 8004b98:	1934      	adds	r4, r6, r4
 8004b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8004b9e:	d202      	bcs.n	8004ba6 <__udivmoddi4+0x142>
 8004ba0:	45a4      	cmp	ip, r4
 8004ba2:	f200 80cb 	bhi.w	8004d3c <__udivmoddi4+0x2d8>
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	eba4 040c 	sub.w	r4, r4, ip
 8004bac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004bb0:	e7a2      	b.n	8004af8 <__udivmoddi4+0x94>
 8004bb2:	f1c1 0620 	rsb	r6, r1, #32
 8004bb6:	408b      	lsls	r3, r1
 8004bb8:	fa22 fc06 	lsr.w	ip, r2, r6
 8004bbc:	ea4c 0c03 	orr.w	ip, ip, r3
 8004bc0:	fa07 f401 	lsl.w	r4, r7, r1
 8004bc4:	fa20 f306 	lsr.w	r3, r0, r6
 8004bc8:	40f7      	lsrs	r7, r6
 8004bca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004bce:	4323      	orrs	r3, r4
 8004bd0:	fa00 f801 	lsl.w	r8, r0, r1
 8004bd4:	fa1f fe8c 	uxth.w	lr, ip
 8004bd8:	fbb7 f0f9 	udiv	r0, r7, r9
 8004bdc:	0c1c      	lsrs	r4, r3, #16
 8004bde:	fb09 7710 	mls	r7, r9, r0, r7
 8004be2:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8004be6:	fb00 f70e 	mul.w	r7, r0, lr
 8004bea:	42a7      	cmp	r7, r4
 8004bec:	fa02 f201 	lsl.w	r2, r2, r1
 8004bf0:	d90a      	bls.n	8004c08 <__udivmoddi4+0x1a4>
 8004bf2:	eb1c 0404 	adds.w	r4, ip, r4
 8004bf6:	f100 3aff 	add.w	sl, r0, #4294967295
 8004bfa:	f080 809b 	bcs.w	8004d34 <__udivmoddi4+0x2d0>
 8004bfe:	42a7      	cmp	r7, r4
 8004c00:	f240 8098 	bls.w	8004d34 <__udivmoddi4+0x2d0>
 8004c04:	3802      	subs	r0, #2
 8004c06:	4464      	add	r4, ip
 8004c08:	1be4      	subs	r4, r4, r7
 8004c0a:	b29f      	uxth	r7, r3
 8004c0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8004c10:	fb09 4413 	mls	r4, r9, r3, r4
 8004c14:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8004c18:	fb03 fe0e 	mul.w	lr, r3, lr
 8004c1c:	45a6      	cmp	lr, r4
 8004c1e:	d909      	bls.n	8004c34 <__udivmoddi4+0x1d0>
 8004c20:	eb1c 0404 	adds.w	r4, ip, r4
 8004c24:	f103 37ff 	add.w	r7, r3, #4294967295
 8004c28:	f080 8082 	bcs.w	8004d30 <__udivmoddi4+0x2cc>
 8004c2c:	45a6      	cmp	lr, r4
 8004c2e:	d97f      	bls.n	8004d30 <__udivmoddi4+0x2cc>
 8004c30:	3b02      	subs	r3, #2
 8004c32:	4464      	add	r4, ip
 8004c34:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004c38:	eba4 040e 	sub.w	r4, r4, lr
 8004c3c:	fba0 e702 	umull	lr, r7, r0, r2
 8004c40:	42bc      	cmp	r4, r7
 8004c42:	4673      	mov	r3, lr
 8004c44:	46b9      	mov	r9, r7
 8004c46:	d363      	bcc.n	8004d10 <__udivmoddi4+0x2ac>
 8004c48:	d060      	beq.n	8004d0c <__udivmoddi4+0x2a8>
 8004c4a:	b15d      	cbz	r5, 8004c64 <__udivmoddi4+0x200>
 8004c4c:	ebb8 0203 	subs.w	r2, r8, r3
 8004c50:	eb64 0409 	sbc.w	r4, r4, r9
 8004c54:	fa04 f606 	lsl.w	r6, r4, r6
 8004c58:	fa22 f301 	lsr.w	r3, r2, r1
 8004c5c:	431e      	orrs	r6, r3
 8004c5e:	40cc      	lsrs	r4, r1
 8004c60:	e9c5 6400 	strd	r6, r4, [r5]
 8004c64:	2100      	movs	r1, #0
 8004c66:	e74c      	b.n	8004b02 <__udivmoddi4+0x9e>
 8004c68:	0862      	lsrs	r2, r4, #1
 8004c6a:	0848      	lsrs	r0, r1, #1
 8004c6c:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8004c70:	0c0b      	lsrs	r3, r1, #16
 8004c72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004c76:	b28a      	uxth	r2, r1
 8004c78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c7c:	fbb3 f1f6 	udiv	r1, r3, r6
 8004c80:	07e4      	lsls	r4, r4, #31
 8004c82:	46b4      	mov	ip, r6
 8004c84:	4637      	mov	r7, r6
 8004c86:	46b6      	mov	lr, r6
 8004c88:	231f      	movs	r3, #31
 8004c8a:	fbb0 f0f6 	udiv	r0, r0, r6
 8004c8e:	1bd2      	subs	r2, r2, r7
 8004c90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004c94:	e761      	b.n	8004b5a <__udivmoddi4+0xf6>
 8004c96:	4661      	mov	r1, ip
 8004c98:	e714      	b.n	8004ac4 <__udivmoddi4+0x60>
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	e728      	b.n	8004af0 <__udivmoddi4+0x8c>
 8004c9e:	f1c3 0120 	rsb	r1, r3, #32
 8004ca2:	fa20 f201 	lsr.w	r2, r0, r1
 8004ca6:	409e      	lsls	r6, r3
 8004ca8:	fa27 f101 	lsr.w	r1, r7, r1
 8004cac:	409f      	lsls	r7, r3
 8004cae:	433a      	orrs	r2, r7
 8004cb0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004cb4:	fa1f fc86 	uxth.w	ip, r6
 8004cb8:	fbb1 f7fe 	udiv	r7, r1, lr
 8004cbc:	fb0e 1017 	mls	r0, lr, r7, r1
 8004cc0:	0c11      	lsrs	r1, r2, #16
 8004cc2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004cc6:	fb07 f80c 	mul.w	r8, r7, ip
 8004cca:	4588      	cmp	r8, r1
 8004ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8004cd0:	d93a      	bls.n	8004d48 <__udivmoddi4+0x2e4>
 8004cd2:	1871      	adds	r1, r6, r1
 8004cd4:	f107 30ff 	add.w	r0, r7, #4294967295
 8004cd8:	d201      	bcs.n	8004cde <__udivmoddi4+0x27a>
 8004cda:	4588      	cmp	r8, r1
 8004cdc:	d81f      	bhi.n	8004d1e <__udivmoddi4+0x2ba>
 8004cde:	eba1 0108 	sub.w	r1, r1, r8
 8004ce2:	fbb1 f8fe 	udiv	r8, r1, lr
 8004ce6:	fb08 f70c 	mul.w	r7, r8, ip
 8004cea:	fb0e 1118 	mls	r1, lr, r8, r1
 8004cee:	b292      	uxth	r2, r2
 8004cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004cf4:	42ba      	cmp	r2, r7
 8004cf6:	d22f      	bcs.n	8004d58 <__udivmoddi4+0x2f4>
 8004cf8:	18b2      	adds	r2, r6, r2
 8004cfa:	f108 31ff 	add.w	r1, r8, #4294967295
 8004cfe:	d2c6      	bcs.n	8004c8e <__udivmoddi4+0x22a>
 8004d00:	42ba      	cmp	r2, r7
 8004d02:	d2c4      	bcs.n	8004c8e <__udivmoddi4+0x22a>
 8004d04:	f1a8 0102 	sub.w	r1, r8, #2
 8004d08:	4432      	add	r2, r6
 8004d0a:	e7c0      	b.n	8004c8e <__udivmoddi4+0x22a>
 8004d0c:	45f0      	cmp	r8, lr
 8004d0e:	d29c      	bcs.n	8004c4a <__udivmoddi4+0x1e6>
 8004d10:	ebbe 0302 	subs.w	r3, lr, r2
 8004d14:	eb67 070c 	sbc.w	r7, r7, ip
 8004d18:	3801      	subs	r0, #1
 8004d1a:	46b9      	mov	r9, r7
 8004d1c:	e795      	b.n	8004c4a <__udivmoddi4+0x1e6>
 8004d1e:	eba6 0808 	sub.w	r8, r6, r8
 8004d22:	4441      	add	r1, r8
 8004d24:	1eb8      	subs	r0, r7, #2
 8004d26:	fbb1 f8fe 	udiv	r8, r1, lr
 8004d2a:	fb08 f70c 	mul.w	r7, r8, ip
 8004d2e:	e7dc      	b.n	8004cea <__udivmoddi4+0x286>
 8004d30:	463b      	mov	r3, r7
 8004d32:	e77f      	b.n	8004c34 <__udivmoddi4+0x1d0>
 8004d34:	4650      	mov	r0, sl
 8004d36:	e767      	b.n	8004c08 <__udivmoddi4+0x1a4>
 8004d38:	4608      	mov	r0, r1
 8004d3a:	e6fb      	b.n	8004b34 <__udivmoddi4+0xd0>
 8004d3c:	4434      	add	r4, r6
 8004d3e:	3802      	subs	r0, #2
 8004d40:	e732      	b.n	8004ba8 <__udivmoddi4+0x144>
 8004d42:	3f02      	subs	r7, #2
 8004d44:	4432      	add	r2, r6
 8004d46:	e71b      	b.n	8004b80 <__udivmoddi4+0x11c>
 8004d48:	eba1 0108 	sub.w	r1, r1, r8
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	fbb1 f8fe 	udiv	r8, r1, lr
 8004d52:	fb08 f70c 	mul.w	r7, r8, ip
 8004d56:	e7c8      	b.n	8004cea <__udivmoddi4+0x286>
 8004d58:	4641      	mov	r1, r8
 8004d5a:	e798      	b.n	8004c8e <__udivmoddi4+0x22a>

08004d5c <_init>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr

08004d68 <_fini>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr
